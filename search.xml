<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="20200819/android-ndk/jvm-dvm/bi-ji-si-bian-yi-cha-zhuang-cao-zong-zi-jie-ma-shi-xian-bu-ke-neng-wan-cheng-de-ren-wu/"/>
      <url>20200819/android-ndk/jvm-dvm/bi-ji-si-bian-yi-cha-zhuang-cao-zong-zi-jie-ma-shi-xian-bu-ke-neng-wan-cheng-de-ren-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="笔记四编译插桩操纵字节码实现不可能完成的任务"><a class="markdownIt-Anchor" href="#笔记四编译插桩操纵字节码实现不可能完成的任务"></a> 【笔记四】编译插桩操纵字节码，实现不可能完成的任务</h1><p>根据之前学习的class 字节码文件的解析，接下来在此基础上进行一些更深入的操作，来加深对 class 字节码文件的理解。</p><p>相信做过 Android 开发的工程师大多都遇到过这种需求：</p><blockquote><p>记录每一个页面的打开和关闭事件，并通过各种 DataTracking 的框架上传到服务器，用来日后做数据分析。</p></blockquote><p>面对这样的需求，一般人都会想到，这其实就是在每一个 Activity 的 onCreate 和 onDestroy 方法中，分别添加页面打开和页面关闭的逻辑。常见的做法有以下三种：</p><ol><li>修改项目中现有的每一个 Activity，这样显然不够高大上，并且如果项目以后需要添加新的页面，这套逻辑需要重新拷贝一遍，非常容易遗漏。</li><li>将项目中所有的 Activity 继承自 BaseActivity，将页面打开和关闭的逻辑添加在 BaseActivity中，这种方案看起来比第 1 种方案高级得多，并且后续项目中有新的 Activity，直接继承 BaseActivity 即可。但是这种方案对第三方依赖库中的界面则无能为力，因为我们没有第三方依赖库的源码。</li><li>在 Application 中调用<code>registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks callback)</code> 方法来注册一个 Activity 生命周期的监听回调，所有的 Activity 都会走该回调，我们可以在该回调中通过生命周期的方法来记录页面打开和关闭事件。</li></ol><p>除了这三种方案，还有一种更加优雅更加完整的方案应运而生：<strong>编译插桩</strong>。</p><h2 id="1-编译插桩是什么"><a class="markdownIt-Anchor" href="#1-编译插桩是什么"></a> 1. 编译插桩是什么</h2><p>顾名思义，所谓编译插桩就是在代码编译期间修改已有的代码或者生成新代码。实际上，我们项目中经常用到的 Dagger、ButterKnife 甚至是 Kotlin 语言，它们都用到了编译插桩的技术。</p><p>理解编译插桩之前，需要先回顾一下 Android 项目中 .java 文件的编译过程：</p><img src="/images/android:jvm/java_to_class_to_dex.png" alt="img" style="zoom:88%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/java_to_class_to_dex.png" class="lozad post-image"><p>从上图可以看出，我们可以在 1、2 两处对代码进行改造。</p><ol><li>在 .java 文件编译成 .class 文件时，APT、AndroidAnnotation 等就是在此处触发代码生成。</li><li>在 .class 文件进一步优化成 .dex 文件时，也就是直接操作字节码文件。这种方式功能更加强大，应用场景也更多。但是门槛比较高，需要对字节码有一定的理解。</li></ol><p>主要介绍第 2 种实现方式，用一张图来描述如下过程</p><img src="/images/android:jvm/java_class_to_dex_chazhuang.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/java_class_to_dex_chazhuang.png" class="lozad post-image"><p>一般情况下，我们经常会使用编译插桩实现如下几种功能：</p><ul><li>日志埋点；</li><li>性能监控；</li><li>动态权限控制；</li><li>业务逻辑跳转时，校验是否已经登录；</li><li>甚至是代码调试等。</li></ul><h2 id="2-插桩工具介绍"><a class="markdownIt-Anchor" href="#2-插桩工具介绍"></a> 2. 插桩工具介绍</h2><p>目前市面上主要流行两种实现编译插桩的方式：</p><p><strong>AspectJ</strong></p><p>AspectJ 是老牌 AOP（Aspect-Oriented Programming）框架，如果你做过 J2EE 开发可能对这个框架更加熟悉，经常会拿这个框架跟 Spring AOP 进行比较。其主要优势是成熟稳定，使用者也不需要对字节码文件有深入的理解。</p><p><strong>ASM</strong></p><p>目前另一种编译插桩的方式 ASM 越来越受到广大工程师的喜爱。通过 ASM 可以修改现有的字节码文件，也可以动态生成字节码文件，并且它是一款完全以字节码层面来操纵字节码并分析字节码的框架（此处可以联想一下写汇编代码时的酸爽）。</p><p>举个例子，在 Java 中如果实现两个数相加操作，可以如下实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是如果使用 ASM 直接编写字节码指令，则有可能是如下几个字节码指令：</p><p><img src="/images/android:jvm/java_chazhuang_add_class.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/java_chazhuang_add_class.png" class="lozad post-image"></p><p>虽然上面的代码看起来很恐怖，但是没必要太过担心，因为有各种工具帮我们生成这些字节码指令。</p><p>接下来就使用 ASM 来实现简单的编译插桩效果，通过插桩实现在每一个 Activity 打开时输出相应的 log 日志。</p><h2 id="3-插桩实现"><a class="markdownIt-Anchor" href="#3-插桩实现"></a> 3. 插桩实现</h2><h3 id="31-实现思路"><a class="markdownIt-Anchor" href="#31-实现思路"></a> 3.1 实现思路</h3><p>过程主要包含两步：</p><ol><li><p>遍历项目中所有的 .class 文件<br />如何找到项目中编译生成的所有 .class 文件，是我们需要解决的第一个问题。众所周知，Android Studio 使用 Gradle 编译项目中的 .java 文件，并且从 Gradle1.5.0 之后，我们可以自己定义 Transform，来获取所有 .class 文件引用。但是 Transform 的使用需要依赖 Gradle Plugin。因此我们第一步需要创建一个单独的 Gradle Plugin，并<strong>在 Gradle Plugin 中使用自定义 Transform 找出所有的 .class 文件</strong>。</p></li><li><p>遍历到目标 .class 文件 （Activity）之后，通过 ASM 动态注入需要被插入的字节码<br />如果第一步进行顺利，我们可以找出所有的 .class 文件。接下来就需要<strong>过滤出目标 Activity 文件，并在目标 Activity 文件的 onCreate 方法中，通过 ASM 插入相应的 log 日志字节码</strong>。</p></li></ol><h3 id="32-具体实现"><a class="markdownIt-Anchor" href="#32-具体实现"></a> 3.2 具体实现</h3><ol><li><p><strong>创建 ASMLifeCycleDemo 项目</strong><br />创建主项目 ASMLifeCycleDemo，当前项目中只有一个 MainActivity</p></li><li><p><strong>创建自定义 Gradle 插件</strong><br />首先在 ASMLifeCycleDemo 项目中创建一个新的 module，并选择 Android Library 类型，命名为 asm_lifecycle_plugin。<br />将 asm_lifecycle_plugin module 中除了 build.gradle 和 main 文件夹之外的所有内容都删除。然后在 main 目录下分别创建 groovy 和 java 目录</p></li></ol><p>因为 Gradle 插件是使用 groovy 语言编写的，所以需要新建一个 groovy 目录，用来存放插件相关的.groovy类。 但 ASM 是 java 层面的框架，所以在 java 目录里存放 ASM 相关的类。</p><p>然后，在 groovy 中创建目录 cn.onestravel.plugin，并在此目录中创建类 LifeCyclePlugin.groovy 文件。在 LifeCyclePlugin 中重写 apply 方法，实现插件逻辑，因为是 demo 演示，所以我只是简单的打印 log 日志。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>plugin<span class="token keyword">import</span> org<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Plugin<span class="token keyword">import</span> org<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Project<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LifeCyclePlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Plugin</span><span class="token operator">&lt;</span>Project<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span>Project project<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string gstring">"==LifeCyclePlugin ===="</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出 LifeCyclePlugin 实现了 gradle api 中的 Plugin 接口。当我们在 app module 的 build.gradle 文件中使用此插件时，其 LifeCyclePlugin 的 apply 方法将会被自动调用。</p><p>接下来，将 asm_lifecycle_plugin module 的 build.gradle 中的内容全部删掉，改为如下内容：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'groovy'</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'maven'</span>dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string gstring">"libs"</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string gstring">"*.jar"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    implementation <span class="token function">gradleApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    implementation <span class="token function">localGroovy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    implementation <span class="token string">'com.android.tools.build:gradle:3.4.2'</span><span class="token punctuation">&#125;</span>group<span class="token operator">=</span><span class="token string">'cn.onestravel.plugin'</span>version<span class="token operator">=</span><span class="token string">'1.0.0'</span>uploadArchives<span class="token punctuation">&#123;</span>    repositories <span class="token punctuation">&#123;</span>        mavenDeployer<span class="token punctuation">&#123;</span>           <span class="token function">repository</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">'../ams_lifecycle_repo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>group 和 version 都需要在 app module 引用此插件时使用。</p><p>所有的插件都需要被部署到 maven 库中，我们可以选择部署到远程或者本地。这里只是演示，所以只是将插件部署到本地目录中。具体地址通过 repository 属性配置，如图所示我将其配置在项目根目录下的 asm_lifecycle_repo 目录下。</p><p>最后一步，创建 properties 文件。</p><p>在 plugin/src/main 目录下新建目录 resources/META-INF/gradle-plugins，然后在此目录下新建一个文件：ones.asm.lifecycle.properties，其中文件名 ones.asm.lifecycle 就是我们自定义插件的名称，稍后我们在 app module 中会使用到此名称。</p><p>在 .properties 文件中，需要指定我们自定义的插件类名 LifeCyclePlugin，如下所示：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">implementation-class</span><span class="token punctuation">=</span><span class="token attr-value">cn.onestravel.plugin.LifeCyclePlugin</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此，自定义 Gradle 插件就已经写完，现在可以在 Android Studio 的右边栏找到 Gradle 中点击 uploadArchives，执行 plugin 的部署任务：</p><p>可以看到，构建成功之后，在 Project 的根目录下将会出现一个 repo 目录，里面存放的就是我们的插件目标文件。</p><p><img src="/images/android:jvm/class_plugin_repo.png" alt="image-20200821150609739" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_plugin_repo.png" class="lozad post-image"></p><ol start="3"><li><p><strong>测试 asm_lifecycle_plugin</strong></p><p>为了测试自定义的 Gradle 插件是否可用，可以在 app module 中的 build.gradle 中引用此插件。</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'ones.asm.lifecycle'</span><span class="token comment">// 1. 自定义 Gradle 插件中 properties 的文件名</span>buildscript<span class="token punctuation">&#123;</span>    repositories <span class="token punctuation">&#123;</span>        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        maven <span class="token punctuation">&#123;</span>url <span class="token string">'../ams_lifecycle_repo'</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    dependencies <span class="token punctuation">&#123;</span>        classpath <span class="token string">'cn.onestravel.plugin:asm_lifecycle_plugin:1.0.0'</span> <span class="token comment">//2. group 值 + module 名 + version</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>android <span class="token punctuation">&#123;</span>  <span class="token punctuation">...</span><span class="token punctuation">&#125;</span>dependencies<span class="token punctuation">&#123;</span>  <span class="token punctuation">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>然后在命令行中使用 gradlew 执行构建命令<code>./gradlew clean assembleDebug</code>，如果打印出我们自定义插件里的 log，则说明自定义 Gradle 插件可以使用：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">➜  asmlifecycledemo <span class="token punctuation">.</span><span class="token operator">/</span>gradlew clean  assembleDebugStarting a Gradle Daemon <span class="token punctuation">(</span>subsequent builds will be faster<span class="token punctuation">)</span>> Configure project :asmlifecycledemo==LifeCyclePlugin ====<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span><span class="token operator">-</span>register  LifeCycleTransformBUILD SUCCESSFUL in 31s26 actionable tasks: 26 executed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p><strong>自定义 Transform，实现遍历 .class 文件</strong></p><p>自定义 Gradle 插件已经写好，接下来就需要实现遍历所有 .class 的逻辑。这部分功能主要依赖 Transform API。</p></li></ol><p><strong>什么是 Transform ？</strong></p><p><strong>Transform 可以被看作是 Gradle 在编译项目时的一个 task，在 .class 文件转换成 .dex 的流程中会执行这些 task，对所有的 .class 文件（可包括第三方库的 .class）进行转换，转换的逻辑定义在 Transform 的 transform 方法中。实际上平时我们在 build.gradle 中常用的功能都是通过 Transform 实现的，比如混淆（proguard）、分包（multi-dex）、jar 包合并（jarMerge）。</strong></p><p><strong>自定义 Transform</strong></p><p>在 cn.onestravel.plugin 目录中，新建 LifeCycleTransform.groovy，并继承 Transform 类。LifeCycleTransform 需要实现抽象类 Transform 中的抽象方法，具体有如下几个方法需要实现：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>plugin<span class="token keyword">import</span> com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>build<span class="token punctuation">.</span>api<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>*<span class="token keyword">import</span> com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>build<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>TransformManager<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LifeCycleTransform</span> <span class="token keyword">extends</span> <span class="token class-name">Transform</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string gstring">"LifeCycleTransform"</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    Set<span class="token operator">&lt;</span>QualifiedContent<span class="token punctuation">.</span>ContentType<span class="token operator">></span> <span class="token function">getInputTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> TransformManager<span class="token punctuation">.</span>CONTENT_CLASS    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    Set<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> QualifiedContent<span class="token punctuation">.</span>Scope<span class="token operator">></span> <span class="token function">getScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> TransformManager<span class="token punctuation">.</span>PROJECT_ONLY    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">isIncremental</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>TransformInvocation transformInvocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransformException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">,</span> IOException <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>transformInvocation<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>getName</strong>：</p><p>设置我们自定义的 Transform 对应的 Task 名称。Gradle 在编译的时候，会将这个名称显示在控制台上。比如：Task :app:transformClassesWithXXXForDebug。</p><p><strong>getInputType</strong>：</p><p>在项目中会有各种各样格式的文件，通过 getInputType 可以设置 LifeCycleTransform 接收的文件类型，此方法返回的类型是 Set&lt;QualifiedContent.ContentType&gt; 集合。</p><p>ContentType 有以下 2 种取值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * A content type that is requested through the transform API.    */</span>   <span class="token keyword">interface</span> <span class="token class-name">ContentType</span> <span class="token punctuation">&#123;</span>       <span class="token comment">/**        * Content type name, readable by humans.        * @return the string content type name        */</span>       <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/**        * A unique value for a content type.        */</span>       <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * The type of of the content.    */</span>   <span class="token keyword">enum</span> <span class="token class-name">DefaultContentType</span> <span class="token keyword">implements</span> <span class="token class-name">ContentType</span> <span class="token punctuation">&#123;</span>       <span class="token comment">/**        * The content is compiled Java code. This can be in a Jar file or in a folder. If        * in a folder, it is expected to in sub-folders matching package names.        */</span>       <span class="token function">CLASSES</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment">/** The content is standard Java resources. */</span>       <span class="token function">RESOURCES</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>       <span class="token class-name">DefaultContentType</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> value<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CLASSES：代表只检索 .class 文件；</li><li>RESOURCES：代表检索 java 标准资源文件。</li></ul><p><strong>getScopes()</strong></p><p>这个方法规定自定义 Transform 检索的范围，具体有以下几种取值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Scope</span> <span class="token keyword">implements</span> <span class="token class-name">ScopeType</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/** Only the project (module) content */</span>        <span class="token function">PROJECT</span><span class="token punctuation">(</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">/** Only the sub-projects (other modules) */</span>        <span class="token function">SUB_PROJECTS</span><span class="token punctuation">(</span><span class="token number">0x04</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">/** Only the external libraries */</span>        <span class="token function">EXTERNAL_LIBRARIES</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">/** Code that is being tested by the current variant, including dependencies */</span>        <span class="token function">TESTED_CODE</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">/** Local or remote dependencies that are provided-only */</span>        <span class="token function">PROVIDED_ONLY</span><span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">/**         * Only the project's local dependencies (local jars)         *         * @deprecated local dependencies are now processed as &#123;@link #EXTERNAL_LIBRARIES&#125;         */</span>        <span class="token annotation punctuation">@Deprecated</span>        <span class="token function">PROJECT_LOCAL_DEPS</span><span class="token punctuation">(</span><span class="token number">0x02</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">/**         * Only the sub-projects's local dependencies (local jars).         *         * @deprecated local dependencies are now processed as &#123;@link #EXTERNAL_LIBRARIES&#125;         */</span>        <span class="token annotation punctuation">@Deprecated</span>        <span class="token function">SUB_PROJECTS_LOCAL_DEPS</span><span class="token punctuation">(</span><span class="token number">0x08</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token class-name">Scope</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**isIncremental() **</p><p>表示当前 Transform 是否支持增量编译，我们不需要增量编译，所以直接返回 false 即可。</p><p><strong>transform()</strong></p><p>在 自定义Transform 中最重要的方法就是 transform()。在这个方法中，可以获取到两个数据的流向。</p><ul><li>inputs：inputs 中是传过来的输入流，其中有两种格式，一种是 jar 包格式，一种是 directory（目录格式）。</li><li>outputProvider：outputProvider 获取到输出目录，最后将修改的文件复制到输出目录，这一步必须做，否则编译会报错。</li></ul><p>我们可以实现一个简易 LifeCycleTransform，功能是打印出所有 .class 文件。代码如下：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>plugin<span class="token keyword">import</span> com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>build<span class="token punctuation">.</span>api<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>*<span class="token keyword">import</span> com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>build<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span>TransformManager<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LifeCycleTransform</span> <span class="token keyword">extends</span> <span class="token class-name">Transform</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//1. 自定义的 Transform 名称为 LifeCycleTransform；</span>        <span class="token keyword">return</span> <span class="token string gstring">"LifeCycleTransform"</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    Set<span class="token operator">&lt;</span>QualifiedContent<span class="token punctuation">.</span>ContentType<span class="token operator">></span> <span class="token function">getInputTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//2. 检索项目中 .class 类型的目录或者文件；</span>        <span class="token keyword">return</span> TransformManager<span class="token punctuation">.</span>CONTENT_CLASS    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    Set<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> QualifiedContent<span class="token punctuation">.</span>Scope<span class="token operator">></span> <span class="token function">getScopes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//3. 设置当前 Transform 检索范围为当前项目；</span>        <span class="token keyword">return</span> TransformManager<span class="token punctuation">.</span>PROJECT_ONLY    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">isIncremental</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>TransformInvocation transformInvocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransformException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">,</span> IOException <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>transformInvocation<span class="token punctuation">)</span>        Collection<span class="token operator">&lt;</span>TransformInput<span class="token operator">></span> inputs <span class="token operator">=</span> transformInvocation<span class="token punctuation">.</span>inputs        inputs<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span> TransformInput transformInput <span class="token operator">-></span>            transformInput<span class="token punctuation">.</span>directoryInputs<span class="token punctuation">.</span>each <span class="token punctuation">&#123;</span> DirectoryInput directoryInput <span class="token operator">-></span>                File dir <span class="token operator">=</span> directoryInput<span class="token punctuation">.</span>file                <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">//4. 设置过滤文件为 .class 文件（去除文件夹类型），并打印文件名称。</span>                    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string gstring">"type"</span><span class="token punctuation">,</span> groovy<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileType<span class="token punctuation">.</span>FILES<span class="token punctuation">)</span>                    options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string gstring">"nameFilter"</span><span class="token punctuation">,</span> <span class="token operator">~</span><span class="token string regex">/.*\.class/</span><span class="token punctuation">)</span>                    dir<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> file <span class="token operator">-></span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释说明：</p><ol><li>自定义的 Transform 名称为 LifeCycleTransform；</li><li>检索项目中 .class 类型的目录或者文件；</li><li>设置当前 Transform 检索范围为当前项目；</li><li>设置过滤文件为 .class 文件（去除文件夹类型），并打印文件名称。</li></ol><p><strong>5. 将自定义的 LifeCycleTransform 注册到 Gradle 插件中</strong></p><p>在 LifeCyclePlugin 中添加如下代码：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>plugin<span class="token keyword">import</span> com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>build<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>AppExtension<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Plugin<span class="token keyword">import</span> org<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Project<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LifeCyclePlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Plugin</span><span class="token operator">&lt;</span>Project<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span>Project project<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string gstring">"==LifeCyclePlugin ===="</span><span class="token punctuation">)</span>                        <span class="token keyword">def</span> android <span class="token operator">=</span> project<span class="token punctuation">.</span>extensions<span class="token punctuation">.</span><span class="token function">getByType</span><span class="token punctuation">(</span>AppExtension<span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'------------------register  LifeCycleTransform'</span><span class="token punctuation">)</span>        LifeCycleTransform transform <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LifeCycleTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        android<span class="token punctuation">.</span><span class="token function">registerTransform</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次在命令行中执行 build 命令，可以看到 LifeCycleTransform 检索出的所有 .class 文件。</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">➜  asmlifecycledemo <span class="token punctuation">.</span><span class="token operator">/</span>gradlew clean assembleDebugStarting a Gradle Daemon <span class="token punctuation">(</span>subsequent builds will be faster<span class="token punctuation">)</span>> Configure project :asmlifecycledemo==LifeCyclePlugin ====<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span><span class="token operator">-</span>register  LifeCycleTransform> Task :asmlifecycledemo:transformClassesWithLifeCycleTransformForDebugBuildConfig<span class="token punctuation">.</span><span class="token keyword">class</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span>BUILD SUCCESSFUL in 31s26 actionable tasks: 26 executed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，Gradle 编译时多了一个我们自定义的 LifeCycleTransform 类型的任务，并且将所有 .class 文件名打印出来，其中包含了我们需要的目标文件 MainActivity.class。</p><h3 id="33-使用-asm插入字节码到-activity-文件"><a class="markdownIt-Anchor" href="#33-使用-asm插入字节码到-activity-文件"></a> 3.3 使用 ASM，插入字节码到 Activity 文件</h3><p>ASM 是一套开源框架，其中几个常用的 API 如下：</p><ul><li>ClassReader：负责解析 .class 文件中的字节码，并将所有字节码传递给 ClassWriter。</li><li>ClassVisitor：负责访问 .class 文件中各个元素，还记得上一课时我们介绍的 .class 文件结构吗？ClassVisitor 就是用来解析这些文件结构的，当解析到某些特定结构时（比如类变量、方法），它会自动调用内部相应的 FieldVisitor 或者 MethodVisitor 的方法，进一步解析或者修改 .class 文件内容。</li><li>ClassWriter：继承自 ClassVisitor，它是生成字节码的工具类，负责将修改后的字节码输出为 byte 数组。</li></ul><h4 id="331-添加-asm-依赖"><a class="markdownIt-Anchor" href="#331-添加-asm-依赖"></a> 3.3.1 添加 ASM 依赖</h4><p>在 asm_lifecycle_plugin 的 build.gradle 中，添加对 ASM 的依赖，如下：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'groovy'</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'maven'</span>dependencies <span class="token punctuation">&#123;</span>    implementation <span class="token function">fileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">:</span> <span class="token string gstring">"libs"</span><span class="token punctuation">,</span> include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string gstring">"*.jar"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    implementation <span class="token function">gradleApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    implementation <span class="token function">localGroovy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    implementation <span class="token string">'com.android.tools.build:gradle:3.4.2'</span>    <span class="token comment">//ASM 相关依赖</span>    implementation <span class="token string">'org.ow2.asm:asm:7.1'</span>    implementation <span class="token string">'org.ow2.asm:asm-commons:7.1'</span><span class="token punctuation">&#125;</span>group<span class="token operator">=</span><span class="token string">'cn.onestravel.plugin'</span>version<span class="token operator">=</span><span class="token string">'1.0.0'</span>uploadArchives<span class="token punctuation">&#123;</span>    repositories <span class="token punctuation">&#123;</span>        mavenDeployer<span class="token punctuation">&#123;</span>           <span class="token function">repository</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">'../ams_lifecycle_repo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="20200817/android-ndk/jvm-dvm/bi-ji-san-zi-jie-ma-ceng-mian-fen-xi-class-wen-jian-jie-gou/"/>
      <url>20200817/android-ndk/jvm-dvm/bi-ji-san-zi-jie-ma-ceng-mian-fen-xi-class-wen-jian-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="笔记三字节码层面分析-class-文件结构"><a class="markdownIt-Anchor" href="#笔记三字节码层面分析-class-文件结构"></a> 【笔记三】字节码层面分析 class 文件结构</h1><h2 id="1-class-的来龙去脉"><a class="markdownIt-Anchor" href="#1-class-的来龙去脉"></a> 1. class 的来龙去脉</h2><p>Java 能够实现“一次编译，到处运行”，这其中 class 文件要占大部分功劳；为了让 Java 具有良好的跨平台能力，Java 独具匠心的提供了一种可以在所有平台上都能使用的一种中间代码—<strong>字节码类文件（.class 类文件）</strong>。有了字节码，无论哪种平台（如：Mac，Linux，windows等），只要是安装了虚拟机，都可以直接运行字节码文件。</p><p>并且，<strong>有了字节码，也解除了 Java 虚拟机和 Java 语言之间的耦合</strong>。其实，Java 虚拟机当时被设计出来的目的就不单单是值运行 Java 这一种语言。目前，Java 虚拟机已经可以支持很多除 Java 语言外的其他语言；如：Groovy、JRuby、Jython、Scala 等。之所以能勾支持其他语言，是因为这些语言经过编译之后也可以生成能够被 Java 虚拟机解释并执行的字节码文件。而虚拟机并不关心字节码文件是由哪种语言编译而来的。</p><img src="/images/android:jvm/java_xnj_classpng.png" alt="img" style="zoom:67%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/java_xnj_classpng.png" class="lozad post-image"><h2 id="2-上帝视角看-class-文件"><a class="markdownIt-Anchor" href="#2-上帝视角看-class-文件"></a> 2. 上帝视角看 class 文件</h2><p>如果从纵观角度来看 class 文件，class 文件里只有两种数据结构：<strong>无符号数</strong>和<strong>表</strong>。</p><ul><li><strong>无符号数</strong>：数据基本的数据类型，由 u1、u2、u4、u8 分别来代表一个字节、两个字节、四个字节 和 八个字节的无符号数，无符号数可以用来描述数字，索引引用，数值量或者字符串（UTF 编码）。</li><li><strong>表</strong>：表是由多个无符号数或者其他表作为数据项构成的复合数据类型，<strong>class 文件种所有的表都以“_iinfo”结尾</strong>。其实，整个 Class 文件本质上就是一张表。</li></ul><img src="/images/android:jvm/class_biao_uint.png" alt="无符号数和表" style="zoom:99%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_biao_uint.png" class="lozad post-image"><p>可以看出，在一张表中可以包含其他无符号数和其他表格。伪代码可以如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//无符号数</span>u1 <span class="token operator">=</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>u2 <span class="token operator">=</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>u4 <span class="token operator">=</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>u8 <span class="token operator">=</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//表</span>class_table<span class="token punctuation">&#123;</span>  <span class="token comment">//表中可以引用各种无符号数</span>  u1 tag<span class="token punctuation">;</span>  u2 index2<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">//表中也可以引用其他表</span>  method_table mt<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-class-文件结构"><a class="markdownIt-Anchor" href="#3-class-文件结构"></a> 3. class 文件结构</h2><p>刚才说 class 文件中只存在无符号数和表这两种数据结构。而这些无符号数和表就组成了 class 中的各个结构。这些结构按照预先约定好的顺序紧密的从前向后排列，相邻项之间没有任何间隙。如下图所示：</p><p><img src="/images/android:jvm/class_jiegou.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_jiegou.png" class="lozad post-image"></p><p>当 JVM 加载某个class 文件时，JVM 就是根据上图中的结构去解析 class 文件，加载 class 文件到内存中，并在内存中分配相应的空间。具体一种结构需要占用多大控件可以参考下表：</p><table><thead><tr><th>字段</th><th>名称</th><th>数据类型</th><th>数量</th></tr></thead><tbody><tr><td>magic number</td><td>魔数</td><td>u4</td><td>1</td></tr><tr><td>major version</td><td>主版本号</td><td>u2</td><td>1</td></tr><tr><td>minor version</td><td>副版本号</td><td>u2</td><td>1</td></tr><tr><td>constant_pool_count</td><td>常量池大小</td><td>u2</td><td>1</td></tr><tr><td>constant_pool</td><td>常量池</td><td>cp_info</td><td>constant_pool_count - 1</td></tr><tr><td>access_flag</td><td>访问标志</td><td>u2</td><td>1</td></tr><tr><td>this_class</td><td>当前类索引</td><td>u2</td><td>1</td></tr><tr><td>super_class</td><td>父类索引</td><td>u2</td><td>1</td></tr><tr><td>interfaces_count</td><td>接口索引集合大小</td><td>u2</td><td>1</td></tr><tr><td>interfaces</td><td>接口索引集合</td><td>u2</td><td>interfaces_count - 1</td></tr><tr><td>fields_count</td><td>字段索引集合大小</td><td>u2</td><td>1</td></tr><tr><td>fields</td><td>字段索引集合</td><td>field_info</td><td>fields_count - 1</td></tr><tr><td>methods_count</td><td>方法索引集合大小</td><td>u2</td><td>1</td></tr><tr><td>methods</td><td>方法索引集合</td><td>method_info</td><td>methods_count - 1</td></tr><tr><td>attributes_count</td><td>属性索引集合大小</td><td>u2</td><td>1</td></tr><tr><td>attributes</td><td>属性索引集合</td><td>attribute_info</td><td>attributes_count - 1</td></tr></tbody></table><blockquote><p>看到这里你可能会有点概念混淆，分不清无符号数、表格以及上面的结构是什么关系。其实可以举一个简单的例子：人类的身体是由 H、O、C、N 等元素组成的。但是这些元素又是按照一定的规律组成了人类身体的各个器官。class 文件中的无符号数和表格就相当于人类身体中的 H、O、C、N 等元素，而 class 结构图中的各项结构就相当于人类身体的各个器官。</p></blockquote><h2 id="4-实例分析"><a class="markdownIt-Anchor" href="#4-实例分析"></a> 4. 实例分析</h2><p>接下来通过一个 Java 代码来看一下上面几个结构的详细情况。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io</span><span class="token punctuation">.</span><span class="token class-name">Serializable</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">&#123;</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>          num <span class="token operator">=</span> num <span class="token operator">+</span> i<span class="token punctuation">;</span>          <span class="token keyword">return</span> num<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 Test.java 通过 javac 进行编译，生成Test.class 字节码文件，然后使用16进制编辑器打开 class 文件，显示内容如下：</p><p><img src="/images/android:jvm/class_info_0x.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_0x.png" class="lozad post-image"></p><p>上面都是一些 16 进制数字，每两个字符代表一个字节。乍看一下各个字符之间毫无规律，但是在 JVM 的视角里这些 16 进制字符是按照严格的规律排列的。接下来就一步一步看下 JVM 是如何解析它们的。</p><h3 id="41-魔数-magic-number"><a class="markdownIt-Anchor" href="#41-魔数-magic-number"></a> 4.1 魔数 magic number</h3><p><img src="/images/android:jvm/class_magic_num.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_magic_num.png" class="lozad post-image"></p><p>如上图所示，在 class 文件开头的四个字节是 class 文件的魔数，它是一个固定的值–0XCAFEBABE。魔数是 class 文件的标志，也就是说它是判断一个文件是不是 class 格式文件的标准， 如果开头四个字节不是 0XCAFEBABE， 那么就说明它不是 class 文件， 不能被 JVM 识别或加载。</p><h3 id="42-版本号"><a class="markdownIt-Anchor" href="#42-版本号"></a> 4.2 版本号</h3><p><img src="/images/android:jvm/class_info_version.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_version.png" class="lozad post-image"></p><p>紧跟在魔数后面的四个字节代表当前 class 文件的版本号。前两个字节 0000 代表次版本号（minor_version），后两个字节 0034 是主版本号（major_version），对应的十进制值为 52，也就是说当前 class 文件的主版本号为 52，次版本号为 0。所以综合版本号是 52.0，也就是  jdk1.8.0</p><h3 id="43-常量池"><a class="markdownIt-Anchor" href="#43-常量池"></a> 4.3 常量池</h3><p>紧跟在版本号之后的是一个叫作常量池的表（cp_info）。在常量池中保存了类的各种相关信息，比如类的名称、父类的名称、类中的方法名、参数名称、参数类型等，这些信息都是以各种表的形式保存在常量池中的。</p><p>常量池中的每一项都是一个表，其项目类型共有 14 种，如下表所示：</p><table><thead><tr><th>表名</th><th>标识位</th><th>描述</th></tr></thead><tbody><tr><td>CONSTANT_utf8_info</td><td>1</td><td>UTF-8编码字符串表</td></tr><tr><td>CONSTANT_Integer_info</td><td>3</td><td>整型常量表</td></tr><tr><td>CONSTANT_Float_info</td><td>4</td><td>浮点型常量表</td></tr><tr><td>CONSTANT_Long_info</td><td>5</td><td>长整型常量表</td></tr><tr><td>CONSTANT_Double_info</td><td>6</td><td>双精度浮点型常量表</td></tr><tr><td>CONSTANT_Class_info</td><td>7</td><td>接口/类 引用表</td></tr><tr><td>CONSTANT_String_info</td><td>8</td><td>字符串常量表</td></tr><tr><td>CONSTANT_Fieldref_info</td><td>9</td><td>字段引用表</td></tr><tr><td>CONSTANT_Methodref_info</td><td>10</td><td>类的方法引用表</td></tr><tr><td>CONSTANT_InterfaceMethod_info</td><td>11</td><td>接口方的法引用表</td></tr><tr><td>CONSTANT_NameAndType</td><td>12</td><td>字段或者方法的名称和类型表</td></tr><tr><td>CONSTANT_MethodHandle_info</td><td>15</td><td>方法句柄表</td></tr><tr><td>CONSTANT_MethodType_info</td><td>16</td><td>方法类型表</td></tr><tr><td>CONSTANT_InvokeDynamic_info</td><td>18</td><td>动态方法调用表</td></tr></tbody></table><p>可以看出，常量池中的每一项都会有一个 u1大小的 tag 。tag 值是表的标识，JVM 解析 class 文件时，通过这个数据来判断当前数据结构是哪一种表。以上14 中表都有自己的结构，这里以 <code>CONSTANT_Class_info</code>和<code>CONSTANT_Utf8_info</code>这两张表举例说明：</p><p>首先，<code>CONSTANT_Class_info</code>表具体结构如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">table <span class="token class-name">CONSTANT_Class_info</span> <span class="token punctuation">&#123;</span>    u1  tag <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    u2  name_index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>解释说明：</p><ul><li>tag：占用一个字节大小。比如值为 7，说明是 CONSTANT_Class_info 类型表。</li><li>name_index：是一个索引值，可以将它理解为一个指针，指向常量池中索引为 name_index 的常量表。比如 name_index = 2，则它指向常量池中第 2 个常量。</li></ul><p>接下来再看 CONSTANT_Utf8_info 表具体结构如下：</p><pre class="line-numbers language-none"><code class="language-none">table CONSTANT_utf8_info &#123;    u1  tag;    u2  length;    u1[] bytes;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解释说明：</p><ul><li>tag：值为1，表示是 CONSTANT_Utf8_info 类型表。</li><li>length：length 表示 u1[] 的长度，比如 length=5，则表示接下来的数据是 5 个连续的 u1 类型数据。</li><li>bytes：u1 类型数组，长度为上面第 2 个参数 length 的值。</li></ul><p>而我们在java代码中声明的String字符串最终在class文件中的存储格式就 CONSTANT_utf8_info。因此一个字符串最大长度也就是u2所能代表的最大值65536个，但是需要使用2个字节来保存 null 值，因此一个字符串的最大长度为 65536 - 2 = 65534。</p><p>不难看出，在常量池内部的表中也有相互之间的引用。用一张图来理解 CONSTANT_Class_info 和 CONSTANT_utf8_info 表格之间的关系，如下图所示：</p><p><img src="/images/android:jvm/class_info_constant.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_constant.png" class="lozad post-image"></p><p>理解了常量池内部的数据结构之后，接下来就看一下实例代码的解析过程。因为开发者平时定义的 Java 类各式各样，类中的方法与参数也不尽相同。所以常量池的元素数量也就无法固定，因此 class 文件在常量池的前面使用 2 个字节的容量计数器，用来代表当前类中常量池的大小。如下图所示：</p><p><img src="/images/android:jvm/class_info_constant_count.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_constant_count.png" class="lozad post-image"></p><p>红色框中的 001d 转化为十进制就是 29，也就是说常量计数器的值为 29。其中下标为 0 的常量被 JVM 留作其他特殊用途，因此 Test.class 中实际的常量池大小为这个计数器的值减 1，也就是 28个。</p><p>第一个常量，如下所示：</p><p><img src="/images/android:jvm/class_info_constant_1.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_constant_1.png" class="lozad post-image"></p><p>0a 转化为 10 进制后为 10，通过查看常量池 14 种表格图中，可以查到 tag=10 的表类型为 CONSTANT_Methodref_info，因此常量池中的第一个常量类型为方法引用表。其结构如下：</p><pre class="line-numbers language-none"><code class="language-none">CONSTANT_Methodref_info &#123;    u1 tag &#x3D; 10;    u2 class_index;        指向此方法的所属类    u2 name_type_index;    指向此方法的名称和类型&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说在“0a”之后的 2 个字节指向这个方法是属于哪个类，紧接的 2 个字节指向这个方法的名称和类型。它们的值分别是：</p><ul><li>0006：十进制 6，表示指向常量池中的第 6 个常量。</li><li>0015：十进制 21，表示指向常量池中的第 21 个常量。</li></ul><p>至此，第 1 个常量就解读完毕了。紧接着的就是第 2 个常量，如下所示：</p><p><img src="/images/android:jvm/class_info_constant_2.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_constant_2.png" class="lozad post-image"></p><p>tag 09 表示是字段引用表 CONSTANT_FIeldref_info ，其结构如下：</p><pre class="line-numbers language-none"><code class="language-none">CONSTANT_Fieldref_info&#123;    u1 tag;    u2 class_index;        指向此字段的所属类    u2 name_type_index;    指向此字段的名称和类型&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样也是 4 个字节，前后都是两个索引。</p><ul><li>0005：指向常量池中第 5 个常量。</li><li>0016：指向常量池中第 22 个常量。</li></ul><p>到现在为止我们已经解析出了常量池中的两个常量。剩下的 21 个常量的解析过程也大同小异，这里就不一一解析了。</p><p>实际上我们可以借助 javap 命令来帮助我们查看 class 常量池中的内容：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">javap -v Test.class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述命令执行后，显示结果如下：</p><p><img src="/images/android:jvm/class_info_javap.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_javap.png" class="lozad post-image"></p><p>正如我们刚才分析的一样，常量池中第一个常量是 Methodref 类型，指向下标 6 和下标 21 的常量。其中下标 21 的常量类型为 NameAndType，它对应的数据结构如下：</p><pre class="line-numbers language-none"><code class="language-none">CONSTANT_NameAndType_info&#123;    u1 tag;    u2 name_index;    指向某字段或方法的名称字符串    u2 type_index;    指向某字段或方法的类型字符串&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而下标在 21 的 NameAndType 的 name_index 和 type_index 分别指向了 13 和 14，也就是“<init>”和“()V”。因此最终解析下来常量池中第 1 个常量的解析过程以及最终值如下图所示：</p><p><img src="/images/android:jvm/class_info_constant_pool.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_constant_pool.png" class="lozad post-image"></p><p>仔细解析层层引用，最后我们可以看出，Test.class 文件中常量池的第 1 个常量保存的是 Object 中的默认构造器方法。</p><h3 id="44-访问标志access_flags"><a class="markdownIt-Anchor" href="#44-访问标志access_flags"></a> 4.4 访问标志（access_flags）</h3><p>紧跟在常量池之后的常量是访问标志，占用两个字节，如下图所示：</p><p><img src="/images/android:jvm/class_info_access_flags.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_access_flags.png" class="lozad post-image"></p><p>访问标志代表类或者接口的访问信息，比如：该 class 文件是类还是接口，是否被定义成 public，是否是 abstract，如果是类，是否被声明成 final 等等。各种访问标志如下所示：</p><table><thead><tr><th>访问标志</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>public 类型</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>被声明为 final 类型的类</td></tr><tr><td>ACC_SUPER</td><td>0x0020</td><td>是否允许使用invokespecial字节码指令的新语义，<br />JDK 1.0.2之后编译出来的类这个标志默认为真</td></tr><tr><td>ACC_INTERFACE</td><td>0x0200</td><td>标识这是一个接口类型</td></tr><tr><td>ACC_ABSTRACT</td><td>0x0400</td><td>标识这是一个抽象类或是接口类型</td></tr><tr><td>ACC_ANNOTATION</td><td>0x2000</td><td>标识这是一个注解</td></tr><tr><td>ACC_ENUM</td><td>0x4000</td><td>标识这是一个枚举</td></tr></tbody></table><p>我们定义的 Test.java 是一个普通 Java 类，不是接口、枚举或注解。并且被 public 修饰但没有被声明为 final 和 abstract，因此它所对应的 access_flags 为 0021（0X0001 和 0X0020 相结合）。</p><h3 id="45-类索引-父类索引与接口索引计数器"><a class="markdownIt-Anchor" href="#45-类索引-父类索引与接口索引计数器"></a> 4.5 类索引、父类索引与接口索引计数器</h3><p>在访问标志后的 2 个字节就是类索引，类索引后的 2 个字节就是父类索引，父类索引后的 2 个字节则是接口索引计数器。如下图所示：</p><p><img src="/images/android:jvm/class_info_class_index.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_class_index.png" class="lozad post-image"></p><p>可以看出类索引指向常量池中的第 5 个常量，父类索引指向常量池中的第 6 个常量，并且实现的接口个数为 2 个。再回顾下常量池中的数据：</p><p><img src="/images/android:jvm/class_info_class_constant.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_class_constant.png" class="lozad post-image"></p><p>从图中可以看出，第 5 个常量和第 6 个常量均为 CONSTANT_Class_info 表类型，并且代表的类分别是“Test”和“Object”。再看接口计数器，因为接口计数器的值是 2，代表这个类实现了 2 个接口。查看在接口计数器之后的 4 个字节分别为：</p><ul><li>0007：指向常量池中的第 7 个常量，从图中可以看出第 7 个常量值为&quot;Serializable&quot;。</li><li>0008：指向常量池中的第 8 个常量，从图中可以看出第 8 个常量值为&quot;Cloneable&quot;。</li></ul><p>综上所述，可以得出如下结论：当前类为 Test 继承自 Object 类，并实现了“Serializable”和“Cloneable”这两个接口。</p><h3 id="46-字段表"><a class="markdownIt-Anchor" href="#46-字段表"></a> 4.6 字段表</h3><p>紧跟在接口索引集合后面的就是字段表了，字段表的主要功能是用来描述类或者接口中声明的变量。这里的字段包含了类级别变量以及实例变量，但是不包括方法内部声明的局部变量。</p><p>同样, 一个类中的变量个数是不固定的，因此在字段表集合之前还是使用一个计数器来表示变量的个数，如下所示：</p><p><img src="/images/android:jvm/class_info_fieldref_count.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_fieldref_count.png" class="lozad post-image"></p><p>0002 表示类中声明了 2 个变量（在 class 文件中叫字段），字段计数器之后会紧跟着 2 个字段表的数据结构。</p><p>字段表的具体结构如下：</p><pre class="line-numbers language-none"><code class="language-none">CONSTANT_Fieldref_info&#123;    u2  access_flags    字段的访问标志    u2  name_index          字段的名称索引(也就是变量名)    u2  descriptor_index    字段的描述索引(也就是变量的类型)    u2  attributes_count    属性计数器    attribute_info&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续解析 Text.class 中的字段表，其结构如下图所示：</p><p><img src="/images/android:jvm/class_info_fields.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_fields.png" class="lozad post-image"></p><h3 id="47-字段访问标志"><a class="markdownIt-Anchor" href="#47-字段访问标志"></a> 4.7 字段访问标志</h3><p>对于 Java 类中的变量，也可以使用 public、private、final、static 等标识符进行标识。因此解析字段时，需要先判断它的访问标志，字段的访问标志如下所示：</p><table><thead><tr><th>字段访问标志</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>字段是否为 public</td></tr><tr><td>ACC_PRIVATE</td><td>0x0002</td><td>字段是否为 private</td></tr><tr><td>ACC_PROTECTED</td><td>0x0004</td><td>字段是否为 protected</td></tr><tr><td>ACC_STATIC</td><td>0x0008</td><td>字段是否为静态static</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>字段是否为 final</td></tr><tr><td>ACC_VOLATILE</td><td>0x0040</td><td>字段是否为 volatile</td></tr><tr><td>ACC_TRANSIENT</td><td>0x0080</td><td>字段是否为 transient</td></tr><tr><td>ACC_ENUM</td><td>0x4000</td><td>字段是否为 enum</td></tr></tbody></table><p>字段表结构图中的访问标志的值为 0002，代表它是 private 类型。变量名索引指向常量池中的第 9 个常量，变量名类型索引指向常量池中第 10 个常量。第 9 和第 10 个常量分别为“num”和“I”，如下所示：</p><p><img src="/images/android:jvm/class_info_field_acc_flag.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_field_acc_flag.png" class="lozad post-image"></p><p>因此可以得知类中有一个名为 num，类型为 int 类型的变量。对于第 2 个变量的解析过程也是一样，就不再过多介绍。</p><p>注意事项：</p><ul><li>字段表集合中不会列出从父类或者父接口中继承而来的字段。</li><li>内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。</li></ul><p>对于以上两种情况，可以自行定义一个类查看并手动分析一下。</p><h3 id="48-方法表"><a class="markdownIt-Anchor" href="#48-方法表"></a> 4.8 方法表</h3><p>字段表之后跟着的就是方法表常量。相信你应该也能猜到了，方法表常量应该也是以一个计数器开始的，因为一个类中的方法数量是不固定的，如图所示：</p><p><img src="/images/android:jvm/class_info_method_count.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_method_count.png" class="lozad post-image"></p><p>上图表示 Test.class 中有两个方法，但是我们只在 Test.java 中声明了一个 add 方法，这是为什么呢？这是因为默认构造器方法也被包含在方法表常量中。</p><p>方法表的结构如下所示：</p><pre class="line-numbers language-none"><code class="language-none">CONSTANT_Methodref_info&#123;    u2  access_flags;        方法的访问标志    u2  name_index;          指向方法名的索引    u2  descriptor_index;    指向方法类型的索引    u2  attributes_count;    方法属性计数器    attribute_info attributes;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，方法也是有自己的访问标志，具体如下：</p><table><thead><tr><th>访问标志</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>方法是否为 public</td></tr><tr><td>ACC_PRIVATE</td><td>0x0002</td><td>方法是否为 private</td></tr><tr><td>ACC_PROTECTED</td><td>0x0004</td><td>方法是否为 protected</td></tr><tr><td>ACC_STATIC</td><td>0x0008</td><td>方法是否为 static</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>放发是否为 final</td></tr><tr><td>ACC_SYNCHRONIZED</td><td>0x0020</td><td>方法是否被 synchronized 修饰</td></tr><tr><td>ACC_VARAGAS</td><td>0x0080</td><td>方法是否可以接收参数</td></tr><tr><td>ACC_NATIVE</td><td>0x0100</td><td>方法是否为 native</td></tr><tr><td>ACC_ABSTRACT</td><td>0X0400</td><td>方法是否为 abstract</td></tr></tbody></table><p>可以看到，方法也是有自己的访问标志，具体如下：</p><p><img src="/images/android:jvm/class_info_method_add.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_method_add.png" class="lozad post-image"></p><p>从图中我们可以看出 add 方法的以下字段的具体值：</p><ul><li>access_flags = 0x0001 也就是访问权限为 public。</li><li>name_index = 0x0011  指向常量池中的第 17 个常量，也就是“add”。</li><li>type_index = 0x0012   指向常量池中的第 18 个常量，也即是 (I)。这个方法接收 int 类型参数，并返回 int 类型参数。</li></ul><h3 id="49-属性表"><a class="markdownIt-Anchor" href="#49-属性表"></a> 4.9 属性表</h3><p>在之前解析字段和方法的时候，在它们的具体结构中我们都能看到有一个叫作 attributes_info 的表，这就是属性表。</p><p>属性表并没有一个固定的结构，各种不同的属性只要满足以下结构即可：</p><pre class="line-numbers language-none"><code class="language-none">CONSTANT_Attribute_info&#123;    u2 name_index;    u2 attribute_length length;    u1[] info;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JVM 中预定义了很多属性表，这里重点讲一下 Code 属性表。</p><ul><li>Code属性表</li></ul><p>我们可以接着刚才解析方法表的思路继续往下分析：</p><p><img src="/images/android:jvm/class_info_attribute_count.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_attribute_count.png" class="lozad post-image"></p><p>可以看到，在方法类型索引之后跟着的就是“add”方法的属性。0X0001 是属性计数器，代表只有一个属性。0X000f 是属性表类型索引，通过查看常量池可以看出它是一个 Code 属性表，如下所示：</p><p><img src="/images/android:jvm/class_info_attribute_code.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_attribute_code.png" class="lozad post-image"></p><p>Code 属性表中，最主要的就是一些列的字节码。通过 javap -v Test.class 之后，可以看到方法的字节码，如下图显示的是 add 方法的字节码指令：</p><p><img src="/images/android:jvm/class_info_add_class.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/class_info_add_class.png" class="lozad post-image"></p><p>JVM 执行 add 方法时，就通过这一系列指令来做相应的操作。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="20200719/android-ndk/jvm-dvm/bi-ji-er-gc-hui-shou-ji-zhi-he-fen-dai-hui-shou-ce-lue/"/>
      <url>20200719/android-ndk/jvm-dvm/bi-ji-er-gc-hui-shou-ji-zhi-he-fen-dai-hui-shou-ce-lue/</url>
      
        <content type="html"><![CDATA[<h1 id="笔记二gc-回收机制和分代回收策略"><a class="markdownIt-Anchor" href="#笔记二gc-回收机制和分代回收策略"></a> 【笔记二】GC 回收机制和分代回收策略</h1><p>垃圾回收（Garbage Collection，简写为: GC）是 Java 开发者最关注的一块知识点。Java 语言开发者比 C 语言开发者幸福的地方就在于，不需要手动释放对象的内存，JVM 中的垃圾回收器（Garbage Collector）会为我们自动回收。但是也是又对应的代价的：一旦这种自动化机制出错，就必须区深入理解 GC 回收机制，甚至需要对这些 “自动化” 的技术实施必要的监控和调节。</p><p>Java 内存运行时区域中<strong>程序计数器</strong>、<strong>虚拟机栈</strong>、<strong>本地方法栈</strong> 3 个区域随线程而生，随线程而灭；栈中的栈帧随着方法的进入和退出而有条不紊地执行着出栈和入栈操作，这几个区域内不需要过多考虑回收的问题。</p><p>而<strong>堆</strong>和<strong>方法区</strong>则不一样，一个接口中的多个实现类需要的内存可能不一样，一个方法中的多个分支需要的内存也可能不一样，我们只有在程序处于运行期间时才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾收集器所关注的就是这部分内存。</p><h2 id="1-什么是垃圾"><a class="markdownIt-Anchor" href="#1-什么是垃圾"></a> 1. 什么是垃圾</h2><p>所谓垃圾就是内存中已经没有用的对象。既然是“垃圾回收”，那就需要知道哪些对象是垃圾。Java 虚拟机中使用一种叫做 “可达性分析” 的算法来决定对象是否可以被回收。</p><h3 id="11-可达性分析"><a class="markdownIt-Anchor" href="#11-可达性分析"></a> 1.1 可达性分析</h3><p>可达性分析算法是从离散数学图论引入的，JVM 把内存中对象的引用关系看做一张图，从一组叫做 “GC Root” 的对象作为起始点，从这些结点开始向下搜索，搜索走过的路径成为引用链，最后通过判断对象的引用链是否可达来决定对象是否可以被回收。如下图所示：</p><img src="/images/android:jvm/gc_kdxfx.png" alt="img" style="zoom:67%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/gc_kdxfx.png" class="lozad post-image"><p>如上图所示，对象 A、B、C、D、E 都与 “GC Root” 之间存在一条直接或者间接的引用链，这代表它们与 “GC Root” 之间是可达的，因此他们是不能被 GC 回收掉的。而对象 K 和对象 M 都被对象 J 所引用到，但是并不存在一条引用链连接他们和 “GC Root” ，所以当 GC 进行垃圾回收时，只要遍历到 J、K 、M 这三个对象，就会将他们回收掉。</p><blockquote><p>注意：上图中圆形图标虽然标记的是对象，但实际上代表该对象在内存中的引用。包括 “GC Root” 也是一组引用而并非对象。</p></blockquote><h3 id="gc-root"><a class="markdownIt-Anchor" href="#gc-root"></a> GC Root</h3><p>在 Java 中，有一下几种对象可以作为 GC Root:</p><ul><li>Java 虚拟机栈（局部变量表）中引用的对象；</li><li>方法区中静态引用指向的对象；</li><li>仍处于存货状态中的对象；</li><li>Native 中 JNI 引用的对象。</li></ul><h2 id="2-什么时候回收"><a class="markdownIt-Anchor" href="#2-什么时候回收"></a> 2. 什么时候回收</h2><p>不同的虚拟机有着不同的 GC 实现机制，但是一般情况下每一种 GC 的实现都会再以下两种情况触发垃圾回收。</p><ol><li>Allocation Failure：再堆内存分配时，如果因为剩余可用空间不足导致对象内存分配失败，这时候系统会触发依次 GC。</li><li>System.gc()：在应用层，Java 开发工程师可以主动调用此 API 来请求依次  GC 。</li></ol><h2 id="3-代码验证-gc-root-的几种情况"><a class="markdownIt-Anchor" href="#3-代码验证-gc-root-的几种情况"></a> 3. 代码验证 GC Root 的几种情况</h2><p>现在我们了解了 Java 中的 GC Root ，以及何时触发 GC 。接下来就通过几个案例来验证 GC Root 的几种情况。在看代码之前，先了解一下执行 Java 命令时的参数。</p><blockquote><p>-Xms 初始分配 JVM 运行时的内存大小，如果不指定，默认为物理内存的 1/64。</p></blockquote><p>比如我们运行如下命令执行 HelloWord 程序，从物理内存中分配出 200M 空间分配给 JVM 内存。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">java -Xms200m HelloWorld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="31-验证虚拟机栈栈帧中局部变量中引用对象作为-gc-root"><a class="markdownIt-Anchor" href="#31-验证虚拟机栈栈帧中局部变量中引用对象作为-gc-root"></a> 3.1 <strong>验证虚拟机栈（栈帧中局部变量）中引用对象作为 GC Root</strong></h3><p>运行如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GCRootLocalVariable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> _10MB <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">*</span> _10MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始时:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二次GC完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GCRootLocalVariable</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GCRootLocalVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一次GC完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 打印出当前JVM剩余空间和总的空间大小     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"free is "</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">" M, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total is "</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">" M, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>日志如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">开始时<span class="token punctuation">:</span>free is <span class="token number">242</span> M<span class="token punctuation">,</span> total is <span class="token number">245</span> M<span class="token punctuation">,</span>第一次GC完成free is <span class="token number">163</span> M<span class="token punctuation">,</span> total is <span class="token number">245</span> M<span class="token punctuation">,</span>第二次GC完成free is <span class="token number">243</span> M<span class="token punctuation">,</span> total is <span class="token number">245</span> M<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><ol><li>当第一次 GC 时，g 作为局部变量（new 出来的80M对象）的引用，并且它作为 GC Root ，在调用 GC 后，并不会被 GC 回收</li><li>当第二次 GC 时，<code>method()</code> 方法执行完成后，局部变量 g 跟随方法消失，不再有引用类型执行该 80M 对象，所以第二次 GC 时会被回收。</li></ol><blockquote><p>注意：上面的日志包括后面的实例中，因为有中间变量，所以会有1M 左右的误差，不影响进行  GC 分析。</p></blockquote><h3 id="32-验证方法区中的静态变量引用的对象作为-gc-root"><a class="markdownIt-Anchor" href="#32-验证方法区中的静态变量引用的对象作为-gc-root"></a> 3.2 <strong>验证方法区中的静态变量引用的对象作为 GC Root</strong></h3><p>运行如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GCRootStaticVariable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> _10MB <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memory<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">GCRootStaticVariable</span> staticVariable<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GCRootStaticVariable</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        memory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序开始:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GCRootStaticVariable</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GCRootStaticVariable</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> _10MB<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>staticVariable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GCRootStaticVariable</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> _10MB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将g置为null, 调用GC时可以回收此对象内存</span>        g <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"GC完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 打印出当前JVM剩余空间和总的空间大小     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"free is "</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">" M, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total is "</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">" M, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">程序开始<span class="token punctuation">:</span>free is <span class="token number">242</span> M<span class="token punctuation">,</span> total is <span class="token number">245</span> M<span class="token punctuation">,</span>GC完成free is <span class="token number">163</span> M<span class="token punctuation">,</span> total is <span class="token number">245</span> M<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><p>程序刚开始运行时内存为 242M ，并分别创建了 g 对象（40M），初始化了 g 对象内部的静态变量 staticVariable 对象（80M）。当调用 GC 时，g 对象引用为置为 null , 该40M 对象被 GC 回收，而 staticVariable 对象（80M）作为 GC Root ，它引用的 80M 对应并未被回收。</p><h3 id="33-验证活跃线程作为-gc-root"><a class="markdownIt-Anchor" href="#33-验证活跃线程作为-gc-root"></a> 3.3 <strong>验证活跃线程作为 GC Root</strong></h3><p>运行如下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GCRootThread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> _10MB <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">8</span> <span class="token operator">*</span> _10MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始前内存情况:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AsyncTask</span> at <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GCRootThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>at<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main方法执行完毕，完成GC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        at <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程代码执行完毕，完成GC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 打印出当前JVM剩余空间和总的空间大小     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"free is "</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">" M, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total is "</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">" M, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AsyncTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">GCRootThread</span> gcRootThread<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">AsyncTask</span><span class="token punctuation">(</span><span class="token class-name">GCRootThread</span> gcRootThread<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>gcRootThread <span class="token operator">=</span> gcRootThread<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印日志如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">开始前内存情况<span class="token operator">:</span>free is <span class="token number">242</span> <span class="token class-name">M</span><span class="token punctuation">,</span> total is <span class="token number">245</span> <span class="token class-name">M</span><span class="token punctuation">,</span>main方法执行完毕，完成GCfree is <span class="token number">163</span> <span class="token class-name">M</span><span class="token punctuation">,</span> total is <span class="token number">245</span> <span class="token class-name">M</span><span class="token punctuation">,</span>线程代码执行完毕，完成GCfree is <span class="token number">243</span> <span class="token class-name">M</span><span class="token punctuation">,</span> total is <span class="token number">245</span> <span class="token class-name">M</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><p>程序刚开始时是 242M 内存，当调用第一次 GC 时线程并没有执行结束，并且它作为 GC Root，所以它所引用的 80M 内存并不会被 GC 回收掉。 thread.join() 保证线程结束再调用后续代码，所以当调用第二次 GC 时，线程已经执行完毕并被置为 null，这时线程已经被销毁，所以之前它所引用的 80M 此时会被 GC 回收掉。</p><h3 id="34-测试成员变量是否可以作为-gc-root"><a class="markdownIt-Anchor" href="#34-测试成员变量是否可以作为-gc-root"></a> 3.4 <strong>测试成员变量是否可以作为 GC Root</strong></h3><p>运行如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GCRootClassVariable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> _10MB <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memory<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">GCRootClassVariable</span> classVariable<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GCRootClassVariable</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        memory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序开始:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GCRootClassVariable</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GCRootClassVariable</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> _10MB<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span>classVariable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GCRootClassVariable</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> _10MB<span class="token punctuation">)</span><span class="token punctuation">;</span>        g <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"GC完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 打印出当前JVM剩余空间和总的空间大小     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"free is "</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">" M, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"total is "</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">" M, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印日志如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">程序开始<span class="token punctuation">:</span>free is <span class="token number">242</span> M<span class="token punctuation">,</span> total is <span class="token number">245</span> M<span class="token punctuation">,</span>GC完成free is <span class="token number">243</span> M<span class="token punctuation">,</span> total is <span class="token number">245</span> M<span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><p>从上面日志中可以看出当调用 GC 时，因为 g 已经置为 null，因此 g 中的全局变量 classVariable 此时也不再被 GC Root 所引用。所以最后 g(40M) 和 classVariable(80M) 都会被回收掉。这也表明<strong>全局变量同静态变量不同，它不会被当作 GC Root</strong>。</p><blockquote><p>上面演示的这几种情况往往也是内存泄漏发生的场景，设想一下我们将各个 Test 类换成 Android 中的 Activity 的话将导致 Activity 无法被系统回收，而一个 Activity 中的数据往往是较大的，因此内存泄漏导致 Activity 无法回收还是比较致命的。</p></blockquote><h2 id="4-如何进行垃圾回收"><a class="markdownIt-Anchor" href="#4-如何进行垃圾回收"></a> 4. 如何进行垃圾回收</h2><p>由于垃圾收集算法的实现涉及大量的程序细节，各家虚拟机厂商对其实现细节各不相同，下面介绍几种算法的思想以及优缺点。</p><h3 id="41-标记清除算法mark-and-sweep-gc"><a class="markdownIt-Anchor" href="#41-标记清除算法mark-and-sweep-gc"></a> 4.1 标记清除算法（Mark and Sweep GC）</h3><p>从 GC Roots 集合开始，将内存整个遍历一次，保留所有可以被 GC Roots 直接或间接引用到的对象，而剩下的对象都作为垃圾对待并回收，可以分为以下两步：</p><ol><li><strong>Mark 标记阶段</strong>：找到内存中所以 GC Root 对象，将和 GC Root 直接或间接引用的对象标记为灰色（存活对象），否则标记位黑色（垃圾对象）。</li><li><strong>Sweep 清除阶段</strong>：遍历完内存中所以对象后，直接将标记为垃圾的对象清除。</li></ol><img src="/images/android:jvm/gc_mark_sweep.png" alt="img" style="zoom:80%;background-color:#fff" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/gc_mark_sweep.png" class="lozad post-image"><p>优缺点分析：</p><p><strong>优点</strong>：实现简单，不需要将对象进行移动</p><p><strong>缺点</strong>：这个算法需要中断进程内其他组件的执行（stop the world），并可能产生内存碎片，提高了垃圾回收的频率。</p><h3 id="42-复制算法copying"><a class="markdownIt-Anchor" href="#42-复制算法copying"></a> 4.2 复制算法（Copying）</h3><p>将现有的内存分为两块，每次只使用其中一块；在垃圾回收时，将正在使用的内存块中存活的对象复制到未被使用的内存块中；之后将正在使用的内存块中的所有对象进行清除，交换两个内存块的角色，完成垃圾回收。</p><ol><li><p>复制算法之前，内存分为 A/B 两块，并且当前只使用内存 A，内存的状况如下图所示：</p><p><img src="/images/android:jvm/gc_copying.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/gc_copying.png" class="lozad post-image"></p></li><li><p>标记完之后，所有可达对象都被按次序复制到内存 B 中，并设置 B 为当前使用中的内存。内存状况如下图所示：</p><p><img src="/images/android:jvm/gc_copying_2.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/gc_copying_2.png" class="lozad post-image"></p></li></ol><p>优缺点分析：</p><p><strong>优点</strong>：按顺序分配内存即可，实现简单、运行高效，不用考虑内存碎片。<br /><strong>缺点</strong>：可用的内存大小缩小为原来的一半，对象存活率高时会频繁进行复制。</p><h3 id="43-标记-压缩算法mark-compact"><a class="markdownIt-Anchor" href="#43-标记-压缩算法mark-compact"></a> 4.3 标记-压缩算法（Mark-Compact）</h3><p>需要从根节点开始对所有可达对象做一次标记，之后，它不简单清理未标记对象，而是将所有存活对象压缩到内存的一端。最后，清理边界外所有空间。因此，标记压缩算法也分两步进行：</p><ol><li><p><strong>Mark 标记阶段</strong>：找到内存中所以 GC Root 对象，只要是和 GC Root 对象直接或间接相连的标记位灰色（存活对象），否则标记位黑色（回收垃圾对象）。</p></li><li><p><strong>Compact 压缩阶段</strong>：将剩余存活对象按顺序压缩到内存的某一端。</p><img src="/images/android:jvm/gc_mark_compact.png" alt="img" style="zoom:80%;background-color:#fff" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/gc_mark_compact.png" class="lozad post-image"></li></ol><p>优缺点分析：</p><p><strong>优点</strong>：这种方法既避免了内存碎片的产生，又不需要两块相同的内存空间，因此，其性价比比较高</p><p><strong>缺点</strong>：所谓压缩操作，需要对局部对象进行移动，所以，一定程度上还是降低了效率。</p><h3 id="44-jvm-分代回收策略"><a class="markdownIt-Anchor" href="#44-jvm-分代回收策略"></a> 4.4 JVM 分代回收策略</h3><p>Java 虚拟机根据内存中对象的存活周期的不同，把内存划分为几块；一般分为<strong>新生代、老年代</strong>，这就是 JVM 的分代回收策略。<strong>在 HotSpot 中，除了新生代和老年代还有永久代。</strong></p><p>分代回收的中心思想就是：对于新创建的对象会在新生代区域分配内存，此区域的对象生命周期一般比较短。如果经过多次回收仍然存活下来则将它们转移到老年代区域中。</p><p><strong>新生代（年轻代 Young Generation）</strong></p><p>新生成的对象优先存放在新生代区域中，新生代对象朝生夕死，存活率很低，在新生代中，常规应用进行一次垃圾回收一般可以回收70%~95% 的空间，回收率很高。新生代区域中需要一些复制操作，所以在新生代区域中使用的垃圾回收算法是复制算法。</p><p>新生代区域又可以继续细分为3部分：<strong>Eden、Survivor0（简称 S0）、Survivor1（简称 S1）</strong>。这三部分按照8 : 1 : 1 的比例来划分。这3块内存区域的分配如下：</p><p>绝大多数刚刚被创建的对象会存放在 Eden 区。如图所示：</p><img src="/images/android:jvm/gc_young_eden.png" alt="img" style="zoom:80%;background-color:#fff" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/gc_young_eden.png" class="lozad post-image"><p>当 <strong>Eden</strong> 区第一次满的时候，会进行垃圾回收。首先将 <strong>Eden</strong> 区的垃圾对象回收清除，并将存活的对象复制到 <strong>S0</strong> ，此时 <strong>S1</strong> 时空的。如图所示：</p><img src="/images/android:jvm/gc_young_s0.png" alt="img" style="zoom:80%;background-color:#fff" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/gc_young_s0.png" class="lozad post-image"><p>下一次 <strong>Eden</strong> 区满时，在进行一次垃圾回收。此时将 <strong>Eden</strong> 区和 <strong>S0</strong> 区中的垃圾对象进行回收清除，并将存活对象复制到 <strong>S1</strong> 区，此时 <strong>S0</strong> 是空的。如图所示：</p><img src="/images/android:jvm/gc_young_s1.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/gc_young_s1.png" class="lozad post-image"><p>如此反复在 <strong>S0</strong> 和 <strong>S1</strong> 切换几次（默认15次）之后，如果还有存活对象。说明这些对象的生命周期较长，则将他们转移到老年代中。如图所示：</p><img src="/images/android:jvm/gc_old.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/gc_old.png" class="lozad post-image"><p><strong>老年代</strong></p><p>一个对象在如果在新生代区域存活了足够长时间没有被清理掉，则会被复制到老年代。老年代的内存大小一般比新生代大，能存放更多的对象。如果对象比较大（字符串或大数组），并且新生代剩余空间不足，则这个大对象会被直接分配到老年代。</p><p>我们可以使用 <code>-XX:PretenureSizeThreshold</code> 来控制直接升入老年代对象的大小，大于这个值的对象会直接分配到老年代区域。老年代因为生命周期比较长，不需要过多的复制操作，，所以一般采用标记-压缩的回收算法。</p><blockquote><p>注意：对于老年代，可能存在这么一种情况，老年代中的对象有时候会引用到新生代中的对象。如果这时候要执行 GC ，则可能需要查询整个老年代上可能存在引用新生代中的对象的情况，这显然是低效的。所以，老年代中维护了一个 512 byte 的card table，所有老年代对象引用新生代对象的信息都记录在这里。每当新生代 GC 发生时，只需要检查这个 card table 即可，大大提高了性能。</p></blockquote><h2 id="5-gc-log-分析"><a class="markdownIt-Anchor" href="#5-gc-log-分析"></a> 5. GC log 分析</h2><p>为了让上层应用开发人员更方便的调试 Java 程序，JVM 提供了相应的 GC 日志。在 GC 执行垃圾回收时间过程中，会有各种相应的 log 被打印出来。其中新生代和老年代打印出来的 log 日志是有区别的。</p><ul><li>新生代 GC ：这一区域的 GC 叫做 Minor GC。因为 Java 对象大都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。</li><li>老年代 GC：发生在这一区域的 GC 叫做 Major GC 或者 Full GC。当出现了 Major GC，经常会伴随至少一次的 Minor GC。</li></ul><blockquote><p>注意：在有些虚拟机实现中，Major GC 和 Full GC 还是有一定的区别的。Major GC 只是代表回收老年代区域的内存，Full GC 代表回收整个堆中的内存，也就是新生代+老年代。</p></blockquote><p>首先我们需要先理解几个 Java 命令参数</p><table><thead><tr><th>命令参数</th><th>功能描述</th></tr></thead><tbody><tr><td>-verbose:gc</td><td>显示 GC 的操作内容</td></tr><tr><td>-Xms20M</td><td>初始化堆大小为20M</td></tr><tr><td>-Xmx20M</td><td>设置堆最大分配内存20M</td></tr><tr><td>-Xmn10M</td><td>设置新生代内存大小为10M</td></tr><tr><td>-XX:+printGCDetails</td><td>打印 GC 的详细 log 日志</td></tr><tr><td>-XX:SurvivorRatio=8</td><td>新生代中的 Eden 区域与Survivor 区域的大小比值为 8:1:1</td></tr></tbody></table><p>使用如下代码，在内存中创建 4 个 byte 类型数组来演示内存分配与 GC 的详细过程。代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** VM agrs: -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails* -XX:SurvivorRatio=8*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinorGCTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> z4<span class="token punctuation">;</span>        a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>        a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> _1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> agrs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">testAllocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的参数可以看出堆内存总大小为 20M，其中新生代占 10M，剩下的10M 会自动分配给老年代。执行上面代码打印日志如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">HeapPSYoungGen      total <span class="token number">9216</span>K<span class="token punctuation">,</span> used <span class="token number">8003</span>K <span class="token punctuation">[</span><span class="token number">0</span>x00000007bf600000<span class="token punctuation">,</span> <span class="token number">0</span>x00000007c0000000<span class="token punctuation">,</span> <span class="token number">0</span>x00000007c0000000<span class="token punctuation">)</span>  eden space <span class="token number">8192</span>K<span class="token punctuation">,</span> <span class="token number">97</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0</span>x00000007bf600000<span class="token punctuation">,</span><span class="token number">0</span>x00000007bfdd0ed8<span class="token punctuation">,</span><span class="token number">0</span>x00000007bfe00000<span class="token punctuation">)</span>  from space <span class="token number">1024</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0</span>x00000007bff00000<span class="token punctuation">,</span><span class="token number">0</span>x00000007bff00000<span class="token punctuation">,</span><span class="token number">0</span>x00000007c0000000<span class="token punctuation">)</span>  to   space <span class="token number">1024</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0</span>x00000007bfe00000<span class="token punctuation">,</span><span class="token number">0</span>x00000007bfe00000<span class="token punctuation">,</span><span class="token number">0</span>x00000007bff00000<span class="token punctuation">)</span>ParOldGen       total <span class="token number">10240</span>K<span class="token punctuation">,</span> used <span class="token number">0</span>K <span class="token punctuation">[</span><span class="token number">0</span>x00000007bec00000<span class="token punctuation">,</span> <span class="token number">0</span>x00000007bf600000<span class="token punctuation">,</span> <span class="token number">0</span>x00000007bf600000<span class="token punctuation">)</span>  object space <span class="token number">10240</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0</span>x00000007bec00000<span class="token punctuation">,</span><span class="token number">0</span>x00000007bec00000<span class="token punctuation">,</span><span class="token number">0</span>x00000007bf600000<span class="token punctuation">)</span>Metaspace       used <span class="token number">2631</span>K<span class="token punctuation">,</span> capacity <span class="token number">4486</span>K<span class="token punctuation">,</span> committed <span class="token number">4864</span>K<span class="token punctuation">,</span> reserved <span class="token number">1056768</span>K  <span class="token keyword">class</span> space    used <span class="token number">286</span>K<span class="token punctuation">,</span> capacity <span class="token number">386</span>K<span class="token punctuation">,</span> committed <span class="token number">512</span>K<span class="token punctuation">,</span> reserved <span class="token number">1048576</span>K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>日志中的各字段代表意义如下：</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>PSYoungGen</td><td>新生代</td></tr><tr><td>eden</td><td>新生代中的 Eden 区</td></tr><tr><td>from</td><td>新生代中的 S0 区</td></tr><tr><td>to</td><td>新生代中的 S1 区</td></tr><tr><td>ParOldGen</td><td>老年代</td></tr></tbody></table><p>从日志中可以看出：程序执行完之后，a1，a2，a3，a4 四个对象都被分配在了新生代的 Eden 区。</p><p>如果我们将测试代码中的 a4 初始化改为 ``a4 = new byte[2*_1M]，则打印日志如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token punctuation">[</span>GC <span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span> <span class="token punctuation">[</span>PSYoungGen<span class="token punctuation">:</span> <span class="token number">6815</span>K<span class="token operator">-></span><span class="token function">480K</span><span class="token punctuation">(</span><span class="token number">9216</span>K<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token number">6815</span>K<span class="token operator">-></span><span class="token function">6632K</span><span class="token punctuation">(</span><span class="token number">19456</span>K<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0067344</span> secs<span class="token punctuation">]</span> <span class="token punctuation">[</span>Times<span class="token punctuation">:</span> user<span class="token operator">=</span><span class="token number">0.04</span> sys<span class="token operator">=</span><span class="token number">0.00</span><span class="token punctuation">,</span> <span class="token keyword">real</span><span class="token operator">=</span><span class="token number">0.01</span> secs<span class="token punctuation">]</span>HeapPSYoungGen      total <span class="token number">9216</span>K<span class="token punctuation">,</span> used <span class="token number">2130</span>K <span class="token punctuation">[</span><span class="token number">0</span>x00000007bf600000<span class="token punctuation">,</span> <span class="token number">0</span>x00000007c0000000<span class="token punctuation">,</span> <span class="token number">0</span>x00000007c0000000<span class="token punctuation">)</span>  eden space <span class="token number">8192</span>K<span class="token punctuation">,</span> <span class="token number">26</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0</span>x00000007bf600000<span class="token punctuation">,</span><span class="token number">0</span>x00000007bf814930<span class="token punctuation">,</span><span class="token number">0</span>x00000007bfe00000<span class="token punctuation">)</span>  from space <span class="token number">1024</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0</span>x00000007bfe00000<span class="token punctuation">,</span><span class="token number">0</span>x00000007bfe00000<span class="token punctuation">,</span><span class="token number">0</span>x00000007bff00000<span class="token punctuation">)</span>  to   space <span class="token number">1024</span>K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0</span>x00000007bff00000<span class="token punctuation">,</span><span class="token number">0</span>x00000007bff00000<span class="token punctuation">,</span><span class="token number">0</span>x00000007c0000000<span class="token punctuation">)</span>ParOldGen       total <span class="token number">10240</span>K<span class="token punctuation">,</span> used <span class="token number">6420</span>K <span class="token punctuation">[</span><span class="token number">0</span>x00000007bec00000<span class="token punctuation">,</span> <span class="token number">0</span>x00000007bf600000<span class="token punctuation">,</span> <span class="token number">0</span>x00000007bf600000<span class="token punctuation">)</span>  object space <span class="token number">10240</span>K<span class="token punctuation">,</span> <span class="token number">62</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0</span>x00000007bec00000<span class="token punctuation">,</span><span class="token number">0</span>x00000007bf2450d0<span class="token punctuation">,</span><span class="token number">0</span>x00000007bf600000<span class="token punctuation">)</span>Metaspace       used <span class="token number">2632</span>K<span class="token punctuation">,</span> capacity <span class="token number">4486</span>K<span class="token punctuation">,</span> committed <span class="token number">4864</span>K<span class="token punctuation">,</span> reserved <span class="token number">1056768</span>K  <span class="token keyword">class</span> space    used <span class="token number">286</span>K<span class="token punctuation">,</span> capacity <span class="token number">386</span>K<span class="token punctuation">,</span> committed <span class="token number">512</span>K<span class="token punctuation">,</span> reserved <span class="token number">1048576</span>K<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为在给 a4 分配内存之前，Eden 区已经被占用6M。已经无法再分配出 2M 来存储 a4 对象。因此会执行一次 Minor GC，并尝试将存活的 a1，a2，a3 对象复制到 S1 区。但是 S1区只有1M 空间，所以没有办法存储a1、a2、a3 任意一个对象。在这种情况下，a1、a2、a3 被转移到老年代，最后将 a4 存储在 Eden 区。所以最终的结果就是：<strong>Eden 区占用2M(a4)，老年代占用6M（a1,a2,a3）。</strong></p><h2 id="6-引用"><a class="markdownIt-Anchor" href="#6-引用"></a> 6. 引用</h2><p>上面说过，判断对象是否存活是通过 GC Roots 的引用可达性来判断的。但 JVM 中的引用关系不止一种，而是有四种，根据引用由强到弱，他们分别是：<strong>强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）。</strong></p><p>四种引用的简单对比：</p><table><thead><tr><th>引用</th><th>GC 回收时机</th><th>使用示例</th></tr></thead><tbody><tr><td>强引用</td><td>如果一个对象具有强引用，那垃圾回收器绝不会回收它</td><td>Object obj = new Object();</td></tr><tr><td>软引用</td><td>内存实在不足时，会对软引用进行回收</td><td>SoftReference<Object> softObj = new SoftReference();</td></tr><tr><td>弱引用</td><td>第一次垃圾回收时，如果垃圾回收器遍历到此弱引用，则将其回收</td><td>WeakReference<Object> weakObj = new WeakReference();</td></tr><tr><td>虚引用</td><td>一个对象是否有虚引用的存在，完全不会对其生存时间造成影响，也无法通过虚引用来获取一个对象的实例</td><td>不会使用</td></tr></tbody></table><p>平时项目中，尤其是Android项目，因为有大量的图像(Bitmap)对象，使用软引用的场景较多。所以重点看下软引用SoftReference的使用，不当的使用软引用有时也会导致系统异常。</p><p><strong>软引用常规使用</strong></p><p>常规使用代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoftReferenceNormal</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SoftObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">120</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//120M</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SoftObject</span><span class="token punctuation">></span></span> cacheRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SoftObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一次 GC 前，软引用："</span><span class="token operator">+</span>cacheRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一次 GC 后，软引用："</span><span class="token operator">+</span>cacheRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//再分配一个120M 对象</span>    <span class="token class-name">SoftObject</span> newSo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再次分配120M 强引用对象后，软引用："</span><span class="token operator">+</span>cacheRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上述代码，打印日志如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ java -Xmx200m SoftReferenceNormal第一次 GC 前，软引用：SoftReferenceNormal$SoftObject@5c647e05第一次 GC 后，软引用：SoftReferenceNormal$SoftObject@5c647e05再次分配120M 强引用对象后，软引用：null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>首先通过-Xmx将堆最大内存设置为200M。从日志中可以看出，当第一次GC时，内存中还有剩余可用内存，所以软引用并不会被GC回收。但是当我们再次创建一个120M的强引用时，JVM可用内存已经不够，所以会尝试将软引用给回收掉。</p><p><strong>软引用隐藏问题</strong></p><p>需要注意的是，被软引用对象关联的对象会自动被垃圾回收器回收，但是软引用对象本身也是一个对象，这些创建的软引用并不会自动被垃圾回收器回收掉。比如如下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref</span><span class="token punctuation">.</span><span class="token class-name">SoftReference</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoftReferenceTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SoftObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//1KB</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CACHE_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token comment">//100M</span>  <span class="token comment">//静态集合保存软引用对象，会导致这些软引用对象本身不能被垃圾回收器回收</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SoftReference</span><span class="token punctuation">&lt;</span><span class="token class-name">SoftObject</span><span class="token punctuation">></span><span class="token punctuation">></span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>CACHE_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> CACHE_INITIAL_CAPACITY <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SoftObject</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"size of cache："</span><span class="token operator">+</span>cache<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The End!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上述代码，打印日志如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token property">$java</span> <span class="token operator">-</span>Xms4M <span class="token operator">-</span>Xmx4m <span class="token operator">-</span>Xmn2M SoftReferenceTestsize of cache：<span class="token number">1</span>size of cache：<span class="token number">10001</span>size of cache：<span class="token number">20001</span>size of cache：<span class="token number">30001</span>Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>OutOfMemoryError<span class="token punctuation">:</span> GC overhead limit exceededat SoftReferenceTest$SoftObject<span class="token punctuation">.</span><span class="token operator">&lt;</span>init<span class="token operator">></span><span class="token punctuation">(</span>SoftReferenceTest<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">)</span>at SoftReferenceTest<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>SoftReferenceTest<span class="token punctuation">.</span>java<span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>限制堆内存大小为4M，最终程序崩溃，但是异常的原因并不是普通的堆内存溢出，而是&quot;GC overhead&quot;。之所以会抛出这个错误，是由于虚拟机一直在不断回收软引用，回收进行的速度过快，占用的cpu过大(超过98%)，并且每次回收掉的内存过小(小于2%)，导致最终抛出了这个错误。</p><p>这里需要做优化，合适的处理方式是注册一个引用队列，每次循环之后将引用队列中出现的软引用对象从cache中移除。如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref</span><span class="token punctuation">.</span><span class="token class-name">SoftReference</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref</span><span class="token punctuation">.</span><span class="token class-name">ReferenceQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref</span><span class="token punctuation">.</span><span class="token class-name">Reference</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoftReferenceTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SoftObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//1KB</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> removedSoftRefs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CACHE_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token comment">//100M</span>  <span class="token comment">//静态集合保存软引用对象，会导致这些软引用对象本身不能被垃圾回收器回收</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SoftReference</span><span class="token punctuation">&lt;</span><span class="token class-name">SoftObject</span><span class="token punctuation">></span><span class="token punctuation">></span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>CACHE_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SoftObject</span><span class="token punctuation">></span></span> referenceQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> CACHE_INITIAL_CAPACITY <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">SoftObject</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>referenceQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clearUselessReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">10000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"size of cache："</span><span class="token operator">+</span>cache<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The End!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clearUselessReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Reference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">SoftObject</span><span class="token punctuation">></span></span> ref <span class="token operator">=</span> referenceQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ref <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    removedSoftRefs<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ref <span class="token operator">=</span> referenceQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次运行修改后的代码，结果如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$java -Xms4M -Xmx4m -Xmn2M SoftReferenceTestsize of cache：1size of cache：1700size of cache：1310size of cache：920size of cache：530size of cache：2218size of cache：1828size of cache：1310size of cache：708size of cache：280size of cache：1940The End! removes soft Reference 100657<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出优化后，程序可以正常执行完。并且在执行过程中会动态的将集合中的软引用删除。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>虚拟机垃圾回收机制很多时候都是影响系统性能、并发能力的主要因素之一。尤其是对于从事 Android 开发的工程师来说，有时候垃圾回收会很大程度上影响 UI 线程，并造成界面卡顿现象。因此理解垃圾回收机制并学会分析 GC Log 也是一项必不可少的技能。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="20200718/android-ndk/jvm-dvm/bi-ji-yi-java-cheng-xu-yun-xing-shi-nei-cun-shi-ru-he-fen-pei-de/"/>
      <url>20200718/android-ndk/jvm-dvm/bi-ji-yi-java-cheng-xu-yun-xing-shi-nei-cun-shi-ru-he-fen-pei-de/</url>
      
        <content type="html"><![CDATA[<h1 id="笔记一java程序运行时内存是如何分配的"><a class="markdownIt-Anchor" href="#笔记一java程序运行时内存是如何分配的"></a> 【笔记一】Java程序运行时，内存是如何分配的</h1><p>Java 虚拟机在执行Java 程序的过程中，会把它所管理的内存划分为不同的数据区域；主要分为：<strong>程序计数器</strong>、<strong>虚拟机栈</strong>、<strong>本地方法栈</strong>、<strong>堆</strong>、<strong>方法区</strong>。</p><p>下图描述一个 <code>HelloWord.java</code> 文件被加载到内存的过程：</p><ul><li><code>HelloWord.java</code> 首先需要经过编译器编译，生成 <code>HelloWord.class</code> 字节码文件；</li><li>Java 程序中访问 <code>HelloWord</code> 这个类时，需要通过 <code>ClassLoader</code>(类加载器) 将<code>HelloWord.class</code>加载到 JVM 内存中；</li><li>JVM 中的内存可以划分为若干个不同的数据区域，主要分为：程序计数器、虚拟机栈、本地方法栈、堆、方法区。</li></ul><img src="/images/android:jvm/java_load.png" alt="img" style="background-color:#fff;zoom:70%" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/java_load.png" class="lozad post-image"><h2 id="11-程序计数器program-counter-register"><a class="markdownIt-Anchor" href="#11-程序计数器program-counter-register"></a> 1.1 程序计数器（Program Counter Register）</h2><p>Java 程序时多线程的，CPU 可以在多个线程中分配执行时间片段，当其中一个线程被 CPU 挂起时，需要记录代码已经执行到的位置，方便 CPU 重新执行此线程时，可以知道从那一行指令开始继续执行，这就是<strong>程序计数器</strong>的作用。</p><p><strong>&quot;程序计数器&quot;</strong> 是虚拟机中较小的一块存储空间，主要用于记录当前线程执行的位置。</p><p>如下图所示：每个线程都会记录一个当前方法执行到的位置，当 CPU 切回到某一个线程时，可以根据程序计数器记录的位置，继续向下执行指令。</p><img src="/images/android:jvm/program_counter_register.png" alt="img" style="zoom:100%;background-color:#fff" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/program_counter_register.png" class="lozad post-image"><p>除了上图所示的恢复线程数据之外，其他一些我们熟悉的<strong>分支操作、循环操作、跳转、异常处理等也都需要依赖程序计数器来完成</strong>。</p><p>关于程序计数器需要注意的地方：</p><ol><li><p>在 Java 虚拟机规范中，并没有对程序计数器这一区域规定任何的 <code>OutOfMemoryError</code> 情况。</p></li><li><p>程序计数器是线程私有的，每个线程中都有一个程序计数器。它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</p></li><li><p>当一个线程正在执行一个 Java 方法的时候，这个程序计数器记录的是正在执行的虚拟机字节码指令的地址。如果正在执行的是 Native 方法，这个程序计数器的值是则为空（Undefined）。</p></li></ol><h2 id="12-虚拟机栈"><a class="markdownIt-Anchor" href="#12-虚拟机栈"></a> 1.2 虚拟机栈</h2><p><strong>虚拟机栈</strong>也是线程私有的，与线程的生命周期同步。在 Java 虚拟机规范中，对各个区域规定了两种异常状况：</p><ol><li><strong>StackOverflowError</strong> ：当线程请求栈深度超出虚拟机栈所允许的深度时抛出。</li><li><strong>OutOfMemoryError</strong> ：当 Java 虚拟机栈动态扩展到无法申请足够内存时抛出。</li></ol><p>在我们学习Java 虚拟机的过程中，经常会看到一句话</p><p><strong>JVM 是基于栈的解释器执行的，DVM 是基于寄存器的解释器执行的。</strong></p><p>上面这句话中的 『基于栈』指的就是<strong>虚拟机栈</strong>。虚拟机栈的初衷是用来描述 Java 方法执行的内存模型，每个方法被执行的时候，JVM 都会在虚拟机栈中创建一个<strong>栈帧</strong>，接下来看这个栈帧具体是什么：</p><h3 id="121-栈帧"><a class="markdownIt-Anchor" href="#121-栈帧"></a> 1.2.1 栈帧</h3><p><strong>栈帧（Stack Frame）</strong> 是用于支持虚拟机进行方法调用和执行的数据结构，每一个线程在执行某个方法时，都会为该方法创建一个对应的栈帧。</p><p>我们可以这样理解：**一个线程包含多个栈帧，而每个栈帧内部包含『局部变量表』，『操作数栈』，『动态链接』『返回地址』等。**如下图所示：</p><p><img src="/images/android:jvm/stack_frame.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/stack_frame.png" class="lozad post-image"></p><h4 id="1211-局部变量表"><a class="markdownIt-Anchor" href="#1211-局部变量表"></a> 1.2.1.1 局部变量表</h4><p><strong>局部变量表</strong>是变量值的存储空间，我们调用方法时传递的参数，以及在方法内部创建的局部变量都保存在 <strong>局部变量表</strong> 中。在 Java 编译成 class 文件的时候，就会在方法的 Code 属性表中的 <code>max_locals</code> 数据项中，确定该方法需要分配的最大局部变量表的容量。如下代码所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">return</span> i <span class="token operator">+</span> j <span class="token operator">+</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 javap -v 反编译之后，得到如下字节码指令：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span><span class="token class-name">I</span>    flags<span class="token operator">:</span> ACC_PUBLIC<span class="token punctuation">,</span> ACC_STATIC    <span class="token class-name">Code</span><span class="token operator">:</span>      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>         <span class="token number">0</span><span class="token operator">:</span> iconst_1         <span class="token number">1</span><span class="token operator">:</span> istore_1         <span class="token number">2</span><span class="token operator">:</span> iconst_2         <span class="token number">3</span><span class="token operator">:</span> istore_2         <span class="token number">4</span><span class="token operator">:</span> iload_1         <span class="token number">5</span><span class="token operator">:</span> iload_2         <span class="token number">6</span><span class="token operator">:</span> iadd         <span class="token number">7</span><span class="token operator">:</span> iload_0         <span class="token number">8</span><span class="token operator">:</span> iadd         <span class="token number">9</span><span class="token operator">:</span> ireturn     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 <code>locals=3</code> 代表的就是局部变量表的长度为3，也就是说经过编译之后，局部变量表的长度已经固定为3，分别保存 参数k 和 局部变量 i 、j 。</p><blockquote><p>注意：系统不会为局部变量表赋予初始值（实例变量和类变量都会被赋予初始值），也就是说不存在类变量那样的准备阶段。</p></blockquote><h4 id="1212-操作数栈"><a class="markdownIt-Anchor" href="#1212-操作数栈"></a> 1.2.1.2 操作数栈</h4><p>**操作数栈（Operand Stack）**也常称为操作栈，它是一个后入先出栈（LIFO）。</p><p>同局部变量表一样，操作数栈的最大深度也是在编译的时候写入方法的 Code 属性表中的 <code>max_tacks</code> 数据项中。栈中的数据元素可以是任意的Java 数据类型，包括<code>long</code>和<code>double</code>。</p><p>当一个方法刚刚开始执行时，这个方法的操作数栈时空的；在方法执行过程中，会有各种字节码的指令被压入和弹出操作数栈。比如：iadd 指令就是将操作数栈中栈顶的两个整型元素弹出，执行加法运算，并将运算结果重新压回操作数栈中。</p><h4 id="1213-动态链接"><a class="markdownIt-Anchor" href="#1213-动态链接"></a> 1.2.1.3 动态链接</h4><p><strong>动态链接</strong> 的主要目的是为了支持方法调用过程中的动态链接（Dynamic Linking）。</p><p>在一个class 文件中，一个方法调用其他方法，需要将这些方法的符号引用转化为其所在内存地址中的直接引用；而符号引用存在于<strong>方法区</strong>中。</p><p>在Java虚拟机栈中，每个栈帧都包含一个指向运行时常量池中该栈中所属方法的符号引用，持有这个引用的目的就是为了支持方法调用过程中的动态链接（Dynamic Linking）。</p><h4 id="1214-返回地址"><a class="markdownIt-Anchor" href="#1214-返回地址"></a> 1.2.1.4 返回地址</h4><p>当一个方法开始执行后，只有两种方式可以退出这个方法：</p><ul><li><strong>正常退出</strong> ：指方法中的代码正常完成，或者遇到任意一个方法返回的字节码指令（如return）并退出，没有抛出任何异常；</li><li><strong>异常退出</strong> ：指方法执行过程中遇到异常，并且这个异常在方法体中没有得到处理，导致方法退出。</li></ul><p>无论当前方法采用何种方式退出，在方法退出后，都需要返回到方法被调用的位置，程序才能继续执行。而虚拟机栈中所说的<strong>返回地址</strong>就是用来帮助当前方法恢复它的上层方法执行状态。</p><p>一般来说，方法正常退出时，调用者的 PC 计数值可以作为返回地址，栈帧中可能保存此计数值。而方法异常退出时，返回地址是通过异常处理表确定的，栈帧中一般不会保存此部分信息。</p><p><strong>实例讲解</strong>：</p><p>用一个简单的<code>add()</code> 代码来演示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> result <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span>  <span class="token keyword">return</span> result <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过 <code>javap -v</code>之后的字节码指令如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span><span class="token operator">:</span> iconst_1    （把常量 <span class="token number">1</span> 压入操作数栈栈顶）<span class="token number">1</span><span class="token operator">:</span> istore_1    （把操作数栈栈顶的出栈放入局部变量表索引为 <span class="token number">1</span> 的位置）<span class="token number">2</span><span class="token operator">:</span> iconst_2    （把常量 <span class="token number">2</span> 压入操作数栈栈顶）<span class="token number">3</span><span class="token operator">:</span> istore_2    （把操作数栈栈顶的出栈放入局部变量表索引为 <span class="token number">2</span> 的位置）<span class="token number">4</span><span class="token operator">:</span> iload_1     （把局部变量表索引为 <span class="token number">1</span> 的值放入操作数栈栈顶）<span class="token number">5</span><span class="token operator">:</span> iload_2     （把局部变量表索引为 <span class="token number">2</span> 的值放入操作数栈栈顶）<span class="token number">6</span><span class="token operator">:</span> iadd        （将操作数栈栈顶的和栈顶下面的一个进行加法运算后放入栈顶）<span class="token number">7</span><span class="token operator">:</span> istore_3    （把操作数栈栈顶的出栈放入局部变量表索引为 <span class="token number">3</span> 的位置）<span class="token number">8</span><span class="token operator">:</span> iload_3     （把局部变量表索引为 <span class="token number">3</span> 的值放入操作数栈栈顶）<span class="token number">9</span><span class="token operator">:</span> bipush <span class="token number">10</span>   （把常量 <span class="token number">10</span> 压入操作数栈栈顶）<span class="token number">11</span><span class="token operator">:</span> iadd       （将操作数栈栈顶的和栈顶下面的一个进行加法运算后放入栈顶）<span class="token number">12</span><span class="token operator">:</span> ireturn    （结束）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到：<strong>局部变量表</strong>和<strong>操作数栈</strong>在代码执行期间是协同合作来达到某一运算效果的。接下来通过图示来看下这几行代码执行期间，虚拟机栈的实际情况。</p><ul><li>iconst 和 bipush，这两个指令都是将常量压入操作数栈顶，区别就是：当 int 取值 -1~5 采用 iconst 指令，取值 -128~127 采用 bipush 指令。</li><li>istore 将操作数栈顶的元素放入局部变量表的某索引位置，比如 istore_5 代表将操作数栈顶元素放入局部变量表下标为 5 的位置。</li><li>iload 将局部变量表中某下标上的值加载到操作数栈顶中，比如 iload_2 代表将局部变量表索引为 2 上的值压入操作数栈顶。</li><li>iadd 代表加法运算，具体是将操作数栈最上方的两个元素进行相加操作，然后将结果重新压入栈顶。</li></ul><p>首先在 .java 文件被编译成 .class 文件的时候，<strong>栈帧中需要多大的局部变量表，多深的操作数栈都已经完全确定了，并且写入到的方法的Code 属性中</strong>。因此这会局部变量表的大小是确定的，add() 方法中有3 个局部变量，因此局部变量表大小为3，但是操作数栈此时为空。</p><p>所以刚刚执行到 add() 方法时，局部变量表和操作数栈的情况如下：</p><img src="/images/android:jvm/stack_frame_eg_1.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/stack_frame_eg_1.png" class="lozad post-image"><p>iconst_1 将常量1压入操作数栈顶，结果如下：</p><img src="/images/android:jvm/stack_frame_eg_2.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/stack_frame_eg_2.png" class="lozad post-image"><p>istore_1 把操作数栈顶的元素出栈并放入局部变量表下标为 1 的位置，结果如下：</p><img src="/images/android:jvm/stack_frame_eg_3.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/stack_frame_eg_3.png" class="lozad post-image"><p>可以看出此时操作数栈重新变为空，并将出栈的元素 1 保存在局部变量表中。</p><p>iconst_2 把常量 2 压入操作数栈顶，结果如下：</p><img src="/images/android:jvm/stack_frame_eg_4.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/stack_frame_eg_4.png" class="lozad post-image"><p>istore_2 把操作数栈顶的元素出栈并放入局部变量表下标为 2 的位置，结果如下：</p><img src="/images/android:jvm/stack_frame_eg_5.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/stack_frame_eg_5.png" class="lozad post-image"><p>接下来是两步 iload 操作，分别是 iload_1 和 iload_2。分别代表的是将局部变量表中下标为 1 和下标为 2 的元素重新压入操作数栈中，结果如下：</p><img src="/images/android:jvm/stack_frame_eg_6.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/stack_frame_eg_6.png" class="lozad post-image"><p>接下来进行 iadd 操作，这个操作会将栈顶最上方的两个元素（也就是 1、2）进行加法操作，然后将结果重新压入到栈顶，执行完之后的结果如下：</p><img src="/images/android:jvm/stack_frame_eg_7.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/stack_frame_eg_7.png" class="lozad post-image"><p>istor_3 将操作数栈顶的元素出栈，并保存在局部变量表下标为 3 的位置。结果如下：</p><img src="/images/android:jvm/stack_frame_eg_8.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/stack_frame_eg_8.png" class="lozad post-image"><p>iload_3 将局部变量表中下标为 3 的元素重新压入到操作数栈顶，结果如下：</p><img src="/images/android:jvm/stack_frame_eg_9.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/stack_frame_eg_9.png" class="lozad post-image"><p>bipush 10 将常量 10 压入到操作数栈中，结果如下：</p><img src="/images/android:jvm/stack_frame_eg_10.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/stack_frame_eg_10.png" class="lozad post-image"><p>再次执行 iadd 操作，注意此时栈顶最上方的两个元素为 3 和 10，所以执行完结果如下：</p><img src="/images/android:jvm/stack_frame_eg_11.png" alt="img" style="zoom:80%;background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/stack_frame_eg_11.png" class="lozad post-image"><p>最后执行 return 指令，将操作数栈顶的元素 13 返回给上层方法。至此 add() 方法执行完毕。局部变量表和操作数栈也会相继被销毁。</p><h2 id="13-本地方法栈"><a class="markdownIt-Anchor" href="#13-本地方法栈"></a> 1.3 本地方法栈</h2><p>本地方法栈和上面所讲的虚拟机栈基本相同，只不过是针对本地（Native）方法。如果在开发中涉及 JNI 可能接触本地方法栈多一点。有些虚拟机的实现已经将两个栈合二为一了（比如HotSpot）。</p><h2 id="14-堆"><a class="markdownIt-Anchor" href="#14-堆"></a> 1.4 堆</h2><p>Java 堆（Heap）是 JVM 所管理的内存区域中最大的一块，该区域唯一的目的就是存放对象实例，几乎所有对象的实例都在堆里面分配，因此它也是 Java 垃圾收集器（GC）管理的主要区域，有时也叫 GC 堆。同时，它也是所有线程共享的内存区域，因此被分配在此区域的对象被多个线程访问的话，需要考虑线程安全问题。</p><p>按照对象存储时间的不同，堆中的内存可以划分为<strong>新生代（Young）<strong>和</strong>老年代（Old）</strong>，其中新生代又被划分为 <code>Eden</code> 和 <code>Survivor</code> 区。</p><img src="/images/android:jvm/heap.png" alt="img" style="zoom:80%;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/heap.png" class="lozad post-image"><p>图中不同的存放区域具有不同的生命周期的对象。这样可以根据不同的区域使用不同的垃圾回收算法，从而更具有针对性，进而提高垃圾回收效率。</p><h2 id="15-方法区"><a class="markdownIt-Anchor" href="#15-方法区"></a> 1.5 方法区</h2><p>方法区（Method Area）是 JVM 规范中规定的一块运行时数据区。方法区主要时存储已经被 JVM 加载的类信息（版本、字段、方法、接口）、常量、静态变量、即时编译器编译后的代码和数据。该区域和堆一样，也是被各个线程共享的内存区域。</p><blockquote><p><strong>注意</strong>：关于方法区很多开发者会将其跟『永久区』混淆。</p><ol><li>方法区是 JVM 规范中规定的一块内存区域，但并不是实际实现，切记将规范和实现混为一谈，不同的 JVM 厂商可以有不同版本的『方法区』的实现。</li><li>HotSpot 在 JDK 1.7 之前使用『永久区』（或者叫 <code>Perm</code> 区）来实现<strong>方法区</strong> ，在JDK 1.8 之后『永久区』就被移除掉了，取而代之的是一个叫做 『元空间（metaspace）』的实现方式。</li></ol></blockquote><p>总结一下就是：</p><pre><code>1. 方法区是规范层面的东西，规定了这一区域要存放哪些数据。2. 永久区或者metaspace是堆方法区的不同的实现，是实现层面的东西。</code></pre><h2 id="16-异常情况"><a class="markdownIt-Anchor" href="#16-异常情况"></a> 1.6 异常情况</h2><h3 id="161-stackoverflowerror-栈溢出异常"><a class="markdownIt-Anchor" href="#161-stackoverflowerror-栈溢出异常"></a> 1.6.1 StackOverflowError 栈溢出异常</h3><p>递归调用是造成 <code>StackOverflowError</code> 的一个常见场景，如以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackOver</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">StackOver</span> so <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackOver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">&#123;</span>      so<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现栈溢出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    number<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在method方法中，递归调用了自身，并且没有设置递归结束条件。运行上述代码时，则会产生StackOverflowError。</p><p>原因就是每调用一次method方法时，都会在虚拟机栈中创建出一个栈帧。因为是递归调用，method方法并不会退出，也不会将栈帧销毁，所以必然会导致StackOverflowError。因此当需要使用递归时，需要格外谨慎。</p><h3 id="162-outofmemeryerror-内存溢出异常"><a class="markdownIt-Anchor" href="#162-outofmemeryerror-内存溢出异常"></a> 1.6.2  OutOfMemeryError 内存溢出异常</h3><p>理论上，虚拟机栈、堆、方法区都有可能发生 <code>OutOfMemeryError</code> ，但是实际项目中，大多数发生在堆当中。如以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">.</span><span class="token class-name">ArraryList</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapError</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ArraryList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HeapError</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArraryList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeapError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在一个无限循环中，动态向ArrayList 中添加新的 HeapError 对象。这会不断的占用堆中的内存，当堆内存不够用时，必然会产生 <code>OutOfMemeryError</code> ，也就是内存溢出异常。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>对应 JVM 运行时内存分布，我们要记住，上面介绍的这 5 点都是在 Java 虚拟机规范中定义的规则，这些规则只是描述了各个区域做什么事情，存储什么样的数据，如何处理异常以及是否允许线程间共享等，<strong>不要理解成虚拟机的『具体实现』</strong>。</p><p>虚拟机的具体实现又很多，比如Sun 公司的 <code>HotSpot</code>,<code>JRocket</code>,<code>IBM J9</code> 以及 Android Dalvik 和 ART 等。这些具体实现，在符合上面5中运行时数据区的前提下，又各自有不同的实现方式。</p><p><img src="/images/android:jvm/jvm_end.png" alt="img" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/android:jvm/jvm_end.png" class="lozad post-image"></p><p>总的来说，JVM 的运行时内存结构中一共有两个“栈”和一个“堆”，分别是：Java 虚拟机栈和本地方法栈，以及“GC堆”和方法区。除此之外还有一个程序计数器。 JVM 内存中只有堆和方法区是线程共享的数据区域，其它区域都是线程私有的。并且程序计数器是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="20200626/java/bing-fa-bian-cheng/bi-ji-yi-bing-fa-bian-cheng-xian-cheng-ji-chu/"/>
      <url>20200626/java/bing-fa-bian-cheng/bi-ji-yi-bing-fa-bian-cheng-xian-cheng-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="并发编程线程基础"><a class="markdownIt-Anchor" href="#并发编程线程基础"></a> 【并发编程】线程基础</h1><h2 id="一-实现线程的方式"><a class="markdownIt-Anchor" href="#一-实现线程的方式"></a> 一. 实现线程的方式</h2><h3 id="1-为何说只有一种实现线程的方式"><a class="markdownIt-Anchor" href="#1-为何说只有一种实现线程的方式"></a> 1. 为何说只有一种实现线程的方式</h3><h4 id="11-常见的实现线程的方式"><a class="markdownIt-Anchor" href="#11-常见的实现线程的方式"></a> 1.1 常见的实现线程的方式</h4><h5 id="111-继承thread类"><a class="markdownIt-Anchor" href="#111-继承thread类"></a> 1.1.1 继承<code>Thread</code>类</h5><p>继承 <code>Thread</code> 类，并重写其中的 <code>run()</code> 方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'用Thread类实现线程'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="112-实现-runnable-接口"><a class="markdownIt-Anchor" href="#112-实现-runnable-接口"></a> 1.1.2 实现 <code>Runnable</code> 接口</h5><p>实现 <code>Runnable</code> 接口，实现其 <code>run()</code> 方法，然后将实现了 <code>Runnable</code> 接口的实例传递到 <code>Thread</code> 类中就可以实现多线程。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunnableThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'用实现Runnable接口实现线程'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="113-线程池创建线程"><a class="markdownIt-Anchor" href="#113-线程池创建线程"></a> 1.1.3 线程池创建线程</h5><p>通过线程池来创建线程。线程中实现了很多线程，我们可以通过其构造器指定该线程池允许创建的线程的最大数量；比如：我们将线程池的数量设置为10，那么就将会有10个子线程来为我们工作。接下来，我们通过线程池中的代码来看看线程池是怎么创建线程的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DefaultThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">DefaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SecurityManager</span> s <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        group <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        namePrefix <span class="token operator">=</span> <span class="token string">"pool-"</span> <span class="token operator">+</span>            poolNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">"-thread-"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> r<span class="token punctuation">,</span>                    namePrefix <span class="token operator">+</span> threadNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span>            t<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于线程池而言，本质上是通过线程工厂来创建线程的，默认采用 <code>DefaultThreadFactory</code>，它会给线程池创建的线程设置一些默认值，比如：线程的名字、是否是守护线程、线程的优先级等；最终还是通过 <code>new Thread()</code> 来创建线程，只是构造方法中传入的参数多一些。</p><h5 id="114-有返回值的-callable-创建线程"><a class="markdownIt-Anchor" href="#114-有返回值的-callable-创建线程"></a> 1.1.4 有返回值的 Callable 创建线程</h5><p><code>Runnable</code> 创建的线程时没有返回值的，而 <code>Callable</code> 和与之相关的 <code>Future</code> 和 <code>FutureTask</code> 可以把线程执行的结果作为返回值返回。如代码所示：实现 <code>Callable</code> 接口，并且泛型设置为 <code>Integer</code> ,然后返回一个随机整数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CallableTask</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建线程池</span><span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提交任务，并用 Future提交返回结果</span><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CallableTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论是 <code>Callable</code> 还是 <code>FutureTask</code> ，它们首先和 <code>Runnable</code> 一样都是一个任务，是需要被执行的，而不是说它们本身就是一个线程。它们可以放到线程池中执行：如代码所示，<code>submit()</code> 方法把任务放到线程池中，并由线程池创建线程。</p><h4 id="12-总结为什么实现线程只有一种方式"><a class="markdownIt-Anchor" href="#12-总结为什么实现线程只有一种方式"></a> 1.2 总结，为什么实现线程只有一种方式</h4><p>根据前面的实现线程的方式，我们可以看到比如线程池、定时器等仅仅只是在 <code>new Thread()</code> 之外做了一层封装；最终都还是通过实现 <code>Runnable</code> 接口或者继承 <code>Thread</code> 类来实现的。</p><p>我们知道，启动线程的方式是调用 <code>start()</code> 方法，然后在 <code>start()</code> 方法中最终会调 <code>run()</code> 方法。</p><p>我们来看 <code>Thread</code> 类的时候可以发现，在 <code>Thread</code> 类的 <code>run()</code> 方法中做了如下操作： 判断 <code>target</code> 不为 <code>null</code> 的情况下，调用 <code>target</code> 的 <code>run()</code> 方法；而 <code>target</code> 实际上就是 <code>Runnable</code> 接口的一个实例，即使用 Runnable 接口实现线程时传给Thread类的对象。</p><p>继承 <code>Thread</code> 类，然后重写 <code>run()</code> 方法，重写后的<code>run()</code>方法中就是需要执行的任务，最终还是调用 <code>start()</code> 方法来启动线程。</p><p>所以创建线程就只有一种方式，就是构造一个 <code>Thread</code> 类，这是创建线程的唯一方式。</p><p>上面看到的实现线程的两种方式本质上都是一样的，就是构造一个 <code>Thread</code> 类，不同点在于<strong>实现线程运行内容的不同</strong> ：要买来自重写的 <code>run()</code> 方法，要么来自 <code>target</code> 的 <code>run()</code> 方法。</p><p><strong>所以我们可以这样描述：</strong></p><p>本质上，实现线程只有一种方式，而要想实现线程执行的内容，却有两种方式，也就是可以通过 实现 <code>Runnable</code> 接口的方式，或是继承 <code>Thread</code> 类重写 <code>run()</code> 方法的方式，把我们想要执行的代码传入，让线程去执行，在此基础上，如果我们还想有更多实现线程的方式，比如线程池和 <code>Timer</code> 定时器，只需要在此基础上进行封装即可。</p><h3 id="2-为什么说实现-runnable-接口比继承-thread-类实现线程要好"><a class="markdownIt-Anchor" href="#2-为什么说实现-runnable-接口比继承-thread-类实现线程要好"></a> 2. 为什么说实现 Runnable 接口比继承 Thread 类实现线程要好</h3><p>我们来总结一下实现 <code>Runnable</code> 接口比继承 <code>Thread</code> 类实现线程好在哪里？</p><ul><li>从代码架构考虑： <code>Runnable</code> 接口只有一个 <code>run()</code> 方法，它定义了需要执行的内容，在这种情况些 实现了 <code>Runnable</code> 类和 <code>Thread</code> 类的解耦；<code>Thread</code> 类负责启动线程和设置属性等，权责分明。</li><li>从性能考虑：使用继承 <code>Thread</code> 类来实现线程，没执行依次任务，就需要创建一个独立的线程；执行完成之后到生命周期的尽头，如果需要再次执行，就必须重新创建一个线程；在线程执行的任务量比较大的时候，带来的开销也很大。如果使用实现 <code>Runnable</code> 接口的方式来实现线程，就可以把任务直接传入线程池，使用一些固定的线程来完成任务，不需要每次新建/销毁线程，大大降低了性能开销。</li><li>从拓展性考虑：Java 语言不执行多继承，如果类一旦继承了 <code>Thread</code> 类，那么后续就不能继承其他的类。如果该类需要继承其他的一些类来实现功能上的拓展，就显得很局限了，限制了代码的拓展性。而Java运行多实现，则实现<code>Runnable</code> 接口方式来实现线程，则不会限制代码的拓展性。</li></ul><p><strong>综上所述：</strong></p><p>应该优先选择通过实现 Runnable 接口的方式来创建线程。</p><h2 id="二-如何正确停止线程"><a class="markdownIt-Anchor" href="#二-如何正确停止线程"></a> 二. 如何正确停止线程</h2><p>通长情况下，我们不会停止一个线程，而是允许线程运行到结束，然后让它自然停止。但是依然也有许多特殊情况需要手动停止线程，比如：用户突然关闭程序，程序出错重启等。</p><h3 id="1-正确停止线程"><a class="markdownIt-Anchor" href="#1-正确停止线程"></a> 1. 正确停止线程</h3><p>对于Java 程序而言，最正确的停止线程的方式是 <code>interrupt</code>,但 <code>interrupt</code> 仅仅起到通知被停止线程的作用。对于被停止线程而言，它完全具有自主权，可以选择立即停止 、过一会停止，或者不停止。那么为什么Java不提供强制停止线程的能力呢？</p><p>其实，Java 希望程序间能够相互通知，相互协作的管理线程，因为如果在不知道对方线程正在做的工作，贸然停止线程就可能造成一些安全问题，为了避免问题，就需要给对方线程一定的事件来处理收尾工作。</p><h4 id="11-用-interrupt-停止线程"><a class="markdownIt-Anchor" href="#11-用-interrupt-停止线程"></a> 1.1 用 interrupt 停止线程</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">islnterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> more work flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//do more work</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一旦调用某个线程的 <code>interrupt()</code> 方法之后，这个线程的中断标记为就会被置为 <code>true</code> ；每个线程都有这样的标记位，当线程执行时，应该定期检查该标志位，如果标记为被置为 <code>true</code> ，就说明有程序想终止该线程。</p><p>在上面的代码中看到，在 <code>while</code> 循环体判断语句中，首先通过 <code>Thread.currentThread().islnterrupted()</code> 判断线程是否被中断，随后检查是否还有工作要做的标志位，两个条件都满足的情况下，才会继续执行下面的工作。</p><p>eg:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StopThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count = "</span> <span class="token operator">+</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StopThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>StopThread</code> 类的 <code>run()</code> 方法中，首先判断线程是否被中断，然后判断 <code>count</code> 是否小于 1000。这线程的工作内容就是打印0~999的数字，每打印一个数字，<code>count</code> 加 1 ；可以看到每次开始之前都会检查线程是否被中断。</p><p>在 <code>main</code> 函数中启动该线程，然后过 5 毫秒之后立刻终止线程，该线程会检测中断信号，于是在线程未执行完就会停止，这种就属于通过 <code>interrupt</code> 正确停止线程的情况。</p><h4 id="12-sleep-期间能否感受到中断"><a class="markdownIt-Anchor" href="#12-sleep-期间能否感受到中断"></a> 1.2 sleep 期间能否感受到中断</h4><p>现在我们考虑一种特殊情况：在线程执行过程中有休眠需求，也就是每打印一次，进入一次 <code>sleep</code> ，将 <code>sleep</code> 时间设置为 10 秒；则改造后的代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>         num <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StopDuringSleep</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    num<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主线程休眠 5 毫秒后，通知子线程中断，此时子线程仍然在执行 <code>sleep</code> 语句，处于休眠中。那么就需要考虑，在休眠中的线程能否感受到中断通知呢？如果需要等到线程休眠结束后，那岂不响应中断太不及时了。</p><p>在 Java 设计之初，如果 <code>sleep</code>,<code>wait</code> 等可以让线程进入阻塞的方法使得线程休眠了，而处于休眠中的线程被中断，那么线程是可以感受到中断信号的，并且会抛出一个 <code>InterruptedException</code> 异常，同时清除中断信号，将中断标记为置为false；这样，就不用担心长时间休眠中的线程感受不到中断了，因为即便现在还在休眠中，仍然能够响应中断通知，并抛出异常。</p><h4 id="13-相应中断的两种最佳处理方式"><a class="markdownIt-Anchor" href="#13-相应中断的两种最佳处理方式"></a> 1.3 相应中断的两种最佳处理方式</h4><p>在实际开发中肯定是团队协作的，不同的人负责编写不同的方法，然后相互调用来实现整个业务的逻辑。那么如果我们负责编写的方法需要被别人调用，同时我们的方法内调用了 sleep 或者 wait 等能响应中断的方法时，仅仅 catch 住异常是不够的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">subTas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 在这里不处理该异常是非常不好的</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以在方法中使用 try/catch 或在方法签名中声明 throws  InterruptedException。</p><h5 id="131-方法签名抛异常run-强制-trycatch"><a class="markdownIt-Anchor" href="#131-方法签名抛异常run-强制-trycatch"></a> 1.3.1 方法签名抛异常，run() 强制 try/catch</h5><p>上面代码所示 <code>catch</code> 语句块里是空的，并没有进行任何处理。假设线程执行到这个方法，并且正在 <code>sleep</code> ，此时有线程发送 <code>interrupt</code> 通知试图中断线程，就会抛出异常，并清除中断信号。抛出的异常被 <code>catch</code> 语句块捕捉。</p><p>但是，捕捉到异常的 <code>catch</code> 没有进行任何处理逻辑，相当于把中断信号给隐藏了，这样做是很不合理的。我们可以选择在方法签名中抛出异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">subTask2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>正如代码所示：要求每一个方法的调用方有义务去处理异常。调用方要不使用 <code>try/catch</code> 并在 <code>catch</code> 中正确处理异常，要不将异常声明到方法签名中。如果每层逻辑都遵守规范，便可以将中断信号传递到顶层，最终让 <code>run()</code> 方法可以捕获异常。对于 <code>run()</code> 方法而言，它本身没有抛出异常的能力，只能通过 <code>try/catch</code> 来处理异常；可以根据不同的业务逻辑来进行相应的处理。</p><h5 id="132-再次中断"><a class="markdownIt-Anchor" href="#132-再次中断"></a> 1.3.2 再次中断</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了刚刚推荐的将异常声明到方法签名中的方式以外，还可以在 <code>catch</code> 语句中再次中断线程。如代码所示，需要在 <code>catch</code> 语句块中调用 <code>Thread.currentThread().interrupt()</code>函数。因为如果线程在休眠期间被中断，那么会自动清除中断信号。如果这时候手动添加中断信号，中断信号依然可以被捕捉到。这样后续执行的方法依然可以检测到这里发生过中断，可以做出相应的处理，整个线程可以正常退出</p><h3 id="2-为什么-volatile-标记位的停止方法是错误的"><a class="markdownIt-Anchor" href="#2-为什么-volatile-标记位的停止方法是错误的"></a> 2. 为什么 volatile 标记位的停止方法是错误的？</h3><h4 id="21-错误的停止方法"><a class="markdownIt-Anchor" href="#21-错误的停止方法"></a> 2.1 错误的停止方法</h4><p>首先，我们来看几种线程停止的错误的方法：比如：<code>stop()</code> , <code>suspend()</code> 和 <code>resume()</code>,这些方法已经被 Java 标记为 <code>@Deprecated</code>。我们不应该再使用它们。因为 <code>stop()</code> 会直接把线程停止，这样就没有给足够的事件来处理想要在停止之前保存数据的逻辑，任务嘎然而止，会导致出现数据完整性等问题。</p><p>对于 <code>suspend()</code> 和 <code>resume()</code> 而言，它们的问题在于如果线程调用 <code>suspend()</code> ,它并不会释放锁，就开始进入休眠，但此时有可能扔持有锁，这样就容易导致死锁，因为这把锁在线程被 <code>resume()</code> 之前，是不会释放的。</p><p>正因为有这样的风险，所以 <code>suspend()</code> 和 <code>resume()</code> 组合使用的方式也被废弃了。</p><p>接下来我们来看一下，为什么用 <code>volatile</code> 标记位的停止方法也是错误的？</p><h4 id="22-volatile-修饰标记位使用的场景"><a class="markdownIt-Anchor" href="#22-volatile-修饰标记位使用的场景"></a> 2.2 volatile 修饰标记位使用的场景</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileCanStop</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> canceled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>canceled <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">"是10的倍数。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                num<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VolatileCanStop</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VolatileCanStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span>canceled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如代码所示：声明了一个叫做 <code>VolatileStopThread</code> 的类，它实现了 <code>Runnable</code> 接口，然后在 <code>run()</code> 中进行 <code>while</code> 循环，在循环体中进行了两层判断，首先判断 <code>canceled</code> 变量的值（<code>canceled</code> 变量是一个被 <code>volatile</code> 修饰的初始值为 false 的布尔值），当该值变为 true 时，<code>while</code> 跳出循环，<code>while</code> 第二个判断是 <code>num</code> 值小于 1000000 ，在 <code>while</code> 循环体中，只要是10的倍数，就打印出来，然后 <code>num++</code> 。</p><p>接下来，在 <code>main()</code> 方法中，首先启动线程，然后经过3秒中的时间， 把用 <code>volatile</code> 修饰的布尔值标记位设置为 true，这样，正在运行的线程就会在下一次 <code>while</code> 循环判断中判断出 <code>canceled</code> 的值已经变为 true 了，这样就不再满足 <code>while</code> 的判断条件，跳出整个 <code>while</code> 循环，线程就停止了，这种情况是演示 <code>volatile</code> 修饰的标记位可以正常工作的情况。</p><h4 id="23-volatile-修饰标记位不适用的场景"><a class="markdownIt-Anchor" href="#23-volatile-修饰标记位不适用的场景"></a> 2.3 volatile 修饰标记位不适用的场景</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> canceled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">BlockingQueue</span> storage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span> storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">100000</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>canceled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    storage<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">"是50的倍数,被放到仓库中了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者结束运行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，声明了一个生产者 <code>Producer</code> ，通过 <code>volatile</code> 标记的初始值为 false 的布尔值 <code>canceled</code> 来停止线程。在 <code>run()</code> 方法中， <code>while</code> 的判断语句是 num 是否小于 100000 以及 <code>canceled</code> 是否被标记。<code>while</code> 循环体中判断 <code>num</code> 如果是 50 的倍数就放到 <code>storage</code> 仓库中 ，<code>storage</code> 是生产者与消费者质检通信的存储器，当 <code>num</code> 大于 100000 或被通知停止时，会跳出 <code>while</code> 循环并执行 <code>finally</code> 语句块，告诉大家 『生产者结束运行』</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">BlockingQueue</span> storage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">BlockingQueue</span> storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">needMoreNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.97</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于消费者 <code>Consumer</code> ，它与生产者共用同一个仓库 <code>storage</code> ，并且在方法内通过 <code>needMoreNums()</code> 方法判断是否需要继续使用更多的数字，刚才生产者生产了一些 50 的倍数供消费者使用，消费者是否继续使用数字的判断条件时产生一个随机数并与 0.97 进行比较，大于 0.97 就不在继续使用数字。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayBlockingQueue</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Producer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> producerThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">;</span>        producerThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Consumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>consumer<span class="token punctuation">.</span><span class="token function">needMoreNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumer<span class="token punctuation">.</span>storage<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"被消费了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者不需要更多数据了。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//一旦消费不需要更多数据了，我们应该让生产者也停下来，但是实际情况却停不下来</span>        producer<span class="token punctuation">.</span>canceled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>producer<span class="token punctuation">.</span>canceled<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>main()</code> 函数中，首先创建了生产者/消费者共用的仓库 <code>BlockingQueue storage</code>，仓库容量是 8，并且建立生产者并将生产者放入线程后启动线程，启动后进行 500 毫秒的休眠，这是生产者会阻塞， 500 毫秒后消费者被创建出来，并判断是否需要更多的数字，然后每次消费后休眠 100 毫秒，这样的业务逻辑是有可能出现在实际生产中的。</p><p>当消费者不再需要数据，就会将 <code>canceled</code> 的标记位设置为 true ，理论上此时生产者就会跳出 <code>while</code> 循环，并打印出 『 生产者运行结束』。</p><p>然而结果并不是我们想象的那样，尽管已经把 <code>canceled</code> 设置为 true ， 但生产者仍然没有停止，这是因为在这种情况下，生产者在执行 <code>storage.put(num)</code> 时发生阻塞，在它被唤醒之前是没办法进入下一次循环判断 <code>canceled</code> 的值的，所以这种情况下用 <code>volatile</code> 是没有办法让生产者停下来的，相反如果用 <code>interrupt</code> 语句来中断，即便生产者处理阻塞状态，仍然能够感受到中断信号，并做响应处理。</p><h2 id="三-线程的6中状态的切换"><a class="markdownIt-Anchor" href="#三-线程的6中状态的切换"></a> 三. 线程的6中状态的切换</h2><h3 id="1-线程的6中状态"><a class="markdownIt-Anchor" href="#1-线程的6中状态"></a> 1. 线程的6中状态</h3><p>在 Java 中线程的生命周期中一共有6种状态</p><ul><li>New（新建）</li><li>Runnable（可运行）</li><li>Blocked（被阻塞）</li><li>Waiting（等待）</li><li>Timed Waiting（计时等待）</li><li>Terminated （被终止）</li></ul><p>如果想要确定线程当前的状态，可以通过 getState() 方法，并且线程在任何时刻只可能处于 1 种状态。</p><p>下面我们来逐个介绍线程的 6 种状态：</p><h4 id="11-new-新创建"><a class="markdownIt-Anchor" href="#11-new-新创建"></a> 1.1 New 新创建</h4><img src="/images/java_thread/thread_state_new.png" alt="New" style="background-color:#fff" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/java_thread/thread_state_new.png" class="lozad post-image"><p>New 表示线程被创建但尚未启动的状态：当我们用 new Thread() 新建一个线程时，如果线程没有开始运行 start() 方法，所以也没有开始执行 run() 方法里面的代码，那么此时它的状态就是 New。而一旦线程调用了 start()，它的状态就会从 New 变成 Runnable状态。</p><h4 id="12-runnable-可运行"><a class="markdownIt-Anchor" href="#12-runnable-可运行"></a> 1.2 Runnable 可运行</h4><img src="/images/java_thread/thread_state_runnable.png" alt="img" style="background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/java_thread/thread_state_runnable.png" class="lozad post-image"><p>Java 中的 Runable 状态对应操作系统线程状态中的两种状态，分别是 Running 和 Ready，也就是说，Java 中处于 Runnable 状态的线程有可能正在执行，也有可能没有正在执行，正在等待被分配 CPU 资源。</p><p>所以，如果一个正在运行的线程是 Runnable 状态，当它运行到任务的一半时，执行该线程的 CPU 被调度去做其他事情，导致该线程暂时不运行，它的状态依然不变，还是 Runnable，因为它有可能随时被调度回来继续执行任务。</p><h4 id="13-blocked-阻塞状态"><a class="markdownIt-Anchor" href="#13-blocked-阻塞状态"></a> 1.3 Blocked 阻塞状态</h4><img src="/images/java_thread/thread_state_blocked.png" alt="img" style="background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/java_thread/thread_state_blocked.png" class="lozad post-image"><p>从 Runnable 状态进入 Blocked 状态只有一种可能，就是进入 synchronized 保护的代码时没有抢到 monitor 锁，无论是进入 synchronized 代码块，还是 synchronized 方法；当处于 Blocked 的线程抢到 monitor 锁，就会从 Blocked 状态回到Runnable 状态。</p><h4 id="14-waiting-等待"><a class="markdownIt-Anchor" href="#14-waiting-等待"></a> 1.4 Waiting 等待</h4><img src="/images/java_thread/thread_state_waiting.png" alt="img" style="background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/java_thread/thread_state_waiting.png" class="lozad post-image"><p>线程进入 Waiting 状态有三种可能性。</p><ul><li>没有设置 Timeout 参数的 Object.wait() 方法。</li><li>没有设置 Timeout 参数的 Thread.join() 方法。</li><li>LockSupport.park() 方法。</li></ul><p>刚才强调过，Blocked 仅仅针对 synchronized monitor 锁，可是在 Java 中还有很多其他的锁，比如 ReentrantLock，如果线程在获取这种锁时没有抢到该锁就会进入 Waiting 状态，因为本质上它执行了 LockSupport.park() 方法，所以会进入 Waiting 状态。同样，Object.wait() 和 Thread.join() 也会让线程进入 Waiting 状态。</p><p>Blocked 与 Waiting 的区别是 Blocked 在等待其他线程释放 monitor 锁，而 Waiting 则是在等待某个条件，比如 join 的线程执行完毕，或者是 notify()/notifyAll() 。</p><h4 id="15-timed-waiting-限期等待"><a class="markdownIt-Anchor" href="#15-timed-waiting-限期等待"></a> 1.5 Timed Waiting 限期等待</h4><img src="/images/java_thread/thread_state_timed_waiting.png" alt="img" style="background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/java_thread/thread_state_timed_waiting.png" class="lozad post-image"><p>在 Waiting 上面是 Timed Waiting 状态，这两个状态是非常相似的，区别仅在于有没有时间限制，Timed Waiting 会等待超时，由系统自动唤醒，或者在超时前被唤醒信号唤醒。</p><p>以下情况会让线程进入 Timed Waiting 状态。</p><ul><li>设置了时间参数的 Thread.sleep(long millis) 方法；</li><li>设置了时间参数的 Object.wait(long timeout) 方法；</li><li>设置了时间参数的 Thread.join(long millis) 方法；</li><li>设置了时间参数的 LockSupport.parkNanos(long nanos) 方法和 LockSupport.parkUntil(long deadline) 方法。</li></ul><p><strong>如果其他线程调用 notify() 或 notifyAll()来唤醒它，它会直接进入 Blocked 状态，这是为什么呢？因为唤醒 Waiting 线程的线程如果调用 notify() 或 notifyAll()，要求必须首先持有该 monitor 锁，所以处于 Waiting 状态的线程被唤醒时拿不到该锁，就会进入 Blocked 状态，直到执行了 notify()/notifyAll() 的唤醒它的线程执行完毕并释放 monitor 锁，才可能轮到它去抢夺这把锁，如果它能抢到，就会从 Blocked 状态回到 Runnable 状态。</strong></p><p>同样在 Timed Waiting 中执行 notify() 和 notifyAll() 也是一样的道理，它们会先进入 Blocked 状态，然后抢夺锁成功后，再回到 Runnable 状态。</p><p>当然对于 Timed Waiting 而言，如果它的超时时间到了且能直接获取到锁/join的线程运行结束/被中断/调用了LockSupport.unpark()，会直接恢复到 Runnable 状态，而无需经历 Blocked 状态。</p><h4 id="16-terminated-终止"><a class="markdownIt-Anchor" href="#16-terminated-终止"></a> 1.6 Terminated 终止</h4><img src="/images/java_thread/thread_state_terminated.png" alt="img" style="background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/java_thread/thread_state_terminated.png" class="lozad post-image"><p>要想进入这个Terminated 终止状态有两种可能。</p><ul><li><p>run() 方法执行完毕，线程正常退出。</p></li><li><p>出现一个没有捕获的异常，终止了 run() 方法，最终导致意外终止。</p></li></ul><h3 id="注意点"><a class="markdownIt-Anchor" href="#注意点"></a> 注意点</h3><p>最后我们再看线程转换的两个注意点。</p><ol><li>线程的状态是需要按照箭头方向来走的，比如线程从 New 状态是不可以直接进入 Blocked 状态的，它需要先经历 Runnable 状态。</li><li>线程生命周期不可逆：一旦进入 Runnable 状态就不能回到 New 状态；一旦被终止就不可能再有任何状态的变化。所以一个线程只能有一次 New 和 Terminated 状态，只有处于中间状态才可以相互转换。</li></ol><h2 id="四-waitnotifynotifyall-方法的使用注意事项"><a class="markdownIt-Anchor" href="#四-waitnotifynotifyall-方法的使用注意事项"></a> 四. wait/notify/notifyAll 方法的使用注意事项</h2><p>从以下三个问题入手学习 wait/notify/notifyAll 方法的使用注意事项：</p><ul><li>为什么 wait 方法必须在 synchronized 保护的同步代码中使用？</li><li>为什么 wait/notify/notifyAll 被定义在 Object 类中，而 sleep 定义在 Thread 类中？</li><li>wait/notify 和 sleep 方法的异同？</li></ul><h3 id="1-为什么-wait-方法必须在-synchronized-保护的同步代码中使用"><a class="markdownIt-Anchor" href="#1-为什么-wait-方法必须在-synchronized-保护的同步代码中使用"></a> 1. 为什么 wait 方法必须在 synchronized 保护的同步代码中使用？</h3><p>首先，我们来看看 wait 方法的源码注释是怎么写的。</p><p>“wait method should always be used in a loop:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>condition does not hold<span class="token punctuation">)</span>         obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// Perform action appropriate to condition</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This method should only be called by a thread that is the owner of this object’s monitor.”</p><p>意思是说，在使用 wait 方法时，必须把 wait 方法写在 synchronized 保护的 while 代码块中，并始终判断执行条件是否满足，如果满足就往下继续执行，如果不满足就执行 wait 方法，而在执行 wait 方法之前，必须先持有对象的 monitor 锁，也就是通常所说的 synchronized 锁。那么设计成这样有什么好处呢？</p><p>我们逆向思考这个问题，如果不要求 wait 方法放在 synchronized 保护的同步代码中使用，而是可以随意调用，那么就有可能写出这样的代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BlockingQueue</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">give</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        buffer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Since someone may be waiting in take</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在代码中可以看到有两个方法，give 方法负责往 buffer 中添加数据，添加完之后执行 notify 方法来唤醒之前等待的线程，而 take 方法负责检查整个 buffer 是否为空，如果为空就进入等待，如果不为空就取出一个数据，这是典型的生产者消费者的思想。</p><p>但是这段代码并没有受 synchronized 保护，于是便有可能发生以下场景：</p><ul><li>首先，消费者线程调用 take 方法并判断 buffer.isEmpty 方法是否返回 true，若为 true 代表buffer是空的，则线程希望进入等待，但是在线程调用 wait 方法之前，就被调度器暂停了，所以此时还没来得及执行 wait 方法。</li><li>此时生产者开始运行，执行了整个 give 方法，它往 buffer 中添加了数据，并执行了 notify 方法，但 notify 并没有任何效果，因为消费者线程的 wait 方法没来得及执行，所以没有线程在等待被唤醒。</li><li>此时，刚才被调度器暂停的消费者线程回来继续执行 wait 方法并进入了等待。<br />虽然刚才消费者判断了 buffer.isEmpty 条件，但真正执行 wait 方法时，之前的 buffer.isEmpty 的结果已经过期了，不再符合最新的场景了，因为这里的“判断-执行”不是一个原子操作，它在中间被打断了，是线程不安全的。</li></ul><p>假设这时没有更多的生产者进行生产，消费者便有可能陷入无穷无尽的等待，因为它错过了刚才 give 方法内的 notify 的唤醒。</p><p>我们看到正是因为 wait 方法所在的 take 方法没有被 synchronized 保护，所以它的 while 判断和 wait 方法无法构成原子操作，那么此时整个程序就很容易出错。</p><p>我们把代码改写成源码注释所要求的被 synchronized 保护的同步代码块的形式，代码如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">give</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      buffer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以确保 notify 方法永远不会在 buffer.isEmpty 和 wait 方法之间被调用，提升了程序的安全性。</p><p>另外，wait 方法会释放 monitor 锁，这也要求我们必须首先进入到 synchronized 内持有这把锁。</p><p>这里还存在一个“虚假唤醒”（spurious wakeup）的问题，线程可能在既没有被notify/notifyAll，也没有被中断或者超时的情况下被唤醒，这种唤醒是我们不希望看到的。虽然在实际生产中，虚假唤醒发生的概率很小，但是程序依然需要保证在发生虚假唤醒的时候的正确性，所以就需要采用while循环的结构。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span> <span class="token punctuation">(</span>condition does not hold<span class="token punctuation">)</span>    obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样即便被虚假唤醒了，也会再次检查while里面的条件，如果不满足条件，就会继续wait，也就消除了虚假唤醒的风险。</p><h3 id="2-为什么-waitnotifynotifyall-被定义在-object-类中而-sleep-定义在-thread-类中"><a class="markdownIt-Anchor" href="#2-为什么-waitnotifynotifyall-被定义在-object-类中而-sleep-定义在-thread-类中"></a> 2. 为什么 wait/notify/notifyAll 被定义在 Object 类中，而 sleep 定义在 Thread 类中？</h3><p>为什么 wait/notify/notifyAll 方法被定义在 Object 类中？而 sleep 方法定义在 Thread 类中？主要有两点原因：</p><ul><li>因为 Java 中每个对象都有一把称之为 monitor 监视器的锁，由于每个对象都可以上锁，这就要求在对象头中有一个用来保存锁信息的位置。这个锁是对象级别的，而非线程级别的，wait/notify/notifyAll 也都是锁级别的操作，它们的锁属于对象，所以把它们定义在 Object 类中是最合适，因为 Object 类是所有对象的父类。</li><li>因为如果把 wait/notify/notifyAll 方法定义在 Thread 类中，会带来很大的局限性，比如一个线程可能持有多把锁，以便实现相互配合的复杂逻辑，假设此时 wait 方法定义在 Thread 类中，如何实现让一个线程持有多把锁呢？又如何明确线程等待的是哪把锁呢？既然我们是让当前线程去等待某个对象的锁，自然应该通过操作对象来实现，而不是操作线程。</li></ul><h3 id="3-waitnotify-和-sleep-方法的异同"><a class="markdownIt-Anchor" href="#3-waitnotify-和-sleep-方法的异同"></a> 3. wait/notify 和 sleep 方法的异同</h3><p>对比 wait/notify 和 sleep 方法的异同，主要对比 wait 和 sleep 方法，我们先说相同点：</p><ul><li><p>它们都可以让线程阻塞。</p></li><li><p>它们都可以响应 interrupt 中断：在等待的过程中如果收到中断信号，都可以进行响应，并抛出 InterruptedException 异常。</p></li></ul><p>但是它们也有很多的不同点：</p><ul><li>wait 方法必须在 synchronized 保护的代码中使用，而 sleep 方法并没有这个要求。</li><li>在同步代码中执行 sleep 方法时，并不会释放 monitor 锁，但执行 wait 方法时会主动释放 monitor 锁。</li><li>sleep 方法中会要求必须定义一个时间，时间到期后会主动恢复，而对于没有参数的 wait 方法而言，意味着永久等待，直到被中断或被唤醒才能恢复，它并不会主动恢复。</li><li>wait/notify 是 Object 类的方法，而 sleep 是 Thread 类的方法。</li></ul><h2 id="五-有哪几种实现生产者消费者模式的方法"><a class="markdownIt-Anchor" href="#五-有哪几种实现生产者消费者模式的方法"></a> 五. 有哪几种实现生产者消费者模式的方法</h2><h3 id="51-生产者消费者模式"><a class="markdownIt-Anchor" href="#51-生产者消费者模式"></a> 5.1 生产者消费者模式</h3><p>我们先来看看什么是生产者消费者模式，生产者消费者模式是程序设计中非常常见的一种设计模式，被广泛运用在解耦、消息队列等场景。在现实世界中，我们把生产商品的一方称为生产者，把消费商品的一方称为消费者，有时生产者的生产速度特别快，但消费者的消费速度跟不上，俗称“产能过剩”，又或是多个生产者对应多个消费者时，大家可能会手忙脚乱。如何才能让大家更好地配合呢？这时在生产者和消费者之间就需要一个中介来进行调度，于是便诞生了生产者消费者模式。</p><img src="/images/java_thread/thread_producer_consumer.png" alt="img" style="background-color:#fff;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/java_thread/thread_producer_consumer.png" class="lozad post-image"><p>使用生产者消费者模式通常需要在两者之间增加一个阻塞队列作为媒介，有了媒介之后就相当于有了一个缓冲，平衡了两者的能力，整体的设计如图所示，最上面是阻塞队列，右侧的 1 是生产者线程，<strong>生产者在生产数据后将数据存放在阻塞队列中</strong>，左侧的 2 是消费者线程，<strong>消费者获取阻塞队列中的数据</strong>。而中间的 3 和 4 分别代表生产者消费者之间互相通信的过程，因为无论阻塞队列是满还是空都可能会产生阻塞，<strong>阻塞之后就需要在合适的时机去唤醒被阻塞的线程</strong>。</p><p>那么什么时候阻塞线程需要被唤醒呢？有两种情况:</p><ul><li>第一种情况是当消费者看到阻塞队列为空时，开始进入等待，这时生产者一旦往队列中放入数据，就会通知所有的消费者，唤醒阻塞的消费者线程。</li><li>另一种情况是如果生产者发现队列已经满了，也会被阻塞，而一旦消费者获取数据之后就相当于队列空了一个位置，这时消费者就会通知所有正在阻塞的生产者进行生产。</li></ul><h3 id="52-如何用-blockingqueue-实现生产者消费者模式"><a class="markdownIt-Anchor" href="#52-如何用-blockingqueue-实现生产者消费者模式"></a> 5.2 如何用 BlockingQueue 实现生产者消费者模式</h3><p>我们接下来看如何用 wait/notify/Condition/BlockingQueue 实现生产者消费者模式，先从最简单的 BlockingQueue 开始讲起：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Runnable</span> producer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Runnable</span> consumer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如代码所示，首先，创建了一个 ArrayBlockingQueue 类型的 BlockingQueue，命名为 queue 并将它的容量设置为 10；其次，创建一个简单的生产者，while(true) 循环体中的queue.put() 负责往队列添加数据；然后，创建两个生产者线程并启动；同样消费者也非常简单，while(true) 循环体中的 queue.take() 负责消费数据，同时创建两个消费者线程并启动。为了代码简洁并突出设计思想，代码里省略了 try/catch 检测，我们不纠结一些语法细节。以上便是利用 BlockingQueue 实现生产者消费者模式的代码。虽然代码非常简单，但实际上 ArrayBlockingQueue 已经在背后完成了很多工作，比如队列满了就去阻塞生产者线程，队列有空就去唤醒生产者线程等。</p><h3 id="53-如何用-condition-实现生产者消费者模式"><a class="markdownIt-Anchor" href="#53-如何用-condition-实现生产者消费者模式"></a> 5.3 如何用 Condition 实现生产者消费者模式</h3><p>BlockingQueue 实现生产者消费者模式看似简单，背后却暗藏玄机，我们在掌握这种方法的基础上仍需要掌握更复杂的实现方法。我们接下来看如何在掌握了 BlockingQueue 的基础上利用 Condition 实现生产者消费者模式，它们背后的实现原理非常相似，相当于我们自己实现一个简易版的 BlockingQueue：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBlockingQueueForCondition</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">Condition</span> notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">Condition</span> notFull <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">MyBlockingQueueForCondition</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">=</span> size<span class="token punctuation">;</span>       queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>       lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>           notEmpty<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>       lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token class-name">Object</span> item <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           notFull<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> item<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如代码所示，首先，定义了一个队列变量 queue 并设置最大容量为 16；其次，定义了一个 ReentrantLock 类型的 Lock 锁，并在 Lock 锁的基础上创建两个 Condition，一个是 notEmpty，另一个是 notFull，分别代表队列没有空和没有满的条件；最后，声明了 put 和 take 这两个核心方法。</p><p>因为生产者消费者模式通常是面对多线程的场景，需要一定的同步措施保障线程安全，所以在 put 方法中先将 Lock 锁上，然后，在 while 的条件里检测 queue 是不是已经满了，如果已经满了，则调用 notFull 的 await() 阻塞生产者线程并释放 Lock，如果没有满，则往队列放入数据并利用 notEmpty.signalAll() 通知正在等待的所有消费者并唤醒它们。最后在 finally 中利用 lock.unlock() 方法解锁，把 unlock 方法放在 finally 中是一个基本原则，否则可能会产生无法释放锁的情况。</p><p>下面再来看 take 方法，take 方法实际上是与 put 方法相互对应的，同样是通过 while 检查队列是否为空，如果为空，消费者开始等待，如果不为空则从队列中获取数据并通知生产者队列有空余位置，最后在 finally 中解锁。</p><p>这里需要注意，我们在 take() 方法中使用 while( queue.size() == 0 ) 检查队列状态，而不能用 if( queue.size() == 0 )。为什么呢？大家思考这样一种情况，因为生产者消费者往往是多线程的，我们假设有两个消费者，第一个消费者线程获取数据时，发现队列为空，便进入等待状态；因为第一个线程在等待时会释放 Lock 锁，所以第二个消费者可以进入并执行 if( queue.size() == 0 )，也发现队列为空，于是第二个线程也进入等待；而此时，如果生产者生产了一个数据，便会唤醒两个消费者线程，而两个线程中只有一个线程可以拿到锁，并执行 queue.remove 操作，另外一个线程因为没有拿到锁而卡在被唤醒的地方，而第一个线程执行完操作后会在 finally 中通过 unlock 解锁，而此时第二个线程便可以拿到被第一个线程释放的锁，继续执行操作，也会去调用 queue.remove 操作，然而这个时候队列已经为空了，所以会抛出 NoSuchElementException 异常，这不符合我们的逻辑。而如果用 while 做检查，当第一个消费者被唤醒得到锁并移除数据之后，第二个线程在执行 remove 前仍会进行 while 检查，发现此时依然满足 queue.size() == 0 的条件，就会继续执行 await 方法，避免了获取的数据为 null 或抛出异常的情况。</p><h3 id="54-如何用-waitnotify-实现生产者消费者模式"><a class="markdownIt-Anchor" href="#54-如何用-waitnotify-实现生产者消费者模式"></a> 5.4 如何用 wait/notify 实现生产者消费者模式</h3><p>最后我们再来看看使用 wait/notify 实现生产者消费者模式的方法，实际上实现原理和Condition 是非常类似的，它们是兄弟关系：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyBlockingQueue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> storage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> size<span class="token punctuation">;</span>       storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       storage<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如代码所示，最主要的部分仍是 take 与 put 方法，我们先来看 put 方法，put 方法被 synchronized 保护，while 检查队列是否为满，如果不满就往里放入数据并通过 notifyAll() 唤醒其他线程。同样，take 方法也被 synchronized 修饰，while 检查队列是否为空，如果不为空就获取数据并唤醒其他线程。使用这个 MyBlockingQueue 实现的生产者消费者代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 描述：     wait形式实现生产者消费者模式*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaitStyle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">MyBlockingQueue</span> myBlockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBlockingQueue</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Producer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>myBlockingQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Consumer</span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>myBlockingQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>producer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MyBlockingQueue</span> storage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">MyBlockingQueue</span> storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               storage<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">MyBlockingQueue</span> storage<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">MyBlockingQueue</span> storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>               storage<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是三种实现生产者消费者模式的示例，其中，第一种 BlockingQueue 模式实现比较简单，但其背后的实现原理在第二种、第三种实现方法中得以体现，第二种、第三种实现方法本质上是我们自己实现了 BlockingQueue 的一些核心逻辑，供生产者与消费者使用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Glide-4.11.0 浅析</title>
      <link href="20200403/android-ndk/glide-4.11.0-qian-xi/"/>
      <url>20200403/android-ndk/glide-4.11.0-qian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="glide-4110-浅析"><a class="markdownIt-Anchor" href="#glide-4110-浅析"></a> Glide-4.11.0 浅析</h1><p>Glide 是Google推荐使用的图片加载框架，在开发过程中我们也会经常使用到，使用起来也比较简单，一般一行代码就可以完成图片加载；如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Glide</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>mThumbIv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>mThumbIv<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>今天我们来阅读一下Glide的源码，了解一下Glide 加载图标的原理，我们今天阅读的Glide源码是Glide:4.11.0版本的，是当前最新版本。源码获取地址为 <code>https://github.com/bumptech/glide/releases/tag/v4.11.0</code>。</p><p>源码的阅读，是比较枯燥的；但是掌握了阅读代码的方法之后，一个人，一杯茶，一个电脑，也是一种特别的享受。</p><p>开始阅读代码</p><p>上面说了Glide加载的方法，一般使用时，在load之前，我们还会有其他的一些设置想，但是总体来说Glide加载图片就可以分为三步，第一步：<code>with</code>,第二步：<code>load</code>,第三步：<code>into</code>，接下来我们就从这三步来阅读代码</p><h3 id="1-with"><a class="markdownIt-Anchor" href="#1-with"></a> 1. with</h3><p><code>Glide.with(context)</code> ;<code>with</code>是Glide类的静态方法，在 Glide类中有多个<code>with</code>方法的重载，代码如下：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@NonNullpublic static RequestManager with(@NonNull Context context) &#123;  return getRetriever(context).get(context);&#125;@NonNullpublic static RequestManager with(@NonNull Activity activity) &#123;  return getRetriever(activity).get(activity);&#125;@NonNullpublic static RequestManager with(@NonNull FragmentActivity activity) &#123;  return getRetriever(activity).get(activity);&#125;@NonNullpublic static RequestManager with(@NonNull androidx.fragment.app.Fragment fragment) &#123;  return getRetriever(fragment.getContext()).get(fragment);&#125;@SuppressWarnings(&quot;deprecation&quot;)@Deprecated@NonNullpublic static RequestManager with(@NonNull android.app.Fragment fragment) &#123;  return getRetriever(fragment.getActivity()).get(fragment);&#125;@NonNullpublic static RequestManager with(@NonNull View view) &#123;  return getRetriever(view.getContext()).get(view);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面代码中，我们可以看到，在调用<code>Glide.with</code>方法时，我们可以传入的参数有Context,Activity,FragmentActivity,androidx包下的Fragment和android包下的Fragment,View,无论传入什么参数，最终都调用了<code>getRetriever().get()</code>方法来返回了<code>RequestManager</code>对象;</p><p>我们来看一下 <code>getRetriever()</code>方法的源码，</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@NonNullprivate static RequestManagerRetriever getRetriever(@Nullable Context context) &#123;  &#x2F;&#x2F; Context could be null for other reasons (ie the user passes in null), but in practice it will  &#x2F;&#x2F; only occur due to errors with the Fragment lifecycle.  Preconditions.checkNotNull(      context,      &quot;You cannot start a load on a not yet attached View or a Fragment where getActivity() &quot;          + &quot;returns null (which usually occurs when getActivity() is called before the Fragment &quot;          + &quot;is attached or after the Fragment is destroyed).&quot;);  return Glide.get(context).getRequestManagerRetriever();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>getRetriever()</code>方法时通过调用Glide 类的get()方法来获取Glide的单例对象。然后通过初始化之后的Glide对象，获取<code>RequestManagerRetriever</code>对象；所以<code>getRetriever()</code>方法最终返回了一个<code>RequestManagerRetriever</code>对象。</p><p><code>with</code> 方法中，在调用<code>getRetriever()</code>方法，拿到<code>RequestManagerRetriever</code>对象之后，调用了他的get()方法。传入了with方法传入的参数。我们来看一下<code>RequestManagerRetriever</code>对象中的get方法：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public RequestManagerRetriever(@Nullable RequestManagerFactory factory) &#123;    this.factory &#x3D; factory !&#x3D; null ? factory : DEFAULT_FACTORY;    handler &#x3D; new Handler(Looper.getMainLooper(), this &#x2F;* Callback *&#x2F;);  &#125;  @NonNull  private RequestManager getApplicationManager(@NonNull Context context) &#123;    &#x2F;&#x2F; Either an application context or we&#39;re on a background thread.    if (applicationManager &#x3D;&#x3D; null) &#123;      synchronized (this) &#123;        if (applicationManager &#x3D;&#x3D; null) &#123;          &#x2F;&#x2F; Normally pause&#x2F;resume is taken care of by the fragment we add to the fragment or          &#x2F;&#x2F; activity. However, in this case since the manager attached to the application will not          &#x2F;&#x2F; receive lifecycle events, we must force the manager to start resumed using          &#x2F;&#x2F; ApplicationLifecycle.          &#x2F;&#x2F; TODO(b&#x2F;27524013): Factor out this Glide.get() call.          Glide glide &#x3D; Glide.get(context.getApplicationContext());          applicationManager &#x3D;              factory.build(                  glide,                  new ApplicationLifecycle(),                  new EmptyRequestManagerTreeNode(),                  context.getApplicationContext());        &#125;      &#125;    &#125;    return applicationManager;  &#125;  @NonNull  public RequestManager get(@NonNull Context context) &#123;    if (context &#x3D;&#x3D; null) &#123;      throw new IllegalArgumentException(&quot;You cannot start a load on a null Context&quot;);    &#125; else if (Util.isOnMainThread() &amp;&amp; !(context instanceof Application)) &#123;      if (context instanceof FragmentActivity) &#123;        return get((FragmentActivity) context);      &#125; else if (context instanceof Activity) &#123;        return get((Activity) context);      &#125; else if (context instanceof ContextWrapper          &#x2F;&#x2F; Only unwrap a ContextWrapper if the baseContext has a non-null application context.          &#x2F;&#x2F; Context#createPackageContext may return a Context without an Application instance,          &#x2F;&#x2F; in which case a ContextWrapper may be used to attach one.          &amp;&amp; ((ContextWrapper) context).getBaseContext().getApplicationContext() !&#x3D; null) &#123;        return get(((ContextWrapper) context).getBaseContext());      &#125;    &#125;    return getApplicationManager(context);  &#125;  @NonNull  public RequestManager get(@NonNull FragmentActivity activity) &#123;    if (Util.isOnBackgroundThread()) &#123;      return get(activity.getApplicationContext());    &#125; else &#123;      assertNotDestroyed(activity);      FragmentManager fm &#x3D; activity.getSupportFragmentManager();      return supportFragmentGet(activity, fm, &#x2F;*parentHint&#x3D;*&#x2F; null, isActivityVisible(activity));    &#125;  &#125;  @NonNull  public RequestManager get(@NonNull Fragment fragment) &#123;    Preconditions.checkNotNull(        fragment.getContext(),        &quot;You cannot start a load on a fragment before it is attached or after it is destroyed&quot;);    if (Util.isOnBackgroundThread()) &#123;      return get(fragment.getContext().getApplicationContext());    &#125; else &#123;      FragmentManager fm &#x3D; fragment.getChildFragmentManager();      return supportFragmentGet(fragment.getContext(), fm, fragment, fragment.isVisible());    &#125;  &#125;  @SuppressWarnings(&quot;deprecation&quot;)  @NonNull  public RequestManager get(@NonNull Activity activity) &#123;    if (Util.isOnBackgroundThread()) &#123;      return get(activity.getApplicationContext());    &#125; else &#123;      assertNotDestroyed(activity);      android.app.FragmentManager fm &#x3D; activity.getFragmentManager();      return fragmentGet(activity, fm, &#x2F;*parentHint&#x3D;*&#x2F; null, isActivityVisible(activity));    &#125;  &#125;  @SuppressWarnings(&quot;deprecation&quot;)  @NonNull  public RequestManager get(@NonNull View view) &#123;    if (Util.isOnBackgroundThread()) &#123;      return get(view.getContext().getApplicationContext());    &#125;    Preconditions.checkNotNull(view);    Preconditions.checkNotNull(        view.getContext(), &quot;Unable to obtain a request manager for a view without a Context&quot;);    Activity activity &#x3D; findActivity(view.getContext());    &#x2F;&#x2F; The view might be somewhere else, like a service.    if (activity &#x3D;&#x3D; null) &#123;      return get(view.getContext().getApplicationContext());    &#125;    if (activity instanceof FragmentActivity) &#123;      Fragment fragment &#x3D; findSupportFragment(view, (FragmentActivity) activity);      return fragment !&#x3D; null ? get(fragment) : get((FragmentActivity) activity);    &#125;    &#x2F;&#x2F; Standard Fragments.    android.app.Fragment fragment &#x3D; findFragment(view, activity);    if (fragment &#x3D;&#x3D; null) &#123;      return get(activity);    &#125;    return get(fragment);  &#125;  private static void findAllSupportFragmentsWithViews(      @Nullable Collection&lt;Fragment&gt; topLevelFragments, @NonNull Map&lt;View, Fragment&gt; result) &#123;    if (topLevelFragments &#x3D;&#x3D; null) &#123;      return;    &#125;    for (Fragment fragment : topLevelFragments) &#123;      &#x2F;&#x2F; getFragment()s in the support FragmentManager may contain null values, see #1991.      if (fragment &#x3D;&#x3D; null || fragment.getView() &#x3D;&#x3D; null) &#123;        continue;      &#125;      result.put(fragment.getView(), fragment);      findAllSupportFragmentsWithViews(fragment.getChildFragmentManager().getFragments(), result);    &#125;  &#125;  @Nullable  private Fragment findSupportFragment(@NonNull View target, @NonNull FragmentActivity activity) &#123;    tempViewToSupportFragment.clear();    findAllSupportFragmentsWithViews(        activity.getSupportFragmentManager().getFragments(), tempViewToSupportFragment);    Fragment result &#x3D; null;    View activityRoot &#x3D; activity.findViewById(android.R.id.content);    View current &#x3D; target;    while (!current.equals(activityRoot)) &#123;      result &#x3D; tempViewToSupportFragment.get(current);      if (result !&#x3D; null) &#123;        break;      &#125;      if (current.getParent() instanceof View) &#123;        current &#x3D; (View) current.getParent();      &#125; else &#123;        break;      &#125;    &#125;    tempViewToSupportFragment.clear();    return result;  &#125;  @SuppressWarnings(&#123;&quot;deprecation&quot;, &quot;DeprecatedIsStillUsed&quot;&#125;)  @Deprecated  @Nullable  private android.app.Fragment findFragment(@NonNull View target, @NonNull Activity activity) &#123;    tempViewToFragment.clear();    findAllFragmentsWithViews(activity.getFragmentManager(), tempViewToFragment);    android.app.Fragment result &#x3D; null;    View activityRoot &#x3D; activity.findViewById(android.R.id.content);    View current &#x3D; target;    while (!current.equals(activityRoot)) &#123;      result &#x3D; tempViewToFragment.get(current);      if (result !&#x3D; null) &#123;        break;      &#125;      if (current.getParent() instanceof View) &#123;        current &#x3D; (View) current.getParent();      &#125; else &#123;        break;      &#125;    &#125;    tempViewToFragment.clear();    return result;  &#125;  &#x2F;&#x2F; TODO: Consider using an accessor class in the support library package to more directly retrieve  &#x2F;&#x2F; non-support Fragments.  @SuppressWarnings(&quot;deprecation&quot;)  @Deprecated  @TargetApi(Build.VERSION_CODES.O)  private void findAllFragmentsWithViews(      @NonNull android.app.FragmentManager fragmentManager,      @NonNull ArrayMap&lt;View, android.app.Fragment&gt; result) &#123;    if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.O) &#123;      for (android.app.Fragment fragment : fragmentManager.getFragments()) &#123;        if (fragment.getView() !&#x3D; null) &#123;          result.put(fragment.getView(), fragment);          findAllFragmentsWithViews(fragment.getChildFragmentManager(), result);        &#125;      &#125;    &#125; else &#123;      findAllFragmentsWithViewsPreO(fragmentManager, result);    &#125;  &#125;  @SuppressWarnings(&quot;deprecation&quot;)  @Deprecated  private void findAllFragmentsWithViewsPreO(      @NonNull android.app.FragmentManager fragmentManager,      @NonNull ArrayMap&lt;View, android.app.Fragment&gt; result) &#123;    int index &#x3D; 0;    while (true) &#123;      tempBundle.putInt(FRAGMENT_INDEX_KEY, index++);      android.app.Fragment fragment &#x3D; null;      try &#123;        fragment &#x3D; fragmentManager.getFragment(tempBundle, FRAGMENT_INDEX_KEY);      &#125; catch (Exception e) &#123;        &#x2F;&#x2F; This generates log spam from FragmentManager anyway.      &#125;      if (fragment &#x3D;&#x3D; null) &#123;        break;      &#125;      if (fragment.getView() !&#x3D; null) &#123;        result.put(fragment.getView(), fragment);        if (VERSION.SDK_INT &gt;&#x3D; VERSION_CODES.JELLY_BEAN_MR1) &#123;          findAllFragmentsWithViews(fragment.getChildFragmentManager(), result);        &#125;      &#125;    &#125;  &#125;  @Nullable  private static Activity findActivity(@NonNull Context context) &#123;    if (context instanceof Activity) &#123;      return (Activity) context;    &#125; else if (context instanceof ContextWrapper) &#123;      return findActivity(((ContextWrapper) context).getBaseContext());    &#125; else &#123;      return null;    &#125;  &#125;  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)  private static void assertNotDestroyed(@NonNull Activity activity) &#123;    if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.JELLY_BEAN_MR1 &amp;&amp; activity.isDestroyed()) &#123;      throw new IllegalArgumentException(&quot;You cannot start a load for a destroyed activity&quot;);    &#125;  &#125;  @SuppressWarnings(&quot;deprecation&quot;)  @Deprecated  @NonNull  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)  public RequestManager get(@NonNull android.app.Fragment fragment) &#123;    if (fragment.getActivity() &#x3D;&#x3D; null) &#123;      throw new IllegalArgumentException(          &quot;You cannot start a load on a fragment before it is attached&quot;);    &#125;    if (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN_MR1) &#123;      return get(fragment.getActivity().getApplicationContext());    &#125; else &#123;      android.app.FragmentManager fm &#x3D; fragment.getChildFragmentManager();      return fragmentGet(fragment.getActivity(), fm, fragment, fragment.isVisible());    &#125;  &#125;  @SuppressWarnings(&quot;deprecation&quot;)  @Deprecated  @NonNull  RequestManagerFragment getRequestManagerFragment(Activity activity) &#123;    return getRequestManagerFragment(        activity.getFragmentManager(), &#x2F;*parentHint&#x3D;*&#x2F; null, isActivityVisible(activity));  &#125;  @SuppressWarnings(&quot;deprecation&quot;)  @NonNull  private RequestManagerFragment getRequestManagerFragment(      @NonNull final android.app.FragmentManager fm,      @Nullable android.app.Fragment parentHint,      boolean isParentVisible) &#123;    RequestManagerFragment current &#x3D; (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);    if (current &#x3D;&#x3D; null) &#123;      current &#x3D; pendingRequestManagerFragments.get(fm);      if (current &#x3D;&#x3D; null) &#123;        current &#x3D; new RequestManagerFragment();        current.setParentFragmentHint(parentHint);        if (isParentVisible) &#123;          current.getGlideLifecycle().onStart();        &#125;        pendingRequestManagerFragments.put(fm, current);        fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();        handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();      &#125;    &#125;    return current;  &#125;  @SuppressWarnings(&#123;&quot;deprecation&quot;, &quot;DeprecatedIsStillUsed&quot;&#125;)  @Deprecated  @NonNull  private RequestManager fragmentGet(      @NonNull Context context,      @NonNull android.app.FragmentManager fm,      @Nullable android.app.Fragment parentHint,      boolean isParentVisible) &#123;    RequestManagerFragment current &#x3D; getRequestManagerFragment(fm, parentHint, isParentVisible);    RequestManager requestManager &#x3D; current.getRequestManager();    if (requestManager &#x3D;&#x3D; null) &#123;      &#x2F;&#x2F; TODO(b&#x2F;27524013): Factor out this Glide.get() call.      Glide glide &#x3D; Glide.get(context);      requestManager &#x3D;          factory.build(              glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);      current.setRequestManager(requestManager);    &#125;    return requestManager;  &#125;  @NonNull  SupportRequestManagerFragment getSupportRequestManagerFragment(      Context context, FragmentManager fragmentManager) &#123;    return getSupportRequestManagerFragment(        fragmentManager, &#x2F;*parentHint&#x3D;*&#x2F; null, isActivityVisible(context));  &#125;  private static boolean isActivityVisible(Context context) &#123;    &#x2F;&#x2F; This is a poor heuristic, but it&#39;s about all we have. We&#39;d rather err on the side of visible    &#x2F;&#x2F; and start requests than on the side of invisible and ignore valid requests.    Activity activity &#x3D; findActivity(context);    return activity &#x3D;&#x3D; null || !activity.isFinishing();  &#125;  @NonNull  private SupportRequestManagerFragment getSupportRequestManagerFragment(      @NonNull final FragmentManager fm, @Nullable Fragment parentHint, boolean isParentVisible) &#123;    SupportRequestManagerFragment current &#x3D;        (SupportRequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);    if (current &#x3D;&#x3D; null) &#123;      current &#x3D; pendingSupportRequestManagerFragments.get(fm);      if (current &#x3D;&#x3D; null) &#123;        current &#x3D; new SupportRequestManagerFragment();        current.setParentFragmentHint(parentHint);        if (isParentVisible) &#123;          current.getGlideLifecycle().onStart();        &#125;        pendingSupportRequestManagerFragments.put(fm, current);        fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();        handler.obtainMessage(ID_REMOVE_SUPPORT_FRAGMENT_MANAGER, fm).sendToTarget();      &#125;    &#125;    return current;  &#125;  @NonNull  private RequestManager supportFragmentGet(      @NonNull Context context,      @NonNull FragmentManager fm,      @Nullable Fragment parentHint,      boolean isParentVisible) &#123;    SupportRequestManagerFragment current &#x3D;        getSupportRequestManagerFragment(fm, parentHint, isParentVisible);    RequestManager requestManager &#x3D; current.getRequestManager();    if (requestManager &#x3D;&#x3D; null) &#123;      &#x2F;&#x2F; TODO(b&#x2F;27524013): Factor out this Glide.get() call.      Glide glide &#x3D; Glide.get(context);      requestManager &#x3D;          factory.build(              glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);      current.setRequestManager(requestManager);    &#125;    return requestManager;  &#125;  @Override  public boolean handleMessage(Message message) &#123;    boolean handled &#x3D; true;    Object removed &#x3D; null;    Object key &#x3D; null;    switch (message.what) &#123;      case ID_REMOVE_FRAGMENT_MANAGER:        android.app.FragmentManager fm &#x3D; (android.app.FragmentManager) message.obj;        key &#x3D; fm;        removed &#x3D; pendingRequestManagerFragments.remove(fm);        break;      case ID_REMOVE_SUPPORT_FRAGMENT_MANAGER:        FragmentManager supportFm &#x3D; (FragmentManager) message.obj;        key &#x3D; supportFm;        removed &#x3D; pendingSupportRequestManagerFragments.remove(supportFm);        break;      default:        handled &#x3D; false;        break;    &#125;    if (handled &amp;&amp; removed &#x3D;&#x3D; null &amp;&amp; Log.isLoggable(TAG, Log.WARN)) &#123;      Log.w(TAG, &quot;Failed to remove expected request manager fragment, manager: &quot; + key);    &#125;    return handled;  &#125;  &#x2F;** Used internally to create &#123;@link RequestManager&#125;s. *&#x2F;  public interface RequestManagerFactory &#123;    @NonNull    RequestManager build(        @NonNull Glide glide,        @NonNull Lifecycle lifecycle,        @NonNull RequestManagerTreeNode requestManagerTreeNode,        @NonNull Context context);  &#125;  private static final RequestManagerFactory DEFAULT_FACTORY &#x3D;      new RequestManagerFactory() &#123;        @NonNull        @Override        public RequestManager build(            @NonNull Glide glide,            @NonNull Lifecycle lifecycle,            @NonNull RequestManagerTreeNode requestManagerTreeNode,            @NonNull Context context) &#123;          return new RequestManager(glide, lifecycle, requestManagerTreeNode, context);        &#125;      &#125;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从第33行，我们可以看到，在该<code>get()</code>方法中，根据<code>Context</code>类型，整体分为两类，一类是非<code>Application</code>的Context，一类是<code>Application</code>的Context，<code>Application</code>的Context，直接执行第7行<code>getApplicationManager(context)</code>方法，来创建和<code>Application</code>同生命周期的<code>RequestManager</code>对象；当应用关闭后，Glide也就停止加载；</p><p>传入非<code>Application</code>的Context，无论实Activity,Fragment,最终都是根据是否是<code>FragmentActivity</code>的子类或者<code>Activity</code>的子类来创建一个隐藏的<code>SupportRequestManagerFragment</code>  或 <code>RequestManagerFragment</code>对象（第302行和第356行），该对象继承自Fragment；来实现对应的Activity的生命周期的控制；当该Activity销毁时，对应的Glide也停止加载。</p><p>总体来说：<code>with</code>方法就是创建一个<code>RequestManager</code> 对象，然后根据传入的context来控制图片加载的生命周期</p><h3 id="2-load"><a class="markdownIt-Anchor" href="#2-load"></a> 2. load</h3><p>接下来我们来看<code>load</code>方法，在上一步中，我们通过<code>with</code>方法，获取到了<code>RequestManager</code> 对象；那么<code>load</code>方法，就在<code>RequestManager</code>类中，我们来看一下<code>RequestManager</code>类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Bitmap</span><span class="token punctuation">></span></span> <span class="token function">asBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">as</span><span class="token punctuation">(</span><span class="token class-name">Bitmap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>DECODE_TYPE_BITMAP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GifDrawable</span><span class="token punctuation">></span></span> <span class="token function">asGif</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">as</span><span class="token punctuation">(</span><span class="token class-name">GifDrawable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>DECODE_TYPE_GIF<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Drawable</span><span class="token punctuation">></span></span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">as</span><span class="token punctuation">(</span><span class="token class-name">Drawable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Drawable</span><span class="token punctuation">></span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bitmap</span> bitmap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Drawable</span><span class="token punctuation">></span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Drawable</span> drawable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Drawable</span><span class="token punctuation">></span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Drawable</span><span class="token punctuation">></span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Uri</span> uri<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Drawable</span><span class="token punctuation">></span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Drawable</span><span class="token punctuation">></span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RawRes</span> <span class="token annotation punctuation">@DrawableRes</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Integer</span> resourceId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resourceId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@CheckResult</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Deprecated</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Drawable</span><span class="token punctuation">></span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Drawable</span><span class="token punctuation">></span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Drawable</span><span class="token punctuation">></span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">></span></span> <span class="token function">downloadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">as</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>DOWNLOAD_ONLY_OPTIONS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">></span></span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">downloadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token keyword">public</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">></span></span> <span class="token function">asFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">as</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">skipMemoryCacheOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@CheckResult</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceType</span><span class="token punctuation">></span></span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceType</span><span class="token punctuation">></span></span> <span class="token function">as</span><span class="token punctuation">(</span>    <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceType</span><span class="token punctuation">></span></span> resourceClass<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RequestBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>glide<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> resourceClass<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>RequestManager</code>类中，我们可以看到有很多<code>load</code>方法的重载方法，可以传入不同的图片资源来加载图片资源；在<code>load</code>方法中我们可以看到都是调用了<code>asDrawable()</code>方法返回一个<code>RequestBuilder&lt;Drawable&gt;</code>对象，再调用<code>RequestBuilder&lt;Drawable&gt;</code>对象中的<code>load</code>方法，传入对应的图片资源或地址，进行加载图片；我们来看一下<code>asDrawable()</code> 方法,在第15行，看到<code>asDrawable()</code> 方法中调用了<code>as()</code>方法（第111行）生成了<code>RequestBuilder&lt;Drawable&gt;</code>对象  ，传入了glide对象，当前的   <code>RequestManager</code> 对象，泛型的具体类，和context；  除了<code>asDrawable()</code> 方法，还有三个方法<code>asGif()</code>，<code>asBitmap()</code>和<code>asFile()</code>也调用了<code>as()</code>方法生成了对应类型的<code>RequestBuilder</code>对象。</p><p>可以看到，最终是将图片资源传入到了<code>RequestBuilder&lt;TranscodeType&gt;</code>类中的<code>load</code>方法中，接下来我们看一下<code>RequestBuilder&lt;TranscodeType&gt;</code>类中的<code>load</code>方法:</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java"> public RequestBuilder&lt;TranscodeType&gt; load(@Nullable Bitmap bitmap) &#123;    return loadGeneric(bitmap).apply(diskCacheStrategyOf(DiskCacheStrategy.NONE));  &#125;  public RequestBuilder&lt;TranscodeType&gt; load(@Nullable Drawable drawable) &#123;    return loadGeneric(drawable).apply(diskCacheStrategyOf(DiskCacheStrategy.NONE));  &#125;    public RequestBuilder&lt;TranscodeType&gt; load(@Nullable String string) &#123;    return loadGeneric(string);  &#125;   public RequestBuilder&lt;TranscodeType&gt; load(@Nullable Uri uri) &#123;    return loadGeneric(uri);  &#125;   public RequestBuilder&lt;TranscodeType&gt; load(@Nullable File file) &#123;    return loadGeneric(file);  &#125;  public RequestBuilder&lt;TranscodeType&gt; load(@RawRes @DrawableRes @Nullable Integer resourceId) &#123;    return loadGeneric(resourceId).apply(signatureOf(AndroidResourceSignature.obtain(context)));  &#125;  public RequestBuilder&lt;TranscodeType&gt; load(@Nullable URL url) &#123;    return loadGeneric(url);  &#125;  public RequestBuilder&lt;TranscodeType&gt; load(@Nullable byte[] model) &#123;    RequestBuilder&lt;TranscodeType&gt; result &#x3D; loadGeneric(model);    if (!result.isDiskCacheStrategySet()) &#123;      result &#x3D; result.apply(diskCacheStrategyOf(DiskCacheStrategy.NONE));    &#125;    if (!result.isSkipMemoryCacheSet()) &#123;      result &#x3D; result.apply(skipMemoryCacheOf(true &#x2F;*skipMemoryCache*&#x2F;));    &#125;    return result;  &#125;  public RequestBuilder&lt;TranscodeType&gt; load(@Nullable Object model) &#123;  return loadGeneric(model);&#125;@NonNullprivate RequestBuilder&lt;TranscodeType&gt; loadGeneric(@Nullable Object model) &#123;  this.model &#x3D; model;  isModelSet &#x3D; true;  return this;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在<code>load</code>方法中都调用了该类中的<code>loadGeneric</code>方法，传入了<code>Object</code>类型的<code>model</code>参数，这个<code>model</code>参数就是我吗传入的图片资源或者图片地址；看到这里，我们是不是有点疑惑，在<code>load</code>方法中调用了<code>loadGeneric</code>方法赋值后，返回<code>RequestBuilder&lt;TranscodeType&gt;</code>对象，Glide的<code>load</code>方法到这里就结束了他的工作。</p><h3 id="3-into"><a class="markdownIt-Anchor" href="#3-into"></a> 3. into</h3><p>在上面的<code>with</code>和<code>load</code>方法中，我们还没有看到真正的图片加载和显示的代码，所以，可以想到，图片的加载和显示，都是通过<code>into</code>方法来调用执行的，所以，<code>into</code>方法是相对比较难分析的一个方法；接下来我们就一起看一下<code>into</code>方法所承担的重要职责。</p><p>执行完<code>load</code>方法，我们获得了<code>RequestBuilder&lt;TranscodeType&gt;</code>对象，所以，into方法，就在<code>RequestBuilder&lt;TranscodeType&gt;</code>类中，我们一起看一张这个类：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class RequestBuilder&lt;TranscodeType&gt; extends BaseRequestOptions&lt;RequestBuilder&lt;TranscodeType&gt;&gt;    implements Cloneable, ModelTypes&lt;RequestBuilder&lt;TranscodeType&gt;&gt; &#123;  @NonNullpublic &lt;Y extends Target&lt;TranscodeType&gt;&gt; Y into(@NonNull Y target) &#123;  return into(target, &#x2F;*targetListener&#x3D;*&#x2F; null, Executors.mainThreadExecutor());&#125;@NonNull@Synthetic&lt;Y extends Target&lt;TranscodeType&gt;&gt; Y into(    @NonNull Y target,    @Nullable RequestListener&lt;TranscodeType&gt; targetListener,    Executor callbackExecutor) &#123;  return into(target, targetListener, &#x2F;*options&#x3D;*&#x2F; this, callbackExecutor);&#125;private &lt;Y extends Target&lt;TranscodeType&gt;&gt; Y into(    @NonNull Y target,    @Nullable RequestListener&lt;TranscodeType&gt; targetListener,    BaseRequestOptions&lt;?&gt; options,    Executor callbackExecutor) &#123;  Preconditions.checkNotNull(target);  if (!isModelSet) &#123;    throw new IllegalArgumentException(&quot;You must call #load() before calling #into()&quot;);  &#125;  Request request &#x3D; buildRequest(target, targetListener, options, callbackExecutor);  Request previous &#x3D; target.getRequest();  if (request.isEquivalentTo(previous)      &amp;&amp; !isSkipMemoryCacheWithCompletePreviousRequest(options, previous)) &#123;    if (!Preconditions.checkNotNull(previous).isRunning()) &#123;      previous.begin();    &#125;    return target;  &#125;  requestManager.clear(target);  target.setRequest(request);  requestManager.track(target, request);  return target;&#125;private boolean isSkipMemoryCacheWithCompletePreviousRequest(    BaseRequestOptions&lt;?&gt; options, Request previous) &#123;  return !options.isMemoryCacheable() &amp;&amp; previous.isComplete();&#125;@NonNullpublic ViewTarget&lt;ImageView, TranscodeType&gt; into(@NonNull ImageView view) &#123;  Util.assertMainThread();  Preconditions.checkNotNull(view);  BaseRequestOptions&lt;?&gt; requestOptions &#x3D; this;  if (!requestOptions.isTransformationSet()      &amp;&amp; requestOptions.isTransformationAllowed()      &amp;&amp; view.getScaleType() !&#x3D; null) &#123;    switch (view.getScaleType()) &#123;      case CENTER_CROP:        requestOptions &#x3D; requestOptions.clone().optionalCenterCrop();        break;      case CENTER_INSIDE:        requestOptions &#x3D; requestOptions.clone().optionalCenterInside();        break;      case FIT_CENTER:      case FIT_START:      case FIT_END:        requestOptions &#x3D; requestOptions.clone().optionalFitCenter();        break;      case FIT_XY:        requestOptions &#x3D; requestOptions.clone().optionalCenterInside();        break;      case CENTER:      case MATRIX:      default:        &#x2F;&#x2F; Do nothing.    &#125;  &#125;  return into(      glideContext.buildImageViewTarget(view, transcodeClass),      &#x2F;*targetListener&#x3D;*&#x2F; null,      requestOptions,      Executors.mainThreadExecutor());&#125;@Deprecatedpublic FutureTarget&lt;TranscodeType&gt; into(int width, int height) &#123;  return submit(width, height);&#125;@NonNullpublic FutureTarget&lt;TranscodeType&gt; submit() &#123;  return submit(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);&#125;@NonNullpublic FutureTarget&lt;TranscodeType&gt; submit(int width, int height) &#123;  final RequestFutureTarget&lt;TranscodeType&gt; target &#x3D; new RequestFutureTarget&lt;&gt;(width, height);  return into(target, target, Executors.directExecutor());&#125;@NonNullpublic Target&lt;TranscodeType&gt; preload(int width, int height) &#123;  final PreloadTarget&lt;TranscodeType&gt; target &#x3D; PreloadTarget.obtain(requestManager, width, height);  return into(target);&#125;@NonNullpublic Target&lt;TranscodeType&gt; preload() &#123;  return preload(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，我们调用的<code>into</code>方法，是第53行参数为ImageView的方法，在这个方法中根据<code>apply</code>方法中传的<code>RequestOptions</code>对象和图片显示类型<code>scaleType</code>来设置<code>RequestOptions</code>对象（当前对象，RequestBuilder 继承自BaseRequestOptions）的Transform类型。并且通过<code>glideContext.buildImageViewTarget(view, transcodeClass)</code>来创建了一个<code>ViewTarget&lt;ImageView, X&gt;</code>对象（<code>BitmapImageViewTarget(view)</code>或<code>DrawableImageViewTarget(view)</code>）,然后将<code>ViewTarget&lt;ImageView, X&gt;</code>对象，<code>RequestOptions</code>对象和<code>Executors.mainThreadExecutor()</code>（主线程的一个线程执行器，内部有一个主线程的handler对象用了执行runnable对象）传入到第18行的into方法，接下来我们看一下，在这个<code>into</code>方法中做了什么操作。</p><p>在第28行可以看到通过<code>buildRequest(target, targetListener, options, callbackExecutor)</code>方法得到了一个<code>Request</code>对象 <code>request</code>,稍后来看这个方法。继续往下看，第30行，通过传入的<code>target.getRequest()</code>方法也获得了一个<code>Request</code>对象 <code>previous</code>然后判断这两个<code>Request</code>对象是否是同一个请求（判断请求的参数和资源地址），如果是同一个请求，并且未跳过内存缓存完成请求，则<code>target</code>的<code>Request</code>对象开始请求<code>previous.begin();</code></p><p>如果两个<code>Request</code>对象不满足上面的条件，则将该<code>request</code>对象设置给<code>target</code>的<code>Request</code>对象，并且将该<code>request</code>对象通过<code>RequestManager</code>对象的<code>track(target, request)</code>方法，将该<code>request</code>对象添加到请求追踪器<code>RequestTracker</code>对象中进行请求（<code>runRequest(Request request)</code>）；粘一下代码</p><blockquote><p><code>RequestManager</code>对象的<code>track(target, request)</code>方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Target</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> target<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  targetTracker<span class="token punctuation">.</span><span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  requestTracker<span class="token punctuation">.</span><span class="token function">runRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>RequestTracker</code>对象中的<code>runRequest(Request request)</code>方法</p></blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void runRequest(@NonNull Request request) &#123;  requests.add(request);  if (!isPaused) &#123;    request.begin();  &#125; else &#123;    request.clear();    if (Log.isLoggable(TAG, Log.VERBOSE)) &#123;      Log.v(TAG, &quot;Paused, delaying request&quot;);    &#125;    pendingRequests.add(request);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在<code>runRequest(Request request)</code>方法中，先将该请求添加到请求的集合中，并且判断当前是否处于暂停加载的状态，如果不处于暂停加载状态，则执行请求对象的<code>begin()</code>方法开始请求图片，如果处于暂停加载状态，则清除加载列表，并将该请求加入等待请求的队列，待下次重新开始请求时进行请求。</p><p>接下来我们来了解一下<code>buildRequest</code>方法的内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Request</span> <span class="token function">buildRequest</span><span class="token punctuation">(</span>    <span class="token class-name">Target</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TranscodeType</span><span class="token punctuation">></span></span> target<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RequestListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TranscodeType</span><span class="token punctuation">></span></span> targetListener<span class="token punctuation">,</span>    <span class="token class-name">BaseRequestOptions</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> requestOptions<span class="token punctuation">,</span>    <span class="token class-name">Executor</span> callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">buildRequestRecursive</span><span class="token punctuation">(</span>      <span class="token comment">/*requestLock=*/</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      target<span class="token punctuation">,</span>      targetListener<span class="token punctuation">,</span>      <span class="token comment">/*parentCoordinator=*/</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      transitionOptions<span class="token punctuation">,</span>      requestOptions<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      requestOptions<span class="token punctuation">.</span><span class="token function">getOverrideWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      requestOptions<span class="token punctuation">.</span><span class="token function">getOverrideHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      requestOptions<span class="token punctuation">,</span>      callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Request</span> <span class="token function">buildRequestRecursive</span><span class="token punctuation">(</span>    <span class="token class-name">Object</span> requestLock<span class="token punctuation">,</span>    <span class="token class-name">Target</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TranscodeType</span><span class="token punctuation">></span></span> target<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RequestListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TranscodeType</span><span class="token punctuation">></span></span> targetListener<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RequestCoordinator</span> parentCoordinator<span class="token punctuation">,</span>    <span class="token class-name">TransitionOptions</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">TranscodeType</span><span class="token punctuation">></span></span> transitionOptions<span class="token punctuation">,</span>    <span class="token class-name">Priority</span> priority<span class="token punctuation">,</span>    <span class="token keyword">int</span> overrideWidth<span class="token punctuation">,</span>    <span class="token keyword">int</span> overrideHeight<span class="token punctuation">,</span>    <span class="token class-name">BaseRequestOptions</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> requestOptions<span class="token punctuation">,</span>    <span class="token class-name">Executor</span> callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Build the ErrorRequestCoordinator first if necessary so we can update parentCoordinator.</span>  <span class="token class-name">ErrorRequestCoordinator</span> errorRequestCoordinator <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>errorBuilder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    errorRequestCoordinator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorRequestCoordinator</span><span class="token punctuation">(</span>requestLock<span class="token punctuation">,</span> parentCoordinator<span class="token punctuation">)</span><span class="token punctuation">;</span>    parentCoordinator <span class="token operator">=</span> errorRequestCoordinator<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">Request</span> mainRequest <span class="token operator">=</span>      <span class="token function">buildThumbnailRequestRecursive</span><span class="token punctuation">(</span>          requestLock<span class="token punctuation">,</span>          target<span class="token punctuation">,</span>          targetListener<span class="token punctuation">,</span>          parentCoordinator<span class="token punctuation">,</span>          transitionOptions<span class="token punctuation">,</span>          priority<span class="token punctuation">,</span>          overrideWidth<span class="token punctuation">,</span>          overrideHeight<span class="token punctuation">,</span>          requestOptions<span class="token punctuation">,</span>          callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>errorRequestCoordinator <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> mainRequest<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> errorOverrideWidth <span class="token operator">=</span> errorBuilder<span class="token punctuation">.</span><span class="token function">getOverrideWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> errorOverrideHeight <span class="token operator">=</span> errorBuilder<span class="token punctuation">.</span><span class="token function">getOverrideHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">isValidDimensions</span><span class="token punctuation">(</span>overrideWidth<span class="token punctuation">,</span> overrideHeight<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>errorBuilder<span class="token punctuation">.</span><span class="token function">isValidOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    errorOverrideWidth <span class="token operator">=</span> requestOptions<span class="token punctuation">.</span><span class="token function">getOverrideWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    errorOverrideHeight <span class="token operator">=</span> requestOptions<span class="token punctuation">.</span><span class="token function">getOverrideHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">Request</span> errorRequest <span class="token operator">=</span>      errorBuilder<span class="token punctuation">.</span><span class="token function">buildRequestRecursive</span><span class="token punctuation">(</span>          requestLock<span class="token punctuation">,</span>          target<span class="token punctuation">,</span>          targetListener<span class="token punctuation">,</span>          errorRequestCoordinator<span class="token punctuation">,</span>          errorBuilder<span class="token punctuation">.</span>transitionOptions<span class="token punctuation">,</span>          errorBuilder<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          errorOverrideWidth<span class="token punctuation">,</span>          errorOverrideHeight<span class="token punctuation">,</span>          errorBuilder<span class="token punctuation">,</span>          callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>  errorRequestCoordinator<span class="token punctuation">.</span><span class="token function">setRequests</span><span class="token punctuation">(</span>mainRequest<span class="token punctuation">,</span> errorRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> errorRequestCoordinator<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Request</span> <span class="token function">buildThumbnailRequestRecursive</span><span class="token punctuation">(</span>    <span class="token class-name">Object</span> requestLock<span class="token punctuation">,</span>    <span class="token class-name">Target</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TranscodeType</span><span class="token punctuation">></span></span> target<span class="token punctuation">,</span>    <span class="token class-name">RequestListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TranscodeType</span><span class="token punctuation">></span></span> targetListener<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RequestCoordinator</span> parentCoordinator<span class="token punctuation">,</span>    <span class="token class-name">TransitionOptions</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">TranscodeType</span><span class="token punctuation">></span></span> transitionOptions<span class="token punctuation">,</span>    <span class="token class-name">Priority</span> priority<span class="token punctuation">,</span>    <span class="token keyword">int</span> overrideWidth<span class="token punctuation">,</span>    <span class="token keyword">int</span> overrideHeight<span class="token punctuation">,</span>    <span class="token class-name">BaseRequestOptions</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> requestOptions<span class="token punctuation">,</span>    <span class="token class-name">Executor</span> callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>thumbnailBuilder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Recursive case: contains a potentially recursive thumbnail request builder.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isThumbnailBuilt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>          <span class="token string">"You cannot use a request as both the main request and a "</span>              <span class="token operator">+</span> <span class="token string">"thumbnail, consider using clone() on the request(s) passed to thumbnail()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">TransitionOptions</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">TranscodeType</span><span class="token punctuation">></span></span> thumbTransitionOptions <span class="token operator">=</span>        thumbnailBuilder<span class="token punctuation">.</span>transitionOptions<span class="token punctuation">;</span>    <span class="token comment">// Apply our transition by default to thumbnail requests but avoid overriding custom options</span>    <span class="token comment">// that may have been applied on the thumbnail request explicitly.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thumbnailBuilder<span class="token punctuation">.</span>isDefaultTransitionOptionsSet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      thumbTransitionOptions <span class="token operator">=</span> transitionOptions<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Priority</span> thumbPriority <span class="token operator">=</span>        thumbnailBuilder<span class="token punctuation">.</span><span class="token function">isPrioritySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">?</span> thumbnailBuilder<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token function">getThumbnailPriority</span><span class="token punctuation">(</span>priority<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> thumbOverrideWidth <span class="token operator">=</span> thumbnailBuilder<span class="token punctuation">.</span><span class="token function">getOverrideWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> thumbOverrideHeight <span class="token operator">=</span> thumbnailBuilder<span class="token punctuation">.</span><span class="token function">getOverrideHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">isValidDimensions</span><span class="token punctuation">(</span>overrideWidth<span class="token punctuation">,</span> overrideHeight<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>thumbnailBuilder<span class="token punctuation">.</span><span class="token function">isValidOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      thumbOverrideWidth <span class="token operator">=</span> requestOptions<span class="token punctuation">.</span><span class="token function">getOverrideWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thumbOverrideHeight <span class="token operator">=</span> requestOptions<span class="token punctuation">.</span><span class="token function">getOverrideHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">ThumbnailRequestCoordinator</span> coordinator <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ThumbnailRequestCoordinator</span><span class="token punctuation">(</span>requestLock<span class="token punctuation">,</span> parentCoordinator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Request</span> fullRequest <span class="token operator">=</span>        <span class="token function">obtainRequest</span><span class="token punctuation">(</span>            requestLock<span class="token punctuation">,</span>            target<span class="token punctuation">,</span>            targetListener<span class="token punctuation">,</span>            requestOptions<span class="token punctuation">,</span>            coordinator<span class="token punctuation">,</span>            transitionOptions<span class="token punctuation">,</span>            priority<span class="token punctuation">,</span>            overrideWidth<span class="token punctuation">,</span>            overrideHeight<span class="token punctuation">,</span>            callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    isThumbnailBuilt <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// Recursively generate thumbnail requests.</span>    <span class="token class-name">Request</span> thumbRequest <span class="token operator">=</span>        thumbnailBuilder<span class="token punctuation">.</span><span class="token function">buildRequestRecursive</span><span class="token punctuation">(</span>            requestLock<span class="token punctuation">,</span>            target<span class="token punctuation">,</span>            targetListener<span class="token punctuation">,</span>            coordinator<span class="token punctuation">,</span>            thumbTransitionOptions<span class="token punctuation">,</span>            thumbPriority<span class="token punctuation">,</span>            thumbOverrideWidth<span class="token punctuation">,</span>            thumbOverrideHeight<span class="token punctuation">,</span>            thumbnailBuilder<span class="token punctuation">,</span>            callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    isThumbnailBuilt <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    coordinator<span class="token punctuation">.</span><span class="token function">setRequests</span><span class="token punctuation">(</span>fullRequest<span class="token punctuation">,</span> thumbRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> coordinator<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>thumbSizeMultiplier <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Base case: thumbnail multiplier generates a thumbnail request, but cannot recurse.</span>    <span class="token class-name">ThumbnailRequestCoordinator</span> coordinator <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ThumbnailRequestCoordinator</span><span class="token punctuation">(</span>requestLock<span class="token punctuation">,</span> parentCoordinator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Request</span> fullRequest <span class="token operator">=</span>        <span class="token function">obtainRequest</span><span class="token punctuation">(</span>            requestLock<span class="token punctuation">,</span>            target<span class="token punctuation">,</span>            targetListener<span class="token punctuation">,</span>            requestOptions<span class="token punctuation">,</span>            coordinator<span class="token punctuation">,</span>            transitionOptions<span class="token punctuation">,</span>            priority<span class="token punctuation">,</span>            overrideWidth<span class="token punctuation">,</span>            overrideHeight<span class="token punctuation">,</span>            callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BaseRequestOptions</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> thumbnailOptions <span class="token operator">=</span>        requestOptions<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sizeMultiplier</span><span class="token punctuation">(</span>thumbSizeMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Request</span> thumbnailRequest <span class="token operator">=</span>        <span class="token function">obtainRequest</span><span class="token punctuation">(</span>            requestLock<span class="token punctuation">,</span>            target<span class="token punctuation">,</span>            targetListener<span class="token punctuation">,</span>            thumbnailOptions<span class="token punctuation">,</span>            coordinator<span class="token punctuation">,</span>            transitionOptions<span class="token punctuation">,</span>            <span class="token function">getThumbnailPriority</span><span class="token punctuation">(</span>priority<span class="token punctuation">)</span><span class="token punctuation">,</span>            overrideWidth<span class="token punctuation">,</span>            overrideHeight<span class="token punctuation">,</span>            callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    coordinator<span class="token punctuation">.</span><span class="token function">setRequests</span><span class="token punctuation">(</span>fullRequest<span class="token punctuation">,</span> thumbnailRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> coordinator<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Base case: no thumbnail.</span>    <span class="token keyword">return</span> <span class="token function">obtainRequest</span><span class="token punctuation">(</span>        requestLock<span class="token punctuation">,</span>        target<span class="token punctuation">,</span>        targetListener<span class="token punctuation">,</span>        requestOptions<span class="token punctuation">,</span>        parentCoordinator<span class="token punctuation">,</span>        transitionOptions<span class="token punctuation">,</span>        priority<span class="token punctuation">,</span>        overrideWidth<span class="token punctuation">,</span>        overrideHeight<span class="token punctuation">,</span>        callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Request</span> <span class="token function">obtainRequest</span><span class="token punctuation">(</span>    <span class="token class-name">Object</span> requestLock<span class="token punctuation">,</span>    <span class="token class-name">Target</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TranscodeType</span><span class="token punctuation">></span></span> target<span class="token punctuation">,</span>    <span class="token class-name">RequestListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TranscodeType</span><span class="token punctuation">></span></span> targetListener<span class="token punctuation">,</span>    <span class="token class-name">BaseRequestOptions</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> requestOptions<span class="token punctuation">,</span>    <span class="token class-name">RequestCoordinator</span> requestCoordinator<span class="token punctuation">,</span>    <span class="token class-name">TransitionOptions</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">TranscodeType</span><span class="token punctuation">></span></span> transitionOptions<span class="token punctuation">,</span>    <span class="token class-name">Priority</span> priority<span class="token punctuation">,</span>    <span class="token keyword">int</span> overrideWidth<span class="token punctuation">,</span>    <span class="token keyword">int</span> overrideHeight<span class="token punctuation">,</span>    <span class="token class-name">Executor</span> callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token class-name">SingleRequest</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>      context<span class="token punctuation">,</span>      glideContext<span class="token punctuation">,</span>      requestLock<span class="token punctuation">,</span>      model<span class="token punctuation">,</span>      transcodeClass<span class="token punctuation">,</span>      requestOptions<span class="token punctuation">,</span>      overrideWidth<span class="token punctuation">,</span>      overrideHeight<span class="token punctuation">,</span>      priority<span class="token punctuation">,</span>      target<span class="token punctuation">,</span>      targetListener<span class="token punctuation">,</span>      requestListeners<span class="token punctuation">,</span>      requestCoordinator<span class="token punctuation">,</span>      glideContext<span class="token punctuation">.</span><span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      transitionOptions<span class="token punctuation">.</span><span class="token function">getTransitionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在第1行<code>buildRequest()</code>方法中调用了<code>buildRequestRecursive</code>方法（第19行），在该方法中，根据在<code>RequestBuilder</code>类对象中设置的<code>errorBuilder</code>（类型为RequestBuilder<TranscodeType>）来创建不同的<code>Request</code>对象，<code>buildThumbnailRequestRecursive</code>方法中判断是否存在缩略图来创建不同的<code>Request</code>对象（创建一个拥有请求原图的<code>Request</code>对象和请求缩略图的<code>Request</code>对象的<code>ThumbnailRequestCoordinator</code>对象，或者只有单个请求的<code>SingleRequest</code>对象），最终都是执行了<code>Request</code>对象的<code>begin()</code>方法取请求图片资源；在上面的方法中可以看到，多次执行之后，最终大部分都<code>Request</code>对象中包含了<code>SingleRequest</code>对象，其中的<code>begin()</code>方法也是调用了<code>SingleRequest</code>对象中的<code>begin()</code>方法，接下来我们来看一下<code>SingleRequest</code>对象中的<code>begin()</code>方法；分析到现在为止，我们还没有看到请求图片资源的代码，所以猜想<code>SingleRequest</code>对象中的<code>begin()</code>方法接下来应该就是调起网络请求的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>requestLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">assertNotCallingCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stateVerifier<span class="token punctuation">.</span><span class="token function">throwIfRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    startTime <span class="token operator">=</span> <span class="token class-name">LogTime</span><span class="token punctuation">.</span><span class="token function">getLogTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>model <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">isValidDimensions</span><span class="token punctuation">(</span>overrideWidth<span class="token punctuation">,</span> overrideHeight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        width <span class="token operator">=</span> overrideWidth<span class="token punctuation">;</span>        height <span class="token operator">=</span> overrideHeight<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">int</span> logLevel <span class="token operator">=</span> <span class="token function">getFallbackDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">Log</span><span class="token punctuation">.</span>WARN <span class="token operator">:</span> <span class="token class-name">Log</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">;</span>      <span class="token function">onLoadFailed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GlideException</span><span class="token punctuation">(</span><span class="token string">"Received null model"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>RUNNING<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cannot restart a running request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>COMPLETE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">onResourceReady</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> <span class="token class-name">DataSource</span><span class="token punctuation">.</span>MEMORY_CACHE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    status <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>WAITING_FOR_SIZE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">isValidDimensions</span><span class="token punctuation">(</span>overrideWidth<span class="token punctuation">,</span> overrideHeight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">onSizeReady</span><span class="token punctuation">(</span>overrideWidth<span class="token punctuation">,</span> overrideHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      target<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>RUNNING <span class="token operator">||</span> status <span class="token operator">==</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>WAITING_FOR_SIZE<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">canNotifyStatusChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      target<span class="token punctuation">.</span><span class="token function">onLoadStarted</span><span class="token punctuation">(</span><span class="token function">getPlaceholderDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_VERBOSE_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">logV</span><span class="token punctuation">(</span><span class="token string">"finished run method in "</span> <span class="token operator">+</span> <span class="token class-name">LogTime</span><span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onLoadFailed</span><span class="token punctuation">(</span><span class="token class-name">GlideException</span> e<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLogLevel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stateVerifier<span class="token punctuation">.</span><span class="token function">throwIfRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>requestLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">setOrigin</span><span class="token punctuation">(</span>requestOrigin<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> logLevel <span class="token operator">=</span> glideContext<span class="token punctuation">.</span><span class="token function">getLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">&lt;=</span> maxLogLevel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>            GLIDE_TAG<span class="token punctuation">,</span> <span class="token string">"Load failed for "</span> <span class="token operator">+</span> model <span class="token operator">+</span> <span class="token string">" with size ["</span> <span class="token operator">+</span> width <span class="token operator">+</span> <span class="token string">"x"</span> <span class="token operator">+</span> height <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">&lt;=</span> <span class="token class-name">Log</span><span class="token punctuation">.</span>INFO<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          e<span class="token punctuation">.</span><span class="token function">logRootCauses</span><span class="token punctuation">(</span>GLIDE_TAG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      loadStatus <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      status <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>FAILED<span class="token punctuation">;</span>      isCallingCallbacks <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO: what if this is a thumbnail request?</span>        <span class="token keyword">boolean</span> anyListenerHandledUpdatingTarget <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestListeners <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RequestListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> listener <span class="token operator">:</span> requestListeners<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            anyListenerHandledUpdatingTarget <span class="token operator">|=</span>                listener<span class="token punctuation">.</span><span class="token function">onLoadFailed</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> model<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token function">isFirstReadyResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        anyListenerHandledUpdatingTarget <span class="token operator">|=</span>            targetListener <span class="token operator">!=</span> <span class="token keyword">null</span>                <span class="token operator">&amp;&amp;</span> targetListener<span class="token punctuation">.</span><span class="token function">onLoadFailed</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> model<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token function">isFirstReadyResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>anyListenerHandledUpdatingTarget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">setErrorPlaceholder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        isCallingCallbacks <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">notifyLoadFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setErrorPlaceholder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canNotifyStatusChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Drawable</span> error <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>model <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      error <span class="token operator">=</span> <span class="token function">getFallbackDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Either the model isn't null, or there was no fallback drawable set.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      error <span class="token operator">=</span> <span class="token function">getErrorDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// The model isn't null, no fallback drawable was set or no error drawable was set.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      error <span class="token operator">=</span> <span class="token function">getPlaceholderDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    target<span class="token punctuation">.</span><span class="token function">onLoadFailed</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在这个方法里，<code>stateVerifier.throwIfRecycled()</code>,中判断了生命周期，如果没销毁，则抛出异常。</p><p>然后判断了<code>model == null</code>，这里的model就是我们之前传入的图片资源（图片地址），为空的时候，则不需要加载，直接执行<code>onLoadFailed</code>方法，在<code>onLoadFailed</code>方法中则是判断加载的监听器是否处理了<code>onLoadFailed</code>事件，如果没有处理，则设置加载错误的占位图片（第73行），最终则执行target的<code>target.onLoadFailed(error);</code>回调方法将错误占位图显示出来</p><p>当model不为空，继续向下执行，判断了当前状态是否在运行中(第17行)，如果是，抛出异常，如果不是，继续判读状态是否已完成，如果已完成，则执行<code>onResourceReady</code>回调方法（第22行），这个方法我们稍后在看，如果状态不是已完成状态，则继续向下执行，判断宽度和高度是否有效（&gt;0或者为自适应），如果有效执行<code>onSizeReady</code>方法，如果无效，则执行<code>target.getSize(this);</code>方法，重新获取宽度和高度，<code>target.getSize(this)</code>是ViewTarget中的方法，在该方法中获取了当前target的宽度和高度，获取有效宽度和高度之后，回调继续执行<code>onSizeReady</code>方法。这里的cb就是在<code>target.getSize(this);</code>方法中传递过来的this，也就是<code>SingleRequest</code>类对象</p><blockquote><p><code>target.getSize(this)</code> 方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">SizeReadyCallback</span> cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> currentWidth <span class="token operator">=</span> <span class="token function">getTargetWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> currentHeight <span class="token operator">=</span> <span class="token function">getTargetHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isViewStateAndSizeValid</span><span class="token punctuation">(</span>currentWidth<span class="token punctuation">,</span> currentHeight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cb<span class="token punctuation">.</span><span class="token function">onSizeReady</span><span class="token punctuation">(</span>currentWidth<span class="token punctuation">,</span> currentHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// We want to notify callbacks in the order they were added and we only expect one or two</span>  <span class="token comment">// callbacks to be added a time, so a List is a reasonable choice.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cbs<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cbs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutListener <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ViewTreeObserver</span> observer <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    layoutListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SizeDeterminerLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    observer<span class="token punctuation">.</span><span class="token function">addOnPreDrawListener</span><span class="token punctuation">(</span>layoutListener<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>target.getSize(this)</code>最终还是执行了<code>onSizeReady</code>方法，接下来我们看一下在<code>onSizeReady</code>方法中做了什么</p><blockquote><p><code>SingleRequest</code>类对象中的<code>onSizeReady</code>方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSizeReady</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  stateVerifier<span class="token punctuation">.</span><span class="token function">throwIfRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>requestLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_VERBOSE_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">logV</span><span class="token punctuation">(</span><span class="token string">"Got onSizeReady in "</span> <span class="token operator">+</span> <span class="token class-name">LogTime</span><span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>WAITING_FOR_SIZE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    status <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>RUNNING<span class="token punctuation">;</span>    <span class="token keyword">float</span> sizeMultiplier <span class="token operator">=</span> requestOptions<span class="token punctuation">.</span><span class="token function">getSizeMultiplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token function">maybeApplySizeMultiplier</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> sizeMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token function">maybeApplySizeMultiplier</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> sizeMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_VERBOSE_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">logV</span><span class="token punctuation">(</span><span class="token string">"finished setup for calling load in "</span> <span class="token operator">+</span> <span class="token class-name">LogTime</span><span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    loadStatus <span class="token operator">=</span>        engine<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>            glideContext<span class="token punctuation">,</span>            model<span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getResourceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transcodeClass<span class="token punctuation">,</span>            priority<span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getDiskCacheStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getTransformations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">isTransformationRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">isScaleOnlyOrNoTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">isMemoryCacheable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getUseUnlimitedSourceGeneratorsPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getUseAnimationPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getOnlyRetrieveFromCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">,</span>            callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// This is a hack that's only useful for testing right now where loads complete synchronously</span>    <span class="token comment">// even though under any executor running on any thread but the main thread, the load would</span>    <span class="token comment">// have completed asynchronously.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>RUNNING<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      loadStatus <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_VERBOSE_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">logV</span><span class="token punctuation">(</span><span class="token string">"finished onSizeReady in "</span> <span class="token operator">+</span> <span class="token class-name">LogTime</span><span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在第20行，调用了<code>engine.load</code>方法，传入了很多的参数，大部分都是根图片相关的倒数第二款参数this，可前面一样，也是<code>ResourceCallback</code>类型的，用于回调；接下来进入到<code>engine.load</code>方法看一下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">LoadStatus</span> <span class="token function">load</span><span class="token punctuation">(</span>    <span class="token class-name">GlideContext</span> glideContext<span class="token punctuation">,</span>    <span class="token class-name">Object</span> model<span class="token punctuation">,</span>    <span class="token class-name">Key</span> signature<span class="token punctuation">,</span>    <span class="token keyword">int</span> width<span class="token punctuation">,</span>    <span class="token keyword">int</span> height<span class="token punctuation">,</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> resourceClass<span class="token punctuation">,</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> transcodeClass<span class="token punctuation">,</span>    <span class="token class-name">Priority</span> priority<span class="token punctuation">,</span>    <span class="token class-name">DiskCacheStrategy</span> diskCacheStrategy<span class="token punctuation">,</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Transformation</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> transformations<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> isTransformationRequired<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> isScaleOnlyOrNoTransform<span class="token punctuation">,</span>    <span class="token class-name">Options</span> options<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> isMemoryCacheable<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> useUnlimitedSourceExecutorPool<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> useAnimationPool<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> onlyRetrieveFromCache<span class="token punctuation">,</span>    <span class="token class-name">ResourceCallback</span> cb<span class="token punctuation">,</span>    <span class="token class-name">Executor</span> callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">long</span> startTime <span class="token operator">=</span> VERBOSE_IS_LOGGABLE <span class="token operator">?</span> <span class="token class-name">LogTime</span><span class="token punctuation">.</span><span class="token function">getLogTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token class-name">EngineKey</span> key <span class="token operator">=</span>      keyFactory<span class="token punctuation">.</span><span class="token function">buildKey</span><span class="token punctuation">(</span>          model<span class="token punctuation">,</span>          signature<span class="token punctuation">,</span>          width<span class="token punctuation">,</span>          height<span class="token punctuation">,</span>          transformations<span class="token punctuation">,</span>          resourceClass<span class="token punctuation">,</span>          transcodeClass<span class="token punctuation">,</span>          options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> memoryResource<span class="token punctuation">;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    memoryResource <span class="token operator">=</span> <span class="token function">loadFromMemory</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> isMemoryCacheable<span class="token punctuation">,</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>memoryResource <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">waitForExistingOrStartNewJob</span><span class="token punctuation">(</span>          glideContext<span class="token punctuation">,</span>          model<span class="token punctuation">,</span>          signature<span class="token punctuation">,</span>          width<span class="token punctuation">,</span>          height<span class="token punctuation">,</span>          resourceClass<span class="token punctuation">,</span>          transcodeClass<span class="token punctuation">,</span>          priority<span class="token punctuation">,</span>          diskCacheStrategy<span class="token punctuation">,</span>          transformations<span class="token punctuation">,</span>          isTransformationRequired<span class="token punctuation">,</span>          isScaleOnlyOrNoTransform<span class="token punctuation">,</span>          options<span class="token punctuation">,</span>          isMemoryCacheable<span class="token punctuation">,</span>          useUnlimitedSourceExecutorPool<span class="token punctuation">,</span>          useAnimationPool<span class="token punctuation">,</span>          onlyRetrieveFromCache<span class="token punctuation">,</span>          cb<span class="token punctuation">,</span>          callbackExecutor<span class="token punctuation">,</span>          key<span class="token punctuation">,</span>          startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Avoid calling back while holding the engine lock, doing so makes it easier for callers to</span>  <span class="token comment">// deadlock.</span>  cb<span class="token punctuation">.</span><span class="token function">onResourceReady</span><span class="token punctuation">(</span>memoryResource<span class="token punctuation">,</span> <span class="token class-name">DataSource</span><span class="token punctuation">.</span>MEMORY_CACHE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadFromMemory</span><span class="token punctuation">(</span>      <span class="token class-name">EngineKey</span> key<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isMemoryCacheable<span class="token punctuation">,</span> <span class="token keyword">long</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isMemoryCacheable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> active <span class="token operator">=</span> <span class="token function">loadFromActiveResources</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>active <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE_IS_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">logWithTimeAndKey</span><span class="token punctuation">(</span><span class="token string">"Loaded resource from active resources"</span><span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> active<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cached <span class="token operator">=</span> <span class="token function">loadFromCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE_IS_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">logWithTimeAndKey</span><span class="token punctuation">(</span><span class="token string">"Loaded resource from cache"</span><span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> cached<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">logWithTimeAndKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> log<span class="token punctuation">,</span> <span class="token keyword">long</span> startTime<span class="token punctuation">,</span> <span class="token class-name">Key</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> log <span class="token operator">+</span> <span class="token string">" in "</span> <span class="token operator">+</span> <span class="token class-name">LogTime</span><span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms, key: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Nullable</span>  <span class="token keyword">private</span> <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadFromActiveResources</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> active <span class="token operator">=</span> activeResources<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>active <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      active<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> active<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadFromCache</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cached <span class="token operator">=</span> <span class="token function">getEngineResourceFromCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cached<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      activeResources<span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> cached<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cached<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">private</span> <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">getEngineResourceFromCache</span><span class="token punctuation">(</span><span class="token class-name">Key</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Resource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> cached <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token keyword">instanceof</span> <span class="token class-name">EngineResource</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Save an object allocation if we've cached an EngineResource (the typical case).</span>      result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> cached<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span>          <span class="token keyword">new</span> <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>              cached<span class="token punctuation">,</span> <span class="token comment">/*isMemoryCacheable=*/</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">/*isRecyclable=*/</span> <span class="token boolean">true</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token comment">/*listener=*/</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>engine.load</code>方法中，可以看到，第23行，根据传入的请求地址，宽度和高度，签名等其他请求参数，生成了一个<code>EngineKey</code>对象key，这个对象就是用了标识每一个请求，不难想到，如果参数全部相同，则生成的key对象也相同；在第36行中，看到执行了<code>loadFromMemory</code>方法，在该方法中先是通过<code>loadFromActiveResources</code>方法，从内存中查找是否有对象key 的缓存资源，如果有返回；如果没有，则通过<code>loadFromCache</code>方法从缓存中查找是否有对象key的缓存资源，在<code>getEngineResourceFromCache</code>方法中，通过<code>cache.remove(key)</code>方法来获取到一个缓存对象，这里的<code>cahce</code>对象就是<code>LruResourceCache</code>的类对象，是通过<code>LruResourceCache</code>的类对象来缓存资源。</p><p>看完了获取缓存的方法之后，我们回过头来继续看加载的方法，第38行，当获取的缓存为空时，返回了<code>waitForExistingOrStartNewJob</code>方法的结果，我们来看一下<code>waitForExistingOrStartNewJob</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">LoadStatus</span> <span class="token function">waitForExistingOrStartNewJob</span><span class="token punctuation">(</span>    <span class="token class-name">GlideContext</span> glideContext<span class="token punctuation">,</span>    <span class="token class-name">Object</span> model<span class="token punctuation">,</span>    <span class="token class-name">Key</span> signature<span class="token punctuation">,</span>    <span class="token keyword">int</span> width<span class="token punctuation">,</span>    <span class="token keyword">int</span> height<span class="token punctuation">,</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> resourceClass<span class="token punctuation">,</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> transcodeClass<span class="token punctuation">,</span>    <span class="token class-name">Priority</span> priority<span class="token punctuation">,</span>    <span class="token class-name">DiskCacheStrategy</span> diskCacheStrategy<span class="token punctuation">,</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Transformation</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> transformations<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> isTransformationRequired<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> isScaleOnlyOrNoTransform<span class="token punctuation">,</span>    <span class="token class-name">Options</span> options<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> isMemoryCacheable<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> useUnlimitedSourceExecutorPool<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> useAnimationPool<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> onlyRetrieveFromCache<span class="token punctuation">,</span>    <span class="token class-name">ResourceCallback</span> cb<span class="token punctuation">,</span>    <span class="token class-name">Executor</span> callbackExecutor<span class="token punctuation">,</span>    <span class="token class-name">EngineKey</span> key<span class="token punctuation">,</span>    <span class="token keyword">long</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">EngineJob</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> current <span class="token operator">=</span> jobs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> onlyRetrieveFromCache<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    current<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE_IS_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">logWithTimeAndKey</span><span class="token punctuation">(</span><span class="token string">"Added to existing load"</span><span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadStatus</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">EngineJob</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> engineJob <span class="token operator">=</span>      engineJobFactory<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>          key<span class="token punctuation">,</span>          isMemoryCacheable<span class="token punctuation">,</span>          useUnlimitedSourceExecutorPool<span class="token punctuation">,</span>          useAnimationPool<span class="token punctuation">,</span>          onlyRetrieveFromCache<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">DecodeJob</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> decodeJob <span class="token operator">=</span>      decodeJobFactory<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>          glideContext<span class="token punctuation">,</span>          model<span class="token punctuation">,</span>          key<span class="token punctuation">,</span>          signature<span class="token punctuation">,</span>          width<span class="token punctuation">,</span>          height<span class="token punctuation">,</span>          resourceClass<span class="token punctuation">,</span>          transcodeClass<span class="token punctuation">,</span>          priority<span class="token punctuation">,</span>          diskCacheStrategy<span class="token punctuation">,</span>          transformations<span class="token punctuation">,</span>          isTransformationRequired<span class="token punctuation">,</span>          isScaleOnlyOrNoTransform<span class="token punctuation">,</span>          onlyRetrieveFromCache<span class="token punctuation">,</span>          options<span class="token punctuation">,</span>          engineJob<span class="token punctuation">)</span><span class="token punctuation">;</span>  jobs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> engineJob<span class="token punctuation">)</span><span class="token punctuation">;</span>  engineJob<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>  engineJob<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>decodeJob<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE_IS_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">logWithTimeAndKey</span><span class="token punctuation">(</span><span class="token string">"Started new load"</span><span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadStatus</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> engineJob<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面看了<code>load</code>方法中，已经从缓存中取了资源，没有取到，在执行该方法，可想而知，真正的网络请求，则是在该方法中执行的；看到在第24行中，通过jobs对象获取了<code>EngineJob</code>对象current，如果有取到，则说明有正在请求的对象，将回调加入到当前对象中，返回当前请求状态；如果没有取到，则创建一个<code>engineJob</code>对象和一个<code>decodeJob</code>对象；然后为该请求对象添加回调接口对象，并且传入<code>decodeJob</code>进行启动加载（第63行）；看下<code>engineJob.start</code>方法.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">DecodeJob</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> decodeJob<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>decodeJob <span class="token operator">=</span> decodeJob<span class="token punctuation">;</span>  <span class="token class-name">GlideExecutor</span> executor <span class="token operator">=</span>      decodeJob<span class="token punctuation">.</span><span class="token function">willDecodeFromCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> diskCacheExecutor <span class="token operator">:</span> <span class="token function">getActiveSourceExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>decodeJob<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在该方法中根据<code>decodeJob.willDecodeFromCache()</code>获取到了一个<code>GlideExecutor</code>对象，该对象实现了<code>ExecutorService</code>接口类，是一个用了处理请求任务的线程池，在看一下<code>executor.execute(decodeJob)</code>方法需要传入一个<code>Runnable</code>对象，然后我吗回去看<code>DecodeJob</code>类是实现了<code>Runnable</code>接口，所以可以想到上面的<code>engineJob</code>对象是一个处理线程的线程池对象，真正的请求工作是在<code>decodeJob</code>对象的<code>run</code>方法中执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">GlideTrace</span><span class="token punctuation">.</span><span class="token function">beginSectionFormat</span><span class="token punctuation">(</span><span class="token string">"DecodeJob#run(model=%s)"</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">DataFetcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> localFetcher <span class="token operator">=</span> currentFetcher<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isCancelled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">notifyFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">runWrapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CallbackException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">isLoggable</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token class-name">Log</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>          TAG<span class="token punctuation">,</span>          <span class="token string">"DecodeJob threw unexpectedly"</span> <span class="token operator">+</span> <span class="token string">", isCancelled: "</span> <span class="token operator">+</span> isCancelled <span class="token operator">+</span> <span class="token string">", stage: "</span> <span class="token operator">+</span> stage<span class="token punctuation">,</span>          t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stage <span class="token operator">!=</span> <span class="token class-name">Stage</span><span class="token punctuation">.</span>ENCODE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      throwables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">notifyFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isCancelled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">throw</span> t<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localFetcher <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      localFetcher<span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">GlideTrace</span><span class="token punctuation">.</span><span class="token function">endSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">runWrapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>runReason<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> INITIALIZE<span class="token operator">:</span>      stage <span class="token operator">=</span> <span class="token function">getNextStage</span><span class="token punctuation">(</span><span class="token class-name">Stage</span><span class="token punctuation">.</span>INITIALIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>      currentGenerator <span class="token operator">=</span> <span class="token function">getNextGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">runGenerators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> SWITCH_TO_SOURCE_SERVICE<span class="token operator">:</span>      <span class="token function">runGenerators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> DECODE_DATA<span class="token operator">:</span>      <span class="token function">decodeFromRetrievedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unrecognized run reason: "</span> <span class="token operator">+</span> runReason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">DataFetcherGenerator</span> <span class="token function">getNextGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>stage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> RESOURCE_CACHE<span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResourceCacheGenerator</span><span class="token punctuation">(</span>decodeHelper<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> DATA_CACHE<span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataCacheGenerator</span><span class="token punctuation">(</span>decodeHelper<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> SOURCE<span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SourceGenerator</span><span class="token punctuation">(</span>decodeHelper<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FINISHED<span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unrecognized stage: "</span> <span class="token operator">+</span> stage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">runGenerators</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  currentThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  startFetchTime <span class="token operator">=</span> <span class="token class-name">LogTime</span><span class="token punctuation">.</span><span class="token function">getLogTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> isStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isCancelled      <span class="token operator">&amp;&amp;</span> currentGenerator <span class="token operator">!=</span> <span class="token keyword">null</span>      <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>isStarted <span class="token operator">=</span> currentGenerator<span class="token punctuation">.</span><span class="token function">startNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stage <span class="token operator">=</span> <span class="token function">getNextStage</span><span class="token punctuation">(</span>stage<span class="token punctuation">)</span><span class="token punctuation">;</span>    currentGenerator <span class="token operator">=</span> <span class="token function">getNextGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stage <span class="token operator">==</span> <span class="token class-name">Stage</span><span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reschedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stage <span class="token operator">==</span> <span class="token class-name">Stage</span><span class="token punctuation">.</span>FINISHED <span class="token operator">||</span> isCancelled<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isStarted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">notifyFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在<code>run</code>方法中，除了一些判断和释放资源的操作，主要是执行了<code>runWrapped()</code>方法；在<code>runWrapped()</code>方法中，根据不同的<code>runReason</code>,执行了<code>getNextGenerator()</code>和<code>runGenerators()</code>方法，<code>getNextGenerator()</code>方法根据不同的stage生成不同的<code>DataFetcherGenerator</code>对象赋值给<code>currentGenerator</code>；在<code>runGenerators()</code>方法中，循环调用了http请求，来请求图片数据，调用方法为<code>currentGenerator.startNext()</code>，在<code>startNext</code>方法中可以看到<code>loadData.fetcher.loadData()</code>方法来获取图片数据</p><blockquote><p>ResourceCacheGenerator类下的startNext()；第61行</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Key</span><span class="token punctuation">></span></span> sourceIds <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getCacheKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceIds<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> resourceClasses <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getRegisteredResourceClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceClasses<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getTranscodeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>        <span class="token string">"Failed to find any load path from "</span>            <span class="token operator">+</span> helper<span class="token punctuation">.</span><span class="token function">getModelClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token string">" to "</span>            <span class="token operator">+</span> helper<span class="token punctuation">.</span><span class="token function">getTranscodeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>modelLoaders <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">hasNextModelLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    resourceClassIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceClassIndex <span class="token operator">>=</span> resourceClasses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      sourceIdIndex<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceIdIndex <span class="token operator">>=</span> sourceIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      resourceClassIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Key</span> sourceId <span class="token operator">=</span> sourceIds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sourceIdIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> resourceClass <span class="token operator">=</span> resourceClasses<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resourceClassIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Transformation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> transformation <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getTransformation</span><span class="token punctuation">(</span>resourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// PMD.AvoidInstantiatingObjectsInLoops Each iteration is comparatively expensive anyway,</span>    <span class="token comment">// we only run until the first one succeeds, the loop runs for only a limited</span>    <span class="token comment">// number of iterations on the order of 10-20 in the worst case.</span>    currentKey <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ResourceCacheKey</span><span class="token punctuation">(</span> <span class="token comment">// NOPMD AvoidInstantiatingObjectsInLoops</span>            helper<span class="token punctuation">.</span><span class="token function">getArrayPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            sourceId<span class="token punctuation">,</span>            helper<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            helper<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            helper<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transformation<span class="token punctuation">,</span>            resourceClass<span class="token punctuation">,</span>            helper<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cacheFile <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getDiskCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      sourceKey <span class="token operator">=</span> sourceId<span class="token punctuation">;</span>      modelLoaders <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getModelLoaders</span><span class="token punctuation">(</span>cacheFile<span class="token punctuation">)</span><span class="token punctuation">;</span>      modelLoaderIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  loadData <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>started <span class="token operator">&amp;&amp;</span> <span class="token function">hasNextModelLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ModelLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> modelLoader <span class="token operator">=</span> modelLoaders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>modelLoaderIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loadData <span class="token operator">=</span>        modelLoader<span class="token punctuation">.</span><span class="token function">buildLoadData</span><span class="token punctuation">(</span>            cacheFile<span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadData <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> helper<span class="token punctuation">.</span><span class="token function">hasLoadPath</span><span class="token punctuation">(</span>loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">getDataClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> started<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>DataCacheGenerator类下的startNext()；第31行</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>modelLoaders <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">hasNextModelLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sourceIdIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceIdIndex <span class="token operator">>=</span> cacheKeys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Key</span> sourceId <span class="token operator">=</span> cacheKeys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sourceIdIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// PMD.AvoidInstantiatingObjectsInLoops The loop iterates a limited number of times</span>    <span class="token comment">// and the actions it performs are much more expensive than a single allocation.</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"PMD.AvoidInstantiatingObjectsInLoops"</span><span class="token punctuation">)</span>    <span class="token class-name">Key</span> originalKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataCacheKey</span><span class="token punctuation">(</span>sourceId<span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cacheFile <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getDiskCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>originalKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheFile <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sourceKey <span class="token operator">=</span> sourceId<span class="token punctuation">;</span>      modelLoaders <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getModelLoaders</span><span class="token punctuation">(</span>cacheFile<span class="token punctuation">)</span><span class="token punctuation">;</span>      modelLoaderIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  loadData <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>started <span class="token operator">&amp;&amp;</span> <span class="token function">hasNextModelLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ModelLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> modelLoader <span class="token operator">=</span> modelLoaders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>modelLoaderIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loadData <span class="token operator">=</span>        modelLoader<span class="token punctuation">.</span><span class="token function">buildLoadData</span><span class="token punctuation">(</span>            cacheFile<span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadData <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> helper<span class="token punctuation">.</span><span class="token function">hasLoadPath</span><span class="token punctuation">(</span>loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">getDataClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> started<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>SourceGenerator类下的startNext()；第29行</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dataToCache <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> data <span class="token operator">=</span> dataToCache<span class="token punctuation">;</span>    dataToCache <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token function">cacheData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceCacheGenerator <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> sourceCacheGenerator<span class="token punctuation">.</span><span class="token function">startNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  sourceCacheGenerator <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  loadData <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>started <span class="token operator">&amp;&amp;</span> <span class="token function">hasNextModelLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    loadData <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loadDataListIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadData <span class="token operator">!=</span> <span class="token keyword">null</span>        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getDiskCacheStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDataCacheable</span><span class="token punctuation">(</span>loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">||</span> helper<span class="token punctuation">.</span><span class="token function">hasLoadPath</span><span class="token punctuation">(</span>loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">getDataClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token function">startNextLoad</span><span class="token punctuation">(</span>loadData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> started<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startNextLoad</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">LoadData</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> toStart<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span>      helper<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">DataCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDataReady</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCurrentRequest</span><span class="token punctuation">(</span>toStart<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">onDataReadyInternal</span><span class="token punctuation">(</span>toStart<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadFailed</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCurrentRequest</span><span class="token punctuation">(</span>toStart<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">onLoadFailedInternal</span><span class="token punctuation">(</span>toStart<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>loadData.fetcher.loadData()</code>方法中就是用了请求图片数据的，有很多实现类，下面取<code>HttpUrlFetcher</code>类的<code>loadData()</code>方法粘下代码看一下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadData</span><span class="token punctuation">(</span>    <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Priority</span> priority<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">DataCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">InputStream</span><span class="token punctuation">></span></span> callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">LogTime</span><span class="token punctuation">.</span><span class="token function">getLogTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">InputStream</span> result <span class="token operator">=</span> <span class="token function">loadDataWithRedirects</span><span class="token punctuation">(</span>glideUrl<span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> glideUrl<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    callback<span class="token punctuation">.</span><span class="token function">onDataReady</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">isLoggable</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token class-name">Log</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to load data for url"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    callback<span class="token punctuation">.</span><span class="token function">onLoadFailed</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">isLoggable</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token class-name">Log</span><span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Finished http url fetcher fetch in "</span> <span class="token operator">+</span> <span class="token class-name">LogTime</span><span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">InputStream</span> <span class="token function">loadDataWithRedirects</span><span class="token punctuation">(</span>    <span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token keyword">int</span> redirects<span class="token punctuation">,</span> <span class="token class-name">URL</span> lastUrl<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> headers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>redirects <span class="token operator">>=</span> MAXIMUM_REDIRECTS<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span><span class="token string">"Too many (> "</span> <span class="token operator">+</span> MAXIMUM_REDIRECTS <span class="token operator">+</span> <span class="token string">") redirects!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Comparing the URLs using .equals performs additional network I/O and is generally broken.</span>    <span class="token comment">// See http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html.</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lastUrl <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lastUrl<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span><span class="token string">"In re-direct loop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">URISyntaxException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Do nothing, this is best effort.</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  urlConnection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> headerEntry <span class="token operator">:</span> headers<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    urlConnection<span class="token punctuation">.</span><span class="token function">addRequestProperty</span><span class="token punctuation">(</span>headerEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headerEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  urlConnection<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  urlConnection<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  urlConnection<span class="token punctuation">.</span><span class="token function">setUseCaches</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  urlConnection<span class="token punctuation">.</span><span class="token function">setDoInput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Stop the urlConnection instance of HttpUrlConnection from following redirects so that</span>  <span class="token comment">// redirects will be handled by recursive calls to this method, loadDataWithRedirects.</span>  urlConnection<span class="token punctuation">.</span><span class="token function">setInstanceFollowRedirects</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Connect explicitly to avoid errors in decoders if connection fails.</span>  urlConnection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Set the stream so that it's closed in cleanup to avoid resource leaks. See #2352.</span>  stream <span class="token operator">=</span> urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isCancelled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> statusCode <span class="token operator">=</span> urlConnection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isHttpOk</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getStreamForSuccessfulRequest</span><span class="token punctuation">(</span>urlConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isHttpRedirect</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> redirectUrlString <span class="token operator">=</span> urlConnection<span class="token punctuation">.</span><span class="token function">getHeaderField</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>redirectUrlString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span><span class="token string">"Received empty or null redirect url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">URL</span> redirectUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> redirectUrlString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Closing the stream specifically is required to avoid leaking ResponseBodys in addition</span>    <span class="token comment">// to disconnecting the url connection below. See #2352.</span>    <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">loadDataWithRedirects</span><span class="token punctuation">(</span>redirectUrl<span class="token punctuation">,</span> redirects <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> INVALID_STATUS_CODE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span>urlConnection<span class="token punctuation">.</span><span class="token function">getResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>loadDataWithRedirects</code>方法中可以看到网络请求的操作，之后返回请求的数据流；到这里就拿到请求的数据了，然后应该回显到target上</p><p>可以看到在请求的回调方法<code>onDataReady</code>中，调用回调函数<code>cb.onDataFetcherReady()</code>回调到<code>DecodeJob</code>对象中</p><blockquote><p><code>DecodeJob</code>对象中的 <code>onDataFetcherReady()</code>方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDataFetcherReady</span><span class="token punctuation">(</span>    <span class="token class-name">Key</span> sourceKey<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">,</span> <span class="token class-name">DataFetcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> fetcher<span class="token punctuation">,</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span> <span class="token class-name">Key</span> attemptedKey<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentSourceKey <span class="token operator">=</span> sourceKey<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentData <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentFetcher <span class="token operator">=</span> fetcher<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentDataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentAttemptingKey <span class="token operator">=</span> attemptedKey<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> currentThread<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    runReason <span class="token operator">=</span> <span class="token class-name">RunReason</span><span class="token punctuation">.</span>DECODE_DATA<span class="token punctuation">;</span>    callback<span class="token punctuation">.</span><span class="token function">reschedule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">GlideTrace</span><span class="token punctuation">.</span><span class="token function">beginSection</span><span class="token punctuation">(</span><span class="token string">"DecodeJob.decodeFromRetrievedData"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token function">decodeFromRetrievedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">GlideTrace</span><span class="token punctuation">.</span><span class="token function">endSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDataFetcherFailed</span><span class="token punctuation">(</span>    <span class="token class-name">Key</span> attemptedKey<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">,</span> <span class="token class-name">DataFetcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> fetcher<span class="token punctuation">,</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  fetcher<span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">GlideException</span> exception <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlideException</span><span class="token punctuation">(</span><span class="token string">"Fetching data failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  exception<span class="token punctuation">.</span><span class="token function">setLoggingDetails</span><span class="token punctuation">(</span>attemptedKey<span class="token punctuation">,</span> dataSource<span class="token punctuation">,</span> fetcher<span class="token punctuation">.</span><span class="token function">getDataClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  throwables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> currentThread<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    runReason <span class="token operator">=</span> <span class="token class-name">RunReason</span><span class="token punctuation">.</span>SWITCH_TO_SOURCE_SERVICE<span class="token punctuation">;</span>    callback<span class="token punctuation">.</span><span class="token function">reschedule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">runGenerators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">decodeFromRetrievedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">isLoggable</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token class-name">Log</span><span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">logWithTimeAndKey</span><span class="token punctuation">(</span>        <span class="token string">"Retrieved data"</span><span class="token punctuation">,</span>        startFetchTime<span class="token punctuation">,</span>        <span class="token string">"data: "</span>            <span class="token operator">+</span> currentData            <span class="token operator">+</span> <span class="token string">", cache key: "</span>            <span class="token operator">+</span> currentSourceKey            <span class="token operator">+</span> <span class="token string">", fetcher: "</span>            <span class="token operator">+</span> currentFetcher<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">Resource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> resource <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    resource <span class="token operator">=</span> <span class="token function">decodeFromData</span><span class="token punctuation">(</span>currentFetcher<span class="token punctuation">,</span> currentData<span class="token punctuation">,</span> currentDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">GlideException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">setLoggingDetails</span><span class="token punctuation">(</span>currentAttemptingKey<span class="token punctuation">,</span> currentDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    throwables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">notifyEncodeAndRelease</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> currentDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">runGenerators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notifyEncodeAndRelease</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> resource<span class="token punctuation">,</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token keyword">instanceof</span> <span class="token class-name">Initializable</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Initializable</span><span class="token punctuation">)</span> resource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">Resource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> resource<span class="token punctuation">;</span>  <span class="token class-name">LockedResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> lockedResource <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>deferredEncodeManager<span class="token punctuation">.</span><span class="token function">hasResourceToEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    lockedResource <span class="token operator">=</span> <span class="token class-name">LockedResource</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> lockedResource<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">notifyComplete</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  stage <span class="token operator">=</span> <span class="token class-name">Stage</span><span class="token punctuation">.</span>ENCODE<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>deferredEncodeManager<span class="token punctuation">.</span><span class="token function">hasResourceToEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      deferredEncodeManager<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>diskCacheProvider<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lockedResource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      lockedResource<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// Call onEncodeComplete outside the finally block so that it's not called if the encode process</span>  <span class="token comment">// throws.</span>  <span class="token function">onEncodeComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notifyComplete</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> resource<span class="token punctuation">,</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setNotifiedOrThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    callback<span class="token punctuation">.</span><span class="token function">onResourceReady</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>onDataFetcherReady</code>方法中调用<code>decodeFromRetrievedData();</code>方法进行解码图片数据，成功拿到解码后的图片资源数据之后，调用<code>notifyEncodeAndRelease</code>方法将<code>Resource&lt;R&gt;</code>对象封装成<code>LockedResource</code>对象，并调用<code>notifyComplete(result, dataSource);</code>方法，在<code>notifyComplete(result, dataSource);</code>方法中通过<code>callback.onResourceReady(resource, dataSource)</code>将资源数据回调到<code>EngineJob&lt;R&gt;</code>对象中的<code>onResourceReady</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> resource<span class="token punctuation">,</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">=</span> resource<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">notifyCallbacksOfResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadFailed</span><span class="token punctuation">(</span><span class="token class-name">GlideException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>exception <span class="token operator">=</span> e<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">notifyCallbacksOfException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">notifyCallbacksOfResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ResourceCallbacksAndExecutors</span> copy<span class="token punctuation">;</span>    <span class="token class-name">Key</span> localKey<span class="token punctuation">;</span>    <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> localResource<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stateVerifier<span class="token punctuation">.</span><span class="token function">throwIfRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isCancelled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        resource<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cbs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Received a resource without any callbacks to notify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hasResource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Already have resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      engineResource <span class="token operator">=</span> engineResourceFactory<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> isCacheable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> resourceListener<span class="token punctuation">)</span><span class="token punctuation">;</span>      hasResource <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      copy <span class="token operator">=</span> cbs<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">incrementPendingCallbacks</span><span class="token punctuation">(</span>copy<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      localKey <span class="token operator">=</span> key<span class="token punctuation">;</span>      localResource <span class="token operator">=</span> engineResource<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    engineJobListener<span class="token punctuation">.</span><span class="token function">onEngineJobComplete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> localKey<span class="token punctuation">,</span> localResource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ResourceCallbackAndExecutor</span> entry <span class="token operator">:</span> copy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      entry<span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CallResourceReady</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">decrementPendingCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"WeakerAccess"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Synthetic</span>  <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">incrementPendingCallbacks</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Not yet complete!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingCallbacks<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> engineResource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      engineResource<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"WeakerAccess"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Synthetic</span>  <span class="token keyword">void</span> <span class="token function">decrementPendingCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">EngineResource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> toRelease <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stateVerifier<span class="token punctuation">.</span><span class="token function">throwIfRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Not yet complete!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> decremented <span class="token operator">=</span> pendingCallbacks<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span>decremented <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Can't decrement below 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>decremented <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        toRelease <span class="token operator">=</span> engineResource<span class="token punctuation">;</span>        <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>toRelease <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      toRelease<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>EngineJob&lt;R&gt;</code>对象中的<code>onResourceReady</code>方法中通过第45行执行<code>CallResourceReady</code>这个<code>Runnable</code>的实现类，</p><p><code>CallResourceReady</code>实现类如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">CallResourceReady</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ResourceCallback</span> cb<span class="token punctuation">;</span>  <span class="token class-name">CallResourceReady</span><span class="token punctuation">(</span><span class="token class-name">ResourceCallback</span> cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Make sure we always acquire the request lock, then the EngineJob lock to avoid deadlock</span>    <span class="token comment">// (b/136032534).</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">EngineJob</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cbs<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// Acquire for this particular callback.</span>          engineResource<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">callCallbackOnResourceReady</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">removeCallback</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">decrementPendingCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个实现类中的run方法里，调用了<code>EngineJob&lt;R&gt;</code>对象的<code>callCallbackOnResourceReady</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"WeakerAccess"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Synthetic</span><span class="token annotation punctuation">@GuardedBy</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">callCallbackOnResourceReady</span><span class="token punctuation">(</span><span class="token class-name">ResourceCallback</span> cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// This is overly broad, some Glide code is actually called here, but it's much</span>    <span class="token comment">// simpler to encapsulate here than to do so at the actual call point in the</span>    <span class="token comment">// Request implementation.</span>    cb<span class="token punctuation">.</span><span class="token function">onResourceReady</span><span class="token punctuation">(</span>engineResource<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CallbackException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个方法中通过<code>ResourceCallback</code>回调接口类的<code>onResourceReady</code>回调到<code>SingleRequest</code>对象中</p><p>再贴一下<code>SingleRequest</code>对象中的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> resource<span class="token punctuation">,</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  stateVerifier<span class="token punctuation">.</span><span class="token function">throwIfRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Resource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> toRelease <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>requestLock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      loadStatus <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GlideException</span> exception <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">GlideException</span><span class="token punctuation">(</span>                <span class="token string">"Expected to receive a Resource&lt;R> with an "</span>                    <span class="token operator">+</span> <span class="token string">"object of "</span>                    <span class="token operator">+</span> transcodeClass                    <span class="token operator">+</span> <span class="token string">" inside, but instead got null."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onLoadFailed</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">Object</span> received <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>received <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>transcodeClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>received<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        toRelease <span class="token operator">=</span> resource<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">GlideException</span> exception <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">GlideException</span><span class="token punctuation">(</span>                <span class="token string">"Expected to receive an object of "</span>                    <span class="token operator">+</span> transcodeClass                    <span class="token operator">+</span> <span class="token string">" but instead"</span>                    <span class="token operator">+</span> <span class="token string">" got "</span>                    <span class="token operator">+</span> <span class="token punctuation">(</span>received <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> received<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">"&#123;"</span>                    <span class="token operator">+</span> received                    <span class="token operator">+</span> <span class="token string">"&#125; inside"</span>                    <span class="token operator">+</span> <span class="token string">" "</span>                    <span class="token operator">+</span> <span class="token string">"Resource&#123;"</span>                    <span class="token operator">+</span> resource                    <span class="token operator">+</span> <span class="token string">"&#125;."</span>                    <span class="token operator">+</span> <span class="token punctuation">(</span>received <span class="token operator">!=</span> <span class="token keyword">null</span>                        <span class="token operator">?</span> <span class="token string">""</span>                        <span class="token operator">:</span> <span class="token string">" "</span>                            <span class="token operator">+</span> <span class="token string">"To indicate failure return a null Resource "</span>                            <span class="token operator">+</span> <span class="token string">"object, rather than a Resource object containing null data."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onLoadFailed</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canSetResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        toRelease <span class="token operator">=</span> resource<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// We can't put the status to complete before asking canSetResource().</span>        status <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>COMPLETE<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token function">onResourceReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> resource<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">)</span> received<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>toRelease <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      engine<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>toRelease<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Internal &#123;@link #onResourceReady(Resource, DataSource)&#125; where arguments are known to be safe. * * @param resource original &#123;@link Resource&#125;, never &lt;code>null&lt;/code> * @param result object returned by &#123;@link Resource#get()&#125;, checked for type and never &lt;code>null *     &lt;/code> */</span><span class="token annotation punctuation">@GuardedBy</span><span class="token punctuation">(</span><span class="token string">"requestLock"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> resource<span class="token punctuation">,</span> <span class="token class-name">R</span> result<span class="token punctuation">,</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// We must call isFirstReadyResource before setting status.</span>  <span class="token keyword">boolean</span> isFirstResource <span class="token operator">=</span> <span class="token function">isFirstReadyResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  status <span class="token operator">=</span> <span class="token class-name">Status</span><span class="token punctuation">.</span>COMPLETE<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">=</span> resource<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>glideContext<span class="token punctuation">.</span><span class="token function">getLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token class-name">Log</span><span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>        GLIDE_TAG<span class="token punctuation">,</span>        <span class="token string">"Finished loading "</span>            <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token string">" from "</span>            <span class="token operator">+</span> dataSource            <span class="token operator">+</span> <span class="token string">" for "</span>            <span class="token operator">+</span> model            <span class="token operator">+</span> <span class="token string">" with size ["</span>            <span class="token operator">+</span> width            <span class="token operator">+</span> <span class="token string">"x"</span>            <span class="token operator">+</span> height            <span class="token operator">+</span> <span class="token string">"] in "</span>            <span class="token operator">+</span> <span class="token class-name">LogTime</span><span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  isCallingCallbacks <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> anyListenerHandledUpdatingTarget <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestListeners <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RequestListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> listener <span class="token operator">:</span> requestListeners<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        anyListenerHandledUpdatingTarget <span class="token operator">|=</span>            listener<span class="token punctuation">.</span><span class="token function">onResourceReady</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> model<span class="token punctuation">,</span> target<span class="token punctuation">,</span> dataSource<span class="token punctuation">,</span> isFirstResource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    anyListenerHandledUpdatingTarget <span class="token operator">|=</span>        targetListener <span class="token operator">!=</span> <span class="token keyword">null</span>            <span class="token operator">&amp;&amp;</span> targetListener<span class="token punctuation">.</span><span class="token function">onResourceReady</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> model<span class="token punctuation">,</span> target<span class="token punctuation">,</span> dataSource<span class="token punctuation">,</span> isFirstResource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>anyListenerHandledUpdatingTarget<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Transition</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> animation <span class="token operator">=</span> animationFactory<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> isFirstResource<span class="token punctuation">)</span><span class="token punctuation">;</span>      target<span class="token punctuation">.</span><span class="token function">onResourceReady</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> animation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    isCallingCallbacks <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">notifyLoadSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** A callback method that should never be invoked directly. */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadFailed</span><span class="token punctuation">(</span><span class="token class-name">GlideException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">onLoadFailed</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token class-name">Log</span><span class="token punctuation">.</span>WARN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里方法里通过<code>target.onResourceReady</code>回调方法，将请求到数图片数据显示到目标view上。</p><p>至此，Glide加载的原理浅析就完成了，望共勉！</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> glide </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FiveFiveVideoPlayer 一个可以高度自定义的播放器</title>
      <link href="20200320/android-ndk/fivefivevideoplayer-shi-yi-ge-ke-yi-gao-du-zi-ding-yi-de-shi-pin-bo-fang-qi/"/>
      <url>20200320/android-ndk/fivefivevideoplayer-shi-yi-ge-ke-yi-gao-du-zi-ding-yi-de-shi-pin-bo-fang-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="fivefivevideoplayer"><a class="markdownIt-Anchor" href="#fivefivevideoplayer"></a> <a href="https://github.com/onestravel/FiveFiveVideoPlayer">FiveFiveVideoPlayer</a></h1><p>FiveFiveVideoPlayer 是一个可以高度自定义的播放器，手势改变亮度，音量，进度；支持调整倍速；可以轻松实现全屏视频播放，列表视频播放，小窗口视频播放</p><h2 id="1-效果示例"><a class="markdownIt-Anchor" href="#1-效果示例"></a> 1. 效果示例</h2><h3 id="11-效果图"><a class="markdownIt-Anchor" href="#11-效果图"></a> 1.1 效果图</h3><p><img src="/images/2020-03-20/normal_screen.gif" alt="竖屏效果" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/2020-03-20/normal_screen.gif" class="lozad post-image"><br />竖屏效果</p><p><img src="/images/2020-03-20/full_screen.gif" alt="横屏效果" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/2020-03-20/full_screen.gif" class="lozad post-image"></p><p>横屏效果</p><h3 id="12-apk-功能体验"><a class="markdownIt-Anchor" href="#12-apk-功能体验"></a> 1.2 APK 功能体验</h3><p>demo比较粗糙，请勿介意</p><p><a href="https://raw.githubusercontent.com/onestravel/FiveFiveVideoPlayer/master/resources/apk/FiveFivePlayer.apk">APK 下载</a> 安装体验</p><p>扫描二维码图片安装体验（浏览器扫描）</p><p><img src="/images/2020-03-20/FiveFivePlayer_qr_code.png" alt="二维码" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/2020-03-20/FiveFivePlayer_qr_code.png" class="lozad post-image"></p><h2 id="2-快速集成"><a class="markdownIt-Anchor" href="#2-快速集成"></a> 2. 快速集成</h2><p>version:<a href="https://bintray.com/onestravel/fivefive/FiveFiveVideoPlayer"><img src="https://api.bintray.com/packages/onestravel/fivefive/FiveFiveVideoPlayer/images/download.svg" alt="Download" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://api.bintray.com/packages/onestravel/fivefive/FiveFiveVideoPlayer/images/download.svg" class="lozad post-image"></a></p><h3 id="21-gradle-引入version-需要替换为上图对应的版本号"><a class="markdownIt-Anchor" href="#21-gradle-引入version-需要替换为上图对应的版本号"></a> 2.1 gradle 引入（$version 需要替换为上图对应的版本号）</h3><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'cn.onestravel:FiveFiveVideoPlayer:$version'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'cn.onestravel:FiveFiveVideoPlayer:1.0.1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="22-添加权限"><a class="markdownIt-Anchor" href="#22-添加权限"></a> 2.2 添加权限</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="23-使用-fivevideoplayeractivity-播放视频"><a class="markdownIt-Anchor" href="#23-使用-fivevideoplayeractivity-播放视频"></a> 2.3 使用 <code>FiveVideoPlayerActivity</code> 播放视频</h3><p>FiveVideoPlayerActivity 是一个集成播放器的Activity,在只需要播放视频的情况下可直接使用</p><blockquote><p>使用方式：在需要播放视频的地方添加以下代码，开始播放视频</p></blockquote><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> path <span class="token operator">=</span> <span class="token string">"http://vfx.mtime.cn/Video/2019/03/19/mp4/190319212559089721.mp4"</span><span class="token comment">// 传入视频地址开始播放</span>FiveVideoPlayerActivity<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token comment">// 传入视频地址和视频标题开始播放</span>FiveVideoPlayerActivity<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span><span class="token string">"玩具总动员"</span><span class="token punctuation">)</span><span class="token comment">// 传入视频地址和视频标题开始循环播放</span>FiveVideoPlayerActivity<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span><span class="token string">"玩具总动员"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="24-使用-fivevideoplayer-播放视频"><a class="markdownIt-Anchor" href="#24-使用-fivevideoplayer-播放视频"></a> 2.4 使用 <code>FiveVideoPlayer</code> 播放视频</h3><p>FiveVideoPlayer ：集成了视频播放，控制器，顶部标题栏，右侧选择窗口的View，可以直接使用在xml布局中，<br />方便使用视频播放器时根据自己的情况更改视频播放器展示View；<br />可以根据不同的设计方案进行控制器的替换（需实现控制器接口或继承现有控制器类，对需要调整部分进行更改）<br />可以直接使用右侧选择窗口，实现倍速调整（功能已实现）或者 视频质量的切换（该功能暂未实现）</p><blockquote><p>使用方式：</p></blockquote><ul><li>在布局 xml 文件中加入一下代码</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cn.onestravel.fivefiveplayer.FiveVideoPlayer</span>       <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/fiveVideoPlayer<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在Activity 中使用该 View 进行视频播放</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">    <span class="token keyword">fun</span> initData <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> path <span class="token operator">=</span> <span class="token string">"http://vfx.mtime.cn/Video/2019/03/19/mp4/190319212559089721.mp4"</span>        <span class="token keyword">val</span> title <span class="token operator">=</span> <span class="token string">"玩具总动员"</span>        fiveVideoPlayer<span class="token punctuation">.</span><span class="token function">setOnPreparedListener</span> <span class="token punctuation">&#123;</span>                it<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                it<span class="token punctuation">.</span><span class="token function">setVideoDisplayType</span><span class="token punctuation">(</span>PlayerInterface<span class="token punctuation">.</span>VIDEO_DISPLAY_TYPE_FIT_CENTER<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        fiveVideoPlayer<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>title<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        fiveVideoPlayer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>            it<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            it<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> initData <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> path <span class="token operator">=</span> <span class="token string">"http://vfx.mtime.cn/Video/2019/03/19/mp4/190319212559089721.mp4"</span>    <span class="token keyword">val</span> title <span class="token operator">=</span> <span class="token string">"玩具总动员"</span>    <span class="token keyword">val</span> looping <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> mediaDataSource <span class="token operator">=</span> <span class="token function">MediaDataSource</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> looping<span class="token punctuation">)</span>    fiveVideoPlayer<span class="token punctuation">.</span><span class="token function">setOnPreparedListener</span> <span class="token punctuation">&#123;</span>        it<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        it<span class="token punctuation">.</span><span class="token function">setVideoDisplayType</span><span class="token punctuation">(</span>PlayerInterface<span class="token punctuation">.</span>VIDEO_DISPLAY_TYPE_FIT_CENTER<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    fiveVideoPlayer<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>   <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           fiveVideoPlayer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>               it<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               it<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="25-使用-fivevideoview-播放视频"><a class="markdownIt-Anchor" href="#25-使用-fivevideoview-播放视频"></a> 2.5 使用 <code>FiveVideoView</code> 播放视频</h3><p>FiveVideoView ：视频播放的View，无控制栏，标题栏，可设置（单击/双击进行播放，暂停操作）可以直接使用在xml布局中，<br />一般使用在自定义程度比较高的视频播放器中，或者在列表播放中使用；</p><blockquote><p>使用方式：</p></blockquote><ul><li>在布局 xml 文件中加入一下代码</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cn.onestravel.fivefiveplayer.FiveVideoView</span>       <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/fiveVideoView<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@android:color/black<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">app:</span>layout_constraintTop_toTopOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在Activity 中使用该 View 进行视频播放</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> initData <span class="token punctuation">&#123;</span>      <span class="token keyword">val</span> path <span class="token operator">=</span> <span class="token string">"http://vfx.mtime.cn/Video/2019/03/19/mp4/190319212559089721.mp4"</span>    fiveVideoView<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    fiveVideoView<span class="token punctuation">.</span><span class="token function">setOnPreparedListener</span> <span class="token punctuation">&#123;</span>        it<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fiveVideoView<span class="token punctuation">.</span><span class="token function">setVideoDisplayType</span><span class="token punctuation">(</span>PlayerInterface<span class="token punctuation">.</span>VIDEO_DISPLAY_TYPE_FIT_CENTER<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>   <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           fiveVideoPlayer<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>               it<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               it<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-api-文档"><a class="markdownIt-Anchor" href="#3-api-文档"></a> 3. API 文档</h2><p>点击 <a href="https://github.com/onestravel/FiveFiveVideoPlayer/blob/master/API.md">FiveFiveVideoPlayer API 文档</a>查看详细API</p><h2 id="4-版本记录"><a class="markdownIt-Anchor" href="#4-版本记录"></a> 4. 版本记录</h2><blockquote><p>V 1.0.1</p></blockquote><pre><code>1. 实现集成 IJKplayer 内核，可开启硬解码;2. 实现ExoPlayer内核;3. 实现可全局设置播放器内核功能;4. 修复已知bug</code></pre><blockquote><p>V 1.0.0</p></blockquote><pre><code>1. 集成 Media Player 内核2. 实现视频播放View,实现单击/双击进行暂停，播放3. 实现视频播放器View,视频播放器Activity4. 支持手势滑动调整音量，亮度，进度5. 支持自定义视频播放控制器，播放器内含默认视频控制器</code></pre><ul><li>温馨提示：</li></ul><p>在使用过程中，如遇到任何问题，可发送邮件至server@onestravel.cn说明相关问题，我在看到邮件第一时间，会针对相应问题进行沟通解决，谢谢支持！</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> FiveFiveVideoPlayer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OneActionBar 通用标题头</title>
      <link href="20190825/android-ndk/oneactionbar-shi-xian-tong-yong-actionbar/"/>
      <url>20190825/android-ndk/oneactionbar-shi-xian-tong-yong-actionbar/</url>
      
        <content type="html"><![CDATA[<h1 id="oneactionbar"><a class="markdownIt-Anchor" href="#oneactionbar"></a> <a href="https://github.com/onestravel/OneActionBar">OneActionBar</a> 使用说明</h1><p><a href="/en/Android+NDK/OneActionBar%20%E5%AE%9E%E7%8E%B0%E9%80%9A%E7%94%A8ActionBar_en">English Document</a></p><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p><strong>自定义ActionBar，支持属性，java代码方式配置，可实现标题，标题带返回键，搜索，搜索带返回键的ActionBar；配置简单，方便使用，可适应大多数场景。</strong></p><h2 id="效果图"><a class="markdownIt-Anchor" href="#效果图"></a> 效果图</h2><p><img src="images/20190825/image-20190915194738463.png" alt="效果图" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="images/20190825/image-20190915194738463.png" class="lozad post-image"></p><ol><li>标准标题头，背景透明 <code>style=&quot;@style/OneActionBar.Normal&quot;</code></li><li>标准标题头，蓝色背景 <code>style=&quot;@style/OneActionBar.Normal.Blue&quot;</code></li><li>带返回键标题头，透明背景 <code>style=&quot;@style/OneActionBar.Back&quot;</code></li><li>带返回键标题头，蓝色背景 <code>style=&quot;@style/OneActionBar.Back.Blue&quot;</code></li><li>带搜索框标题头，透明背景 <code>style=&quot;@style/OneActionBar.Search&quot;</code></li><li>带搜索框标题头，蓝色背景 ``style=&quot;@style/OneActionBar.Search.Blue&quot;</li><li>搜索框带返回键标题头，透明背景 <code>style=&quot;@style/OneActionBar.Back.Search&quot;</code></li><li>搜索框带返回键标题头，蓝色背景 <code>style=&quot;@style/OneActionBar.Back.Search.Blue&quot;</code></li></ol><h2 id="引入方式"><a class="markdownIt-Anchor" href="#引入方式"></a> 引入方式</h2><p>TAG:     <a href="https://jitpack.io/#onestravel/OneActionBar"><img src="https://jitpack.io/v/onestravel/OneActionBar.svg" alt="" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://jitpack.io/v/onestravel/OneActionBar.svg" class="lozad post-image"></a></p><h4 id="gradle"><a class="markdownIt-Anchor" href="#gradle"></a> gradle</h4><ul><li>在项目中的根目录下的 build.gradle (与model同级的) 中增加如下配置</li></ul><pre class="line-numbers language-none"><code class="language-none">allprojects &#123;repositories &#123;...maven &#123; url &#39;https:&#x2F;&#x2F;jitpack.io&#39; &#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在model 中的build.gradle 中增加依赖</li></ul><pre class="line-numbers language-none"><code class="language-none">dependencies &#123;implementation &#39;com.github.onestravel:OneActionBar:TAG&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="属性说明"><a class="markdownIt-Anchor" href="#属性说明"></a> 属性说明</h2><table><thead><tr><th>属性名</th><th>字段说明</th><th>示例</th></tr></thead><tbody><tr><td>app:barBackColor</td><td>ActionBar 返回键颜色，图标和字体的颜色</td><td>app:barBackColor=&quot;#000000&quot;</td></tr><tr><td>app:barBackIconWidth</td><td>ActionBar 返回键图标的宽度</td><td>app:barBackIconWidth=“25dp”</td></tr><tr><td>app:barBackIconHeight</td><td>ActionBar 返回键图标的高度</td><td>app:barBackIconHeight=“25dp”</td></tr><tr><td>app:barBackText</td><td>ActionBar 返回键文字</td><td>app:barBackText=“返回”</td></tr><tr><td>app:barBackTextSize</td><td>ActionBar 返回键文字大小</td><td>app:barBackTextSize=“13sp”</td></tr><tr><td>app:barTitle</td><td>ActionBar 标题文字</td><td>app:barTitle=“首页”</td></tr><tr><td>app:barTitleColor</td><td>ActionBar 标题文字颜色</td><td>app:barTitleColor=&quot;#000000&quot;</td></tr><tr><td>app:barTitleSize</td><td>ActionBar 标题文字大小</td><td>app:barTitleSize=“22sp”</td></tr><tr><td>app:barType</td><td>ActionBar 样式，总共有四种样式：TYPE_NORMAL(普通样式)、TYPE_BACK(普通带返回键样式)、TYPE_SEARCH(搜索样式)、TYPE_BACK_SEARCH(带返回键搜索样式)、</td><td>app:barType=“TYPE_NORMAL”</td></tr><tr><td>app:barActionBtnColor</td><td>ActionBar 标题右侧操作按钮图标/文字颜色</td><td>app:barActionBtnColor=&quot;#FF0000&quot;</td></tr><tr><td>app:barActionBtnText</td><td>ActionBar 标题右侧操作按钮文字</td><td>app:barActionBtnText=“下一步”</td></tr><tr><td>app:barActionBtnTextSize</td><td>ActionBar 标题右侧操作按钮文字大小</td><td>app:barActionBtnTextSize=“15sp”</td></tr><tr><td>app:barBottomLineWidth</td><td>ActionBar 底部分割线的宽度</td><td>app:barBottomLineWidth=“1dp”</td></tr><tr><td>app:barBottomLineColor</td><td>ActionBar 底部分割线的颜色</td><td>app:barBottomLineColor=&quot;#1a1a1a&quot;</td></tr><tr><td>app:barActionBtnIcon</td><td>ActionBar 标题右侧操作按钮icon</td><td>app:barActionBtnIcon=&quot;@drawable/icon_next&quot;</td></tr><tr><td>app:barActionBtnIconWidth</td><td>ActionBar 标题右侧操作按钮宽度</td><td>app:barActionBtnIconWidth=“25dp”</td></tr><tr><td>app:barActionBtnIconHeight</td><td>ActionBar 标题右侧操作按钮高度</td><td>app:barActionBtnIconHeight=“25dp”</td></tr><tr><td>app:barSearchBackground</td><td>ActionBar 搜索样式背景</td><td>app:barSearchBackground=&quot;#FFFFFF&quot;</td></tr><tr><td>app:barSearchHint</td><td>ActionBar 搜索样式搜索框提示文字</td><td>app:barSearchHint=“请输入搜索内容”</td></tr><tr><td>app:barSearchText</td><td>ActionBar 搜索样式搜索框文字</td><td>app:barSearchText=“今日新闻”</td></tr><tr><td>app:barSearchHintColor</td><td>ActionBar 搜索样式搜索框提示文字颜色</td><td>app:barSearchHintColor=&quot;#E1E1E1&quot;</td></tr><tr><td>app:barSearchTextColor</td><td>ActionBar 搜索样式搜索框文字颜色</td><td>app:barSearchTextColor=&quot;#000000&quot;</td></tr><tr><td>app:barSearchTextSize</td><td>ActionBar 搜索样式搜索框文字大小</td><td>app:barSearchTextSize=“20sp”</td></tr><tr><td>android:background</td><td>ActionBar 背景颜色</td><td>android:background=&quot;#FFFFFF&quot;</td></tr></tbody></table><h2 id="样式说明"><a class="markdownIt-Anchor" href="#样式说明"></a> 样式说明</h2><p>根据图片效果，先自定义样式说明如下</p><p>注：标号对应图片效果数字号码</p><ol><li>标准标题头，背景透明 <code>style=&quot;@style/OneActionBar.Normal&quot;</code></li><li>标准标题头，蓝色背景 <code>style=&quot;@style/OneActionBar.Normal.Blue&quot;</code></li><li>带返回键标题头，透明背景 <code>style=&quot;@style/OneActionBar.Back&quot;</code></li><li>带返回键标题头，蓝色背景 <code>style=&quot;@style/OneActionBar.Back.Blue&quot;</code></li><li>带搜索框标题头，透明背景 <code>style=&quot;@style/OneActionBar.Search&quot;</code></li><li>带搜索框标题头，蓝色背景 ``style=&quot;@style/OneActionBar.Search.Blue&quot;</li><li>搜索框带返回键标题头，透明背景 <code>style=&quot;@style/OneActionBar.Back.Search&quot;</code></li><li>搜索框带返回键标题头，蓝色背景 <code>style=&quot;@style/OneActionBar.Back.Search.Blue&quot;</code></li></ol><h2 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h2><p>1、布局xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cn.onestravel.one.actionbar.OneActionBar</span>        <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/OneActionBar.Back.Blue<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>barActionBtnText</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>下一步<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>barTitle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>调查问卷<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、样式</p><pre class="line-numbers language-Xml" data-language="Xml"><code class="language-Xml">&lt;style name&#x3D;&quot;OneActionBar.Back&quot;&gt;  &lt;item name&#x3D;&quot;barTitleSize&quot;&gt;22sp&lt;&#x2F;item&gt;        &lt;item name&#x3D;&quot;barActionBtnTextSize&quot;&gt;16sp&lt;&#x2F;item&gt;        &lt;item name&#x3D;&quot;barType&quot;&gt;TYPE_BACK&lt;&#x2F;item&gt;        &lt;item name&#x3D;&quot;barBackTextSize&quot;&gt;14sp&lt;&#x2F;item&gt;        &lt;item name&#x3D;&quot;barBackText&quot;&gt;返回&lt;&#x2F;item&gt;&lt;&#x2F;style&gt;&lt;style name&#x3D;&quot;OneActionBar.Back.Blue&quot; parent&#x3D;&quot;OneActionBar.Back&quot;&gt;    &lt;item name&#x3D;&quot;android:background&quot;&gt;#0080ff&lt;&#x2F;item&gt;    &lt;item name&#x3D;&quot;barBackColor&quot;&gt;@android:color&#x2F;white&lt;&#x2F;item&gt;    &lt;item name&#x3D;&quot;barTitleColor&quot;&gt;@android:color&#x2F;white&lt;&#x2F;item&gt;    &lt;item name&#x3D;&quot;barActionBtnColor&quot;&gt;@android:color&#x2F;white&lt;&#x2F;item&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> one-extend-lib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调整数组顺序使奇数位于偶数前面</title>
      <link href="20190410/algorithm/15.diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian/"/>
      <url>20190410/algorithm/15.diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian/</url>
      
        <content type="html"><![CDATA[<h1 id="15调整数组顺序使奇数位于偶数前面"><a class="markdownIt-Anchor" href="#15调整数组顺序使奇数位于偶数前面"></a> 15.调整数组顺序使奇数位于偶数前面</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>运用插入思想</p><ol><li>要想让相对位置不变，则需要相邻位置交换</li><li>引入标志位k 表示前半部分最后一个奇数位置</li><li>寻找到下一个奇数时，将标志位 k 之后到当前奇数位置上的数按照顺序从后向前相邻移动奇数到k位置</li></ol><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reOrderArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> k<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">reOrderArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。 * 运用插入思想 * 1. 要想让相对位置不变，则需要相邻位置交换 * 2. 引入标志位k 表示前半部分最后一个奇数位置 * 3. 寻找到下一个奇数时，将标志位 k 之后到当前奇数位置上的数按照顺序从后向前相邻移动奇数到k位置 * @param array */</span><span class="token keyword">fun</span> <span class="token function">reOrderArray</span><span class="token punctuation">(</span>array<span class="token operator">:</span> IntArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> array<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">in</span> i downTo k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">val</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>                array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp            <span class="token punctuation">&#125;</span>            k<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> arr <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token function">reOrderArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">contentToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/beb5aa231adc45b2a5dcc5b62c93f593?tpId=13&amp;tqId=11166&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数值的整数次方</title>
      <link href="20190408/algorithm/14.shu-zhi-de-zheng-shu-ci-fang/"/>
      <url>20190408/algorithm/14.shu-zhi-de-zheng-shu-ci-fang/</url>
      
        <content type="html"><![CDATA[<h1 id="14数值的整数次方"><a class="markdownIt-Anchor" href="#14数值的整数次方"></a> 14.数值的整数次方</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><p>保证base和exponent不同时为0</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><ol><li>base = 0 时，返回0</li><li>exponent = 0 时，任何数的0次方都为1;返回1</li><li>exponent &lt; 0 时，base^exponent 为 1 除以 base的exponent的绝对值次方（base绝对值的exponent绝对值次方分之一）</li><li>exponent &gt; 0 时，base^exponent 为 base的exponent的绝对值次方</li></ol><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。 * * 保证base和exponent不同时为0 * * 1. base = 0 时，返回0 * 2. exponent = 0 时，任何数的0次方都为1;返回1 * 3. exponent &lt; 0 时，base^exponent 为 1 除以 base的exponent的绝对值次方（base绝对值的exponent绝对值次方分之一） * 4. exponent > 0 时，base^exponent 为 base的exponent的绝对值次方 * @param base 基数浮点数 * @param exponent 次幂 * @return */</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">power</span><span class="token punctuation">(</span><span class="token keyword">double</span> base<span class="token punctuation">,</span> <span class="token keyword">int</span> exponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>base <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exponent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">double</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exponent <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        base <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> base<span class="token punctuation">;</span>        exponent <span class="token operator">=</span> exponent <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> exponent<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">*=</span> base<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">power</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">power</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。 * * 保证base和exponent不同时为0 * * 1. base = 0 时，返回0 * 2. exponent = 0 时，任何数的0次方都为1;返回1 * 3. exponent &lt; 0 时，base^exponent 为 1 除以 base的exponent的绝对值次方（base绝对值的exponent绝对值次方分之一） * 4. exponent > 0 时，base^exponent 为 base的exponent的绝对值次方 * @param base 基数浮点数 * @param exponent 次幂 * @return */</span><span class="token keyword">fun</span> <span class="token function">power</span><span class="token punctuation">(</span>base<span class="token operator">:</span> Double<span class="token punctuation">,</span> exponent<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Double <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> base <span class="token operator">=</span> base    <span class="token keyword">var</span> exponent <span class="token operator">=</span> exponent    <span class="token keyword">if</span> <span class="token punctuation">(</span>base <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0.0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exponent <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1.0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token number">1.0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exponent <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        base <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> base        exponent <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until exponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">*=</span> base    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">power</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">power</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/1a834e5e3e1a4b7ba251417554e07c00?tpId=13&amp;tqId=11165&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【FFmpeg】(二) 视频解码、像素格式转换与Native原生绘制</title>
      <link href="20190401/android-ndk/ffmpeg-er-shi-pin-jie-ma-xiang-su-ge-shi-zhuan-huan-yu-native-yuan-sheng-hui-zhi/"/>
      <url>20190401/android-ndk/ffmpeg-er-shi-pin-jie-ma-xiang-su-ge-shi-zhuan-huan-yu-native-yuan-sheng-hui-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="视频解码-像素格式转换与native原生绘制"><a class="markdownIt-Anchor" href="#视频解码-像素格式转换与native原生绘制"></a> 视频解码、像素格式转换与Native原生绘制</h1><h2 id="一-视频解码"><a class="markdownIt-Anchor" href="#一-视频解码"></a> 一、视频解码</h2><h3 id="1-ffmpeg-库简介"><a class="markdownIt-Anchor" href="#1-ffmpeg-库简介"></a> 1、FFmpeg 库简介</h3><p><strong>FFmpeg 一共包含8个库</strong></p><ul><li><strong>avcodec</strong>：编解码（最重要的库）</li><li><strong>avformat</strong>：封装格式处理</li><li><strong>avfilter</strong>：滤镜特效处理</li><li><strong>avdevice</strong>：各自设备的输入输出</li><li><strong>avutil</strong>：工具库（大部分库都需要这个库的支持）</li><li><strong>postproc</strong>：后加工</li><li><strong>swresample</strong>：音频采样数据格式转换</li><li><strong>swscale</strong>：视频像素数据格式转换</li></ul><h3 id="2-ffmpeg-解码的流程图"><a class="markdownIt-Anchor" href="#2-ffmpeg-解码的流程图"></a> 2、FFmpeg 解码的流程图</h3><p>/<img src="/images/20190401/ffmpeg_decode.png" alt="FFmpeg 解码的流程图" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190401/ffmpeg_decode.png" class="lozad post-image"></p><h3 id="3-ffmpeg-数据格式简介"><a class="markdownIt-Anchor" href="#3-ffmpeg-数据格式简介"></a> 3、FFmpeg 数据格式简介</h3><ul><li><strong>AVFormatContext</strong>：封装格式上下文结构体，也是统领全局的结构体，保存了视频文件封装格式相关信息</li><li><strong>AVInputFormat</strong>：每种封装格式（例如FLV、MKV、MP4、AVI）对应一个该结构体。</li><li><strong>AVStream</strong>：视频文件中每个视频（音频）流对应一个该结构体</li><li><strong>AVCodeContext</strong>：编解码器上下文结构体，保存了视频（音频）编解码相关信息。</li><li><strong>AVCodec</strong>：每种视频（音频）编解码器（例如H.264解码器）对应一个该结构体</li><li><strong>AVPacket</strong>：存储一帧压缩编码数据</li><li><strong>AVFrame</strong>：存储一帧解码后的像素（采样）数据</li></ul><h2 id="二-像素格式转换"><a class="markdownIt-Anchor" href="#二-像素格式转换"></a> 二、像素格式转换</h2><p><strong>像素格式转换就是将yuv420p 的转成ARGB,可以使用 C/C++ 库 libyuv 来进行转换</strong></p><h3 id="i420toargb"><a class="markdownIt-Anchor" href="#i420toargb"></a> I420ToARGB</h3><p><strong>参数按顺序如下：</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>src_y</td><td>uint8_t*</td><td>来源的frame的 y 帧数据 yuv_frame-&gt;data</td></tr><tr><td>src_stride_y</td><td>int</td><td>来源的frame的y大小数据 yuv_frame-&gt;linesize</td></tr><tr><td>src_u</td><td>uint8_t*</td><td>来源的frame的 u 帧数据yuv_frame-&gt;data</td></tr><tr><td>src_stride_u</td><td>int</td><td>来源的frame的u大小数据 yuv_frame-&gt;linesize</td></tr><tr><td>src_v</td><td>uint8_t*</td><td>来源的frame的 v 帧数据yuv_frame-&gt;data</td></tr><tr><td>src_stride_v</td><td>int</td><td>来源的frame的v大小数据 yuv_frame-&gt;linesize</td></tr><tr><td>dst_argb</td><td>uint8_t*</td><td>转换后的 rgb 的frame数据</td></tr><tr><td>dst_stride_argb</td><td>int</td><td>转换后的 rgb 的frame的大小数据</td></tr><tr><td>width</td><td>int</td><td>像素数据宽度</td></tr><tr><td>height</td><td>int</td><td>像素数据高度</td></tr></tbody></table><h2 id="三-native-原生绘制"><a class="markdownIt-Anchor" href="#三-native-原生绘制"></a> 三、Native 原生绘制</h2><p><strong>Native 原生绘制是使用ANativeWindow 将surface 和 缓冲区buffer绑定，进而去更新缓冲区的数据，并刷新到 surface 就可以实现原生绘制</strong></p><h3 id="1-获取anativewindow指针定义缓冲区"><a class="markdownIt-Anchor" href="#1-获取anativewindow指针定义缓冲区"></a> 1、获取ANativeWindow指针,定义缓冲区</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;Native 绘制ANativeWindow *nativeWindow &#x3D; ANativeWindow_fromSurface(env, surface);&#x2F;&#x2F;缓冲区bufferANativeWindow_Buffer windowBuffer;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-设置缓冲区参数"><a class="markdownIt-Anchor" href="#2-设置缓冲区参数"></a> 2、设置缓冲区参数</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;设置缓冲区参数ANativeWindow_setBuffersGeometry(nativeWindow, avCodecContext-&gt;width,                                             avCodecContext-&gt;height, WINDOW_FORMAT_RGBA_8888);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-刷新数据到缓冲区"><a class="markdownIt-Anchor" href="#3-刷新数据到缓冲区"></a> 3、刷新数据到缓冲区</h3><ul><li>对缓冲区进行加锁</li><li>刷新转换后的数据到缓冲区</li><li>对缓冲区数据进行解锁</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;LOCKANativeWindow_lock(nativeWindo&amp;windowBuffer, NULLavpicture_fill((AVPicture rgba_frame, windowBuffer.bitPIX_FMT_RGBA,            avCodecContext-&gt;width,            avCodecContext-&gt;height&#x2F;&#x2F;fix bufferI420ToARGB(        yuv_frame-&gt;data[0yuv_frame-&gt;linesize[0],        yuv_frame-&gt;data[2yuv_frame-&gt;linesize[2],        yuv_frame-&gt;data[1yuv_frame-&gt;linesize[1],        rgba_frame-&gt;data[0rgba_frame-&gt;linesize[0],        avCodecContext-&gt;widtavCodecContext-&gt;height&#x2F;&#x2F;UNLOCKANativeWindow_unlockAndPost(natiindow);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-释放nativewindow"><a class="markdownIt-Anchor" href="#4-释放nativewindow"></a> 4、释放nativeWindow</h3><pre class="line-numbers language-none"><code class="language-none">ANativeWindow_release(nativeWindow);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四-使用ffmpeg实现native原生绘制显示视频图像"><a class="markdownIt-Anchor" href="#四-使用ffmpeg实现native原生绘制显示视频图像"></a> 四、使用FFmpeg实现native原生绘制，显示视频图像</h2><p><strong>之前说明了Android Studio 使用 CMake 来配置FFmpeg 的方法，这里就省略项目配置与Java代码部分，主要来实现C/C++代码部分,将像素数据会知道 Surface 上</strong></p><pre class="line-numbers language-none"><code class="language-none">#include &quot;cn_onestravel_ndk_ffmpeg_render_VideoPlayer.h&quot;#include &lt;android&#x2F;log.h&gt;#include &lt;unistd.h&gt;&#x2F;&#x2F;编码#include &quot;include&#x2F;libavcodec&#x2F;avcodec.h&quot;&#x2F;&#x2F;封装格式处理#include &quot;include&#x2F;libavformat&#x2F;avformat.h&quot;&#x2F;&#x2F;像素处理#include &quot;include&#x2F;libswscale&#x2F;swscale.h&quot;#include &quot;include&#x2F;libavutil&#x2F;avutil.h&quot;#include &quot;include&#x2F;libavutil&#x2F;frame.h&quot;#include &lt;android&#x2F;native_window.h&gt;#include &lt;android&#x2F;native_window_jni.h&gt;#include &lt;libyuv.h&gt;#include &lt;pthread.h&gt;#define LOGI(FORMAT, ...) __android_log_print(ANDROID_LOG_INFO,&quot;FFMPEG&quot;,FORMAT,##__VA_ARGS__);#define LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,&quot;FFMPEG&quot;,FORMAT,##__VA_ARGS__);&#x2F;* * Class:     cn_onestravel_ndk_ffmpeg_render_VideoPlayer * Method:    render * Signature: (Ljava&#x2F;lang&#x2F;String;Landroid&#x2F;view&#x2F;Surface;)V *&#x2F;JNIEXPORT void JNICALL Java_cn_onestravel_ndk_ffmpeg_render_VideoPlayer_render        (JNIEnv *env, jclass jcls, jstring jstr_input, jobject surface) &#123;    const char *cstr_input &#x3D; (*env)-&gt;GetStringUTFChars(env, jstr_input, NULL);    &#x2F;&#x2F;注册ffmpeg 所有组件    av_register_all();    &#x2F;&#x2F;封装格式上下文    AVFormatContext *formatContext &#x3D; avformat_alloc_context();    &#x2F;&#x2F;打开输入视频文件    if (avformat_open_input(&amp;formatContext, cstr_input, NULL, NULL) !&#x3D; 0) &#123;        LOGE(&quot;无法打开视频文件&quot;);        return;    &#125;    &#x2F;&#x2F;获取视频文件信息    if (avformat_find_stream_info(formatContext, NULL) &lt; 0) &#123;        LOGE(&quot;获取视频文件信息失败&quot;);        return;    &#125;    &#x2F;&#x2F;获取视频流的索引位置    &#x2F;&#x2F;遍历所有类型的流（音频流，视频流、字幕流）    int i &#x3D; 0;    int v_stream_index &#x3D; -1;    for (; i &lt; formatContext-&gt;nb_streams; i++) &#123;        if (formatContext-&gt;streams[i]-&gt;codec-&gt;codec_type &#x3D;&#x3D; AVMEDIA_TYPE_VIDEO) &#123;            v_stream_index &#x3D; i;            break;        &#125;    &#125;    if (v_stream_index &lt; 0) &#123;        LOGE(&quot;%s&quot;, &quot;找不到视频流\n&quot;);        return;    &#125;    &#x2F;&#x2F;获取视频流中的编解码的上下文    AVCodecContext *avCodecContext &#x3D; formatContext-&gt;streams[v_stream_index]-&gt;codec;    &#x2F;&#x2F;根据视频编解码上下文的id得到对应的编解码器    AVCodec *avCodec &#x3D; avcodec_find_decoder(avCodecContext-&gt;codec_id);    if (avCodec &#x3D;&#x3D; NULL) &#123;        LOGE(&quot;未找到解码器&quot;);        return;    &#125;    &#x2F;&#x2F;打开解码器    if (avcodec_open2(avCodecContext, avCodec, NULL) &lt; 0) &#123;        LOGE(&quot;打开解码器失败&quot;);        return;    &#125;    &#x2F;&#x2F;输出视频信息    LOGI(&quot;视频文件格式：%s&quot;, formatContext-&gt;iformat-&gt;name);    &#x2F;&#x2F;formatContext-&gt;duration单位为微妙    LOGI(&quot;视频时长：%lld&quot;, (formatContext-&gt;duration) &#x2F; 1000000);    LOGI(&quot;视频的宽度和高度 W：%d ,H：%d&quot;, avCodecContext-&gt;width, avCodecContext-&gt;height);    LOGI(&quot;视频解码器名称：%s&quot;, avCodec-&gt;name);    &#x2F;&#x2F;准备读取    &#x2F;&#x2F;AVPacket用于存储一帧一帧的压缩数据（H264）    &#x2F;&#x2F;缓冲区，开辟空间    AVPacket *packet &#x3D; (AVPacket *) av_malloc(sizeof(AVPacket));    AVFrame *yuv_frame &#x3D; av_frame_alloc();    AVFrame *yuv_scale_frame &#x3D; av_frame_alloc();    AVFrame *rgba_frame &#x3D; av_frame_alloc();    &#x2F;&#x2F;Native 绘制    ANativeWindow *nativeWindow &#x3D; ANativeWindow_fromSurface(env, surface);    &#x2F;&#x2F;缓冲区buffer    ANativeWindow_Buffer windowBuffer;    int len, got_frame, frame_count &#x3D; 0;    while (av_read_frame(formatContext, packet) &gt;&#x3D; 0) &#123;        len &#x3D; avcodec_decode_video2(avCodecContext, yuv_frame, &amp;got_frame, packet);        &#x2F;&#x2F;不为0,正在解码        if (got_frame) &#123;            int i &#x3D; frame_count++;            LOGI(&quot;解码%d帧&quot;, i);            ANativeWindow_setBuffersGeometry(nativeWindow, avCodecContext-&gt;width,                                             avCodecContext-&gt;height, WINDOW_FORMAT_RGBA_8888);            &#x2F;&#x2F;LOCK            ANativeWindow_lock(nativeWindow, &amp;windowBuffer, NULL);            avpicture_fill((AVPicture *) rgba_frame, windowBuffer.bits, PIX_FMT_RGBA,                           avCodecContext-&gt;width,                           avCodecContext-&gt;height);            &#x2F;&#x2F;fix buffer            I420ToARGB(                    yuv_frame-&gt;data[0], yuv_frame-&gt;linesize[0],                    yuv_frame-&gt;data[2], yuv_frame-&gt;linesize[2],                    yuv_frame-&gt;data[1], yuv_frame-&gt;linesize[1],                    rgba_frame-&gt;data[0], rgba_frame-&gt;linesize[0],                    avCodecContext-&gt;width, avCodecContext-&gt;height);            &#x2F;&#x2F;UNLOCK            ANativeWindow_unlockAndPost(nativeWindow);&#x2F;&#x2F;            ANativeWindow_release(nativeWindow);            usleep(16 * 1000);        &#125;        av_free_packet(packet);    &#125;    ANativeWindow_release(nativeWindow);    av_frame_free(yuv_frame);    av_frame_free(rgba_frame);    avcodec_close(avCodec);    avcodec_free_context(avCodecContext);    avformat_free_context(formatContext);    (*env)-&gt;ReleaseStringUTFChars(env, jstr_input, cstr_input);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自定义 VideoView 继承自 SurfaceView</strong></p><pre class="line-numbers language-none"><code class="language-none">public class VideoView extends SurfaceView &#123;    public VideoView(Context context) &#123;        super(context);        init();    &#125;    public VideoView(Context context, AttributeSet attrs) &#123;        super(context, attrs);        init();    &#125;    public VideoView(Context context, AttributeSet attrs, int defStyleAttr) &#123;        super(context, attrs, defStyleAttr);        init();    &#125;    public void init()&#123;        &#x2F;&#x2F;初始化SurfaceView的像素格式        SurfaceHolder holder &#x3D; getHolder();        holder.setFormat(PixelFormat.RGBA_8888);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制中 1 的个数</title>
      <link href="20190401/algorithm/13.er-jin-zhi-zhong-1-de-ge-shu/"/>
      <url>20190401/algorithm/13.er-jin-zhi-zhong-1-de-ge-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="13-二进制中-1-的个数"><a class="markdownIt-Anchor" href="#13-二进制中-1-的个数"></a> 13. 二进制中 1 的个数</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>如果一个整数不为0，那么这个整数至少有一位是1。</p><p>如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。</p><p>举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.</p><p>我们发现减1的结果是把最右边的一个1开始的所有位都取反了。</p><p>这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。</p><p>如1100&amp;1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.</p><p>那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。 * n&amp;(n-1)时将 n 的二进制数字中最右侧的1变为0 * @param n * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numberOf1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        n <span class="token operator">&amp;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">numberOf1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">numberOf1</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。 * n&amp;(n-1)时将 n 的二进制数字中最右侧的1变为0 * @param n * @return */</span><span class="token keyword">fun</span> <span class="token function">numberOf1</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> n <span class="token operator">=</span> n    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        count<span class="token operator">++</span>        n <span class="token operator">=</span> n <span class="token operator">and</span> n <span class="token operator">-</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count<span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">numberOf1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">numberOf1</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&amp;tqId=11164&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剪绳子</title>
      <link href="20190328/algorithm/12.jian-sheng-zi/"/>
      <url>20190328/algorithm/12.jian-sheng-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="12-剪绳子"><a class="markdownIt-Anchor" href="#12-剪绳子"></a> 12. 剪绳子</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给你一根长度为n的绳子，请把绳子剪成整数长的m段（m、n都是整数，n&gt;1并且m&gt;1），每段绳子的长度记为k[0],k[1],…,k[m]。请问k[0]xk[1]x…xk[m]可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>题目分析：<br />先举几个例子，可以看出规律来。</p><ul><li>n = 4 ： 2*2</li><li>n = 5 ： 2*3</li><li>n = 6 ： 3*3</li><li>n = 7 ： 2*2*3 或者4*3</li><li>n = 8 ： 2*3*3</li><li>n = 9 ： 3*3*3</li><li>n = 10：2*2*3*3 或者4*3*3</li><li>n = 11：2*3*3*3</li><li>n = 12：3*3*3*3</li><li>n = 13：2*2*3*3*3 或者4*3*3*3</li></ul><p>下面是分析：<br />首先判断k[0]到k[m]可能有哪些数字，实际上只可能是2或者3。</p><ul><li>当然也可能有4，但是4=2*2，我们就简单些不考虑了。</li><li>5&lt;2*3,6&lt;3*3,比6更大的数字我们就更不用考虑了，肯定要继续分。</li><li>其次看2和3的数量，2的数量肯定小于3个，为什么呢？因为2*2*2&lt;3*3，那么题目就简单了。</li><li>直接用n除以3，根据得到的余数判断是一个2还是两个2还是没有2就行了。</li><li>由于题目规定m&gt;1，所以2只能是1*1，3只能是2*1，这两个特殊情况直接返回就行了。</li><li>乘方运算的复杂度为：O(logn)，用动态规划来做会耗时比较多。</li></ul><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 给你一根长度为n的绳子，请把绳子剪成整数长的m段（m、n都是整数，n>1并且m>1），每段绳子的长度记为k[0],k[1],...,k[m]。请问k[0]xk[1]x...xk[m]可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。 * * @param n * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cutRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mod <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//除以3后余2，则截成 n/3 段长度为3的绳子后还余长度为2的绳子；</span>        <span class="token comment">//此时相乘，乘积最大</span>        <span class="token comment">//即  2 * 3^(n / 3)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mod <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//除以3后余1，则截成 n/3 段长度为3的绳子后还余长度为1的绳子；</span>        <span class="token comment">// 乘以长度为1的没有什么变化，则可以取出一段长度为3的绳子，和当前长度为1的绳子，分成两个长度为2的绳子相乘</span>        <span class="token comment">// 即 2 * 2 * 3^(n / 3 - 1)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//可以被3整除，则可以截成 n/3 段长度为3的绳子，相乘就是 3 的 n/3次幂</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">cutRope</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">cutRope</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">cutRope</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 给你一根长度为n的绳子，请把绳子剪成整数长的m段（m、n都是整数，n>1并且m>1），每段绳子的长度记为k[0],k[1],...,k[m]。请问k[0]xk[1]x...xk[m]可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。 * * @param n * @return */</span><span class="token keyword">fun</span> <span class="token function">cutRope</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token number">0</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token comment">//可以被3整除，则可以截成 n/3 段长度为3的绳子，相乘就是 3 的 n/3次幂</span>            <span class="token number">3.0</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token number">1</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token comment">//除以3后余1，则截成 n/3 段长度为3的绳子后还余长度为1的绳子；</span>            <span class="token comment">// 乘以长度为1的没有什么变化，则可以取出一段长度为3的绳子，和当前长度为1的绳子，分成两个长度为2的绳子相乘</span>            <span class="token comment">// 即 2 * 2 * 3^(n / 3 - 1)</span>            <span class="token number">3.0</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">//除以3后余2，则截成 n/3 段长度为3的绳子后还余长度为2的绳子；</span>            <span class="token comment">//此时相乘，乘积最大</span>            <span class="token comment">//即  2 * 3^(n / 3)</span>            <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3.0</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">cutRope</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">cutRope</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">cutRope</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/57d85990ba5b440ab888fc72b0751bf8?tpId=13&amp;tqId=33257&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tPage=4&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最优解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器人的运动范围</title>
      <link href="20190326/algorithm/11.ji-qi-ren-de-yun-dong-fan-wei/"/>
      <url>20190326/algorithm/11.ji-qi-ren-de-yun-dong-fan-wei/</url>
      
        <content type="html"><![CDATA[<h1 id="11机器人的运动范围"><a class="markdownIt-Anchor" href="#11机器人的运动范围"></a> 11.机器人的运动范围</h1><p>本题知识点：数组</p><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>回溯法<br />核心思路：</p><ol><li>从(0,0)开始走，每成功走一步标记当前位置为true,然后从当前位置往四个方向探索，<br />返回1 + 4 个方向的探索值之和。</li><li>探索时，判断当前节点是否可达的标准为：<ul><li>1）当前节点在矩阵内；</li><li>2）当前节点未被访问过；</li><li>3）当前节点满足limit限制。</li></ul></li></ol><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？ * @param threshold k值 * @param rows 行数m * @param cols 列数n * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">movingCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> threshold<span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> cols<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>rows<span class="token punctuation">]</span><span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">movingStep</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 检测每一步是否可达，如果已经进入过该格子，标志位记为true，为进入过，记为false * @param threshold k值 * @param rows 行数m * @param cols 列数n * @param i 当前格子横（行）坐标 * @param j 当前格子竖（列）坐标 * @param flag 格子是否已经进入过标志数组 * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">movingStep</span><span class="token punctuation">(</span><span class="token keyword">int</span> threshold<span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> cols<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> rows <span class="token operator">||</span> j <span class="token operator">>=</span> cols <span class="token operator">||</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">numSumByByte</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">numSumByByte</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">></span> threshold<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">movingStep</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">movingStep</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">movingStep</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">movingStep</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 计算每个数的个位数上的值之和 * @param num * @return */</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">numSumByByte</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">movingCount</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"> <span class="token comment">/** * 地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？ * @param threshold k值 * @param rows 行数m * @param cols 列数n * @return */</span><span class="token keyword">fun</span> <span class="token function">movingCount</span><span class="token punctuation">(</span>threshold<span class="token operator">:</span> Int<span class="token punctuation">,</span> rows<span class="token operator">:</span> Int<span class="token punctuation">,</span> cols<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> flag <span class="token operator">=</span>        <span class="token function">Array</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">BooleanArray</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">movingStep</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 检测每一步是否可达，如果已经进入过该格子，标志位记为true，为进入过，记为false * @param threshold k值 * @param rows 行数m * @param cols 列数n * @param i 当前格子横（行）坐标 * @param j 当前格子竖（列）坐标 * @param flag 格子是否已经进入过标志数组 * @return */</span><span class="token keyword">fun</span> <span class="token function">movingStep</span><span class="token punctuation">(</span>    threshold<span class="token operator">:</span> Int<span class="token punctuation">,</span>    rows<span class="token operator">:</span> Int<span class="token punctuation">,</span>    cols<span class="token operator">:</span> Int<span class="token punctuation">,</span>    i<span class="token operator">:</span> Int<span class="token punctuation">,</span>    j<span class="token operator">:</span> Int<span class="token punctuation">,</span>    flag<span class="token operator">:</span> Array<span class="token operator">&lt;</span>BooleanArray<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> rows <span class="token operator">||</span> j <span class="token operator">>=</span> cols <span class="token operator">||</span> flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">numSumByByte</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">numSumByByte</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">></span> threshold<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>    flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token function">movingStep</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">movingStep</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">movingStep</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token function">movingStep</span><span class="token punctuation">(</span>threshold<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 计算每个数的个位数上的值之和 * @param num * @return */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">numSumByByte</span><span class="token punctuation">(</span>num<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> num    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> num <span class="token operator">%</span> <span class="token number">10</span>        num <span class="token operator">/=</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">movingCount</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/6e5207314b5241fb83f2329e89fdecc8?tpId=13&amp;tqId=11219&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tPage=4&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵中的路径</title>
      <link href="20190325/algorithm/10.ju-zhen-zhong-de-lu-jing/"/>
      <url>20190325/algorithm/10.ju-zhen-zhong-de-lu-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="10矩阵中的路径"><a class="markdownIt-Anchor" href="#10矩阵中的路径"></a> 10.矩阵中的路径</h1><p>本题知识点：数组</p><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>e</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>s</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>f</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>s</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>e</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>e</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\begin{bmatrix} a &amp; b &amp; c &amp;e \\ s &amp; f &amp; c &amp; s \\ a &amp; d &amp; e&amp; e\\ \end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>矩阵中包含一条字符串&quot;bcced&quot;的路径，但是矩阵中不包含&quot;abcb&quot;路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。</p><table><tr>    <td>a</td>    <td style="background-color:#ff0">b</td>    <td style="background-color:#ff0">c</td>    <td>e</td></tr><tr  style="background-color:#fff" >    <td>s</td>    <td >f</td>    <td style="background-color:#ff0">c</td>    <td>s</td></tr><tr>    <td>a</td>    <td style="background-color:#ff0">d</td>    <td style="background-color:#ff0">e</td>    <td>e</td></tr></table><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>回溯法<br />基本思想：<br />0.根据给定数组，初始化一个标志位数组，初始化为false，表示未走过，true表示已经走过，不能走第二次<br />1.根据行数和列数，遍历数组，先找到一个与str字符串的第一个元素相匹配的矩阵元素，进入judge<br />2.根据i和j先确定一维数组的位置，因为给定的matrix是一个一维数组<br />3.确定递归终止条件：越界，当前找到的矩阵值不等于数组对应位置的值，已经走过的，这三类情况，都直接false，说明这条路不通<br />4.若n，就是待判定的字符串str的索引已经判断到了最后一位，此时说明是匹配成功的<br />5.下面就是本题的精髓，递归不断地寻找周围四个格子是否符合条件，只要有一个格子符合条件，就继续再找这个符合条件的格子的四周是否存在符合条件的格子，直到k到达末尾或者不满足递归条件就停止。<br />6.走到这一步，说明本次是不成功的，我们要还原一下标志位数组index处的标志位，进入下一轮的判断。</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 回溯法查找路径是否存在 * @param matrix 矩阵数组 * @param rows 矩阵行数 * @param cols 矩阵列数 * @param str 查找字符串路径数组 * @return */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPath</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> cols<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建和矩阵相同大小的标志位数组</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cols<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//查找字符串路径的起始位，开始向四周搜索路径</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 回溯法查找路径是否存在 * @param matrix 矩阵数组 * @param rows 矩阵行数 * @param cols 矩阵列数 * @param i 当前行数坐标 * @param j 当前列数坐标 * @param str 查找字符串路径数组 * @param n 当前字符串数组中查到当前位数 * @param flag 标记路径中是否已经进入的标志 * @return */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> rows<span class="token punctuation">,</span> <span class="token keyword">int</span> cols<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//判断当前坐标是否越界，如果越界，则不在矩阵内，返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> rows <span class="token operator">||</span> j <span class="token operator">>=</span> cols<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据矩阵坐标转换为数组下标</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> i <span class="token operator">*</span> cols <span class="token operator">+</span> j<span class="token punctuation">;</span>    <span class="token comment">//判断盖数组下标的格子是否已经进入，如果进入，则不能再次进入，返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//判断查找的字符串路径当前字符与数组中当前下标的字符是否相同，如果不相同，则当前格子不存在路径，返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> matrix<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//判断已经查找到字符串最后一位，则路径存在，返回true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//当前位置表示当前格子符合字符串查找路径中当当前位置n，将该格子标记为true，避免下一个格子搜索时进入</span>    flag<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//开始搜索字符串查找路径当前位置的下一个字符路径，分布查找当前格子上，下，左，右的格子是否存在下一个字符的路径</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> str<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token function">judge</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> str<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token function">judge</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>            <span class="token operator">||</span> <span class="token function">judge</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//下一个字符路径存在，则当前格子路径正确，返回true</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//下一个字符路径不存在，当前格子路径不正确，则将当前格子标志位置为false(回溯),可以允许其他格子检查时进入</span>        flag<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rows <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cols <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token string">"bccfd"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">hasPath</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span>rows<span class="token punctuation">,</span>cols<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"> <span class="token comment">/** * 回溯法查找路径是否存在 * @param matrix 矩阵数组 * @param rows 矩阵行数 * @param cols 矩阵列数 * @param i 当前行数坐标 * @param j 当前列数坐标 * @param str 查找字符串路径数组 * @param n 当前字符串数组中查到当前位数 * @param flag 标记路径中是否已经进入的标志 * @return */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">judge</span><span class="token punctuation">(</span>    matrix<span class="token operator">:</span> CharArray<span class="token punctuation">,</span>    rows<span class="token operator">:</span> Int<span class="token punctuation">,</span>    cols<span class="token operator">:</span> Int<span class="token punctuation">,</span>    i<span class="token operator">:</span> Int<span class="token punctuation">,</span>    j<span class="token operator">:</span> Int<span class="token punctuation">,</span>    str<span class="token operator">:</span> CharArray<span class="token punctuation">,</span>    n<span class="token operator">:</span> Int<span class="token punctuation">,</span>    flag<span class="token operator">:</span> BooleanArray<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">&#123;</span>    <span class="token comment">//判断当前坐标是否越界，如果越界，则不在矩阵内，返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> rows <span class="token operator">||</span> j <span class="token operator">>=</span> cols<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据矩阵坐标转换为数组下标</span>    <span class="token keyword">val</span> index <span class="token operator">=</span> i <span class="token operator">*</span> cols <span class="token operator">+</span> j    <span class="token comment">//判断盖数组下标的格子是否已经进入，如果进入，则不能再次进入，返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//判断查找的字符串路径当前字符与数组中当前下标的字符是否相同，如果不相同，则当前格子不存在路径，返回false</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> matrix<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//判断已经查找到字符串最后一位，则路径存在，返回true</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> str<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//当前位置表示当前格子符合字符串查找路径中当当前位置n，将该格子标记为true，避免下一个格子搜索时进入</span>    flag<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment">//开始搜索字符串查找路径当前位置的下一个字符路径，分布查找当前格子上，下，左，右的格子是否存在下一个字符的路径</span>    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> str<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>        <span class="token operator">||</span> <span class="token function">judge</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> str<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>        <span class="token operator">||</span> <span class="token function">judge</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>        <span class="token operator">||</span> <span class="token function">judge</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//下一个字符路径存在，则当前格子路径正确，返回true</span>        <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//下一个字符路径不存在，当前格子路径不正确，则将当前格子标志位置为false(回溯),可以允许其他格子检查时进入</span>        flag<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span>        <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> matrix <span class="token operator">=</span>        <span class="token function">charArrayOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> rows <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">val</span> cols <span class="token operator">=</span> <span class="token number">4</span>    <span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"bccfd"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">hasPath</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> cols<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/c61c6999eecb4b8f88a98f66b273a3cc?tpId=13&amp;tqId=11218&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【FFmpeg】(一) 音视频相关基础知识以及FFmpeg介绍</title>
      <link href="20190325/android-ndk/ffmpeg-yi-yin-shi-pin-xiang-guan-ji-chu-zhi-shi-yi-ji-ffmpeg-jie-shao-yu-bian-yi/"/>
      <url>20190325/android-ndk/ffmpeg-yi-yin-shi-pin-xiang-guan-ji-chu-zhi-shi-yi-ji-ffmpeg-jie-shao-yu-bian-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="ffmpeg一-音视频相关基础知识以及ffmpeg介绍"><a class="markdownIt-Anchor" href="#ffmpeg一-音视频相关基础知识以及ffmpeg介绍"></a> 【FFmpeg】(一) 音视频相关基础知识以及FFmpeg介绍</h1><h2 id="一-音视频相关基础知识"><a class="markdownIt-Anchor" href="#一-音视频相关基础知识"></a> 一、音视频相关基础知识</h2><h3 id="1-视频播放器原理"><a class="markdownIt-Anchor" href="#1-视频播放器原理"></a> 1、视频播放器原理</h3><p><strong>视频播放器就是将一个封装的格式数据进行解封装，得到对应的音频压缩数据和视频压缩数据，再进行相应的音视频解码，得到音频采样数据和视频采样数据，最后将音频采样数据和视频采样数据同时播放，达到音视频同步。</strong></p><ul><li><strong>封装格式数据通常有FLV、MKV、MP4、AVI、RMVB 等等</strong></li><li><strong>录音、录像的实质就是一个压缩采集到的图像或者音频数据的过程，这个过程又称为编码</strong></li><li><strong>播放视频或者音频文件，实质上是一个解压缩的过程，这个过程又称为解码</strong></li></ul><p><img src="/images/20190325/shipinyuanli.png" alt="视频播放器原理" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190325/shipinyuanli.png" class="lozad post-image"></p><h4 id="11-解封装"><a class="markdownIt-Anchor" href="#11-解封装"></a> 1.1 解封装</h4><p><strong>将封装格式的数据，分离成为音频流压缩编码数据和视频流压缩编码数据。封装格式种类很多，例如MP4，MKV，RMVB，TS，FLV，AVI等等，它的作用就是将已经压缩编码的视频数据和音频数据按照一定的格式放到一起，输出特定编码格式的视频码流和A音频码流。</strong></p><h4 id="12-解码"><a class="markdownIt-Anchor" href="#12-解码"></a> 1.2 解码</h4><h5 id="121-音频压缩数据解码"><a class="markdownIt-Anchor" href="#121-音频压缩数据解码"></a> 1.2.1 音频压缩数据解码</h5><p><strong>一般我们常见的音频压缩编码标准包含AAC，MP3，AC-3，WMA 等等；通过解码将压缩编码的音频数据输出成为非压缩的音频采样数据，例如PCM数据</strong></p><ul><li><strong>AAC</strong>：数据由大小不固定的ADTS构成</li><li><strong>PCM</strong>：单声道的情况下按照顺序存储每个采样点的数据；双声道的情况下按照 &quot;左右、左右&quot;的顺序存储每个采样点两个声道的数据</li></ul><p><strong>采样率</strong>：也称为采样速度或者采样率，定义了每秒从连续信号中提取并组成离散信号的采样个数，它用赫兹（Hz）来表示。采样频率的倒数是采样周期或者叫作采样时间，它是采样之间的时间间隔。通俗的讲采样频率是指计算机每秒钟采集多少个信号样本。</p><h5 id="122-视频压缩数据解码"><a class="markdownIt-Anchor" href="#122-视频压缩数据解码"></a> 1.2.2 视频压缩数据解码</h5><p><strong>一般我们常见的视频的压缩编码标准则包含H.264，MPEG2，VC-1等等；压缩编码的视频数据输出成为视频像素数据（非压缩的颜色数据），例如YUV(YUV420P,YUV422P,YUV444P;最常见为YUV420P)，RGB(RGB24,RGB32)等等。Y：亮度，U：色度，V：浓度</strong></p><ul><li><strong>H.264</strong>：数据由大学不固定的NALU构成，最常见情况下，1个NALU存储了1帧画面的压缩编码后的数据</li></ul><h4 id="13-音视频同步"><a class="markdownIt-Anchor" href="#13-音视频同步"></a> 1.3 音视频同步</h4><p><strong>根据解封装模块过程中获取到的参数信息，同步解码得到的音频和视频数据，并将音频和视频数据送至系统的声卡和显卡播放出来。</strong></p><h2 id="二-ffmpeg-介绍"><a class="markdownIt-Anchor" href="#二-ffmpeg-介绍"></a> 二、FFmpeg 介绍</h2><h3 id="1-定义"><a class="markdownIt-Anchor" href="#1-定义"></a> 1、定义</h3><p><strong>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。</strong></p><h3 id="2-ffmpeg-命令"><a class="markdownIt-Anchor" href="#2-ffmpeg-命令"></a> 2、FFmpeg 命令</h3><h4 id="21-视频格式转换命令"><a class="markdownIt-Anchor" href="#21-视频格式转换命令"></a> 2.1 视频格式转换命令</h4><table><thead><tr><th>命令参数</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>源文件</td></tr><tr><td>-o</td><td>输出文件</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;进入到FFmpeg 的 bin 目录下执行以下命令ffmpeg -i d:\\input.mp4 -o d:\\output.avi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="22-视频转-gif-命令"><a class="markdownIt-Anchor" href="#22-视频转-gif-命令"></a> 2.2 视频转 Gif 命令</h4><table><thead><tr><th>命令参数</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>源文件</td></tr><tr><td>-ss</td><td>从多少秒开始</td></tr><tr><td>-t</td><td>到多少秒介绍</td></tr><tr><td>-s</td><td>图像的尺寸大小</td></tr><tr><td>-b:v</td><td>码率</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;进入到FFmpeg 的 bin 目录下执行以下命令ffmpeg -ss 5 -t 15 -i d:\\input.mp4 -s 300x200 -b:v 1500K D:\\video_gif.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三-使用-visual-studio-编译-ffmpeg"><a class="markdownIt-Anchor" href="#三-使用-visual-studio-编译-ffmpeg"></a> 三、使用 visual studio 编译 FFmpeg</h2><p>*注：项目根目录即创建cpp源文件所在目录</p><p><strong>步骤</strong>：</p><ol><li>在<a href="http://ffmpeg.org/">【FFmpeg官网】</a>下载 FFmpeg 在windows 下的开发(dev)版本 <a href="https://ffmpeg.zeranoe.com/builds/">ffmpeg-XXX-win64-dev</a></li><li>在 visual studio上创建一个C++的空项目</li><li>将下载好的 FFmpeg 包解压后，复制 include 和 lib 文件夹到刚刚创建好的项目根路径下</li><li>下载 FFmpeg 在windows 下的 Shared 版本<a href="https://ffmpeg.zeranoe.com/builds/">ffmpeg-XXX-win64-shared</a>,解压后赋值 bin 目录下的动态库(.dll)文件到项目根目录下</li><li>修改项目的配置管理器中的活动姐姐方案平台为X64(根据自己操作系统位数更改)</li><li>在 visual studio 中项目右键，点击【属性（ALT+Enter）】,选中【C++目录】，右侧的【包含目录】，点击编辑，增加刚刚复制到根目录下的 include 目录</li></ol><p><img src="/images/20190325/c++_include.png" alt="包含目录" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190325/c++_include.png" class="lozad post-image"></p><ol start="7"><li>点击【属性】中的【链接器】，在右侧选中【附加库目录】，点击编辑，增加刚刚复制到根目录下的 lib 目录</li></ol><p><img src="/images/20190325/lianjie_lib.png" alt="附加库目录" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190325/lianjie_lib.png" class="lozad post-image"></p><ol start="8"><li>点击【属性】中的【链接器】下的【输入】，在右侧选中【附加依赖库】，点击编辑，增加刚刚复制到根目录下的 lib 目录下所有的 .lib 文件</li></ol><pre class="line-numbers language-none"><code class="language-none">avcodec.libavdevice.libavfilter.libavformat.libavutil.libpostproc.libswresample.libswscale.lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/20190325/fujiayilai_lib.png" alt="附加库目录" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190325/fujiayilai_lib.png" class="lozad post-image"></p><ol start="9"><li>在项目中添加一个.cpp的源文件，如：my_ffmpeg.cpp</li></ol><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;&#x2F;&#x2F;C和C++混编，指示编译器按照C语言进行编译extern &quot;C&quot;&#123;&#x2F;&#x2F;引入ffmpeg的头文件#include &quot;libavcodec&#x2F;avcodec.h&quot;&#125;;void main() &#123;&#x2F;&#x2F;输出 ffmpeg 的配置printf(&quot;%s\n&quot;,avcodec_configuration());getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-使用-linux主机-编译-ffmpeg"><a class="markdownIt-Anchor" href="#四-使用-linux主机-编译-ffmpeg"></a> 四、使用 Linux主机 编译 FFmpeg</h2><h3 id="1-编译前准备"><a class="markdownIt-Anchor" href="#1-编译前准备"></a> 1、编译前准备</h3><ul><li>阿里云主机(Ubuntu/centos)</li><li>客户端主机安装XShell，Xftp</li></ul><h3 id="2-编译"><a class="markdownIt-Anchor" href="#2-编译"></a> 2、编译</h3><ul><li>使用Xftp将NDK、FFmpeg 上传到阿里云主机</li><li>安装vim 编辑器</li></ul><pre class="line-numbers language-none"><code class="language-none">$ apt-get update$ sudo apt-get install vim-gtk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>NDK 安装，配置环境变量</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;给文件授权可执行$ chmod 777 -R android-ndk-r10e-linux-x86_64.bin&#x2F;&#x2F;执行文件$ .&#x2F;android-ndk-r10e-linux-x86_64.bin&#x2F;&#x2F;配置环境变量$ vim ~&#x2F;.bashrc&#x2F;&#x2F;增加环境变量export NDKROOT&#x3D;&#x2F;home&#x2F;study&#x2F;ndk&#x2F;android-ndk-r10eexport PATH&#x3D;$NDKROOT:$PATH$ source ~&#x2F;.bashrc&#x2F;&#x2F;查看ndk版本号$ ndk-build -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解压 FFmpeg</li></ul><pre class="line-numbers language-none"><code class="language-none">$ tar -xzvf ffmpeg-4.1.2.tar.gz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>编译 FFmpeg ,实现 Shell 脚本文件android_build.sh</li></ul><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bashmake cleanexport NDK&#x3D;&#x2F;home&#x2F;study&#x2F;ndk&#x2F;android-ndk-r10eexport SYSROOT&#x3D;$NDK&#x2F;platforms&#x2F;android-9&#x2F;arch-arm&#x2F;export TOOLCHAIN&#x3D;$NDK&#x2F;toolchains&#x2F;arm-linux-androideabi-4.8&#x2F;prebuilt&#x2F;linux-x86_64export CPU&#x3D;armexport PREFIX&#x3D;$(pwd)&#x2F;android&#x2F;$CPUexport ADDI_CFLAGS&#x3D;&quot;-marm&quot;.&#x2F;configure --target-os&#x3D;linux \--prefix&#x3D;$PREFIX --arch&#x3D;arm \--disable-doc \--enable-shared \--disable-static \--disable-yasm \--disable-symver \--enable-gpl \--disable-ffmpeg \--disable-ffplay \--disable-ffprobe \--disable-ffserver \--disable-doc \--disable-symver \--cross-prefix&#x3D;$TOOLCHAIN&#x2F;bin&#x2F;arm-linux-androideabi- \--enable-cross-compile \--sysroot&#x3D;$SYSROOT \--extra-cflags&#x3D;&quot;-Os -fpic $ADDI_CFLAGS&quot; \--extra-ldflags&#x3D;&quot;$ADDI_LDFLAGS&quot; \$ADDITIONAL_CONFIGURE_FLAGmake cleanmakemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行脚本文件</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;android_build.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五-使用编译后形成的include和lib目录实现android-ndk-解码功能"><a class="markdownIt-Anchor" href="#五-使用编译后形成的include和lib目录实现android-ndk-解码功能"></a> 五、使用编译后形成的include和lib目录实现Android NDK 解码功能</h2><h3 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤：</h3><ol><li>在Android studio上创建一个支持C++的Android项目</li><li>将生成的 include 和 lib 复制到 cpp 目录下，更改CMakeLists.txt文件</li></ol><pre class="line-numbers language-none"><code class="language-none">cmake_minimum_required(VERSION 3.4.1)set(DISTRIBUTION_DIR $&#123;CMAKE_SOURCE_DIR&#125;&#x2F;..&#x2F;jniLibs&#x2F;)add_library( # Sets the name of the library.        ffmpeg-video        SHARED        ffmpeg_video.c)# 编解码(最重要的库)add_library(        avcodec        SHARED        IMPORTED)#指定编码库的位置set_target_properties(        avcodec        PROPERTIES IMPORTED_LOCATION        $&#123;DISTRIBUTION_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libavcodec-56.so)#设备信息add_library(        avdevice        SHARED        IMPORTED)#指定设备信息的位置set_target_properties(        avdevice        PROPERTIES IMPORTED_LOCATION        $&#123;DISTRIBUTION_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libavdevice-56.so)#滤镜特效处理库add_library(        avfilter        SHARED        IMPORTED)#指定滤镜库位置set_target_properties(        avfilter        PROPERTIES IMPORTED_LOCATION        $&#123;DISTRIBUTION_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libavfilter-5.so)#封装格式处理库add_library(        avformat        SHARED        IMPORTED)#指定格式库路径set_target_properties(        avformat        PROPERTIES IMPORTED_LOCATION        $&#123;DISTRIBUTION_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libavformat-56.so)#工具库(大部分库都需要这个库的支持)add_library(        avutil        SHARED        IMPORTED)#指定工具库路径set_target_properties(        avutil        PROPERTIES IMPORTED_LOCATION        $&#123;DISTRIBUTION_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libavutil-54.so)#后期处理add_library(        postproc        SHARED        IMPORTED)#指定后期处理库路径set_target_properties(        postproc        PROPERTIES IMPORTED_LOCATION        $&#123;DISTRIBUTION_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libpostproc-53.so)#数据格式转换库add_library(        swresample        SHARED        IMPORTED)#指定库位置set_target_properties(        swresample        PROPERTIES IMPORTED_LOCATION        $&#123;DISTRIBUTION_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libswresample-1.so)#视频像素数据格式转换add_library(        swscale        SHARED        IMPORTED)#视频像素格式转换库位置set_target_properties(        swscale        PROPERTIES IMPORTED_LOCATION        $&#123;DISTRIBUTION_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libswscale-3.so)find_library(        android-lib        android)find_library(        log-lib        log)find_library(        jnigraphics-lib        jnigraphics)# 将预构建库与本地库相连target_link_libraries(        ffmpeg-video        avcodec        avdevice        avfilter        avformat        avutil        postproc        swresample        swscale        $&#123;android-lib&#125;        $&#123;jnigraphics-lib&#125;        $&#123;log-lib&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>编写本地 native 方法，编译生成.h头文件</li></ol><pre class="line-numbers language-none"><code class="language-none">package cn.onestravel.ndk.ffmpegdecodedemo;public class VideoUtils &#123;    static &#123;        System.loadLibrary(&quot;avutil-54&quot;);        System.loadLibrary(&quot;avcodec-56&quot;);        System.loadLibrary(&quot;avdevice-56&quot;);        System.loadLibrary(&quot;avfilter-5&quot;);        System.loadLibrary(&quot;avformat-56&quot;);        System.loadLibrary(&quot;postproc-53&quot;);        System.loadLibrary(&quot;swresample-1&quot;);        System.loadLibrary(&quot;swscale-3&quot;);        System.loadLibrary(&quot;ffmpeg-video&quot;);    &#125;    public native static void decode(String input,String output);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>对编译生成.h头文件进行实现，创建ffmpeg_video.c</li></ol><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;&#x2F;&#x2F; Created by Administrator on 2019&#x2F;3&#x2F;27.&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; Created by Administrator on 2019&#x2F;3&#x2F;26.&#x2F;&#x2F;#include &lt;android&#x2F;log.h&gt;#include &quot;cn_onestravel_ndk_ffmpegdecodedemo_VideoUtils.h&quot;&#x2F;&#x2F;编码#include &quot;include&#x2F;libavcodec&#x2F;avcodec.h&quot;&#x2F;&#x2F;封装格式处理#include &quot;include&#x2F;libavformat&#x2F;avformat.h&quot;&#x2F;&#x2F;像素处理#include &quot;include&#x2F;libswscale&#x2F;swscale.h&quot;#include &quot;include&#x2F;libavutil&#x2F;avutil.h&quot;#include &quot;include&#x2F;libavutil&#x2F;frame.h&quot;#define LOGI(FORMAT,...) __android_log_print(ANDROID_LOG_INFO,&quot;FFMPEG&quot;,FORMAT,##__VA_ARGS__);#define LOGE(FORMAT,...) __android_log_print(ANDROID_LOG_ERROR,&quot;FFMPEG&quot;,FORMAT,##__VA_ARGS__);&#x2F;* * Class:     cn_onestravel_ndk_ffmpegdecode_VoideUtils * Method:    decode * Signature: (Ljava&#x2F;lang&#x2F;String;Ljava&#x2F;lang&#x2F;String;)V *&#x2F;JNIEXPORT void JNICALL Java_cn_onestravel_ndk_ffmpegdecodedemo_VideoUtils_decode  (JNIEnv * env, jclass jcls, jstring input_jstr, jstring output_jstr)&#123;  &#x2F;&#x2F;需要转码的视频文件(输入的视频文件)  const char* input_cstr &#x3D; (*env)-&gt;GetStringUTFChars(env,input_jstr,NULL);  const char* output_cstr &#x3D; (*env)-&gt;GetStringUTFChars(env,output_jstr,NULL);  &#x2F;&#x2F;1.注册所有组件  av_register_all();  &#x2F;&#x2F;封装格式上下文，统领全局的结构体，保存了视频文件封装格式的相关信息  AVFormatContext *pFormatCtx &#x3D; avformat_alloc_context();  &#x2F;&#x2F;2.打开输入视频文件  if (avformat_open_input(&amp;pFormatCtx, input_cstr, NULL, NULL) !&#x3D; 0)  &#123;  LOGE(&quot;%s&quot;,&quot;无法打开输入视频文件&quot;);  return;  &#125;  &#x2F;&#x2F;3.获取视频文件信息  if (avformat_find_stream_info(pFormatCtx,NULL) &lt; 0)  &#123;  LOGE(&quot;%s&quot;,&quot;无法获取视频文件信息&quot;);  return;  &#125;  &#x2F;&#x2F;获取视频流的索引位置  &#x2F;&#x2F;遍历所有类型的流（音频流、视频流、字幕流），找到视频流  int v_stream_idx &#x3D; -1;  int i &#x3D; 0;  &#x2F;&#x2F;number of streams  for (; i &lt; pFormatCtx-&gt;nb_streams; i++)  &#123;  &#x2F;&#x2F;流的类型  if (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type &#x3D;&#x3D; AVMEDIA_TYPE_VIDEO)  &#123;  v_stream_idx &#x3D; i;  break;  &#125;  &#125;  if (v_stream_idx &#x3D;&#x3D; -1)  &#123;  LOGE(&quot;%s&quot;,&quot;找不到视频流\n&quot;);  return;  &#125;  &#x2F;&#x2F;只有知道视频的编码方式，才能够根据编码方式去找到解码器  &#x2F;&#x2F;获取视频流中的编解码上下文  AVCodecContext *pCodecCtx &#x3D; pFormatCtx-&gt;streams[v_stream_idx]-&gt;codec;  &#x2F;&#x2F;4.根据编解码上下文中的编码id查找对应的解码  AVCodec *pCodec &#x3D; avcodec_find_decoder(pCodecCtx-&gt;codec_id);  &#x2F;&#x2F;（迅雷看看，找不到解码器，临时下载一个解码器）  if (pCodec &#x3D;&#x3D; NULL)  &#123;  LOGE(&quot;%s&quot;,&quot;找不到解码器\n&quot;);  return;  &#125;  &#x2F;&#x2F;5.打开解码器  if (avcodec_open2(pCodecCtx,pCodec,NULL)&lt;0)  &#123;  LOGE(&quot;%s&quot;,&quot;解码器无法打开\n&quot;);  return;  &#125;  &#x2F;&#x2F;输出视频信息  LOGI(&quot;视频的文件格式：%s&quot;,pFormatCtx-&gt;iformat-&gt;name);  LOGI(&quot;视频时长：%ld&quot;, (pFormatCtx-&gt;duration)&#x2F;1000000);  LOGI(&quot;视频的宽高：%d,%d&quot;,pCodecCtx-&gt;width,pCodecCtx-&gt;height);  LOGI(&quot;解码器的名称：%s&quot;,pCodec-&gt;name);  &#x2F;&#x2F;准备读取  &#x2F;&#x2F;AVPacket用于存储一帧一帧的压缩数据（H264）  &#x2F;&#x2F;缓冲区，开辟空间  AVPacket *packet &#x3D; (AVPacket*)av_malloc(sizeof(AVPacket));  &#x2F;&#x2F;AVFrame用于存储解码后的像素数据(YUV)  &#x2F;&#x2F;内存分配  AVFrame *pFrame &#x3D; av_frame_alloc();  &#x2F;&#x2F;YUV420  AVFrame *pFrameYUV &#x3D; av_frame_alloc();  &#x2F;&#x2F;只有指定了AVFrame的像素格式、画面大小才能真正分配内存  &#x2F;&#x2F;缓冲区分配内存  uint8_t *out_buffer &#x3D; (uint8_t *)av_malloc(avpicture_get_size(AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, pCodecCtx-&gt;height));  &#x2F;&#x2F;初始化缓冲区  avpicture_fill((AVPicture *)pFrameYUV, out_buffer, AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, pCodecCtx-&gt;height);  &#x2F;&#x2F;用于转码（缩放）的参数，转之前的宽高，转之后的宽高，格式等  struct SwsContext *sws_ctx &#x3D; sws_getContext(pCodecCtx-&gt;width,pCodecCtx-&gt;height,pCodecCtx-&gt;pix_fmt,  pCodecCtx-&gt;width, pCodecCtx-&gt;height, AV_PIX_FMT_YUV420P,  SWS_BICUBIC, NULL, NULL, NULL);  int got_picture, ret;  FILE *fp_yuv &#x3D; fopen(output_cstr, &quot;wb+&quot;);  int frame_count &#x3D; 0;  &#x2F;&#x2F;6.一帧一帧的读取压缩数据  while (av_read_frame(pFormatCtx, packet) &gt;&#x3D; 0)  &#123;  &#x2F;&#x2F;只要视频压缩数据（根据流的索引位置判断）  if (packet-&gt;stream_index &#x3D;&#x3D; v_stream_idx)  &#123;  &#x2F;&#x2F;7.解码一帧视频压缩数据，得到视频像素数据  ret &#x3D; avcodec_decode_video2(pCodecCtx, pFrame, &amp;got_picture, packet);  if (ret &lt; 0)  &#123;  LOGE(&quot;%s&quot;,&quot;解码错误&quot;);  return;  &#125;  &#x2F;&#x2F;为0说明解码完成，非0正在解码  if (got_picture)  &#123;  &#x2F;&#x2F;AVFrame转为像素格式YUV420，宽高  &#x2F;&#x2F;2 6输入、输出数据  &#x2F;&#x2F;3 7输入、输出画面一行的数据的大小 AVFrame 转换是一行一行转换的  &#x2F;&#x2F;4 输入数据第一列要转码的位置 从0开始  &#x2F;&#x2F;5 输入画面的高度  sws_scale(sws_ctx, pFrame-&gt;data, pFrame-&gt;linesize, 0, pCodecCtx-&gt;height,  pFrameYUV-&gt;data, pFrameYUV-&gt;linesize);  &#x2F;&#x2F;输出到YUV文件  &#x2F;&#x2F;AVFrame像素帧写入文件  &#x2F;&#x2F;data解码后的图像像素数据（音频采样数据）  &#x2F;&#x2F;Y 亮度 UV 色度（压缩了） 人对亮度更加敏感  &#x2F;&#x2F;U V 个数是Y的1&#x2F;4  int y_size &#x3D; pCodecCtx-&gt;width * pCodecCtx-&gt;height;  fwrite(pFrameYUV-&gt;data[0], 1, y_size, fp_yuv);  fwrite(pFrameYUV-&gt;data[1], 1, y_size &#x2F; 4, fp_yuv);  fwrite(pFrameYUV-&gt;data[2], 1, y_size &#x2F; 4, fp_yuv);  frame_count++;  LOGI(&quot;解码第%d帧&quot;,frame_count);  &#125;  &#125;  &#x2F;&#x2F;释放资源  av_free_packet(packet);  &#125;  fclose(fp_yuv);  (*env)-&gt;ReleaseStringUTFChars(env,input_jstr,input_cstr);  (*env)-&gt;ReleaseStringUTFChars(env,output_jstr,output_cstr);  av_frame_free(&amp;pFrame);  avcodec_close(pCodecCtx);  avformat_free_context(pFormatCtx);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>Activity 实现</li></ol><pre class="line-numbers language-none"><code class="language-none">public class MainActivity extends AppCompatActivity &#123;    private boolean permission;    private VideoThread videoThread;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        requestPermission();        videoThread &#x3D; new VideoThread();    &#125;    &#x2F;**     * 获取权限     *&#x2F;    private void requestPermission() &#123;        if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.M) &#123;            String[] perms &#x3D; &#123;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&#125;;            if (checkSelfPermission(perms[0]) &#x3D;&#x3D; PackageManager.PERMISSION_DENIED) &#123;                permission &#x3D; false;                requestPermissions(perms, 200);            &#125; else &#123;                permission &#x3D; true;            &#125;        &#125;    &#125;    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) &#123;        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode &#x3D;&#x3D; 200) &#123;            if (grantResults[0] &#x3D;&#x3D; PackageManager.PERMISSION_GRANTED) &#123;                permission &#x3D; true;            &#125;        &#125;    &#125;    public void decode(View view) &#123;        if (!permission) &#123;            Toast.makeText(this, &quot;请允许存储权限&quot;, Toast.LENGTH_SHORT).show();            requestPermission();            return;        &#125;        if (videoThread &#x3D;&#x3D; null) &#123;            videoThread &#x3D; new VideoThread();        &#125;        try &#123;            if(!videoThread.isAlive()) &#123;                videoThread.start();            &#125;        &#125;catch (Exception e)&#123;            e.printStackTrace();        &#125;    &#125;    @Override    protected void onDestroy() &#123;        videoThread &#x3D; null;        super.onDestroy();    &#125;    public static class VideoThread extends Thread &#123;        @Override        public void run() &#123;            super.run();            String input &#x3D; Environment.getExternalStorageDirectory().getAbsolutePath() + &quot;&#x2F;input.mp4&quot;;            String output &#x3D; Environment.getExternalStorageDirectory().getAbsolutePath() + &quot;&#x2F;out.yuv&quot;;            VideoUtils.decode(input, output);            Log.i(&quot;Activity&quot;,&quot;编码完成&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>运行程序，安装到手机，进行解码成 yuv</li></ol>]]></content>
      
      
      <categories>
          
          <category> NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转数组的最小数字</title>
      <link href="20190320/algorithm/9.xuan-zhuan-shu-zu-de-zui-xiao-shu-zi/"/>
      <url>20190320/algorithm/9.xuan-zhuan-shu-zu-de-zui-xiao-shu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="9-旋转数组的最小数字"><a class="markdownIt-Anchor" href="#9-旋转数组的最小数字"></a> 9. 旋转数组的最小数字</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。<br />输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。<br />例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。</p><p>NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>该题目考察的是使用二分法开实现查找，<br />中间位置：<code>mid = start + (end - start)/2</code></p><p><strong>需要考虑三种情况：</strong></p><p>1.中间位数值大于末尾数值（ <code>array[mid] &gt; array[end]</code>）:<br />出现这种情况的array类似<code>&#123;3,4,5,6,1,2&#125;</code>，现在最小数字一定在mid的右边。<br />则:<code>start = mid + 1</code><br />2. 中间位数值等于末尾数值（<code>array[mid] == array[high]</code>):<br />出现这种情况的array类似<code>&#123;1,0,1,1,1&#125;</code> 或者<code>&#123;1,1,1,0,1&#125;</code>，现在最小数值不好确定是在mid左边或者右边，则将右侧末尾位置逐渐缩小，继续检测<br /><code>high = high - 1</code><br />3. 中间位数值小于末尾位数值（<code>array[mid] &lt; array[high]</code>）:<br />出现这种情况可以确定最小数字一定在mid的左边（或者就是mid位置的值），则：<br /><code>high = mid</code></p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 查找旋转数组中的最小值 * @param array 旋转数组 * @return 数组中的最小值 */</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">minNumberInRotateArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> array<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            end <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> array<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">minNumberInRotateArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"> <span class="token comment">/** * 查找旋转数组中的最小值 * @param array 旋转数组 * @return 数组中的最小值 */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">minNumberInRotateArray</span><span class="token punctuation">(</span>array<span class="token operator">:</span> IntArray<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> array<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> start <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> end <span class="token operator">=</span> array<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        <span class="token keyword">when</span> <span class="token punctuation">&#123;</span>            array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token punctuation">&#125;</span>            array<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> array<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                end<span class="token operator">--</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                end <span class="token operator">=</span> mid            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> array<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> arr <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">minNumberInRotateArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba?tpId=13&amp;tqId=11159&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio下集成Fmod，实现仿QQ变声效果（二）</title>
      <link href="20190318/android-ndk/androidstudio-xia-ji-cheng-fmod-shi-xian-fang-qq-bian-sheng-xiao-guo-er/"/>
      <url>20190318/android-ndk/androidstudio-xia-ji-cheng-fmod-shi-xian-fang-qq-bian-sheng-xiao-guo-er/</url>
      
        <content type="html"><![CDATA[<h1 id="androidstudio下集成fmod实现仿qq变声效果二"><a class="markdownIt-Anchor" href="#androidstudio下集成fmod实现仿qq变声效果二"></a> AndroidStudio下集成Fmod，实现仿QQ变声效果（二）</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p><strong>前一篇博客，我们简单了解了一下 fmod 音频引擎，实现了使用 fmod 来进行音频播放，今天我们在上一个项目的基础上来实现仿QQ变声的效果</strong></p><h2 id="一-android-布局及点击事件实现"><a class="markdownIt-Anchor" href="#一-android-布局及点击事件实现"></a> 一、Android 布局及点击事件实现</h2><h3 id="1-页面布局"><a class="markdownIt-Anchor" href="#1-页面布局"></a> 1、页面布局</h3><p><strong>简单的进行页面布局，有两个布局，一个是录音界面，长按按钮录音，显示录音时长；另一个是录音完成之后，对声音进行音效处理的界面，包含原声、萝莉、大叔、搞怪、空灵、惊悚六个按钮，并添加了一个返回重新录音的按钮。界面效果如下：</strong></p><p><img src="/images/20190318/record.png" alt="录音" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190318/record.png" class="lozad post-image"></p><p><img src="/images/20190318/effect.png" alt="音效处理" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190318/effect.png" class="lozad post-image"></p><h3 id="2-长按录音事件"><a class="markdownIt-Anchor" href="#2-长按录音事件"></a> 2、长按录音事件</h3><p><strong>在这里，我使用了一个录音的工具类，然后处理录音按钮的触摸事件，判断按下和松开的事件，来进行录音，需要录音和存储权限（注意6.0以上动态检查权限，7.0的文件读取权限）</strong></p><p><strong>在使用录音文件播放的时候，第一次是录音生成amr文件，是压缩后的文件，导致在使用 fmod 处理音效以及播放时失败，不能播放出声音，最后换成mav文件，在可以进行音效处理。</strong></p><h4 id="21-权限判断"><a class="markdownIt-Anchor" href="#21-权限判断"></a> 2.1 权限判断</h4><p>判断是否获取了录音权限和文件存储权限</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * 获取权限 *&#x2F;private void requestPermission() &#123;    if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.M) &#123;        String[] perms &#x3D; &#123;&quot;android.permission.RECORD_AUDIO&quot;, &quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&#125;;        if (checkSelfPermission(perms[0]) &#x3D;&#x3D; PackageManager.PERMISSION_DENIED ||                checkSelfPermission(perms[1]) &#x3D;&#x3D; PackageManager.PERMISSION_DENIED) &#123;            permission &#x3D; false;            requestPermissions(perms, 200);        &#125; else &#123;            permission &#x3D; true;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="22-处理长按录音效果"><a class="markdownIt-Anchor" href="#22-处理长按录音效果"></a> 2.2 处理长按录音效果</h4><pre class="line-numbers language-none"><code class="language-none">public class MyHandler extends Handler &#123;    @Override    public void handleMessage(Message msg) &#123;        super.handleMessage(msg);        switch (msg.what) &#123;            case RECORD_START:                try &#123;                    audioRecordUtils.startRecordAndFile();                    recording &#x3D; true;                &#125; catch (Exception e) &#123;                    e.printStackTrace();                    recording &#x3D; false;                    requestPermission();                &#125;                break;            case RECORD_FINISH:                recording &#x3D; false;                audioRecordUtils.stopRecordAndFile();                break;            case RECORD_CANCEL:                audioRecordUtils.stopRecordAndFile();                recording &#x3D; false;                break;        &#125;    &#125;&#125;@Overrideprotected void onCreate(Bundle savedInstanceState) &#123;    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    org.fmod.FMOD.init(this);    audioRecordUtils &#x3D; AudioRecordUtils.getInstance();    audioRecordUtils.setOnAudioStatusUpdateListener(this);    recordBtn &#x3D; findViewById(R.id.recordBtn);    recordLl &#x3D; findViewById(R.id.recordLl);    recordTimeTv &#x3D; findViewById(R.id.recordTimeTv);    recordBtn.setOnTouchListener(this);    effectUtils &#x3D; new EffectUtils();    requestPermission();&#125;@Overridepublic boolean onTouch(View view, MotionEvent motionEvent) &#123;    switch (motionEvent.getAction()) &#123;        case MotionEvent.ACTION_DOWN:            if (permission) &#123;                handler.sendEmptyMessage(RECORD_START);            &#125; else &#123;                Toast.makeText(this, &quot;请先同意录音和存储功能权限后使用&quot;, Toast.LENGTH_SHORT).show();                requestPermission();            &#125;            break;        case MotionEvent.ACTION_UP:            if (recording) &#123;                if (mTime &lt; 1000) &#123;                    handler.sendEmptyMessage(RECORD_CANCEL);                &#125;                handler.sendEmptyMessage(RECORD_FINISH);            &#125; else &#123;                super.onTouchEvent(motionEvent);            &#125;            break;    &#125;    return true;&#125;&#x2F;** * 录音中 *&#x2F; @Overridepublic void onUpdate(double db, AudioRecordUtils.RecordTimes times) &#123;    this.mTime &#x3D; times.getTime();    recordTimeTv.setText(&quot;... &quot; + times.getFormatTime(&quot;mm:ss&quot;) + &quot; ...&quot;);&#125;&#x2F;** * 录音完成 *&#x2F;@Overridepublic void onFinish(float seconds, String filePath) &#123;    recordFilePath &#x3D; filePath;    recordLl.setVisibility(View.GONE);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-ndk实现音效"><a class="markdownIt-Anchor" href="#二-ndk实现音效"></a> 二、NDK实现音效</h2><h3 id="1-native-方法声明"><a class="markdownIt-Anchor" href="#1-native-方法声明"></a> 1、native 方法声明</h3><p><strong>创建 org.fmod.core.EffectUtils.java 文件，声明音效变换的 native 方法，并且定义音效类型常量</strong></p><pre class="line-numbers language-none"><code class="language-none">public static final int MODE_NORMAL &#x3D; 0;public static final int MODE_LUOLI &#x3D; 1;public static final int MODE_DASHU &#x3D; 2;public static final int MODE_GAOGUAI &#x3D; 3;public static final int MODE_KONGLING &#x3D; 4;public static final int MODE_JINGSONG &#x3D; 5; &#x2F;** * 音效处理 native 方法 * @param path 音频源文件路径 * @param mode 特效模式 *&#x2F;public native void effect(String path,int mode);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-生成头文件处理android页面的点击事件"><a class="markdownIt-Anchor" href="#2-生成头文件处理android页面的点击事件"></a> 2、生成头文件,处理Android页面的点击事件</h3><p><strong>进入app/src/main/java目录下使用javah命令将创建好的org.fmod.core.EffectUtils.java 编译生成.h 头文件;并将该头文件移动到 cpp 目录下</strong></p><pre class="line-numbers language-none"><code class="language-none">javah -encoding utf-8 org.fmod.core.EffectUtils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Android 页面点击事件</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * 按钮点击事件 * @param view *&#x2F;public void onClick(View view) &#123;    switch (view.getId()) &#123;        case R.id.reRecordTv:            recordTimeTv.setText(&quot;长按开始录音&quot;);            recordLl.setVisibility(View.VISIBLE);            break;        case R.id.normalLL:        effectUtils.effect(recordFilePath,EffectUtils.MODE_NORMAL);            break;        case R.id.luoliLL:            effectUtils.effect(recordFilePath,EffectUtils.MODE_LUOLI);            break;        case R.id.dashuLL:            effectUtils.effect(recordFilePath,EffectUtils.MODE_DASHU);            break;        case R.id.gaoguaiLL:            effectUtils.effect(recordFilePath,EffectUtils.MODE_GAOGUAI);            break;        case R.id.konglingLL:            effectUtils.effect(recordFilePath,EffectUtils.MODE_KONGLING);            break;        case R.id.jingsongLL:            effectUtils.effect(recordFilePath,EffectUtils.MODE_JINGSONG);            break;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-native-实现"><a class="markdownIt-Anchor" href="#3-native-实现"></a> 3、native 实现</h3><p><strong>在 cpp 目录下创建 effect.cpp 文件，来实现 native 方法，并将 CMakeLists.txt 中的配置稍作修改</strong></p><p>CMakeLists.txt</p><pre class="line-numbers language-none"><code class="language-none">cmake_minimum_required(VERSION 3.4.1)set(distribution_DIR $&#123;PROJECT_SOURCE_DIR&#125;..&#x2F;..&#x2F;jniLibs)include_directories(src&#x2F;main&#x2F;cpp&#x2F;inc)add_library( effect        SHARED        effect.cpp)add_library( fmod        SHARED        IMPORTED )set_target_properties( fmod        PROPERTIES IMPORTED_LOCATION        $&#123;distribution_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libfmod.so)add_library( fmodL        SHARED        IMPORTED )set_target_properties( fmodL        PROPERTIES IMPORTED_LOCATION        $&#123;distribution_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libfmodL.so )find_library(         log-lib        log)target_link_libraries( effect        fmod        fmodL        $&#123;log-lib&#125; )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>effect.cpp</p><pre class="line-numbers language-none"><code class="language-none">#include &quot;org_fmod_core_EffectUtils.h&quot;#include &quot;inc&#x2F;fmod.h&quot;#include &quot;inc&#x2F;fmod.hpp&quot;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;android&#x2F;log.h&gt;#define LOGI(FORMAT, ...) __android_log_print(ANDROID_LOG_INFO,&quot;FILE_PATCH&quot;,FORMAT,__VA_ARGS__);#define LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,&quot;FILE_PATCH&quot;,FORMAT,__VA_ARGS__);JNIEXPORT void JNICALL Java_org_fmod_core_EffectUtils_effect        (JNIEnv *env, jobject jobj, jstring j_file_path, jint j_mode) &#123;    &#x2F;&#x2F;路径转换    const char *file_path &#x3D; env-&gt;GetStringUTFChars(j_file_path, NULL);    bool playing &#x3D; true;    &#x2F;&#x2F;加载音频文件    FMOD::System *system;    FMOD::Sound *sound;    FMOD::Channel *channel;    FMOD::DSP *dsp;    float frequency;    try &#123;        &#x2F;&#x2F;初始化        System_Create(&amp;system);        system-&gt;init(32, FMOD_INIT_NORMAL, NULL);        LOGI(&quot;%s&quot;, file_path);        &#x2F;&#x2F;加载录音文件到 sound        system-&gt;createSound(file_path, FMOD_DEFAULT,NULL, &amp;sound);        &#x2F;&#x2F;播放音频文件        system-&gt;playSound(sound, 0, false, &amp;channel);        &#x2F;&#x2F;播放过程中实现不同的音效配置        &#x2F;&#x2F;在fmod中，处理音效就是更改channel（音轨）        switch (j_mode) &#123;            case org_fmod_core_EffectUtils_MODE_NORMAL:                &#x2F;&#x2F;无需处理                LOGI(&quot;%s&quot;, &quot;正常播放&quot;);                break;            case org_fmod_core_EffectUtils_MODE_LUOLI:                &#x2F;&#x2F;女声为高声，需要将声音提高                &#x2F;&#x2F;DSP 中定义了一些对声音处理的特效，                system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT, &amp;dsp);                dsp-&gt;setParameterFloat(FMOD_DSP_PITCHSHIFT_PITCH, 2.5);                channel-&gt;addDSP(0, dsp);                LOGI(&quot;%s&quot;, &quot;萝莉&quot;)                break;            case org_fmod_core_EffectUtils_MODE_DASHU:                &#x2F;&#x2F;大神为高声，需要将声音音效降低                &#x2F;&#x2F;DSP 中定义了一些对声音处理的特效，                system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT, &amp;dsp);                dsp-&gt;setParameterFloat(FMOD_DSP_PITCHSHIFT_PITCH, 0.6);                channel-&gt;addDSP(0, dsp);                LOGI(&quot;%s&quot;, &quot;大叔&quot;)                break;            case org_fmod_core_EffectUtils_MODE_GAOGUAI:                &#x2F;&#x2F;搞怪                &#x2F;&#x2F;提高说话的速度                channel-&gt;getFrequency(&amp;frequency);                frequency &#x3D; frequency * 1.6;                channel-&gt;setFrequency(frequency);                LOGI(&quot;%s&quot;, &quot;搞怪&quot;)                break;            case org_fmod_core_EffectUtils_MODE_KONGLING:                &#x2F;&#x2F;空灵就是产生回声，外加一点低音                system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT, &amp;dsp);                dsp-&gt;setParameterFloat(FMOD_DSP_PITCHSHIFT_PITCH, 0.9);                channel-&gt;addDSP(0, dsp);                system-&gt;createDSPByType(FMOD_DSP_TYPE_ECHO, &amp;dsp);                dsp-&gt;setParameterFloat(FMOD_DSP_ECHO_DELAY, 350);                dsp-&gt;setParameterFloat(FMOD_DSP_ECHO_FEEDBACK, 15);                channel-&gt;addDSP(1, dsp);                LOGI(&quot;%s&quot;, &quot;空灵&quot;)                break;            case org_fmod_core_EffectUtils_MODE_JINGSONG:                &#x2F;&#x2F;惊悚                system-&gt;createDSPByType(FMOD_DSP_TYPE_TREMOLO, &amp;dsp);                dsp-&gt;setParameterFloat(FMOD_DSP_TREMOLO_DEPTH, 0.5);                channel-&gt;addDSP(0,dsp);                LOGI(&quot;%s&quot;, &quot;惊悚&quot;)                break;            default:                break;        &#125;    &#125; catch (...) &#123;        LOGE(&quot;%s&quot;, &quot;effect error&quot;);        goto end;    &#125;    &#x2F;&#x2F;更新状态    system-&gt;update();    &#x2F;&#x2F;判断是否在播放    while (playing) &#123;        LOGI(&quot;%s,%d&quot;, &quot;playing&quot;,playing)        channel-&gt;isPlaying(&amp;playing);        usleep(1 * 1000 * 1000);        LOGI(&quot;%s,%d&quot;, &quot;playing&quot;,playing)    &#125;    goto end;    &#x2F;&#x2F;结束，释放资源    end:    env-&gt;ReleaseStringUTFChars(j_file_path, file_path);    sound-&gt;release();    system-&gt;close();    system-&gt;release();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-附表"><a class="markdownIt-Anchor" href="#4-附表"></a> 4、附表</h3><h4 id="41-dsp_type-类型说明"><a class="markdownIt-Anchor" href="#41-dsp_type-类型说明"></a> 4.1 DSP_TYPE 类型说明</h4><p><strong>在创建DSP时，system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT, &amp;dsp);  需要传递FMOD_DSP_TYPE,下面介绍一下DSP_TYPE 类型</strong></p><table><thead><tr><th>类型名称</th><th>说明</th></tr></thead><tbody><tr><td>FMOD_DSP_TYPE_UNKNOWN</td><td>此单元是通过非FMOD插件创建的，因此具有未知目的。</td></tr><tr><td>FMOD_DSP_TYPE_MIXER</td><td>此单元除了接收输入并将它们混合在一起然后将结果提供给声卡单元之外什么都不做。</td></tr><tr><td>FMOD_DSP_TYPE_OSCILLATOR</td><td>此单元生成正弦/方波/锯/三角形或噪声音。</td></tr><tr><td>FMOD_DSP_TYPE_LOWPASS</td><td>此单元使用高质量的谐振低通滤波器算法过滤声音，但消耗更多的CPU时间。已弃用，将在以后的版本中删除（有关替代版本，请参阅FMOD_DSP_LOWPASS备注）。</td></tr><tr><td>FMOD_DSP_TYPE_ITLOWPASS</td><td>此单元使用脉冲跟踪器中使用的谐振低通滤波器算法过滤声音，但截止范围有限（0到8060hz）。</td></tr><tr><td>FMOD_DSP_TYPE_HIGHPASS</td><td>此单元使用谐振高通滤波器算法过滤声音。已弃用，将在以后的版本中删除（有关替代版本，请参阅FMOD_DSP_HIGHPASS备注）。</td></tr><tr><td>FMOD_DSP_TYPE_ECHO</td><td>此单元在声音上产生回声并以所需速率淡出。</td></tr><tr><td>FMOD_DSP_TYPE_FADER</td><td>此单位平移和缩放单位的音量。</td></tr><tr><td>FMOD_DSP_TYPE_FLANGE</td><td>此单元对声音产生法兰效果。</td></tr><tr><td>FMOD_DSP_TYPE_DISTORTION</td><td>此单位扭曲声音。</td></tr><tr><td>FMOD_DSP_TYPE_NORMALIZE</td><td>此单元将声音标准化或放大到一定水平。</td></tr><tr><td>FMOD_DSP_TYPE_LIMITER</td><td>此单位将声音限制在一定水平。</td></tr><tr><td>FMOD_DSP_TYPE_PARAMEQ</td><td>此单元衰减或放大选定的频率范围。已弃用，将在以后的版本中删除（有关替代版本，请参阅FMOD_DSP_PARAMEQ备注）。</td></tr><tr><td>FMOD_DSP_TYPE_PITCHSHIFT</td><td>此单位在不改变播放速度的情况下弯曲声音的音高。</td></tr><tr><td>FMOD_DSP_TYPE_CHORUS</td><td>此单位对声音产生合唱效果。</td></tr><tr><td>FMOD_DSP_TYPE_VSTPLUGIN</td><td>此单元允许使用Steinberg VST插件</td></tr><tr><td>FMOD_DSP_TYPE_WINAMPPLUGIN</td><td>此单元允许使用Nullsoft Winamp插件</td></tr><tr><td>FMOD_DSP_TYPE_ITECHO</td><td>此单元在声音上产生回声，并以Impulse Tracker中使用的所需速率淡出。</td></tr><tr><td>FMOD_DSP_TYPE_COMPRESSOR</td><td>此单元实现动态压缩（链接/非链接多声道，宽带）</td></tr><tr><td>FMOD_DSP_TYPE_SFXREVERB</td><td>此单元实现SFX混响</td></tr><tr><td>FMOD_DSP_TYPE_LOWPASS_SIMPLE</td><td>此单元使用简单的低通滤波器进行声音滤波，无谐振，但具有灵活的截止频率且速度快。已弃用，将在以后的版本中删除（有关替代版本，请参阅FMOD_DSP_LOWPASS_SIMPLE备注）。</td></tr><tr><td>FMOD_DSP_TYPE_DELAY</td><td>此单元在声音的各个声道上产生不同的延迟。</td></tr><tr><td>FMOD_DSP_TYPE_TREMOLO</td><td>此单元对声音产生颤音/斩波效果。</td></tr><tr><td>FMOD_DSP_TYPE_LADSPAPLUGIN</td><td>不支持/不推荐使用。</td></tr><tr><td>FMOD_DSP_TYPE_SEND</td><td>该单元将信号的副本发送到DSP树中任何位置的返回DSP。 * /</td></tr><tr><td>FMOD_DSP_TYPE_RETURN</td><td>本机接收来自多个发送DSP的信号。</td></tr><tr><td>FMOD_DSP_TYPE_HIGHPASS_SIMPLE</td><td>此单元使用简单的高通滤波器无声共振，但具有灵活的截止频率且速度快。已弃用，将在以后的版本中删除（有关替代版本，请参阅FMOD_DSP_HIGHPASS_SIMPLE备注）。</td></tr><tr><td>FMOD_DSP_TYPE_PAN</td><td>此单元平移信号，也可能是上混或下混。</td></tr><tr><td>FMOD_DSP_TYPE_THREE_EQ</td><td>此单元是三频段均衡器。</td></tr><tr><td>FMOD_DSP_TYPE_FFT</td><td>该单元简单地分析信号并通过getParameter提供频谱信息。 * /</td></tr><tr><td>FMOD_DSP_TYPE_LOUDNESS_METER</td><td>此单元分析信号的响度和真峰值。</td></tr><tr><td>FMOD_DSP_TYPE_ENVELOPEFOLLOWER</td><td>此单元跟踪输入/侧链信号的包络。已弃用，将在以后的版本中删除。</td></tr><tr><td>FMOD_DSP_TYPE_CONVOLUTIONREVERB</td><td>此单元实现卷积混响。</td></tr><tr><td>FMOD_DSP_TYPE_CHANNELMIX</td><td>此单元提供每信号通道增益和输出通道映射，以允许由多组信号组成的1个多通道信号映射到单个输出信号。</td></tr><tr><td>FMOD_DSP_TYPE_TRANSCEIVER</td><td>此单元从最多32个不同的插槽中选择“发送”和“接收”。它就像发送/返回，但它使用全局槽而不是返回作为目标。它还有其他功能。多个收发器可以从单个通道接收，或者多个收发器可以发送到单个通道，或两者的组合。</td></tr><tr><td>FMOD_DSP_TYPE_OBJECTPAN</td><td>此单元将信号发送到3d对象编码器，如Dolby Atmos。支持FMOD_D的子集</td></tr></tbody></table><h4 id="42-dsp-的参数类型"><a class="markdownIt-Anchor" href="#42-dsp-的参数类型"></a> 4.2 DSP 的参数类型</h4><p><strong>在设置 DSP 的参数类型时，可在 fmod_dsp_effects.h 头文件中查询对应的 DSP类型，即可看到对应的参数类型</strong></p><p>如：FMOD_DSP_TREMOLO,在头文件中查到如下内容</p><pre class="line-numbers language-none"><code class="language-none">typedef enum&#123;    FMOD_DSP_TREMOLO_FREQUENCY,     &#x2F;* (Type:float) - LFO frequency in Hz.  0.1 to 20.  Default &#x3D; 5. *&#x2F;    FMOD_DSP_TREMOLO_DEPTH,         &#x2F;* (Type:float) - Tremolo depth.  0 to 1.  Default &#x3D; 1. *&#x2F;    FMOD_DSP_TREMOLO_SHAPE,         &#x2F;* (Type:float) - LFO shape morph between triangle and sine.  0 to 1.  Default &#x3D; 0. *&#x2F;    FMOD_DSP_TREMOLO_SKEW,          &#x2F;* (Type:float) - Time-skewing of LFO cycle.  -1 to 1.  Default &#x3D; 0. *&#x2F;    FMOD_DSP_TREMOLO_DUTY,          &#x2F;* (Type:float) - LFO on-time.  0 to 1.  Default &#x3D; 0.5. *&#x2F;    FMOD_DSP_TREMOLO_SQUARE,        &#x2F;* (Type:float) - Flatness of the LFO shape.  0 to 1.  Default &#x3D; 0. *&#x2F;    FMOD_DSP_TREMOLO_PHASE,         &#x2F;* (Type:float) - Instantaneous LFO phase.  0 to 1.  Default &#x3D; 0. *&#x2F;    FMOD_DSP_TREMOLO_SPREAD         &#x2F;* (Type:float) - Rotation &#x2F; auto-pan effect.  -1 to 1.  Default &#x3D; 0. *&#x2F;&#125; FMOD_DSP_TREMOLO;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>DSP 参数类型</th><th>说明</th></tr></thead><tbody><tr><td>FMOD_DSP_TREMOLO_FREQUENCY</td><td>（类型：浮点） - 以Hz为单位的LFO频率。 0.1至20.默认= 5.</td></tr><tr><td>FMOD_DSP_TREMOLO_DEPTH</td><td>（类型：浮点） - 颤音深度。 0到1.默认= 1. * /</td></tr><tr><td>FMOD_DSP_TREMOLO_SHAPE</td><td>（类型：浮点） - 三角形和正弦之间的LFO形状变形。 0到1.默认= 0.</td></tr><tr><td>FMOD_DSP_TREMOLO_SKEW</td><td>（类型：浮点） - LFO周期的时间偏移。 -1到1.默认值= 0.</td></tr><tr><td>FMOD_DSP_TREMOLO_DUTY</td><td>（类型：浮点） - LFO开启时间。 0到1.默认值= 0.5。</td></tr><tr><td>FMOD_DSP_TREMOLO_SQUARE</td><td>（类型：浮点） - LFO形状的平坦度。 0到1.默认= 0.</td></tr><tr><td>FMOD_DSP_TREMOLO_PHASE</td><td>（类型：浮点） - 瞬时LFO相位。 0到1.默认= 0. * / FMOD_DSP_TREMOLO_SPREAD</td></tr></tbody></table><h2 id="项目源码"><a class="markdownIt-Anchor" href="#项目源码"></a> 项目源码</h2><p><a href="https://github.com/onestravel/QQVoiceChange">QQVoiceChange源码</a></p><p><strong>到此，我们以及实现集成 fmod 的模拟QQ变声项目，效果不是完全一样，但也有7分相似，；自己可研究其他效果，来实现模拟更多的声音特效。</strong></p>]]></content>
      
      
      <categories>
          
          <category> NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
            <tag> Fmod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩形覆盖</title>
      <link href="20190318/algorithm/8.3-ju-xing-fu-gai/"/>
      <url>20190318/algorithm/8.3-ju-xing-fu-gai/</url>
      
        <content type="html"><![CDATA[<h1 id="83-矩形覆盖"><a class="markdownIt-Anchor" href="#83-矩形覆盖"></a> 8.3 矩形覆盖</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p><p>比如n=3时，2*3的矩形块有3种覆盖方法：</p><p><img src="https://uploadfiles.nowcoder.com/images/20200218/6384065_1581999858239_64E40A35BE277D7E7C87D4DCF588BE84" alt="矩形覆盖 n=3" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://uploadfiles.nowcoder.com/images/20200218/6384065_1581999858239_64E40A35BE277D7E7C87D4DCF588BE84" class="lozad post-image"></p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>2*n的大矩形，和n个2*1的小矩形</p><p>其中 n*2为大矩阵的大小</p><p>有以下几种情形：</p><ol><li>n &lt;= 0 大矩形为  &lt;= 2*0,直接return 0；</li><li>n = 1大矩形为2*1，只有一种摆放方法，return1；</li><li>n = 2 大矩形为2*2，有两种摆放方法，return2；</li><li>n &gt;2 分为两步考虑：<ul><li>第一次摆放一块2*1的小矩阵，则摆放方法总共为f(n - 1)</li><li>再一次摆放一块2*1的小矩阵，则摆放方法总共为f(n-2)；因为，摆放了一块1*2的小矩阵，对应下方的1*2（用××表示）摆放方法就确定了，所以为f(n-2)</li></ul></li><li>可以看出 <code>f(n) = f(n-1) + f(n-2)</code>,就是一个斐波那契数列</li></ol><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 矩形覆盖 * f(n) = f(n-1) + f(n-2) */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rectCover</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">rectCover</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 矩形覆盖 * f(n) = f(n-1) + f(n-2) */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">rectCover</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token number">0</span>        <span class="token punctuation">&#125;</span>        n <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            n        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span>            <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">3</span><span class="token operator">..</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c <span class="token operator">=</span> a <span class="token operator">+</span> b                a <span class="token operator">=</span> b                b <span class="token operator">=</span> c            <span class="token punctuation">&#125;</span>            c        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">pringln</span><span class="token punctuation">(</span><span class="token function">rectCover</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&amp;tqId=11163&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变态跳台阶</title>
      <link href="20190317/algorithm/8.2-bian-tai-tiao-tai-jie/"/>
      <url>20190317/algorithm/8.2-bian-tai-tiao-tai-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="82-变态跳台阶"><a class="markdownIt-Anchor" href="#82-变态跳台阶"></a> 8.2 变态跳台阶</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>对于本题,有 一次 1阶或者2阶的跳法,也有一次n阶的跳法。</p><pre class="line-numbers language-none"><code class="language-none">f(1) &#x3D; 1f(2) &#x3D; f(2-1) + f(2-2)         &#x2F;&#x2F;f(2-2) 表示2阶一次跳2阶的次数。f(3) &#x3D; f(3-1) + f(3-2) + f(3-3) ...f(n) &#x3D; f(n-1) + f(n-2) + f(n-3) + ... + f(n-(n-1)) + f(n-n) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>n = 1时，只有1种跳法，<code>f(1) = 1</code></li><li>n = 2时，会有一次1阶或者2阶两种跳的方式，，这回归到了问题（1） ，<code>f(2) = f(2-1) + f(2-2)</code></li><li>n = 3时，会有1阶、2阶、3阶，三种跳的方式；那么就是第一次跳出1阶后面剩下：f(3-1);第一次跳出2阶，剩下f(3-2)；第一次3阶，那么剩下f(3-3)<br />则:  <code>f(3) = f(3-1) + f(3-2) + f(3-3)</code></li><li>n = n时，会有，1阶、2阶…n阶；总共n中跳的方式，则：<code>f(n) = f(n-1)+f(n-2)+...+f(n-(n-1)) + f(n-n) =&gt; f(0) + f(1) + f(2) + f(3) + ... f(n-2)+ f(n-1)</code></li><li>上面4的表达式可以看到<code>f(n) = f(0)+f(1)+...+f(n-2)+f(n-1)</code>,   <code>f(n-1) = f(0)+f(1)+...+f(n-2)</code>;则<code>f(n) = f(n-1)+f(n-1)</code>简化后可以写成：<code>f(n) = 2 * f(n-1)</code></li></ol><pre class="line-numbers language-math" data-language="math"><code class="language-math">f(n) &#x3D; 2*f(n-1)&#x3D;2^2 * f(n-2)&#x3D; ... &#x3D; 2^&#123;n-1&#125; * f(1)  &#x3D; 2^&#123;n-1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 递归变态跳台阶，可以跳1阶，2阶...n阶 * 时间复杂度 O(n) * @param n 总阶数 * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">jumpFloorII</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">jumpFloorII</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 数学公式发变态跳台阶，可以跳1阶，2阶...n阶 * ∵ f(n) = f(0)+f(1)+...+f(n-2)+f(n-1) * f(n-1) = f(0)+f(1)+...+f(n-2) * ∴ f(n) = f(n-1)+f(n-1) * f(n) = 2 * f(n-1)=2^2 * f(n-2)= ... = 2^&#123;n-1&#125; * f(1)  = 2^&#123;n-1&#125; * 时间复杂度 O(1) * @param n 总阶数 * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">jumpFloorIIMath</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 迭代发变态跳台阶，可以跳1阶，2阶...n阶 * 时间复杂度 O(n) * @param n 总阶数 * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">jumpFloorIIFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">jumpFloorII</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">jumpFloorIIMath</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">jumpFloorIIFor</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"> <span class="token comment">/**  * 递归变态跳台阶，可以跳1阶，2阶...n阶  * 时间复杂度 O(n)  * @param n 总阶数  * @return  */</span> <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">jumpFloorII</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token number">1</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">jumpFloorII</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token comment">/**  * 数学公式发变态跳台阶，可以跳1阶，2阶...n阶  * ∵ f(n) = f(0)+f(1)+...+f(n-2)+f(n-1)  * f(n-1) = f(0)+f(1)+...+f(n-2)  * ∴ f(n) = f(n-1)+f(n-1)  * f(n) = 2 * f(n-1)=2^2 * f(n-2)= ... = 2^&#123;n-1&#125; * f(1)  = 2^&#123;n-1&#125;  * 时间复杂度 O(1)  * @param n 总阶数  * @return  */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">jumpFloorIIMath</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token number">2.0</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">/**  * 迭代发变态跳台阶，可以跳1阶，2阶...n阶  * 时间复杂度 O(n)  * @param n 总阶数  * @return  */</span> <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">jumpFloorIIFor</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token number">1</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">2</span><span class="token operator">..</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             c <span class="token operator">*=</span> <span class="token number">2</span>         <span class="token punctuation">&#125;</span>         c     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token comment">/**  * 入口函数  */</span> <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">jumpFloorII</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">jumpFloorIIMath</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">jumpFloorIIFor</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&amp;tqId=11162&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳台阶</title>
      <link href="20190317/algorithm/8.1-tiao-tai-jie/"/>
      <url>20190317/algorithm/8.1-tiao-tai-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="81-跳台阶"><a class="markdownIt-Anchor" href="#81-跳台阶"></a> 8.1 跳台阶</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>对于本题,前提只有 一次 1阶或者2阶的跳法。</p><ol><li>如果两种跳法，1阶或者2阶，那么假定第一次跳的是一阶，那么剩下的是n-1个台阶，跳法是f(n-1);</li><li>假定第一次跳的是2阶，那么剩下的是n-2个台阶，跳法是f(n-2)</li><li>由a\b假设可以得出总跳法为: f(n) = f(n-1) + f(n-2)</li><li>然后通过实际的情况可以得出：只有一阶的时候 f(1) = 1 ,只有两阶的时候可以有 f(2) = 2</li><li>可以发现最终得出的是一个斐波那契数列：</li></ol><pre class="line-numbers language-none"><code class="language-none">        | 1     (n&#x3D;&#x3D;1)f(n) &#x3D;  | 2     (n&#x3D;&#x3D;2)        | f(n-1)+f(n-2)     (n&gt;&#x3D;3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 递归实现 * @param n * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">jumpFloor</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 迭代实现 * @param n * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">jumpFloorFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            c <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">jumpFloor</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">jumpFloorFor</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"> <span class="token comment">/** * 递归实现 * @param n * @return */</span><span class="token keyword">fun</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token number">1</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token number">1</span>        <span class="token punctuation">&#125;</span>        <span class="token number">2</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token number">2</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token function">jumpFloor</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 迭代实现 * @param n * @return */</span><span class="token keyword">fun</span> <span class="token function">jumpFloorFor</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token number">1</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token number">1</span>        <span class="token punctuation">&#125;</span>        <span class="token number">2</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token number">2</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span>            <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">3</span><span class="token operator">..</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                c <span class="token operator">=</span> a <span class="token operator">+</span> b                a <span class="token operator">=</span> b                b <span class="token operator">=</span> c            <span class="token punctuation">&#125;</span>            c        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">jumpFloor</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">jumpFloorFor</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&amp;tqId=11161&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列</title>
      <link href="20190316/algorithm/8.fei-bo-na-qi-shu-lie/"/>
      <url>20190316/algorithm/8.fei-bo-na-qi-shu-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="8斐波那契数列"><a class="markdownIt-Anchor" href="#8斐波那契数列"></a> 8.斐波那契数列</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。<br />n&lt;=39</p><p>本题知识点： 递归</p><h2 id="斐波那契"><a class="markdownIt-Anchor" href="#斐波那契"></a> 斐波那契</h2><p>斐波那契数列来源于兔子繁殖问题，所以也叫兔子序列。指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波那契数列以如下被以递推的方法定义：F(1)=1，F(2)=1, F(n)=F(n - 1)+F(n - 2)（n ≥ 3，n ∈ N*）</p><h2 id="递归实现"><a class="markdownIt-Anchor" href="#递归实现"></a> 递归实现</h2><h3 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h3><p>递归实现就是套用 公式F(1)=1，F(2)=1,当n&gt;=3时：F(n)=F(n - 1)+F(n - 2) 来实现的。<br />递归n次，时间复杂度O(2^n)</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><h4 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 递归求斐波那契数列 * * @param n  * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 递归求斐波那契数列 * * @param n * @return */</span><span class="token keyword">fun</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态规划迭代实现"><a class="markdownIt-Anchor" href="#动态规划迭代实现"></a> 动态规划（迭代）实现</h2><h3 id="解题思路-2"><a class="markdownIt-Anchor" href="#解题思路-2"></a> 解题思路</h3><p>因为斐波那契数列可以从左到右顺序的求出每一项的值，因此只需要顺序计算到n项即可，时间复杂度为O(n)的</p><h3 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h3><h4 id="java-代码-2"><a class="markdownIt-Anchor" href="#java-代码-2"></a> java 代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 循环求斐波那契数列 * * @param n * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码-2"><a class="markdownIt-Anchor" href="#kotlin-代码-2"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 循环求斐波那契数列 * * @param n * @return */</span><span class="token keyword">fun</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">3</span><span class="token operator">..</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c <span class="token operator">=</span> a <span class="token operator">+</span> b            a <span class="token operator">=</span> b            b <span class="token operator">=</span> c        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> c<span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="状态矩阵相乘求法"><a class="markdownIt-Anchor" href="#状态矩阵相乘求法"></a> 状态矩阵相乘求法</h2><h3 id="矩阵乘法"><a class="markdownIt-Anchor" href="#矩阵乘法"></a> 矩阵乘法</h3><p>一个 m * p 的矩阵和一个 p * n的矩阵相乘得到一个 m * n的矩阵</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>a</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>b</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>c</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>e</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>f</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>g</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>h</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mi>e</mi><mo>+</mo><mi>b</mi><mi>g</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>a</mi><mi>f</mi><mo>+</mo><mi>b</mi><mi>h</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>e</mi><mo>+</mo><mi>d</mi><mi>g</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>f</mi><mo>+</mo><mi>d</mi><mi>h</mi></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}a&amp;b \\  c&amp;d \\\end{bmatrix}\begin{bmatrix}e&amp;f \\  g&amp;h \\\end{bmatrix}=\begin{bmatrix}ae+bg&amp;af+bh \\  ce+dg&amp;cf+dh \\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">b</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault">h</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><h3 id="解题思路-3"><a class="markdownIt-Anchor" href="#解题思路-3"></a> 解题思路</h3><p>这是一个时间复杂度为O(log n)的算法。因为斐波那契数列在n大于等于三的时候严格遵守递推数列f(n) = f(n-1) + f(n-2)，而对于一个二阶的递推数列来说，我们可以用矩阵乘法来表示，且状态矩阵是2阶的方阵：</p><p>实现的推导原理如下：<br />数列的递推公式为：f(0)=0,f(1)=1，f(2)=2，<br />用矩阵表示为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}f(n) \\  f(n-1) \\\end{bmatrix}=\begin{bmatrix}1&amp;1 \\  1&amp;0 \\\end{bmatrix}\begin{bmatrix}f(n-1) \\  f(n-2) \\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>进一步，可以得出直接推导公式：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mn>2</mn></msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>=</mo><msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mi>n</mi></msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mi>n</mi></msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}f(n+1) \\  f(n) \\\end{bmatrix}=\begin{bmatrix}1&amp;1 \\  1&amp;0 \\\end{bmatrix}\begin{bmatrix}f(n) \\  f(n-1) \\\end{bmatrix}=\begin{bmatrix}1&amp;1 \\  1&amp;0 \\\end{bmatrix}^2\begin{bmatrix}f(n-1) \\  f(n-2) \\\end{bmatrix}=...=\begin{bmatrix}1&amp;1 \\  1&amp;0 \\\end{bmatrix}^{n-1}\begin{bmatrix}f(2) \\  f(1) \\\end{bmatrix}=\begin{bmatrix}1&amp;1 \\  1&amp;0 \\\end{bmatrix}^n\begin{bmatrix}f(1) \\  f(0) \\\end{bmatrix}=\begin{bmatrix}1&amp;1 \\  1&amp;0 \\\end{bmatrix}^n\begin{bmatrix}1 \\  0 \\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.604038em;vertical-align:-0.95003em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.6540080000000001em;"><span style="top:-3.9029000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.604038em;vertical-align:-0.95003em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.6540080000000001em;"><span style="top:-3.9029000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.454322em;vertical-align:-0.95003em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.504292em;"><span style="top:-3.9029000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.454322em;vertical-align:-0.95003em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.504292em;"><span style="top:-3.9029000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>也可以推导为：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><msup><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mi>n</mi></msup><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}f(n+1)&amp;f(n)\\f(n)&amp;f(n-1)\end{bmatrix}=\begin{bmatrix}1&amp;1 \\  1&amp;0 \\\end{bmatrix}^n=\begin{bmatrix}1&amp;1 \\  1&amp;0 \\\end{bmatrix}\begin{bmatrix}1&amp;1 \\  1&amp;0 \\\end{bmatrix}...\begin{bmatrix}1&amp;1 \\  1&amp;0 \\\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.454322em;vertical-align:-0.95003em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.504292em;"><span style="top:-3.9029000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>（不是很懂）</p><h3 id="代码实现-3"><a class="markdownIt-Anchor" href="#代码实现-3"></a> 代码实现</h3><h4 id="java-代码-3"><a class="markdownIt-Anchor" href="#java-代码-3"></a> java 代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 采用矩阵的解法 * 时间复杂度为O(logN) * * @param n * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fbnq <span class="token operator">=</span> <span class="token function">fbnq</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fbnq<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 单元矩阵 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> UNIT <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/** * 矩阵求斐波那契 * * @param n * @return */</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">fbnq</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> UNIT<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token function">fbnq</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//相当于矩阵的n次幂(A^n/2  * A^n/2 = A^(n/2+n/2) = A^n</span>        <span class="token keyword">return</span> <span class="token function">matrixMultiply</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token function">fbnq</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//相当于矩阵的n次幂(A^(n-1)/2  * A^(n-1)/2 = A^((n-1)/2+(n-1)/2+1) = A^n</span>        <span class="token keyword">return</span> <span class="token function">matrixMultiply</span><span class="token punctuation">(</span>UNIT<span class="token punctuation">,</span> <span class="token function">matrixMultiply</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 矩阵乘法 * * @param a 相乘的矩阵a * @param b 相乘的矩阵b * @return 矩阵相乘的结果 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">matrixMultiply</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> rows <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> cols <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>rows<span class="token punctuation">]</span><span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> matrix<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码-3"><a class="markdownIt-Anchor" href="#kotlin-代码-3"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 采用矩阵的解法 * 时间复杂度为O(logN) * * @param n * @return */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">val</span> arr <span class="token operator">=</span> <span class="token function">fbnq</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 单元矩阵 */</span><span class="token keyword">private</span> <span class="token keyword">val</span> UNIT <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">/** * 矩阵求斐波那契 * * @param n * @return */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">fbnq</span><span class="token punctuation">(</span>n<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>IntArray<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> UNIT    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> matrix <span class="token operator">=</span> <span class="token function">fbnq</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">matrixMultiply</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> matrix <span class="token operator">=</span> <span class="token function">fbnq</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">matrixMultiply</span><span class="token punctuation">(</span>UNIT<span class="token punctuation">,</span><span class="token function">matrixMultiply</span><span class="token punctuation">(</span>matrix<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 矩阵乘法 * * @param a 相乘的矩阵a * @param b 相乘的矩阵b * @return 矩阵相乘的结果 */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">matrixMultiply</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Array<span class="token operator">&lt;</span>IntArray<span class="token operator">></span><span class="token punctuation">,</span> b<span class="token operator">:</span> Array<span class="token operator">&lt;</span>IntArray<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>IntArray<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> row <span class="token operator">=</span> a<span class="token punctuation">.</span>size    <span class="token keyword">val</span> col <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size    <span class="token keyword">val</span> matrix <span class="token operator">=</span> Array<span class="token operator">&lt;</span>IntArray<span class="token operator">></span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">IntArray</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until row<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token keyword">in</span> <span class="token number">0</span> until col<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token keyword">in</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> matrix<span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&amp;tqId=11160&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用两个栈实现一个队列</title>
      <link href="20190315/algorithm/7.yong-liang-ge-zhan-shi-xian-yi-ge-dui-lie/"/>
      <url>20190315/algorithm/7.yong-liang-ge-zhan-shi-xian-yi-ge-dui-lie/</url>
      
        <content type="html"><![CDATA[<h1 id="7-用两个栈实现一个队列"><a class="markdownIt-Anchor" href="#7-用两个栈实现一个队列"></a> 7. 用两个栈实现一个队列</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>栈的特征是『先进后出』，队列的特征是『先进先出』，要用两个栈A和B实现队列，则可以使用两个栈的『先进后出』特性来实现队列<br />push时，将数据压入栈A；pop时，如果栈B没有数据，则将栈A数据全部压入栈B,在由栈B取出数据，进行返回，即可实现「先进先出」的队列</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/** * 简易队列 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 将数据放入队列     *     * @param node     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 从队列中取出数据     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//当栈2为空时，将栈1所有数据出栈，压入栈2</span>        <span class="token comment">//原则：当调用pop()方法且栈2数据为空的时候要一次性将栈1中的数据取出，并且在栈2数据不为空时，不能将栈1数据放入栈2,否则会出现后进先出的现象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token string">"current not find element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 判断队列数据是否为空     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Queue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">12345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 简易队列 */</span><span class="token keyword">class</span> Queue <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> stack1 <span class="token operator">=</span> Stack<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> stack2 <span class="token operator">=</span> Stack<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">/**     * 将数据放入队列     *     * @param node     */</span>    <span class="token keyword">fun</span> <span class="token function">push</span><span class="token punctuation">(</span>node<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 从队列中取出数据     *     * @return     */</span>    <span class="token keyword">fun</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>        <span class="token comment">//当栈2为空时，将栈1所有数据出栈，压入栈2</span>        <span class="token comment">//原则：当调用pop()方法且栈2数据为空的时候要一次性将栈1中的数据取出，并且在栈2数据不为空时，不能将栈1数据放入栈2,否则会出现后进先出的现象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token function">NoSuchElementException</span><span class="token punctuation">(</span><span class="token string">"current not find element"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 判断队列数据是否为空     * @return     */</span>    <span class="token keyword">val</span> isEmpty<span class="token operator">:</span> Boolean        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> queue <span class="token operator">=</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">12345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&amp;tqId=11158&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的下一个节点</title>
      <link href="20190310/algorithm/6.er-cha-shu-de-xia-yi-ge-jie-dian/"/>
      <url>20190310/algorithm/6.er-cha-shu-de-xia-yi-ge-jie-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="6-二叉树的下一个节点"><a class="markdownIt-Anchor" href="#6-二叉树的下一个节点"></a> 6. 二叉树的下一个节点</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>二叉树中序遍历顺序为 左中右</p><p>把传入的当前结点看做中结点，则：下一个节点为有两种况</p><ol><li>当前结点的右结点为空，则下一个结点是当前节的父结点/祖先结点；<ul><li>当父结点的左结点等于当前结点时，当前结点的一个结点为父结点；</li><li>当父结点的左结点不等于当前结点时，继续找父点的父结点；</li></ul></li><li>当前结点的右结点不为空，则当前节点有右子树则下一个结点为右子树的最左结点</li></ol><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 二叉树结点 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeLinkNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span> <span class="token comment">//当前结点值</span>    <span class="token class-name">TreeLinkNode</span> left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//当前结点的左结点</span>    <span class="token class-name">TreeLinkNode</span> right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//当前结点的右结点</span>    <span class="token class-name">TreeLinkNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//当前结点的父结点</span>    <span class="token class-name">TreeLinkNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 给定一个二叉树和其中的一个结点，找出中序遍历顺序的下一个结点并且返回 * 二叉树中序遍历顺序为 左中右 * 把传入的当前结点看做中，则：下一个节点为有两种情况 * 1. 当前结点的右结点为空，则下一个结点是当前节点的父结点/祖先结点； *  - 当父结点的左结点等于当前结点时，当前结点的下一个结点为父结点； *  - 当父结点的左结点不等于当前结点时，继续找父结点的父结点； * 2. 当前结点的右结点不为空，则当前节点有右子树，则下一个结点为右子树的最左结点 * * @param pNode * @return */</span><span class="token keyword">public</span> <span class="token class-name">TreeLinkNode</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token class-name">TreeLinkNode</span> pNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pNode <span class="token operator">==</span> pNode<span class="token punctuation">.</span>next<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> pNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeLinkNode</span> node <span class="token operator">=</span> pNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">TreeLinkNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeLinkNode</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeLinkNode</span> node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeLinkNode</span> node4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeLinkNode</span> node5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeLinkNode</span> node6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeLinkNode</span> node7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">TreeLinkNode</span> node8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node4<span class="token punctuation">.</span>right <span class="token operator">=</span> node7<span class="token punctuation">;</span>    node2<span class="token punctuation">.</span>left <span class="token operator">=</span> node4<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> node2<span class="token punctuation">;</span>    node6<span class="token punctuation">.</span>left <span class="token operator">=</span> node8<span class="token punctuation">;</span>    node3<span class="token punctuation">.</span>left <span class="token operator">=</span> node5<span class="token punctuation">;</span>    node3<span class="token punctuation">.</span>right <span class="token operator">=</span> node6<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> node3<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span>node4<span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 二叉树结点 */</span><span class="token keyword">class</span> <span class="token function">TreeLinkNode</span><span class="token punctuation">(</span><span class="token keyword">val</span> value<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> left<span class="token operator">:</span> TreeLinkNode<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//当前结点的左结点</span>    <span class="token keyword">var</span> right<span class="token operator">:</span> TreeLinkNode<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//当前结点的右结点</span>    <span class="token keyword">var</span> next<span class="token operator">:</span> TreeLinkNode<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//当前结点的父结点</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 给定一个二叉树和其中的一个结点，找出中序遍历顺序的下一个结点并且返回 * 二叉树中序遍历顺序为 左中右 * 把传入的当前结点看做中，则：下一个节点为有两种情况 * 1. 当前结点的右结点为空，则下一个结点是当前节点的父结点/祖先结点； * - 当父结点的左结点等于当前结点时，当前结点的下一个结点为父结点； * - 当父结点的左结点不等于当前结点时，继续找父结点的父结点； * 2. 当前结点的右结点不为空，则当前节点有右子树，则下一个结点为右子树的最左结点 * * @param pNode * @return */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">getNext</span><span class="token punctuation">(</span>pNode<span class="token operator">:</span> TreeLinkNode<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> TreeLinkNode<span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> pNode <span class="token operator">=</span> pNode    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pNode<span class="token operator">!!</span><span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pNode<span class="token operator">!!</span><span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pNode <span class="token operator">===</span> pNode<span class="token punctuation">.</span>next<span class="token operator">!!</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> pNode<span class="token punctuation">.</span>next            <span class="token punctuation">&#125;</span>            pNode <span class="token operator">=</span> pNode<span class="token punctuation">.</span>next        <span class="token punctuation">&#125;</span>        <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> node <span class="token operator">=</span> pNode<span class="token punctuation">.</span>right        <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token operator">!!</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span>left        <span class="token punctuation">&#125;</span>        node    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> root <span class="token operator">=</span> <span class="token function">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> node2 <span class="token operator">=</span> <span class="token function">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> node3 <span class="token operator">=</span> <span class="token function">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> node4 <span class="token operator">=</span> <span class="token function">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> node5 <span class="token operator">=</span> <span class="token function">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> node6 <span class="token operator">=</span> <span class="token function">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> node7 <span class="token operator">=</span> <span class="token function">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> node8 <span class="token operator">=</span> <span class="token function">TreeLinkNode</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    node4<span class="token punctuation">.</span>right <span class="token operator">=</span> node7    node2<span class="token punctuation">.</span>left <span class="token operator">=</span> node4    root<span class="token punctuation">.</span>left <span class="token operator">=</span> node2    node6<span class="token punctuation">.</span>left <span class="token operator">=</span> node8    node3<span class="token punctuation">.</span>left <span class="token operator">=</span> node5    node3<span class="token punctuation">.</span>right <span class="token operator">=</span> node6    root<span class="token punctuation">.</span>right <span class="token operator">=</span> node3    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span>node4<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/9023a0c988684a53960365b889ceaf5e?tpId=13&amp;tqId=11210&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio下集成Fmod，实现仿QQ变声效果（一）</title>
      <link href="20190310/android-ndk/androidstudio-xia-ji-cheng-fmod-shi-xian-fang-qq-bian-sheng-xiao-guo-yi/"/>
      <url>20190310/android-ndk/androidstudio-xia-ji-cheng-fmod-shi-xian-fang-qq-bian-sheng-xiao-guo-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="androidstudio下集成fmod实现仿qq变声效果"><a class="markdownIt-Anchor" href="#androidstudio下集成fmod实现仿qq变声效果"></a> AndroidStudio下集成Fmod，实现仿QQ变声效果</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p><strong>在使用QQ的时候，我们会发现有一个炫酷的功能，那就是变声，效果图如下;其实QQ变声效果就是使用了Fmod声音引擎，通过NDK的开发，来实现对声音的变换。今天我们先进行一下QQ变声效果的前期实现，先引入Fmod库，实现音频文件的播放</strong><br /><img src="/images/20190310/qq_voice_change.png" alt="QQ变声" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190310/qq_voice_change.png" class="lozad post-image"></p><h2 id="一-前期准备"><a class="markdownIt-Anchor" href="#一-前期准备"></a> 一、前期准备</h2><ul><li><strong><a href="https://www.fmod.com/download">【Fmod下载】</a></strong>：点击该连接后，进行注册，登录以后再下载,选择版本<br /><img src="/images/20190310/fmod_download.png" alt="Fmod下载" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190310/fmod_download.png" class="lozad post-image"></li><li><strong>【Android Studio】</strong>：Android Studio实现NDK支持<br /><img src="/images/20190310/ndk_download.png" alt="NDK下载" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190310/ndk_download.png" class="lozad post-image"></li></ul><h2 id="二-实现使用fmod播放assets下的音频"><a class="markdownIt-Anchor" href="#二-实现使用fmod播放assets下的音频"></a> 二、实现使用fmod播放assets下的音频</h2><h3 id="1-创建一个支持c的android项目"><a class="markdownIt-Anchor" href="#1-创建一个支持c的android项目"></a> 1、创建一个支持C++的Android项目</h3><p><img src="/images/20190310/create_1.png" alt="创建支持C++的Android项目-1" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190310/create_1.png" class="lozad post-image"></p><p><img src="/images/20190310/create_2.png" alt="创建支持C++的Android项目-2" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190310/create_2.png" class="lozad post-image"></p><p><img src="/images/20190310/create_3.png" alt="创建支持C++的Android项目-3" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20190310/create_3.png" class="lozad post-image"></p><p><strong>创建好之后会在app/src/main 下面看到cpp文件夹，这就是进行NDK开发的C/C++层的文件夹</strong></p><h3 id="2-配置android项目"><a class="markdownIt-Anchor" href="#2-配置android项目"></a> 2、配置Android项目</h3><ul><li>在 app/src/main 下创建 jniLibs 文件夹</li><li>将下载好的fmod包打开，进入到 api/lowlevel/ 下，可以看到 examples 、inc 、lib 三个文件夹</li><li>将 inc 文件夹整体复制到 src/main/cpp 目录下</li><li>将 lib 文件夹下的 fmod.jar 复制到 libs 目录下，并且右键该jar包，Add As Library</li><li>将 lib 文件夹下的 so 动态库的不同平台的文件夹复制到 刚刚创建好的 jniLibs 目录下</li><li>将 examples 目录下的common.h,common.cpp,common_platform.h,common_platform.cpp,play_sound.cpp 文件复制到src/main/cpp 目录下</li><li>修改common.h中 #include “fmod.h” 为 #include “inc/fmod.h”</li><li>修改common.cpp中 #include “fmod_errors.h” 为 #include “inc/fmod_errors.h”</li><li>修改play_sound.cpp中 #include “fmod.hpp” 为 #include “inc/fmod.hpp”</li><li>将 examples/java 下的org文件夹整个赋值到 src/main/java 目录下，并修改 AndroidManifest.xml 中的启动类为  org.fmod.example.MainActivity</li><li>在app下的build.gradle 中的 defaultConfig 木块中新增 NDK 配置</li></ul><pre class="line-numbers language-none"><code class="language-none">ndk &#123;        abiFilters &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot;, &quot;x86&quot;, &quot;x86_64&quot;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>将引入的so动态库和play_sound.cpp等加入到 CMakeLists.txt 文件中，具体配置如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">cmake_minimum_required(VERSION 3.4.1)set(distribution_DIR $&#123;PROJECT_SOURCE_DIR&#125;..&#x2F;..&#x2F;jniLibs)include_directories(src&#x2F;main&#x2F;cpp&#x2F;inc)add_library( sound        SHARED        play_sound.cpp        common.cpp        common_platform.cpp)add_library( fmod        SHARED        IMPORTED )set_target_properties( fmod        PROPERTIES IMPORTED_LOCATION        $&#123;distribution_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libfmod.so)add_library( fmodL        SHARED        IMPORTED )set_target_properties( fmodL        PROPERTIES IMPORTED_LOCATION        $&#123;distribution_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libfmodL.so )find_library( # Sets the name of the path variable.        log-lib        log)target_link_libraries( sound        fmod        fmodL        $&#123;log-lib&#125; )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改 org.fmod.example.MainActivity 中的static 方法,删除一些未引入的library，更改刚刚在 CMakeLists.txt 文件中定义的library 如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">static &#123;       try &#123;           System.loadLibrary(&quot;fmodL&quot;);       &#125; catch (UnsatisfiedLinkError e) &#123;       &#125;       try &#123;           System.loadLibrary(&quot;fmod&quot;);       &#125; catch (UnsatisfiedLinkError e) &#123;       &#125;       System.loadLibrary(&quot;sound&quot;);   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将 examples/media 文件夹下的音频资源文件复制到项目的 assets 目录下，具体文件引入可查看 play_sound.cpp 文件42~52行；这里将所有后缀为 .wav 和 .mp3 的文件都复制到 assets 目录下。</li></ul><pre class="line-numbers language-none"><code class="language-none">result &#x3D; system-&gt;createSound(Common_MediaPath(&quot;drumloop.wav&quot;), FMOD_DEFAULT, 0, &amp;sound1);ERRCHECK(result);result &#x3D; sound1-&gt;setMode(FMOD_LOOP_OFF);    &#x2F;* drumloop.wav has embedded loop points which automatically makes looping turn on, *&#x2F;ERRCHECK(result);                           &#x2F;* so turn it off here.  We could have also just put FMOD_LOOP_OFF in the above CreateSound call. *&#x2F;result &#x3D; system-&gt;createSound(Common_MediaPath(&quot;jaguar.wav&quot;), FMOD_DEFAULT, 0, &amp;sound2);ERRCHECK(result);result &#x3D; system-&gt;createSound(Common_MediaPath(&quot;swish.wav&quot;), FMOD_DEFAULT, 0, &amp;sound3);ERRCHECK(result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>到这里，我们所有的步骤都已经完成了，可以成功运行项目了，项目运行起来后，我们可以看到界面上加载了三首音频文件，分别对应 A , B , C 三个按钮，我们点击这三个按钮，就可以播放对应的音频文件</li></ul><h2 id="三-项目改造"><a class="markdownIt-Anchor" href="#三-项目改造"></a> 三、项目改造</h2><p><strong>第二部的操作是完全使用了 fmod 的示例来完成 assets 目录下的音频文件的播放，我们可以看到这个是使用的 org.fmod.example.MainActivity 进行播放的，我们接下来将播放的 native 方法抽取成一个 utils 类，然后再自己的MainActivity中调用（使用org.fmod.example.MainActivity的布局）；然后再添加点击 D 和 E 按钮时播放音频文件的功能</strong></p><h3 id="1-抽取-fmodutilsjava-工具类使用自己包路径下的-mainactivity-实现播放"><a class="markdownIt-Anchor" href="#1-抽取-fmodutilsjava-工具类使用自己包路径下的-mainactivity-实现播放"></a> 1、抽取 FmodUtils.java 工具类，使用自己包路径下的 MainActivity 实现播放</h3><h4 id="11-fmodutilsjava-类如下在原有main方法加了参数传入activity实例"><a class="markdownIt-Anchor" href="#11-fmodutilsjava-类如下在原有main方法加了参数传入activity实例"></a> 1.1 FmodUtils.java 类如下，在原有main()方法加了参数，传入Activity实例：</h4><pre class="line-numbers language-none"><code class="language-none">package org.fmod.core;import android.app.Activity;&#x2F;** * @author onestravel * @version 1.0.0 * @name org.fmod.example.FmodUtils * @description &#x2F;&#x2F;TODO *&#x2F;public class FmodUtils &#123;    private static FmodUtils mInstance;    private FmodUtils() &#123;    &#125;    public static FmodUtils getInstance() &#123;        synchronized (FmodUtils.class) &#123;            if (mInstance &#x3D;&#x3D; null) &#123;                mInstance &#x3D; new FmodUtils();            &#125;        &#125;        return mInstance;    &#125;    public native String getButtonLabel(int index);    public native void buttonDown(int index);    public native void buttonUp(int index);    public native void setStateCreate();    public native void setStateStart();    public native void setStateStop();    public native void setStateDestroy();    public native void main(Activity context);    static    &#123;        try &#123;             System.loadLibrary(&quot;fmodL&quot;);        &#125;        catch (UnsatisfiedLinkError e) &#123; &#125;        try &#123;             System.loadLibrary(&quot;fmod&quot;);        &#125;        catch (UnsatisfiedLinkError e) &#123; &#125;        System.loadLibrary(&quot;sound&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-更改cpp-文件中的-native-函数"><a class="markdownIt-Anchor" href="#12-更改cpp-文件中的-native-函数"></a> 1.2 更改cpp 文件中的 native 函数</h4><p><strong>更改 common_platform.cpp 文件中对应的 native 函数名称(154~200行)</strong></p><pre class="line-numbers language-none"><code class="language-none">#include &quot;common.h&quot;#include &lt;string.h&gt;#include &lt;jni.h&gt;#include &lt;unistd.h&gt;#include &lt;string&gt;#include &lt;vector&gt;JNIEnv *gJNIEnv;jobject gMainActivityObject;int gDownButtons;int gLastDownButtons;int gPressedButtons;bool gSuspendState;bool gQuitState;std::string gUIString;std::vector&lt;char *&gt; gPathList;int FMOD_Main(); &#x2F;&#x2F; Defined in examplevoid Common_Init(void **extraDriverData)&#123;gDownButtons &#x3D; 0;gLastDownButtons &#x3D; 0;gPressedButtons &#x3D; 0;gSuspendState &#x3D; false;gQuitState &#x3D; false;&#125;void Common_Close()&#123;    for (std::vector&lt;char *&gt;::iterator item &#x3D; gPathList.begin(); item !&#x3D; gPathList.end(); ++item)    &#123;        free(*item);    &#125;    gPathList.clear();&#125;void Common_Update()&#123;jstring text &#x3D; gJNIEnv-&gt;NewStringUTF(gUIString.c_str());jclass mainActivityClass &#x3D; gJNIEnv-&gt;GetObjectClass(gMainActivityObject);    jmethodID updateScreenMethodID &#x3D; gJNIEnv-&gt;GetMethodID(mainActivityClass, &quot;updateScreen&quot;, &quot;(Ljava&#x2F;lang&#x2F;String;)V&quot;);    gJNIEnv-&gt;CallVoidMethod(gMainActivityObject, updateScreenMethodID, text);    gJNIEnv-&gt;DeleteLocalRef(text);    gJNIEnv-&gt;DeleteLocalRef(mainActivityClass);    gUIString.clear();    gPressedButtons &#x3D; (gLastDownButtons ^ gDownButtons) &amp; gDownButtons;    gLastDownButtons &#x3D; gDownButtons;    if (gQuitState)    &#123;    gPressedButtons |&#x3D; (1 &lt;&lt; BTN_QUIT);    &#125;&#125;void Common_Sleep(unsigned int ms)&#123;    usleep(ms * 1000);&#125;void Common_Exit(int returnCode)&#123;    exit(returnCode);&#125;void Common_DrawText(const char *text)&#123;    char s[256];    snprintf(s, sizeof(s), &quot;%s\n&quot;, text);        gUIString.append(s);&#125;void Common_LoadFileMemory(const char *name, void **buff, int *length)&#123;    FILE *file &#x3D; fopen(name, &quot;rb&quot;);        fseek(file, 0, SEEK_END);    long len &#x3D; ftell(file);    fseek(file, 0, SEEK_SET);        void *mem &#x3D; malloc(len);    fread(mem, 1, len, file);        fclose(file);    *buff &#x3D; mem;    *length &#x3D; len;&#125;void Common_UnloadFileMemory(void *buff)&#123;    free(buff);&#125;bool Common_BtnPress(Common_Button btn)&#123;    return ((gPressedButtons &amp; (1 &lt;&lt; btn)) !&#x3D; 0);&#125;bool Common_BtnDown(Common_Button btn)&#123;    return ((gDownButtons &amp; (1 &lt;&lt; btn)) !&#x3D; 0);&#125;const char *Common_BtnStr(Common_Button btn)&#123;    switch (btn)    &#123;        case BTN_ACTION1: return &quot;A&quot;;        case BTN_ACTION2: return &quot;B&quot;;        case BTN_ACTION3: return &quot;C&quot;;        case BTN_ACTION4: return &quot;D&quot;;        case BTN_UP:      return &quot;Up&quot;;        case BTN_DOWN:    return &quot;Down&quot;;        case BTN_LEFT:    return &quot;Left&quot;;        case BTN_RIGHT:   return &quot;Right&quot;;        case BTN_MORE:    return &quot;E&quot;;        case BTN_QUIT:    return &quot;Back&quot;;        default:          return &quot;Unknown&quot;;    &#125;&#125;const char *Common_MediaPath(const char *fileName)&#123;    char *filePath &#x3D; (char *)calloc(256, sizeof(char));    strcat(filePath, &quot;file:&#x2F;&#x2F;&#x2F;android_asset&#x2F;&quot;);    strcat(filePath, fileName);    gPathList.push_back(filePath);    return filePath;&#125;const char *Common_WritePath(const char *fileName)&#123;return Common_MediaPath(fileName);&#125;bool Common_SuspendState()&#123;return gSuspendState;&#125;extern &quot;C&quot;&#123;jstring Java_org_fmod_core_FmodUtils_getButtonLabel(JNIEnv *env, jobject thiz, jint index)&#123;    return env-&gt;NewStringUTF(Common_BtnStr((Common_Button)index));&#125;void Java_org_fmod_core_FmodUtils_buttonDown(JNIEnv *env, jobject thiz, jint index)&#123;    gDownButtons |&#x3D; (1 &lt;&lt; index);&#125;void Java_org_fmod_core_FmodUtils_buttonUp(JNIEnv *env, jobject thiz, jint index)&#123;    gDownButtons &amp;&#x3D; ~(1 &lt;&lt; index);&#125;void Java_org_fmod_core_FmodUtils_setStateCreate(JNIEnv *env, jobject thiz)&#123;&#125;void Java_org_fmod_core_FmodUtils_setStateStart(JNIEnv *env, jobject thiz)&#123;gSuspendState &#x3D; false;&#125;void Java_org_fmod_core_FmodUtils_setStateStop(JNIEnv *env, jobject thiz)&#123;gSuspendState &#x3D; true;&#125;void Java_org_fmod_core_FmodUtils_setStateDestroy(JNIEnv *env, jobject thiz)&#123;gQuitState &#x3D; true;&#125;void Java_org_fmod_core_FmodUtils_main(JNIEnv *env, jobject thiz,jobject act)&#123;gJNIEnv &#x3D; env;gMainActivityObject &#x3D; act;FMOD_Main();&#125;&#125; &#x2F;* extern &quot;C&quot; *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-替换mainactivity"><a class="markdownIt-Anchor" href="#13-替换mainactivity"></a> 1.3 替换MainActivity</h4><p><strong>将 org.fmod.example.MainActivity 复制到自己的包路径下 ， 删除文件中 native 方法和 static 方法，新增 mFmodUtils 成员变量，并实例化，将调用 native 方法的地方都改成 mFmodUtils 实例下的方法，注意 main() 方法需要传当前 Activity 进去</strong></p><pre class="line-numbers language-none"><code class="language-none">public class MainActivity extends Activity implements OnTouchListener, Runnable &#123;    private TextView mTxtScreen;    private Thread mThread;    private FmodUtils mFmodUtils;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        mFmodUtils &#x3D; FmodUtils.getInstance();        &#x2F;&#x2F; Create the text area        mTxtScreen &#x3D; new TextView(this);        mTxtScreen.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10.0f);        mTxtScreen.setTypeface(Typeface.MONOSPACE);        &#x2F;&#x2F; Create the buttons        Button[] buttons &#x3D; new Button[9];        for (int i &#x3D; 0; i &lt; buttons.length; i++) &#123;            buttons[i] &#x3D; new Button(this);            buttons[i].setText(mFmodUtils.getButtonLabel(i));            buttons[i].setOnTouchListener(this);            buttons[i].setId(i);        &#125;        &#x2F;&#x2F; Create the button row layouts        LinearLayout llTopRowButtons &#x3D; new LinearLayout(this);        llTopRowButtons.setOrientation(LinearLayout.HORIZONTAL);        LinearLayout llMiddleRowButtons &#x3D; new LinearLayout(this);        llMiddleRowButtons.setOrientation(LinearLayout.HORIZONTAL);        LinearLayout llBottomRowButtons &#x3D; new LinearLayout(this);        llBottomRowButtons.setOrientation(LinearLayout.HORIZONTAL);        &#x2F;&#x2F; Create the main view layout        LinearLayout llView &#x3D; new LinearLayout(this);        llView.setOrientation(LinearLayout.VERTICAL);        &#x2F;&#x2F; Create layout parameters        LayoutParams lpLayout &#x3D; new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1.0f);        &#x2F;&#x2F; Set up the view hierarchy        llTopRowButtons.addView(buttons[0], lpLayout);        llTopRowButtons.addView(buttons[6], lpLayout);        llTopRowButtons.addView(buttons[1], lpLayout);        llMiddleRowButtons.addView(buttons[4], lpLayout);        llMiddleRowButtons.addView(buttons[8], lpLayout);        llMiddleRowButtons.addView(buttons[5], lpLayout);        llBottomRowButtons.addView(buttons[2], lpLayout);        llBottomRowButtons.addView(buttons[7], lpLayout);        llBottomRowButtons.addView(buttons[3], lpLayout);        llView.addView(mTxtScreen, lpLayout);        llView.addView(llTopRowButtons);        llView.addView(llMiddleRowButtons);        llView.addView(llBottomRowButtons);        setContentView(llView);        &#x2F;&#x2F; Request necessary permissions        if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.M) &#123;            String[] perms &#x3D; &#123;&quot;android.permission.RECORD_AUDIO&quot;, &quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&#125;;            if (checkSelfPermission(perms[0]) &#x3D;&#x3D; PackageManager.PERMISSION_DENIED ||                    checkSelfPermission(perms[1]) &#x3D;&#x3D; PackageManager.PERMISSION_DENIED) &#123;                requestPermissions(perms, 200);            &#125;        &#125;        org.fmod.FMOD.init(this);        mThread &#x3D; new Thread(this, &quot;Example Main&quot;);        mThread.start();        mFmodUtils.setStateCreate();    &#125;    @Override    protected void onStart() &#123;        super.onStart();        mFmodUtils.setStateStart();    &#125;    @Override    protected void onStop() &#123;        mFmodUtils.setStateStop();        super.onStop();    &#125;    @Override    protected void onDestroy() &#123;        mFmodUtils.setStateDestroy();        try &#123;            mThread.join();        &#125; catch (InterruptedException e) &#123;        &#125;        org.fmod.FMOD.close();        super.onDestroy();    &#125;    @Override    public boolean onTouch(View view, MotionEvent motionEvent) &#123;        if (motionEvent.getAction() &#x3D;&#x3D; MotionEvent.ACTION_DOWN) &#123;            mFmodUtils.buttonDown(view.getId());        &#125; else if (motionEvent.getAction() &#x3D;&#x3D; MotionEvent.ACTION_UP) &#123;            mFmodUtils.buttonUp(view.getId());        &#125;        return true;    &#125;    @Override    public void run() &#123;        mFmodUtils.main(this);    &#125;    public void updateScreen(final String text) &#123;        runOnUiThread(new Runnable() &#123;            @Override            public void run() &#123;                mTxtScreen.setText(text);            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14-更改androidmanifest"><a class="markdownIt-Anchor" href="#14-更改androidmanifest"></a> 1.4 更改AndroidManifest</h4><p><strong>更改 AndroidManifest.xml 文件中的启动页的 Activity 为自己包路径下的 MainActivity ，删除fmod 示例的 MainActivity ,就可以运行成功了</strong></p><h3 id="2-实现按钮-d-和-e-播放音频"><a class="markdownIt-Anchor" href="#2-实现按钮-d-和-e-播放音频"></a> 2、实现按钮 D 和 E 播放音频</h3><p><strong>我们使用 singing.wav 和 wave.mp3 来实现 D 和 E 按钮播放音频的功能</strong></p><h4 id="21-加载音频文件"><a class="markdownIt-Anchor" href="#21-加载音频文件"></a> 2.1 加载音频文件</h4><p><strong>在play_sound.cpp 中的 FMOD_Main() 函数中的do…while前，定义 sound4 和 sound5 变量，然后使用这两个变量加载对应的音频文件</strong></p><pre class="line-numbers language-none"><code class="language-none">FMOD::System     *system;&#x2F;&#x2F; 新增属性 sound4 和 sound5FMOD::Sound      *sound1, *sound2, *sound3, *sound4, *sound5;FMOD::Channel    *channel &#x3D; 0;FMOD_RESULT       result;unsigned int      version;void             *extradriverdata &#x3D; 0;Common_Init(&amp;extradriverdata);&#x2F;*    Create a System object and initialize*&#x2F;result &#x3D; FMOD::System_Create(&amp;system);ERRCHECK(result);result &#x3D; system-&gt;getVersion(&amp;version);ERRCHECK(result);if (version &lt; FMOD_VERSION)&#123;    Common_Fatal(&quot;FMOD lib version %08x doesn&#39;t match header version %08x&quot;, version, FMOD_VERSION);&#125;result &#x3D; system-&gt;init(32, FMOD_INIT_NORMAL, extradriverdata);ERRCHECK(result);result &#x3D; system-&gt;createSound(Common_MediaPath(&quot;drumloop.wav&quot;), FMOD_DEFAULT, 0, &amp;sound1);ERRCHECK(result);result &#x3D; sound1-&gt;setMode(FMOD_LOOP_OFF);    &#x2F;* drumloop.wav has embedded loop points which automatically makes looping turn on, *&#x2F;ERRCHECK(result);                           &#x2F;* so turn it off here.  We could have also just put FMOD_LOOP_OFF in the above CreateSound call. *&#x2F;result &#x3D; system-&gt;createSound(Common_MediaPath(&quot;jaguar.wav&quot;), FMOD_DEFAULT, 0, &amp;sound2);ERRCHECK(result);result &#x3D; system-&gt;createSound(Common_MediaPath(&quot;swish.wav&quot;), FMOD_DEFAULT, 0, &amp;sound3);ERRCHECK(result);&#x2F;&#x2F;为sound4 加载音频文件singing.wavresult &#x3D; system-&gt;createSound(Common_MediaPath(&quot;singing.wav&quot;), FMOD_DEFAULT, 0, &amp;sound4);ERRCHECK(result);&#x2F;&#x2F;为sound5 加载音频文件wave.mp3result &#x3D; system-&gt;createSound(Common_MediaPath(&quot;wave.mp3&quot;), FMOD_DEFAULT, 0, &amp;sound5);ERRCHECK(result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="22-将音频播放与按钮事件关联"><a class="markdownIt-Anchor" href="#22-将音频播放与按钮事件关联"></a> 2.2 将音频播放与按钮事件关联</h4><p><strong>在play_sound.cpp 中的 FMOD_Main() 函数中的do…while的{}中，处理 D 和 E 按钮的事件，播放sound4 和 sound 5 , 按钮的事件类型可在 common_platform.cpp 中的 Common_BtnStr 函数中查看</strong></p><p>Common_BtnStr 函数</p><pre class="line-numbers language-none"><code class="language-none">const char *Common_BtnStr(Common_Button btn)&#123;    switch (btn)    &#123;        case BTN_ACTION1: return &quot;A&quot;;        case BTN_ACTION2: return &quot;B&quot;;        case BTN_ACTION3: return &quot;C&quot;;        case BTN_ACTION4: return &quot;D&quot;;        case BTN_UP:      return &quot;Up&quot;;        case BTN_DOWN:    return &quot;Down&quot;;        case BTN_LEFT:    return &quot;Left&quot;;        case BTN_RIGHT:   return &quot;Right&quot;;        case BTN_MORE:    return &quot;E&quot;;        case BTN_QUIT:    return &quot;Back&quot;;        default:          return &quot;Unknown&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理 D 和 E 按钮的事件，播放音频</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;处理按钮 D 的事件，播放 sound4if (Common_BtnPress(BTN_ACTION4))&#123;    result &#x3D; system-&gt;playSound(sound4, 0, false, &amp;channel);    ERRCHECK(result);&#125;&#x2F;&#x2F;处理按钮 E 的事件，播放 sound5if (Common_BtnPress(BTN_MORE))&#123;    result &#x3D; system-&gt;playSound(sound5, 0, false, &amp;channel);    ERRCHECK(result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="23-释放-sound4-和-sound5"><a class="markdownIt-Anchor" href="#23-释放-sound4-和-sound5"></a> 2.3 释放 sound4 和 sound5</h4><p><strong>在do…while 执行之后，释放加载了对应音频文件的属性</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;*        Shut down    *&#x2F;    result &#x3D; sound1-&gt;release();    ERRCHECK(result);    result &#x3D; sound2-&gt;release();    ERRCHECK(result);    result &#x3D; sound3-&gt;release();    ERRCHECK(result);        &#x2F;&#x2F;释放sound4    result &#x3D; sound4-&gt;release();    ERRCHECK(result);    &#x2F;&#x2F;释放sound5    result &#x3D; sound5-&gt;release();    ERRCHECK(result);        result &#x3D; system-&gt;close();    ERRCHECK(result);    result &#x3D; system-&gt;release();    ERRCHECK(result);    Common_Close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="24-play_soundcpp-完整代码"><a class="markdownIt-Anchor" href="#24-play_soundcpp-完整代码"></a> 2.4 play_sound.cpp 完整代码</h4><p><strong>更改完成之后，按钮D 和 E 播放音频的功能实现了，点击运行就可以了，下面贴上play_sound.cpp的完整代码</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;*&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Play Sound ExampleCopyright (c), Firelight Technologies Pty, Ltd 2004-2019.This example shows how to simply load and play multiple sounds, the simplest usage of FMOD. By default FMOD will decode the entire file into memory when itloads. If the sounds are big and possibly take up a lot of RAM it would bebetter to use the FMOD_CREATESTREAM flag, this will stream the file in realtimeas it plays.&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;*&#x2F;#include &quot;inc&#x2F;fmod.hpp&quot;#include &quot;common.h&quot;int FMOD_Main()&#123;    FMOD::System     *system;    &#x2F;&#x2F; 新增属性 sound4 和 sound5    FMOD::Sound      *sound1, *sound2, *sound3, *sound4, *sound5;    FMOD::Channel    *channel &#x3D; 0;    FMOD_RESULT       result;    unsigned int      version;    void             *extradriverdata &#x3D; 0;        Common_Init(&amp;extradriverdata);    &#x2F;*        Create a System object and initialize    *&#x2F;    result &#x3D; FMOD::System_Create(&amp;system);    ERRCHECK(result);    result &#x3D; system-&gt;getVersion(&amp;version);    ERRCHECK(result);    if (version &lt; FMOD_VERSION)    &#123;        Common_Fatal(&quot;FMOD lib version %08x doesn&#39;t match header version %08x&quot;, version, FMOD_VERSION);    &#125;    result &#x3D; system-&gt;init(32, FMOD_INIT_NORMAL, extradriverdata);    ERRCHECK(result);    result &#x3D; system-&gt;createSound(Common_MediaPath(&quot;drumloop.wav&quot;), FMOD_DEFAULT, 0, &amp;sound1);    ERRCHECK(result);    result &#x3D; sound1-&gt;setMode(FMOD_LOOP_OFF);    &#x2F;* drumloop.wav has embedded loop points which automatically makes looping turn on, *&#x2F;    ERRCHECK(result);                           &#x2F;* so turn it off here.  We could have also just put FMOD_LOOP_OFF in the above CreateSound call. *&#x2F;    result &#x3D; system-&gt;createSound(Common_MediaPath(&quot;jaguar.wav&quot;), FMOD_DEFAULT, 0, &amp;sound2);    ERRCHECK(result);    result &#x3D; system-&gt;createSound(Common_MediaPath(&quot;swish.wav&quot;), FMOD_DEFAULT, 0, &amp;sound3);    ERRCHECK(result);    &#x2F;&#x2F;为sound4 加载音频文件singing.wav    result &#x3D; system-&gt;createSound(Common_MediaPath(&quot;singing.wav&quot;), FMOD_DEFAULT, 0, &amp;sound4);    ERRCHECK(result);    &#x2F;&#x2F;为sound5 加载音频文件wave.mp3    result &#x3D; system-&gt;createSound(Common_MediaPath(&quot;wave.mp3&quot;), FMOD_DEFAULT, 0, &amp;sound5);    ERRCHECK(result);    &#x2F;*        Main loop    *&#x2F;    do    &#123;        Common_Update();        if (Common_BtnPress(BTN_ACTION1))        &#123;            result &#x3D; system-&gt;playSound(sound1, 0, false, &amp;channel);            ERRCHECK(result);        &#125;        if (Common_BtnPress(BTN_ACTION2))        &#123;            result &#x3D; system-&gt;playSound(sound2, 0, false, &amp;channel);            ERRCHECK(result);        &#125;        if (Common_BtnPress(BTN_ACTION3))        &#123;            result &#x3D; system-&gt;playSound(sound3, 0, false, &amp;channel);            ERRCHECK(result);        &#125;        &#x2F;&#x2F;处理按钮 D 的事件，播放 sound4        if (Common_BtnPress(BTN_ACTION4))        &#123;            result &#x3D; system-&gt;playSound(sound4, 0, false, &amp;channel);            ERRCHECK(result);        &#125;        &#x2F;&#x2F;处理按钮 E 的事件，播放 sound5        if (Common_BtnPress(BTN_MORE))        &#123;            result &#x3D; system-&gt;playSound(sound5, 0, false, &amp;channel);            ERRCHECK(result);        &#125;        result &#x3D; system-&gt;update();        ERRCHECK(result);        &#123;            unsigned int ms &#x3D; 0;            unsigned int lenms &#x3D; 0;            bool         playing &#x3D; 0;            bool         paused &#x3D; 0;            int          channelsplaying &#x3D; 0;            if (channel)            &#123;                FMOD::Sound *currentsound &#x3D; 0;                result &#x3D; channel-&gt;isPlaying(&amp;playing);                if ((result !&#x3D; FMOD_OK) &amp;&amp; (result !&#x3D; FMOD_ERR_INVALID_HANDLE) &amp;&amp; (result !&#x3D; FMOD_ERR_CHANNEL_STOLEN))                &#123;                    ERRCHECK(result);                &#125;                result &#x3D; channel-&gt;getPaused(&amp;paused);                if ((result !&#x3D; FMOD_OK) &amp;&amp; (result !&#x3D; FMOD_ERR_INVALID_HANDLE) &amp;&amp; (result !&#x3D; FMOD_ERR_CHANNEL_STOLEN))                &#123;                    ERRCHECK(result);                &#125;                result &#x3D; channel-&gt;getPosition(&amp;ms, FMOD_TIMEUNIT_MS);                if ((result !&#x3D; FMOD_OK) &amp;&amp; (result !&#x3D; FMOD_ERR_INVALID_HANDLE) &amp;&amp; (result !&#x3D; FMOD_ERR_CHANNEL_STOLEN))                &#123;                    ERRCHECK(result);                &#125;                               channel-&gt;getCurrentSound(&amp;currentsound);                if (currentsound)                &#123;                    result &#x3D; currentsound-&gt;getLength(&amp;lenms, FMOD_TIMEUNIT_MS);                    if ((result !&#x3D; FMOD_OK) &amp;&amp; (result !&#x3D; FMOD_ERR_INVALID_HANDLE) &amp;&amp; (result !&#x3D; FMOD_ERR_CHANNEL_STOLEN))                    &#123;                        ERRCHECK(result);                    &#125;                &#125;            &#125;            system-&gt;getChannelsPlaying(&amp;channelsplaying, NULL);            Common_Draw(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);            Common_Draw(&quot;Play Sound Example.&quot;);            Common_Draw(&quot;Copyright (c) Firelight Technologies 2004-2019.&quot;);            Common_Draw(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);            Common_Draw(&quot;&quot;);            Common_Draw(&quot;Press %s to play a mono sound (drumloop)&quot;, Common_BtnStr(BTN_ACTION1));            Common_Draw(&quot;Press %s to play a mono sound (jaguar)&quot;, Common_BtnStr(BTN_ACTION2));            Common_Draw(&quot;Press %s to play a stereo sound (swish)&quot;, Common_BtnStr(BTN_ACTION3));            Common_Draw(&quot;Press %s to quit&quot;, Common_BtnStr(BTN_QUIT));            Common_Draw(&quot;&quot;);            Common_Draw(&quot;Time %02d:%02d:%02d&#x2F;%02d:%02d:%02d : %s&quot;, ms &#x2F; 1000 &#x2F; 60, ms &#x2F; 1000 % 60, ms &#x2F; 10 % 100, lenms &#x2F; 1000 &#x2F; 60, lenms &#x2F; 1000 % 60, lenms &#x2F; 10 % 100, paused ? &quot;Paused &quot; : playing ? &quot;Playing&quot; : &quot;Stopped&quot;);            Common_Draw(&quot;Channels Playing %d&quot;, channelsplaying);        &#125;        Common_Sleep(50);    &#125; while (!Common_BtnPress(BTN_QUIT));    &#x2F;*        Shut down    *&#x2F;    result &#x3D; sound1-&gt;release();    ERRCHECK(result);    result &#x3D; sound2-&gt;release();    ERRCHECK(result);    result &#x3D; sound3-&gt;release();    ERRCHECK(result);    &#x2F;&#x2F;释放sound4    result &#x3D; sound4-&gt;release();    ERRCHECK(result);    &#x2F;&#x2F;释放sound5    result &#x3D; sound5-&gt;release();    ERRCHECK(result);    result &#x3D; system-&gt;close();    ERRCHECK(result);    result &#x3D; system-&gt;release();    ERRCHECK(result);    Common_Close();    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="项目源码"><a class="markdownIt-Anchor" href="#项目源码"></a> 项目源码</h2><p><a href="https://github.com/onestravel/playSound">PlaySound源码</a></p><p><strong>到此，我们实现集成 fmod 的音频播放功能已经实现，也实现了其他按钮播放音频文件的功能，这是实现模拟QQ变声项目的前期准备，后面我们会继续实现QQ变声功能。</strong></p>]]></content>
      
      
      <categories>
          
          <category> NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
            <tag> Fmod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重建二叉树</title>
      <link href="20190309/algorithm/5.chong-jian-er-cha-shu/"/>
      <url>20190309/algorithm/5.chong-jian-er-cha-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="5重建二叉树"><a class="markdownIt-Anchor" href="#5重建二叉树"></a> 5.重建二叉树</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>根据二叉树的前序遍历和中序遍历的结果，重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><pre class="line-numbers language-none"><code class="language-none">preorder:    1,2,4,7,3,5,6,8inorder:     4,7,2,1,5,3,8,6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="images/erchashu.png" alt="erchashu" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="images/erchashu.png" class="lozad post-image"></p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>前序遍历的第一个值为根节点的值，使用这个值将中序遍历结果分成两部分，左部分为树的左子树中序遍历结果，右部分为树的右子树中序遍历的结果。然后分别对左右子树递归地求解。</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 二叉树节点 */</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> left<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@NonNull</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"TreeNode(value="</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">",left="</span> <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token string">",right="</span> <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 根据前序遍历和中序变量重建二叉树 * * @param pre    前序遍历 * @param middle 中序遍历 */</span><span class="token keyword">private</span> <span class="token class-name">TreeNode</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> middle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pre<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> middle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 根据前序遍历和中序变量重建二叉树 * * @param pre         前序遍历 * @param preStart    前序遍历开始位置 * @param preEnd      前序遍历结束位置 * @param middle      中序遍历 * @param middleStart 中序遍历开始位置 * @param middleEnd   中序遍历结束位置 */</span><span class="token keyword">private</span> <span class="token class-name">TreeNode</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">,</span> <span class="token keyword">int</span> preStart<span class="token punctuation">,</span> <span class="token keyword">int</span> preEnd<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> middle<span class="token punctuation">,</span> <span class="token keyword">int</span> middleStart<span class="token punctuation">,</span> <span class="token keyword">int</span> middleEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>preStart <span class="token operator">></span> preEnd <span class="token operator">||</span> middleStart <span class="token operator">></span> middleEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> middleStart<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> middleEnd<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span> <span class="token operator">==</span> middle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> leftCount <span class="token operator">=</span> i <span class="token operator">-</span> middleStart<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> preStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>preStart<span class="token operator">+</span>leftCount<span class="token punctuation">,</span>middle<span class="token punctuation">,</span>middleStart<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>preStart<span class="token operator">+</span>leftCount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>preEnd<span class="token punctuation">,</span>middle<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>middleEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 二叉树节点 */</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">val</span> value<span class="token operator">:</span> Int<span class="token punctuation">,</span><span class="token keyword">var</span> left<span class="token operator">:</span> TreeNode<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">var</span> right<span class="token operator">:</span> TreeNode<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">/** * 根据前序遍历和中序变量重建二叉树 * @param pre 前序遍历 * @param middle 中序遍历 */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre<span class="token operator">:</span> IntArray<span class="token punctuation">,</span> middle<span class="token operator">:</span> IntArray<span class="token punctuation">)</span><span class="token operator">:</span> TreeNode<span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pre<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> middle<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> middle<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 根据前序遍历和中序变量重建二叉树 * @param pre 前序遍历 * @param preStart 前序遍历开始位置 * @param preEnd 前序遍历结束位置 * @param middle 中序遍历 * @param middleStart 中序遍历开始位置 * @param middleEnd 中序遍历结束位置 */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>    pre<span class="token operator">:</span> IntArray<span class="token punctuation">,</span>    preStart<span class="token operator">:</span> Int<span class="token punctuation">,</span>    preEnd<span class="token operator">:</span> Int<span class="token punctuation">,</span>    middle<span class="token operator">:</span> IntArray<span class="token punctuation">,</span>    middleStart<span class="token operator">:</span> Int<span class="token punctuation">,</span>    middleEnd<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> TreeNode<span class="token operator">?</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>preStart<span class="token operator">></span>preEnd<span class="token operator">||</span>middleStart<span class="token operator">></span>preEnd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//前序遍历起始值作为当前节点的值</span>    <span class="token keyword">val</span> node <span class="token operator">=</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> middleStart<span class="token operator">..</span>middleEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//找到中序遍历中与前序遍历当前节点值相同的位置i，</span>        <span class="token comment">// 则中序遍历中该位置i前的都是左子树，该位置i后的都是右子树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">[</span>preStart<span class="token punctuation">]</span> <span class="token operator">==</span> middle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//左子树递归</span>            <span class="token keyword">val</span> leftCount <span class="token operator">=</span> i <span class="token operator">-</span> middleStart            node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>                pre<span class="token punctuation">,</span>                preStart <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                preStart <span class="token operator">+</span> leftCount<span class="token punctuation">,</span>                middle<span class="token punctuation">,</span>                middleStart<span class="token punctuation">,</span>                i <span class="token operator">-</span> <span class="token number">1</span>            <span class="token punctuation">)</span>            <span class="token comment">//右子树递归</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>                pre<span class="token punctuation">,</span>                preStart <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> leftCount<span class="token punctuation">,</span>                preEnd<span class="token punctuation">,</span>                middle<span class="token punctuation">,</span>                i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                middleEnd            <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> node<span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> pre <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> middle <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">reConstructBinaryTree</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>middle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&amp;tqId=11157&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tPage=1&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从尾到头打印链表</title>
      <link href="20190306/algorithm/4.cong-wei-dao-tou-da-yin-lian-biao/"/>
      <url>20190306/algorithm/4.cong-wei-dao-tou-da-yin-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="4从尾到头打印链表"><a class="markdownIt-Anchor" href="#4从尾到头打印链表"></a> 4.从尾到头打印链表</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>从尾到头反过来打印出每个结点的值。</p><p>如：<br />input:</p><pre class="line-numbers language-none"><code class="language-none">graph LR1--&gt;22--&gt;3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>output:</p><pre class="line-numbers language-none"><code class="language-none">3,2,1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><h3 id="1-递归实现"><a class="markdownIt-Anchor" href="#1-递归实现"></a> 1. 递归实现</h3><p>要实现逆序打印链表 1-&gt;2-&gt;3;可以使用使用递归，先将链表看做当前节点和右侧节点两部分；如：1-&gt;(2-&gt;3),先打印右侧节点,再打印当前节点：右侧节点也可以看做两部分如：(2)-&gt;(3),也是先打印当前节点的右侧节点，在打印当前节点；如此递归，可实现逆序打印。</p><h4 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h4><h5 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 单向链表节点 * @param &lt;T> */</span><span class="token keyword">class</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 反向打印链表 * @param node 链表首节点 * @return */</span><span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">printReverseLink</span><span class="token punctuation">(</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>  list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">printReverseLink</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    first<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    two<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> three <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    three<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    two<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span>    first<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">printReverseLink</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h5><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 单向链表节点 */</span><span class="token keyword">data</span> <span class="token keyword">class</span> LinkedNode<span class="token operator">&lt;</span>T <span class="token operator">:</span> Any<span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">var</span> value<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> next<span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 反向打印链表 * @param node 链表首节点 * @return */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">printReverseLink</span><span class="token punctuation">(</span>node<span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span>ArrayList<span class="token operator">&lt;</span>Int<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">printReverseLink</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> first <span class="token operator">=</span> <span class="token function">LinkedNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    first<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">LinkedNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    first<span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">LinkedNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">printReverseLink</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用头插法"><a class="markdownIt-Anchor" href="#2-使用头插法"></a> 2. 使用头插法</h3><p>头插法顾名思义是将节点插入到头部：在遍历原始链表时，将当前节点插入新链表的头部，使其成为第一个节点。</p><p>链表的操作需要维护后继关系，例如在某个节点 node1 之后插入一个节点 node2，我们可以通过修改后继关系来实现：</p><pre class="line-numbers language-none"><code class="language-none">node3 &#x3D; node1.next;node2.next &#x3D; node3;node1.next &#x3D; node2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为了能将一个节点插入头部，我们引入了一个叫头结点的辅助节点，该节点不存储值，只是为了方便进行插入操作。不要将头结点与第一个节点混起来，第一个节点是链表中第一个真正存储值的节点。</p><pre class="line-numbers language-none"><code class="language-none">graph LR1--&gt;22--&gt;3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>引入head节点</p><pre class="line-numbers language-none"><code class="language-none">graph LRhead<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>循环遍历链接，插入头结点后</p><p>node=1</p><pre class="line-numbers language-none"><code class="language-none">graph LRhead--&gt;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>node=2</p><pre class="line-numbers language-none"><code class="language-none">graph LRhead--&gt;22--&gt;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>node=3</p><pre class="line-numbers language-none"><code class="language-none">graph LRhead--&gt;33--&gt;22--&gt;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码实现-2"><a class="markdownIt-Anchor" href="#代码实现-2"></a> 代码实现</h4><h5 id="java-代码-2"><a class="markdownIt-Anchor" href="#java-代码-2"></a> java 代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 头插法实现反向打印链表 *  * @param node 链表首节点 * @return */</span><span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">printReverseLinkToHead</span><span class="token punctuation">(</span><span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        node <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    first<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    two<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> three <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    three<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    two<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span>    first<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">printReverseLinkToHead</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="kotlin-代码-2"><a class="markdownIt-Anchor" href="#kotlin-代码-2"></a> Kotlin 代码</h5><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 使用头插法反向打印链表 * @param node 链表首节点 * @return */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">printReverseLinkToHead</span><span class="token punctuation">(</span>node<span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span>ArrayList<span class="token operator">&lt;</span>Int<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> currentNode <span class="token operator">=</span> node    <span class="token keyword">var</span> head<span class="token operator">:</span>LinkedNode<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">LinkedNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> next <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next        currentNode<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token operator">!!</span><span class="token punctuation">.</span>next        head<span class="token operator">!!</span><span class="token punctuation">.</span>next <span class="token operator">=</span> currentNode        currentNode <span class="token operator">=</span> next    <span class="token punctuation">&#125;</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    head <span class="token operator">=</span> head<span class="token operator">!!</span><span class="token punctuation">.</span>next    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>value<span class="token punctuation">)</span>        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> first <span class="token operator">=</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    first<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    first<span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">printReverseLinkToHead</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用栈来实现"><a class="markdownIt-Anchor" href="#3-使用栈来实现"></a> 3. 使用栈来实现</h3><p>栈的规则时后进先出，则可以将链表遍历存放到栈中，然后在出栈则出栈顺序就是反向打印链表</p><h4 id="代码实现-3"><a class="markdownIt-Anchor" href="#代码实现-3"></a> 代码实现</h4><h5 id="java-代码-3"><a class="markdownIt-Anchor" href="#java-代码-3"></a> java 代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 使用栈实现反向打印链表 * * @param node 链表首节点 * @return */</span><span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">printReverseLinkToHeadWithStack</span><span class="token punctuation">(</span><span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    first<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    two<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> three <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    three<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    two<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span>    first<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">printReverseLinkToHeadWithStack</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="kotlin-代码-3"><a class="markdownIt-Anchor" href="#kotlin-代码-3"></a> Kotlin 代码</h5><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 使用栈反向打印链表 * @param node 链表首节点 * @return */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">printReverseLinkToHeadWithStack</span><span class="token punctuation">(</span>node<span class="token operator">:</span> LinkedNode<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> ArrayList<span class="token operator">&lt;</span>Int<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> stack <span class="token operator">=</span> Stack<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> node    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> list<span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> first <span class="token operator">=</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    first<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    first<span class="token punctuation">.</span>next<span class="token operator">?</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">printReverseLinkToHeadWithStack</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&amp;tqId=11156&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;tPage=1&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>替换空格</title>
      <link href="20190305/algorithm/3.ti-huan-kong-ge/"/>
      <url>20190305/algorithm/3.ti-huan-kong-ge/</url>
      
        <content type="html"><![CDATA[<h1 id="3替换空格"><a class="markdownIt-Anchor" href="#3替换空格"></a> 3.替换空格</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>将一个字符串中的空格替换成 “%20”。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><ul><li><p>在字符串尾部填充任意字符，使得字符串的长度等于替换之后的长度。因为一个空格要替换成三个字符（%20），所以当遍历到一个空格时，需要在尾部填充两个任意字符。</p></li><li><p>令 P1 指向字符串原来的末尾位置，P2 指向字符串现在的末尾位置。P1 和 P2 从后向前遍历，当 P1 遍历到一个空格时，就需要令 P2 指向的位置依次填充 02%（注意是逆序的），否则就填充上 P1 指向字符的值。从后向前遍是为了在改变 P2 所指向的内容时，不会影响到 P1 遍历原来字符串的内容。</p></li><li><p>当 P2 遇到 P1 时（P2 &lt;= P1），或者遍历结束（P1 &lt; 0），退出。</p></li></ul><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 替换空格 * @param str 需要替换空格的字符串 * @return */</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> P1 <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> P1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> P2 <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>P1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> P2 <span class="token operator">></span> P1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>P1<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>P2<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>P2<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>P2<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            sb<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>P2<span class="token operator">--</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">"A B"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">replaceSpace</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> sb <span class="token operator">=</span> <span class="token function">StringBuffer</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>    <span class="token keyword">var</span> p1 <span class="token operator">=</span> sb<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    sb<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token keyword">in</span> sb<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">var</span> p2 <span class="token operator">=</span> sb<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token keyword">in</span> <span class="token number">0</span> until p2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> char <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span>p1<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>char <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">setCharAt</span><span class="token punctuation">(</span>p2<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>                <span class="token function">setCharAt</span><span class="token punctuation">(</span>p2<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>                <span class="token function">setCharAt</span><span class="token punctuation">(</span>p2<span class="token operator">--</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">setCharAt</span><span class="token punctuation">(</span>p2<span class="token operator">--</span><span class="token punctuation">,</span> char<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> input <span class="token operator">=</span> <span class="token string">"A B"</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">replaceSpace</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&amp;tqId=11155&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio下NDK开发流程</title>
      <link href="20190301/android-ndk/androidstudio-xia-jin-xing-ndk-kai-fa/"/>
      <url>20190301/android-ndk/androidstudio-xia-jin-xing-ndk-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="androidstudio下ndk开发流程"><a class="markdownIt-Anchor" href="#androidstudio下ndk开发流程"></a> AndroidStudio下NDK开发流程</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p><strong>使用Android Studio进行NDK开发时，可在创建Android Studio项目时选择创建C<ins>项目，创建好之后，默认会在src/main/下创建一个cpp的文件夹，C/C</ins>相关的文件就存放在这个文件夹中；在app下面的build.gradle中有NDK的相关配置</strong></p><h2 id="一-ndk开发进行文件加密解密"><a class="markdownIt-Anchor" href="#一-ndk开发进行文件加密解密"></a> 一、NDK开发进行文件加密解密</h2><h3 id="1-实现java层native方法"><a class="markdownIt-Anchor" href="#1-实现java层native方法"></a> 1、实现Java层native方法</h3><ul><li>创建Android项目</li><li>写一个含有加密和解密按钮的view</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;    android:layout_width&#x3D;&quot;match_parent&quot;    android:layout_height&#x3D;&quot;match_parent&quot;    android:orientation&#x3D;&quot;vertical&quot;&gt;    &lt;Button        android:layout_width&#x3D;&quot;match_parent&quot;        android:layout_height&#x3D;&quot;wrap_content&quot;        android:text&#x3D;&quot;加密&quot;        android:onClick&#x3D;&quot;mCrypt&quot;&#x2F;&gt;    &lt;Button        android:layout_width&#x3D;&quot;match_parent&quot;        android:layout_height&#x3D;&quot;wrap_content&quot;        android:text&#x3D;&quot;解密&quot;        android:onClick&#x3D;&quot;mDecrypt&quot;&#x2F;&gt;&lt;&#x2F;LinearLayout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写一个实现对文件加密解密的java类: Crpytor.java</li></ul><pre class="line-numbers language-none"><code class="language-none">package com.example.ndk.filecrypt;public class Cryptor &#123;    static &#123;        System.loadLibrary(&quot;cryptor&quot;);    &#125;    &#x2F;**     * 对文件进行加密     * @param path 需要加密的文件路径     * @return 加密后的文件路径     *&#x2F;    public native static void crypt(String path,String cryptPath);    &#x2F;**     * 对文件进行解密     * @param cryptPath 加密文件的路径     * @return 解密后的文件路径     *&#x2F;    public native static void decrypt(String cryptPath,String decryptPath);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在View对应的java类中实现相应的点击事件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class MainActivity extends AppCompatActivity &#123;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);    &#125;    &#x2F;**     * 加密的点击事件     *     * @param view     *&#x2F;    public void mCrypt(View view) &#123;        File sdDir &#x3D; Environment.getExternalStorageDirectory();        String sdpath &#x3D; sdDir.getAbsolutePath();        String path &#x3D; sdpath + &quot;&#x2F;ndk.jpg&quot;;        String cryptPath &#x3D; sdpath + &quot;&#x2F;ndk_crypt.jpg&quot;;        Cryptor.crypt(path, cryptPath);        Toast.makeText(this, &quot;加密完成&quot;, Toast.LENGTH_SHORT).show();    &#125;    &#x2F;**     * 解密的点击事件     *     * @param view     *&#x2F;    public void mDecrypt(View view) &#123;        File sdDir &#x3D; Environment.getExternalStorageDirectory();        String sdpath &#x3D; sdDir.getAbsolutePath();        String cryptPath &#x3D; sdpath + &quot;&#x2F;ndk_crypt.jpg&quot;;        String decryptPath &#x3D; sdpath + &quot;&#x2F;ndk_decrypt.jpg&quot;;        Cryptor.decrypt(cryptPath, decryptPath);        Toast.makeText(this, &quot;解密完成&quot;, Toast.LENGTH_SHORT).show();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-javah-命令生成头文件"><a class="markdownIt-Anchor" href="#2-使用-javah-命令生成头文件"></a> 2、使用 javah 命令生成头文件</h3><ul><li>执行javah命令，因为AndroidStudio使用的是UTF-8的编码，所以在执行javah命令时需要指定编码为UTF-8(默认为GBK);</li></ul><pre class="line-numbers language-none"><code class="language-none">javah -encoding UTF-8 com.example.ndk.filecrypt.Cryptor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>生成 com_example_ndk_filecrypt_Cryptor.h 文件</li></ul><h3 id="3-创建jnicpp目录添加ndk本地支持"><a class="markdownIt-Anchor" href="#3-创建jnicpp目录添加ndk本地支持"></a> 3、创建JNI/CPP目录，添加NDK本地支持</h3><ul><li>在src/main目录下创建jni/cpp目录，将刚刚生成的.h文件复制到该目录下</li><li>在项目配置中设置 Android NDK location 目录，需要提前下载 NDK 相关支持 (在Android SDK 下载中选择 SDK Tools 中的 LLDB 、CMake 、NDK 三项进行下载)</li><li>在jni 目录下创建 CMakeLists.txt 文件</li></ul><pre class="line-numbers language-none"><code class="language-none"># cmake 版本cmake_minimum_required(VERSION 3.4.1)# 添加支持add_library( # 为library设置名称             cryptor             # 设置该library为共享的             SHARED             # 提供C&#x2F;C++相关文件的相对路径             cryptor.c )find_library( # Sets the name of the path variable.              log-lib              # Specifies the name of the NDK library that              # you want CMake to locate.              log )target_link_libraries( # Specifies the target library.与上面add_library的名称相同                       cryptor                       # Links the target library to the log library                       # included in the NDK.                       $&#123;log-lib&#125; )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在 app目录下的build.gradle 文件中配置jni 目录，以及NDK支持</li></ul><pre class="line-numbers language-none"><code class="language-none">android &#123;        defaultConfig &#123;        &#x2F;&#x2F; NDK的配置        ndk&#123;             moduleName &quot;cryptor&quot;            abiFilters  &quot;armeabi-v7a&quot;, &quot;x86&quot;        &#125;    &#125;    sourceSets &#123;        &#x2F;&#x2F;配置jni目录        main &#123;            jni.srcDirs &#x3D; []        &#125;    &#125;        externalNativeBuild &#123;        &#x2F;&#x2F;配置cmake文件路径        cmake &#123;            path file(&#39;src&#x2F;main&#x2F;jni&#x2F;CMakeLists.txt&#39;)        &#125;    &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-实现头文件中定义的函数"><a class="markdownIt-Anchor" href="#4-实现头文件中定义的函数"></a> 4、实现头文件中定义的函数</h3><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_ndk_filecrypt_Cryptor.h&quot;#include &lt;string.h&gt;char password[] &#x3D; &quot;qazwsxedc&quot;;&#x2F;&#x2F;加密char *crypt(char normal_path[], char crypt_path[]) &#123;    &#x2F;&#x2F;打开文件    FILE *normal_fp &#x3D; fopen(normal_path, &quot;rb&quot;);    FILE *crypt_fp &#x3D; fopen(crypt_path, &quot;wb&quot;);    &#x2F;&#x2F;一次读取一个字符    int ch;    int i &#x3D; 0;    int pwd_len &#x3D; strlen(password);    while ((ch &#x3D; fgetc(normal_fp)) !&#x3D; EOF) &#123;&#x2F;&#x2F;End of FILE        &#x2F;&#x2F;加密        fputc(ch ^ password[i % pwd_len], crypt_fp);        i++;    &#125;    fclose(normal_fp);    fclose(crypt_fp);&#125;&#x2F;&#x2F;解密char *decrypt(char crypt_path[], char decrypt_path[]) &#123;    &#x2F;&#x2F;打开文件    FILE *crypt_fp &#x3D; fopen(crypt_path, &quot;rb&quot;);    FILE *decrypt_fp &#x3D; fopen(decrypt_path, &quot;wb&quot;);    &#x2F;&#x2F;一次读取一个字符    int ch;    int i &#x3D; 0;    int pwd_len &#x3D; strlen(password);    while ((ch &#x3D; fgetc(crypt_fp)) !&#x3D; EOF) &#123;&#x2F;&#x2F;End of FILE        &#x2F;&#x2F;加密        fputc(ch ^ password[i % pwd_len], decrypt_fp);        i++;    &#125;    fclose(crypt_fp);    fclose(decrypt_fp);&#125;&#x2F;** * 加密 * @param env * @param cls * @param jstr * @return *&#x2F;JNIEXPORT void JNICALL Java_com_example_ndk_filecrypt_Cryptor_crypt        (JNIEnv *env, jclass cls, jstring normal_path_str, jstring crypt_path_str) &#123;    char *path &#x3D; (*env)-&gt;GetStringUTFChars(env, normal_path_str, NULL);    char *crypt_path &#x3D; (*env)-&gt;GetStringUTFChars(env, crypt_path_str, NULL);    crypt(path, crypt_path);    &#x2F;&#x2F;对变量的内存进行释放    (*env)-&gt;ReleaseStringChars(env, normal_path_str, path);    (*env)-&gt;ReleaseStringChars(env, crypt_path_str, crypt_path);&#125;&#x2F;** * 解密 * @param env * @param cls * @param jstr * @return *&#x2F;JNIEXPORT void JNICALL Java_com_example_ndk_filecrypt_Cryptor_decrypt        (JNIEnv *env, jclass cls, jstring crypt_path_str, jstring decrypt_path_str) &#123;    char *crypt_path &#x3D; (*env)-&gt;GetStringUTFChars(env, crypt_path_str, NULL);    char *decrypt_path &#x3D; (*env)-&gt;GetStringUTFChars(env, decrypt_path_str, NULL);    decrypt(crypt_path, decrypt_path);    &#x2F;&#x2F;对变量的内存进行释放    (*env)-&gt;ReleaseStringChars(env, crypt_path_str, crypt_path);    (*env)-&gt;ReleaseStringChars(env, decrypt_path_str, decrypt_path);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-编译生成so动态库"><a class="markdownIt-Anchor" href="#5-编译生成so动态库"></a> 5、编译生成.so动态库</h3><ul><li>点击Build -&gt; Make Module app</li><li>可以在app -&gt; build -&gt; intermediates -&gt; cmake -&gt; debug -&gt; obj 下看到对应的armeabi-v7a 和 x86 的so库</li></ul><h3 id="6-加载so动态库运行程序"><a class="markdownIt-Anchor" href="#6-加载so动态库运行程序"></a> 6、加载.so动态库，运行程序</h3><ul><li>在src/main 目录下创建 jniLibs 文件夹</li><li>将上面生成的 armeabi-v7a 和 x86 的so库 复制到该 jniLibs 文件夹内</li><li>运行程序</li></ul><h2 id="二-ndk开发进行文件拆分与合并"><a class="markdownIt-Anchor" href="#二-ndk开发进行文件拆分与合并"></a> 二、NDK开发进行文件拆分与合并</h2><h3 id="1-实现java层native方法-2"><a class="markdownIt-Anchor" href="#1-实现java层native方法-2"></a> 1、实现Java层native方法</h3><ul><li>创建Android项目</li><li>写一个含有加密和解密按钮的view</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;    android:layout_width&#x3D;&quot;match_parent&quot;    android:layout_height&#x3D;&quot;match_parent&quot;    android:orientation&#x3D;&quot;vertical&quot;&gt;    &lt;Button        android:layout_width&#x3D;&quot;match_parent&quot;        android:layout_height&#x3D;&quot;wrap_content&quot;        android:text&#x3D;&quot;拆分&quot;        android:onClick&#x3D;&quot;mDiff&quot;&#x2F;&gt;    &lt;Button        android:layout_width&#x3D;&quot;match_parent&quot;        android:layout_height&#x3D;&quot;wrap_content&quot;        android:text&#x3D;&quot;合并&quot;        android:onClick&#x3D;&quot;mPatch&quot;&#x2F;&gt;&lt;&#x2F;LinearLayout&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写一个实现对文件拆分合并的java类: FilePatchUtils.java</li></ul><pre class="line-numbers language-none"><code class="language-none">package com.example.ndk.filepatchpublic class FilePatchUtils &#123;    static &#123;        System.loadLibrary(&quot;filepatch-lib&quot;);    &#125;    &#x2F;**     * 对文件进行拆分     * @param path  文件路径     * @param count 拆分成多少个     *&#x2F;    public native static void diff(String path,String pathPattern,int count);    &#x2F;**     * 对文件进行合并     * @param pathPattern 需合并文件路径（%d）     * @param count 将多少个文件合并     * @param patchPath 合并后文件路径     *&#x2F;    public native static void patch(String pathPattern,int count,String patchPath);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在View对应的java类中实现相应的点击事件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class FilePatchActivity extends AppCompatActivity &#123;    private String sdpath;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_file_patch);        File sdDir &#x3D; Environment.getExternalStorageDirectory();        sdpath &#x3D; sdDir.getAbsolutePath();    &#125;     &#x2F;**     * 文件拆分     *     * @param view     *&#x2F;    public void mDiff(View view) &#123;        String path &#x3D; sdpath + File.separatorChar + &quot;ndk.jpg&quot;;        String pathPattern &#x3D; sdpath + File.separatorChar + &quot;ndk_%d.jpg&quot;;        FilePatchUtils.diff(path, pathPattern, 3);        Toast.makeText(this, &quot;拆分完成&quot;, Toast.LENGTH_SHORT).show();    &#125;    &#x2F;**     * 文件合并     *     * @param view     *&#x2F;    public void mPatch(View view) &#123;        String patchPath &#x3D; sdpath + File.separatorChar + &quot;ndk_patch.jpg&quot;;        String pathPattern &#x3D; sdpath + File.separatorChar + &quot;ndk_%d.jpg&quot;;        FilePatchUtils.patch(pathPattern, 3, patchPath);        Toast.makeText(this, &quot;合并完成&quot;, Toast.LENGTH_SHORT).show();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-javah-命令生成头文件-2"><a class="markdownIt-Anchor" href="#2-使用-javah-命令生成头文件-2"></a> 2、使用 javah 命令生成头文件</h3><ul><li>执行javah命令，因为AndroidStudio使用的是UTF-8的编码，所以在执行javah命令时需要指定编码为UTF-8(默认为GBK);</li></ul><pre class="line-numbers language-none"><code class="language-none">javah -encoding UTF-8 com.example.ndk.filepatch.FilePatchUtils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>生成 com_example_ndk_filepatch_FilePatchUtils.h 文件</li></ul><h3 id="3-创建jni目录添加ndk本地支持"><a class="markdownIt-Anchor" href="#3-创建jni目录添加ndk本地支持"></a> 3、创建JNI目录，添加NDK本地支持</h3><ul><li>在src/main目录下创建jni目录，将刚刚生成的.h文件复制到该目录下</li><li>在项目配置中设置 Android NDK location 目录，需要提前下载 NDK 相关支持 (在Android SDK 下载中选择 SDK Tools 中的 LLDB 、CMake 、NDK 三项进行下载)</li><li>在jni 目录下创建 CMakeLists.txt 文件;同上；</li><li>在 app目录下的build.gradle 文件中配置jni 目录，以及NDK支持；同上；</li></ul><h3 id="4-实现头文件中定义的函数-2"><a class="markdownIt-Anchor" href="#4-实现头文件中定义的函数-2"></a> 4、实现头文件中定义的函数</h3><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_ndk_filepatch_FilePatchUtils.h&quot;#include &lt;android&#x2F;log.h&gt;#define LOGI(FORMAT, ...) __android_log_print(ANDROID_LOG_INFO,&quot;FILE_PATCH&quot;,FORMAT,__VA_ARGS__);#define LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,&quot;FILE_PATCH&quot;,##FORMAT,__VA_ARGS__);&#x2F;** * 获取文件大小 * @param path 文件路径 * @return 文件大小 *&#x2F;long get_file_size(char *path) &#123;    FILE *fp &#x3D; fopen(path, &quot;r&quot;);    if (fp &#x3D;&#x3D; NULL) &#123;        return 0;    &#125;    fseek(fp, 0, SEEK_END);    return ftell(fp);&#125;&#x2F;* * Class:     com_example_ndk_filepatch_FilePatchUtils * Method:    diff * Signature: (Ljava&#x2F;lang&#x2F;String;Ljava&#x2F;lang&#x2F;String;I)V *&#x2F;JNIEXPORT void JNICALL Java_com_example_ndk_filepatch_FilePatchUtils_diff        (JNIEnv *env, jclass cls, jstring file_path_str, jstring pattern_str, jint file_count) &#123;    const char *path &#x3D; (*env)-&gt;GetStringUTFChars(env, file_path_str, NULL);    const char *pattern &#x3D; (*env)-&gt;GetStringUTFChars(env, pattern_str, NULL);    &#x2F;&#x2F;得到分割之后的文件的路径列表    char **filePaths &#x3D; malloc(sizeof(char *) * file_count);    &#x2F;&#x2F;读取path对应路径，循环写入子文件    int i &#x3D; 0;    for (; i &lt; file_count; i++) &#123;        &#x2F;&#x2F;给元素开辟空间        filePaths[i] &#x3D; malloc(sizeof(char) * 100);        &#x2F;&#x2F;给元素赋值        sprintf(filePaths[i], pattern, (i + 1));        LOGI(&quot;patch path:%s&quot;, filePaths[i]);    &#125;    &#x2F;&#x2F;分割文件    FILE *fp &#x3D; fopen(path, &quot;rb&quot;);    int fileSize &#x3D; get_file_size(path);    if (fileSize % file_count &#x3D;&#x3D; 0) &#123;        &#x2F;&#x2F;能整除        int part &#x3D; fileSize &#x2F; file_count;        &#x2F;&#x2F;逐一写入分割子文件中        int i &#x3D; 0;        for (; i &lt; file_count; i++) &#123;            FILE *fwp &#x3D; fopen(filePaths[i], &quot;wb&quot;);            int j &#x3D; 0;            for (; j &lt; part; j++) &#123;                fputc(fgetc(fp), fwp);            &#125;            fclose(fwp);        &#125;        fclose(fp);    &#125; else &#123;        &#x2F;&#x2F;不能整除        int part &#x3D; fileSize &#x2F; (file_count - 1);        &#x2F;&#x2F;逐一写入分割子文件中        int i &#x3D; 0;        for (; i &lt; file_count - 1; i++) &#123;            FILE *fwp &#x3D; fopen(filePaths[i], &quot;wb&quot;);            int j &#x3D; 0;            for (; j &lt; part; j++) &#123;                fputc(fgetc(fp), fwp);            &#125;            fclose(fwp);        &#125;        part &#x3D; fileSize % (file_count - 1);        if (part &gt; 0) &#123;            FILE *fwp &#x3D; fopen(filePaths[file_count - 1], &quot;wb&quot;);            int j &#x3D; 0;            for (; j &lt; part; j++) &#123;                fputc(fgetc(fp), fwp);            &#125;            fclose(fwp);        &#125;        fclose(fp);    &#125;    &#x2F;&#x2F;释放    i &#x3D; 0;    for (; i &lt; file_count; i++) &#123;        free(filePaths[i]);    &#125;    free(filePaths);    &#x2F;&#x2F;对变量的内存进行释放    (*env)-&gt;ReleaseStringChars(env, file_path_str, path);    (*env)-&gt;ReleaseStringChars(env, pattern_str, pattern);&#125;&#x2F;* * Class:     com_example_ndk_filepatch_FilePatchUtils * Method:    patch * Signature: (Ljava&#x2F;lang&#x2F;String;Ljava&#x2F;lang&#x2F;String;I)V *&#x2F;JNIEXPORT void JNICALL Java_com_example_ndk_filepatch_FilePatchUtils_patch        (JNIEnv *env, jclass cls, jstring pattern_str, jint count, jstring patch_path_str) &#123;    char *pattern &#x3D; (*env)-&gt;GetStringUTFChars(env, pattern_str, NULL);    char *patch_path &#x3D; (*env)-&gt;GetStringUTFChars(env, patch_path_str, NULL);    FILE *fwp &#x3D; fopen(patch_path, &quot;wb&quot;);    int i &#x3D; 0;    for (; i &lt; count; i++) &#123;        &#x2F;&#x2F;单个文件逐一写入fwp        char *path &#x3D; malloc(sizeof(char) * 100);        sprintf(path, pattern, (i + 1));        LOGI(&quot;patch path:%s&quot;, path);        FILE *frp &#x3D; fopen(path, &quot;rb&quot;);        &#x2F;&#x2F;判断文件是否为NULL        if (frp !&#x3D; NULL) &#123;            &#x2F;&#x2F;获取单个文件大小            int file_size &#x3D; get_file_size(path);            int j &#x3D; 0;            for (; j &lt; file_size; ++j) &#123;                fputc(fgetc(frp), fwp);            &#125;            fclose(frp);        &#125;        &#x2F;&#x2F;释放分配的内存空间        free(path);    &#125;    fclose(fwp);    &#x2F;&#x2F;对变量的内存进行释放    (*env)-&gt;ReleaseStringChars(env, pattern_str, pattern);    (*env)-&gt;ReleaseStringChars(env, patch_path_str, patch_path);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-编译生成so动态库-2"><a class="markdownIt-Anchor" href="#5-编译生成so动态库-2"></a> 5、编译生成.so动态库</h3><ul><li>点击Build -&gt; Make Module app</li><li>可以在app -&gt; build -&gt; intermediates -&gt; cmake -&gt; debug -&gt; obj 下看到对应的armeabi-v7a 和 x86 的so库</li></ul><h3 id="6-加载so动态库运行程序-2"><a class="markdownIt-Anchor" href="#6-加载so动态库运行程序-2"></a> 6、加载.so动态库，运行程序</h3><ul><li>在src/main 目录下创建 jniLibs 文件夹</li><li>将上面生成的 armeabi-v7a 和 x86 的so库 复制到该 jniLibs 文件夹内</li><li>运行程序</li></ul>]]></content>
      
      
      <categories>
          
          <category> NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> NDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维数组中的查找</title>
      <link href="20190227/algorithm/2.er-wei-shu-zu-zhong-de-cha-zhao/"/>
      <url>20190227/algorithm/2.er-wei-shu-zu-zhong-de-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h1 id="2-二维数组中的查找"><a class="markdownIt-Anchor" href="#2-二维数组中的查找"></a> 2. 二维数组中的查找</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>给定一个二维数组，其每一行从左到右递增排序，从上到下也是递增排序。给定一个数，判断这个数是否在该二维数组中。</p><pre class="line-numbers language-none"><code class="language-none">Consider the following matrix:[  [1,   4,  7, 11, 15],  [2,   5,  8, 12, 19],  [3,   6,  9, 16, 22],  [10, 13, 14, 17, 24],  [18, 21, 23, 26, 30]]Given target &#x3D; 5, return true.Given target &#x3D; 20, return false.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>要求时间复杂度 O(M + N)，空间复杂度 O(1)。其中 M 为行数，N 为 列数。</p><p>该二维数组中的一个数，小于它的数一定在其左边，大于它的数一定在其下边。因此，从右上角开始查找，就可以根据 target 和当前元素的大小关系来缩小查找区间，当前元素的查找区间为左下角的所有元素。</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 判断给定的Value值是否在二维数组中 * @param arr 给定的二维数组 * @param value 给定用来判断的值 * @return  */</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isInArr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//从左下角开始，如果value比当前位置的元素小，则向上一行（r--）;如果value比当前位置元素大，则向右一列（c++）</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isInArr</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isInArr</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 判断给定的Value值是否在二维数组中 * @param array 给定的二维数组 * @param value 给定用来判断的值 * @return */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">isInArr</span><span class="token punctuation">(</span>array<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Array<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">,</span> value<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> r <span class="token operator">=</span> array<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            c<span class="token operator">++</span>            <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            r<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span>    <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isInArr</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isInArr</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;tqId=11154&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组中重复的数字</title>
      <link href="20190226/algorithm/1.shu-zu-zhong-chong-fu-de-shu-zi/"/>
      <url>20190226/algorithm/1.shu-zu-zhong-chong-fu-de-shu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数组中重复的数字"><a class="markdownIt-Anchor" href="#1-数组中重复的数字"></a> 1. 数组中重复的数字</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>在一个长度为 n 的数组里的所有数字都在 0 到 n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字是重复的，也不知道每个数字重复几次。请找出数组中任意一个重复的数字。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>要求时间复杂度 O(N)，空间复杂度 O(1)。因此不能使用排序的方法，也不能使用额外的标记数组。</p><p>对于这种数组元素在 [0, n-1] 范围内的问题，可以将值为 i 的元素调整到第 i 个位置上进行求解。本题要求找出重复的数字，因此在调整过程中，如果第 i 位置上已经有一个值为 i 的元素，就可以知道 i 值重复。</p><h2 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h2><h3 id="java-代码"><a class="markdownIt-Anchor" href="#java-代码"></a> java 代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 寻找数组中的重复数字并返回，如果没有找到，返回-1 */</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">duplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断当前位置上的元素是否和当前位置数值相同，如果不相同，则寻找和当前位置数字相同的值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>arr<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断如果当前位置的元素和以该元素为下标的元素相同时，则寻找到重复数字，返回盖重复数字；如果不相同，则进行元素交换</span>                <span class="token keyword">return</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 对数组中的元素进行交换 * @param arr 需要交换元素的数组 * @param i 需要交换的元素下标 * @param j 需要交换的元素下标 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">duplicate</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kotlin-代码"><a class="markdownIt-Anchor" href="#kotlin-代码"></a> Kotlin 代码</h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 寻找数组中的重复数字并返回，如果没有找到，返回-1 */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">duplicate</span><span class="token punctuation">(</span>array<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span>Int<span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> array<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断当前位置上的元素是否和当前位置数值相同，如果不相同，则寻找和当前位置数字相同的值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>array<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断如果当前位置的元素和以该元素为下标的元素相同时，则寻找到重复数字，返回盖重复数字；如果不相同，则进行元素交换</span>                <span class="token keyword">return</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>i<span class="token punctuation">,</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//元素交换</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 对数组中的元素进行交换 * @param arr 需要交换元素的数组 * @param i 需要交换的元素下标 * @param j 需要交换的元素下标 */</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">,</span>i<span class="token operator">:</span> Int<span class="token punctuation">,</span> j<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> tmp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">&#125;</span><span class="token comment">/** * 入口函数 */</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> array<span class="token operator">:</span>Array<span class="token operator">&lt;</span>Int<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">duplicate</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用声明"><a class="markdownIt-Anchor" href="#引用声明"></a> 引用声明</h2><p>该题目引用自<br /><a href="https://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8?tpId=13&amp;tqId=11203&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking&amp;from=onestravel">牛客网</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BottomNavigationBar 导航菜单</title>
      <link href="20190130/android-ndk/bottomnavigationbar-ke-yi-tu-qi-de-dao-hang-cai-dan/"/>
      <url>20190130/android-ndk/bottomnavigationbar-ke-yi-tu-qi-de-dao-hang-cai-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="bottomnavigationbar"><a class="markdownIt-Anchor" href="#bottomnavigationbar"></a> <a href="https://github.com/onestravel/BottomNavigationBar">BottomNavigationBar</a> 使用说明</h1><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介：</h2><h5 id="bottomnavigationbar-是自定义的一个实现app应用底部导航栏功能的view可以实现底部-2-5-个导航菜单一般不会有更多可以实现某一个菜单凸起的效果如有5个菜单可以选择让第三个菜单凸起floating这是很多app都有的功能-可以根据编写的颜色变化的资源文件来更改图标和文字选中时和未选中时的颜色可以自由控制是否需要选中checkable选择开启时可变换为选中颜色选择关闭时不能更改为选择颜色可以控制默认选中哪一项可以设置某一个导航菜单的未读消息数数字或者小红点"><a class="markdownIt-Anchor" href="#bottomnavigationbar-是自定义的一个实现app应用底部导航栏功能的view可以实现底部-2-5-个导航菜单一般不会有更多可以实现某一个菜单凸起的效果如有5个菜单可以选择让第三个菜单凸起floating这是很多app都有的功能-可以根据编写的颜色变化的资源文件来更改图标和文字选中时和未选中时的颜色可以自由控制是否需要选中checkable选择开启时可变换为选中颜色选择关闭时不能更改为选择颜色可以控制默认选中哪一项可以设置某一个导航菜单的未读消息数数字或者小红点"></a> BottomNavigationBar 是自定义的一个实现App应用底部导航栏功能的View,可以实现底部 2-5 个导航菜单（一般不会有更多），可以实现某一个菜单凸起的效果，如，有5个菜单，可以选择让第三个菜单凸起（floating），这是很多App都有的功能; 可以根据编写的颜色变化的资源文件来更改图标和文字选中时和未选中时的颜色，可以自由控制是否需要选中（checkable）,选择开启时，可变换为选中颜色，选择关闭时，不能更改为选择颜色;可以控制默认选中哪一项；可以设置某一个导航菜单的未读消息数（数字或者小红点）。</h5><h3 id="先看一组效果图"><a class="markdownIt-Anchor" href="#先看一组效果图"></a> 先看一组效果图</h3><h4 id="五个菜单没有凸起的都是可选中的"><a class="markdownIt-Anchor" href="#五个菜单没有凸起的都是可选中的"></a> 五个菜单，没有凸起的，都是可选中的</h4><p><img src="/images/gif/SVID_20190130_155132_1.gif" alt="SVID_20190130_155132_1" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/gif/SVID_20190130_155132_1.gif" class="lozad post-image"></p><center>图1</center>#### 中间有凸起，并且中间的不能选中，但点击事件可以响应<p><img src="/images/gif/SVID_20190130_155440_1.gif" alt="SVID_20190130_155440_1" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/gif/SVID_20190130_155440_1.gif" class="lozad post-image"></p><center>图2</center>## 引入方法<p>TAG:     <a href="https://jitpack.io/#onestravel/BottomNavigationBar"><img src="https://jitpack.io/v/onestravel/BottomNavigationBar.svg" alt="" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://jitpack.io/v/onestravel/BottomNavigationBar.svg" class="lozad post-image"></a></p><h4 id="gradle"><a class="markdownIt-Anchor" href="#gradle"></a> gradle</h4><ul><li>在项目中的根目录下的 build.gradle (与model同级的) 中增加如下配置</li></ul><pre class="line-numbers language-none"><code class="language-none">allprojects &#123;repositories &#123;...maven &#123; url &#39;https:&#x2F;&#x2F;jitpack.io&#39; &#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在model 中的build.gradle 中增加依赖</li></ul><pre class="line-numbers language-none"><code class="language-none">dependencies &#123;implementation &#39;com.github.onestravel:BottomNavigationBar:TAG&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="maven"><a class="markdownIt-Anchor" href="#maven"></a> maven</h4><ul><li>在pom.xml文件中加入下面配置</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;repositories&gt;&lt;repository&gt;    &lt;id&gt;jitpack.io&lt;&#x2F;id&gt;    &lt;url&gt;https:&#x2F;&#x2F;jitpack.io&lt;&#x2F;url&gt;&lt;&#x2F;repository&gt;&lt;&#x2F;repositories&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加maven依赖</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>onestravel<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span><span class="token class-name">BottomNavigationBar</span><span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span>TAG<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="属性说明"><a class="markdownIt-Anchor" href="#属性说明"></a> 属性说明</h2><h3 id="bottomnavigationbar-属性说明"><a class="markdownIt-Anchor" href="#bottomnavigationbar-属性说明"></a> BottomNavigationBar 属性说明</h3><table><thead><tr><th>属性</th><th>参考值</th><th>说明</th></tr></thead><tbody><tr><td>app:itemIconTint</td><td>@drawable/tab_selecter</td><td>整体的tab菜单的图片选中和未选中的颜色变化，传入一个资源drawable文件</td></tr><tr><td>app:itemTextColor</td><td>@drawable/tab_selecter</td><td>@drawable/tab_selecter@drawable/tab_selecter整体的tab菜单的图片选中和未选中的颜色变化，传入一个资源drawable文件</td></tr><tr><td>app:floatingEnable</td><td>true/false</td><td>是否开启浮动，默认为false，设置为true是，可以实现中间凸起</td></tr><tr><td>app:floatingUp</td><td>20dp</td><td>设置Tab的上浮尺寸，比如：上浮20dp，上浮尺寸不可超过整个菜单高度的1/2</td></tr><tr><td>app:menu</td><td>@menu/botom_menu</td><td>BottomNavigationBar导航栏的关键，设置导航栏的tab菜单</td></tr><tr><td>app:itemTextSize</td><td>15sp</td><td>设置导航栏文字的大小</td></tr><tr><td>app:itemIconWidth</td><td>30dp</td><td>设置导航栏Icon的宽度</td></tr><tr><td>app:temIconHeight</td><td>30dp</td><td>设置导航栏Icon的高度</td></tr><tr><td>app:itemTextTopMargin</td><td>5dp</td><td>置导航栏文字和Icon的间隔高度</td></tr></tbody></table><h4 id="示例1不需要浮动凸起的菜单图1效果"><a class="markdownIt-Anchor" href="#示例1不需要浮动凸起的菜单图1效果"></a> 示例1:不需要浮动（凸起）的菜单，图1效果</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token class-name">BottomNavigationBar</span>    android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/BottomLayout"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>    android<span class="token operator">:</span>layout_alignParentBottom<span class="token operator">=</span><span class="token string">"true"</span>    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@android:color/white"</span>    android<span class="token operator">:</span>paddingTop<span class="token operator">=</span><span class="token string">"5dp"</span>    android<span class="token operator">:</span>paddingBottom<span class="token operator">=</span><span class="token string">"5dp"</span>    app<span class="token operator">:</span>menu<span class="token operator">=</span><span class="token string">"@menu/navigation_menu"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token class-name">BottomNavigationBar</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例2需要浮动凸起的菜单图2效果"><a class="markdownIt-Anchor" href="#示例2需要浮动凸起的菜单图2效果"></a> 示例2:需要浮动（凸起）的菜单，图2效果</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span>cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token class-name">BottomNavigationBar</span>       android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/BottomLayout"</span>       android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>       android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>       android<span class="token operator">:</span>layout_alignParentBottom<span class="token operator">=</span><span class="token string">"true"</span>       android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@android:color/white"</span>       android<span class="token operator">:</span>paddingTop<span class="token operator">=</span><span class="token string">"5dp"</span>       android<span class="token operator">:</span>paddingBottom<span class="token operator">=</span><span class="token string">"5dp"</span>       app<span class="token operator">:</span>floatingEnable<span class="token operator">=</span><span class="token string">"true"</span>       app<span class="token operator">:</span>floatingUp<span class="token operator">=</span><span class="token string">"25dp"</span>       app<span class="token operator">:</span>menu<span class="token operator">=</span><span class="token string">"@menu/navigation_menu"</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token class-name">BottomNavigationBar</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="menu-菜单属性值说明"><a class="markdownIt-Anchor" href="#menu-菜单属性值说明"></a> menu 菜单属性值说明</h3><table><thead><tr><th>属性</th><th>参考值</th><th>说明</th></tr></thead><tbody><tr><td>android:id</td><td>@+id/tab1</td><td>导航菜单 Item 的ID；</td></tr><tr><td>android:icon</td><td>@drawable/bar_news</td><td>导航菜单 Item 的图标，可以是图标选择器（selector），也可以是默认图标，根据BottomNavigationBar的属性 app:itemIconTint 更改选中与不选中的颜色变化，默认为蓝色和灰色；</td></tr><tr><td>android:title</td><td>首页</td><td>导航菜单 Item 的文字，可以默认为空字符串，表示不设置；</td></tr><tr><td>android:checkable</td><td>true/false</td><td>设置导航菜单 Item 是否可以选择，值影响选择与不选中效果，不影响点击事件；</td></tr><tr><td>android:checked</td><td>true/false</td><td>设置导航菜单 Item 是否默认选中,默认为第一个选中，请不要在多个Item上设置改；</td></tr><tr><td>app:floating</td><td>true/false</td><td>设置该导航菜单 Item 是否浮动，与BottomNavigationBar 的app:floatingEnable和 app:floatingUp属性配合使用，默认为false，即不浮动（不凸起）；</td></tr></tbody></table><h4 id="示例1不需要浮动凸起的菜单图1效果-2"><a class="markdownIt-Anchor" href="#示例1不需要浮动凸起的菜单图1效果-2"></a> 示例1:不需要浮动（凸起）的菜单，图1效果</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>menu xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab1"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_news"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"首页"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab2"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_constact"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"联系人"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab5"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/tab_manage_selected"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"拍照"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab3"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_invite"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"发现"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab4"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_my"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"我的"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>menu<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例2需要浮动凸起的菜单图2效果-2"><a class="markdownIt-Anchor" href="#示例2需要浮动凸起的菜单图2效果-2"></a> 示例2:需要浮动（凸起）的菜单，图2效果</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>menu xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab1"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_news"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"首页"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab2"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_constact"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"联系人"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab5"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/tab_manage_selected"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"拍照"</span>        app<span class="token operator">:</span>floating<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>checkable<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab3"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_invite"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"发现"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab4"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_my"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"我的"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>menu<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置点击切换监听"><a class="markdownIt-Anchor" href="#设置点击切换监听"></a> 设置点击切换监听</h3><p><strong>在NavigationBar的Tab进行切换时，会回调改方法，可进行相应处理，如：未读消息数设置</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">bottomView<span class="token punctuation">.</span><span class="token function">setOnItemSelectedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BottomNavigationBar</span><span class="token punctuation">.</span><span class="token class-name">OnItemSelectedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemSelected</span><span class="token punctuation">(</span><span class="token class-name">BottomNavigationBar</span><span class="token punctuation">.</span><span class="token class-name">Item</span> item<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>position<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    bottomView<span class="token punctuation">.</span><span class="token function">setFloatingEnable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    bottomView<span class="token punctuation">.</span><span class="token function">setFloatingEnable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加fragment进行管理点击自动切换"><a class="markdownIt-Anchor" href="#添加fragment进行管理点击自动切换"></a> 添加Fragment进行管理，点击自动切换</h3><p><strong>需要先设置FragmentManager管理器和加载Fragment的ViewGroup,一般为FrameLayout ,需要设置id;之后调用addFragment，为对应的Tab添加Fragment,</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">bottomView<span class="token punctuation">.</span><span class="token function">setFragmentManager</span><span class="token punctuation">(</span><span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mainFragment<span class="token punctuation">)</span><span class="token punctuation">;</span>bottomView<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab1<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FirstFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bottomView<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab2<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SecondFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bottomView<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab3<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ThirdFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bottomView<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab4<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FourFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bottomView<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span><span class="token constant">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab5<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FiveFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="版本更新说明"><a class="markdownIt-Anchor" href="#版本更新说明"></a> 版本更新说明</h3><h4 id="102"><a class="markdownIt-Anchor" href="#102"></a> 1.0.2</h4><ul><li>初版实现自定义底部导航栏</li></ul><h4 id="103"><a class="markdownIt-Anchor" href="#103"></a> 1.0.3</h4><ul><li>在原基础上对封装进行优化，支持代码实现导航栏</li></ul><h4 id="104"><a class="markdownIt-Anchor" href="#104"></a> 1.0.4</h4><ul><li>优化选中突出效果，支持选中放大，支持导航栏背景圆角</li></ul><h4 id="105"><a class="markdownIt-Anchor" href="#105"></a> 1.0.5</h4><ul><li>可以自定义导航栏文字大小</li><li>可以自定义图标的宽度和高度</li><li>自定义图标和文字间隔高度</li></ul><h4 id="106"><a class="markdownIt-Anchor" href="#106"></a> 1.0.6</h4><ul><li>可以Java Api 设置导航栏文字大小</li><li>可以Java Api 设置图标的宽度和高度</li><li>Java Api 设置图标和文字间隔高度</li><li>支持管理Fragment ,实现Fragment点击自动切换</li></ul><h1 id="温馨提示"><a class="markdownIt-Anchor" href="#温馨提示"></a> 温馨提示：</h1><p><strong>在使用过程中，如遇到任何问题，可发送邮件至server@onestravel.cn说明相关问题，我在看到邮件第一时间，会针对相应问题进行沟通解决，谢谢支持！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> BottomNavigationBar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin语言基于Mvp+Retrofit+RxJava封装的Android项目的基础依赖库</title>
      <link href="20181225/android-ndk/kotlin-yu-yan-ji-yu-mvp-retrofit-rxjava-feng-zhuang-de-android-xiang-mu-de-ji-chu-yi-lai-ku/"/>
      <url>20181225/android-ndk/kotlin-yu-yan-ji-yu-mvp-retrofit-rxjava-feng-zhuang-de-android-xiang-mu-de-ji-chu-yi-lai-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="kotlin语言基于mvpretrofitrxjava封装的android项目的基础依赖库"><a class="markdownIt-Anchor" href="#kotlin语言基于mvpretrofitrxjava封装的android项目的基础依赖库"></a> Kotlin语言基于Mvp+Retrofit+RxJava封装的Android项目的基础依赖库</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>该Library是基于Kotlin语言封装的一个库，主要是用来创建一个kotlin项目时，作为项目的简单封装，使用该Library作为依赖引入，即可进行项目开发，省去一些前期准备工作。</p><p>该Library主要进行了一下封装：</p><ol><li>采用普通MVC架构的方式，对Activity，Fragment,Adapter和一些工具类的封装以及自定义View的实现；</li><li>采用Retrofit+RxJava 对http请求进行相应的封装，可设置公共参数，并对RX生命周期进行处理；</li><li>采用MVP架构，对上面封装的Activity，Fragment 进行二次封装；</li><li>该项目使用了org.jetbrains.anko ，可实现对布局文件的自动依赖注入，kotlin文件中的View名称就是对应布局文件中View的 id;</li></ol><p><a href="https://github.com/onestravel/kotlin-base">项目GitHub地址</a></p><h2 id="一-采用普通方式封装的基础文件介绍"><a class="markdownIt-Anchor" href="#一-采用普通方式封装的基础文件介绍"></a> 一、采用普通方式封装的基础文件介绍</h2><h3 id="1-baseactivity"><a class="markdownIt-Anchor" href="#1-baseactivity"></a> 1、BaseActivity</h3><p>package:cn.onestravel.library.kotlin.base.activity</p><p>所有Activity的基类，定义一些子类必须实现的和可实现的方法：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/**    * 获取布局ID,子类必须实现    */</span>   <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int   <span class="token comment">/**    * 初始化 View 的相关操作，若有需要可在子类实现    */</span>   <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 初始化 Listener 事件的相关操作，若有需要可在子类实现    */</span>   <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 初始化 Data 数据的相关操作，若有需要可在子类实现    */</span>   <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 在主线程弹出Toast 提示    * @param msg 需要弹出的提示信息    */</span>   <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">showToast</span><span class="token punctuation">(</span>msg<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       runOnUiThread <span class="token punctuation">&#123;</span>           <span class="token function">toast</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 在主线程弹出Toast 提示    * @param stringRes 需要弹出的提示信息的string资源ID    */</span>   <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">showToast</span><span class="token punctuation">(</span>stringRes<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       runOnUiThread <span class="token punctuation">&#123;</span>           <span class="token function">toast</span><span class="token punctuation">(</span><span class="token function">getString</span><span class="token punctuation">(</span>stringRes<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 跳转到另一个Activity，并且finish 掉当前Activity    * 需要跳转的Activity必须继承于BaseActivity 或者    * @param params 可变参数，需要通过intent传递的参数 eg:"key" to "value"    */</span>   <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">:</span> BaseActivity<span class="token operator">></span> <span class="token function">startActivityAndFinish</span><span class="token punctuation">(</span><span class="token keyword">vararg</span> params<span class="token operator">:</span> Pair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Any<span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       startActivity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span>params<span class="token punctuation">)</span>       <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-baselistactivity"><a class="markdownIt-Anchor" href="#2-baselistactivity"></a> 2、BaseListActivity</h3><p>package:cn.onestravel.library.kotlin.base.activity</p><p>继承自BaseActivity，实现针对RecyclerView实现列表数据的一些配置，简化实现只有一个列表布局的Activity，并且实现上拉加载，下拉刷新操作。</p><p>主要方法如下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">getRecyclerView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>LoadMoreRecyclerView<span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> mRecyclerView   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 获取recyclerView的布局管理器，子类可重写该方法，来更改布局管理器    */</span>   <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">getLayoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span><span class="token function">LayoutManager</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">val</span> layoutManager<span class="token operator">:</span> LinearLayoutManager <span class="token operator">=</span> <span class="token function">LinearLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>       <span class="token comment">//设置为垂直布局，这也是默认的</span>       layoutManager<span class="token punctuation">.</span>orientation <span class="token operator">=</span> OrientationHelper<span class="token punctuation">.</span>VERTICAL       <span class="token keyword">return</span> layoutManager   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 设置RecyclerView 的Adapter适配器    * @param adapter 设置的Adapter，必须是BaseRecyclerAdapter的子类    */</span>   <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token operator">:</span> BaseRecyclerAdapter<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       mRecyclerView<span class="token punctuation">.</span>adapter <span class="token operator">=</span> adapter   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 设置刷新控件的颜色    */</span>   <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">setRefreshColorSchemeColors</span><span class="token punctuation">(</span><span class="token annotation builtin">@ColorInt</span> <span class="token keyword">vararg</span> colors<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       mRefreshLayout<span class="token punctuation">.</span><span class="token function">setColorSchemeColors</span><span class="token punctuation">(</span><span class="token operator">*</span>colors<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 设置刷新控件的颜色    */</span>   <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">setColorSchemeResources</span><span class="token punctuation">(</span><span class="token annotation builtin">@ColorRes</span> <span class="token keyword">vararg</span> colorIds<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       mRefreshLayout<span class="token punctuation">.</span><span class="token function">setColorSchemeResources</span><span class="token punctuation">(</span><span class="token operator">*</span>colorIds<span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 设置刷新控件是否显示    */</span>   <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">isRefresh</span><span class="token punctuation">(</span>isRefresh<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       mRefreshLayout<span class="token punctuation">.</span>isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 刷新完成    */</span>   <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">refreshComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       mRefreshLayout<span class="token punctuation">.</span>isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 刷新数据，子类实现该方法，进行数据请求    */</span>   <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">refreshDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 加载更多完成    */</span>   <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">loadMoreComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       mRecyclerView<span class="token punctuation">.</span><span class="token function">loadMoreComplete</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 设置是否可以加载更多    */</span>   <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">canLoadMore</span><span class="token punctuation">(</span>canLoadMore<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       mRecyclerView<span class="token punctuation">.</span>loadMoreEnable <span class="token operator">=</span> canLoadMore   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 设置是否还有更多的数据    */</span>   <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">hasLoadMore</span><span class="token punctuation">(</span>hasLoadMore<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       mRecyclerView<span class="token punctuation">.</span>hasMore <span class="token operator">=</span> hasLoadMore   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 加载新数据，子类实现该方法，进行数据请求    */</span>   <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">loadMoreDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-baserecycleradapter"><a class="markdownIt-Anchor" href="#3-baserecycleradapter"></a> 3、BaseRecyclerAdapter</h3><p>package:cn.onestravel.library.kotlin.base.adapter</p><p>针对RecyclerView使用的RecyclerView.Adapter进行封装，实现一些基础的布局（不常变化的）设置的方法，定义一些方法，简化子类的实现，更加有利于缩短开发时间；实现adapter中提示Toast的方法，以及添加、设置数据，或者基础View的设置相关内容的方法；对Item点击和长按的监听事件。</p><p>主要方法如下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseRecyclerAdapter<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span>Adapter<span class="token operator">&lt;</span>VH<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> View<span class="token punctuation">.</span>OnClickListener<span class="token punctuation">,</span> View<span class="token punctuation">.</span><span class="token function">OnLongClickListener</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> mDatas<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> context<span class="token operator">:</span> Context    <span class="token keyword">private</span> <span class="token keyword">var</span> clickListener<span class="token operator">:</span> OnItemClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> longClickListener<span class="token operator">:</span> OnItemLongClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> ViewGroup<span class="token punctuation">,</span> viewType<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> VH <span class="token punctuation">&#123;</span>        context <span class="token operator">=</span> parent<span class="token punctuation">.</span>context        <span class="token keyword">val</span> convertView <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token function">getLayoutId</span><span class="token punctuation">(</span>viewType<span class="token punctuation">)</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        convertView<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        convertView<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">VH</span><span class="token punctuation">(</span>convertView<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置Item 的点击事件     */</span>    <span class="token keyword">fun</span> <span class="token function">setOnItemClick</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> OnItemClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        clickListener <span class="token operator">=</span> listener    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置Item 的点击事件     */</span>    <span class="token keyword">fun</span> <span class="token function">setOnItemClick</span><span class="token punctuation">(</span>onClick<span class="token operator">:</span> <span class="token punctuation">(</span>view<span class="token operator">:</span>View<span class="token punctuation">,</span>position<span class="token operator">:</span>Int<span class="token punctuation">,</span><span class="token keyword">data</span><span class="token operator">:</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        clickListener <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span>  OnItemClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">onClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span>position<span class="token punctuation">,</span><span class="token keyword">data</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置Item 的长按事件     */</span>    <span class="token keyword">fun</span> <span class="token function">setOnItemLongClick</span><span class="token punctuation">(</span>listener<span class="token operator">:</span>OnItemLongClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        longClickListener <span class="token operator">=</span> listener    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置Item 的长按事件     */</span>    <span class="token keyword">fun</span> <span class="token function">setOnItemLongClick</span><span class="token punctuation">(</span>onLongClick<span class="token operator">:</span> <span class="token punctuation">(</span>view<span class="token operator">:</span>View<span class="token punctuation">,</span>position<span class="token operator">:</span>Int<span class="token punctuation">,</span><span class="token keyword">data</span><span class="token operator">:</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        longClickListener <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> OnItemLongClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span>Boolean <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span>position<span class="token punctuation">,</span><span class="token keyword">data</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onClick</span><span class="token punctuation">(</span>p0<span class="token operator">:</span> View<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> position<span class="token operator">:</span>Int <span class="token operator">=</span> p0<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>itemViewPosition<span class="token punctuation">)</span> <span class="token keyword">as</span> Int        <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span>T <span class="token operator">=</span> mDatas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>        clickListener<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span>p0<span class="token punctuation">,</span>position<span class="token punctuation">,</span><span class="token keyword">data</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span>p0<span class="token operator">:</span> View<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> position<span class="token operator">:</span>Int <span class="token operator">=</span> p0<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>itemViewPosition<span class="token punctuation">)</span> <span class="token keyword">as</span> Int        <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span>T <span class="token operator">=</span> mDatas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>        <span class="token keyword">return</span> longClickListener<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">onItemLongClick</span><span class="token punctuation">(</span>p0<span class="token punctuation">,</span>position<span class="token punctuation">,</span><span class="token keyword">data</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置数据,并且会清空原数据列表     * @param datas 新的数据列表     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">setDatas</span><span class="token punctuation">(</span>datas<span class="token operator">:</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mDatas<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        mDatas<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 添加新的数据列表到原数据列表末尾     * @param datas 新的数据列表     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">addDatas</span><span class="token punctuation">(</span>datas<span class="token operator">:</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mDatas<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 添加新的数据列表到原数据列表的指定位置     * @param position 需要添加的指定位置     * @param datas 新的数据列表     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">addDatas</span><span class="token punctuation">(</span>position<span class="token operator">:</span> Int<span class="token punctuation">,</span> datas<span class="token operator">:</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> pos <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">></span> mDatas<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mDatas<span class="token punctuation">.</span>size        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> position        mDatas<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> datas<span class="token punctuation">)</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 更新数据列表指定位置上的数据     * @param position 需要更新数据的位置     * @param data 更新后的数据     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">updateData</span><span class="token punctuation">(</span>position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> mDatas<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mDatas<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>            mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>            <span class="token function">notifyItemChanged</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 添加新的数据到原数据列表末尾     * @param datas 新的数据     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">addData</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>        <span class="token function">notifyItemInserted</span><span class="token punctuation">(</span>mDatas<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 添加新的数据到原数据列表的指定位置     * @param position 需要添加的指定位置     * @param data 新的数据     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">addData</span><span class="token punctuation">(</span>position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> pos <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">></span> mDatas<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mDatas<span class="token punctuation">.</span>size        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> position        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>        <span class="token function">notifyItemInserted</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 移除指定位置上的数据     * @param position 需要添加的指定位置     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">removeDataAt</span><span class="token punctuation">(</span>position<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> mDatas<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mDatas<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>            <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">showToast</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        context<span class="token punctuation">.</span><span class="token function">runOnUiThread</span> <span class="token punctuation">&#123;</span>            context<span class="token punctuation">.</span><span class="token function">toast</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 移除指定的数据     * @param data 需要移除的数据实体     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">removeData</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mDatas<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> position <span class="token operator">=</span> mDatas<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>            mDatas<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>            <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据View的类型获取对应的Item布局的ID     */</span>    <span class="token annotation builtin">@LayoutRes</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span>viewType<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token comment">/**     * 绑定ViewHolder 时执行的方法，在此方法里处理对Item的view的操作     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">onBindVH</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> VH<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> datas<span class="token operator">:</span> T<span class="token punctuation">)</span>    <span class="token comment">/**     * 返回数据的数量     */</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mDatas<span class="token punctuation">.</span>size    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> VH<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>itemViewPosition<span class="token punctuation">,</span> position<span class="token punctuation">)</span>        <span class="token function">onBindVH</span><span class="token punctuation">(</span>holder<span class="token punctuation">,</span> position<span class="token punctuation">,</span> mDatas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** *Item 的点击事件 */</span><span class="token keyword">interface</span> OnItemClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** *Item 的长按事件 */</span><span class="token keyword">interface</span> OnItemLongClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span>Boolean<span class="token punctuation">&#125;</span><span class="token comment">/** * 所有的Adapter 使用的ViewHolder */</span><span class="token keyword">class</span> <span class="token function">VH</span><span class="token punctuation">(</span>itemView<span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span><span class="token function">ViewHolder</span><span class="token punctuation">(</span>itemView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 根据View的id获取对应的View     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> E <span class="token operator">:</span> View<span class="token operator">></span> <span class="token function">getView</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> E <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> itemView<span class="token punctuation">.</span>find<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对TextView及其子类设置文本内容     * @param viewId 对应的View 的id     * @param value 需要设置的文本内容     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> value<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token keyword">is</span> TextView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> tv<span class="token operator">:</span> TextView <span class="token operator">=</span> view            tv<span class="token punctuation">.</span>text <span class="token operator">=</span> value        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对TextView及其子类设置文本内容     * @param viewId 对应的View 的id     * @param value 需要设置的文本内容     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> value<span class="token operator">:</span> Spannable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token keyword">is</span> TextView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> tv<span class="token operator">:</span> TextView <span class="token operator">=</span> view            tv<span class="token punctuation">.</span>text <span class="token operator">=</span> value        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对TextView及其子类设置文本内容     * @param viewId 对应的View 的id     * @param stringRes 需要设置的文本资源的id     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token annotation builtin">@StringRes</span> stringRes<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token keyword">is</span> TextView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> tv<span class="token operator">:</span> TextView <span class="token operator">=</span> view            tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>stringRes<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对ImageView及其子类设置图片     * @param viewId 对应的View 的id     * @param resId 需要设置的图片资源的id     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setImageResource</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token annotation builtin">@DrawableRes</span> resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token keyword">is</span> ImageView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> iv<span class="token operator">:</span> ImageView <span class="token operator">=</span> view            iv<span class="token punctuation">.</span>imageResource <span class="token operator">=</span> resId        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对ImageView及其子类设置图片     * @param viewId 对应的View 的id     * @param imgUrl 需要设置的网络图片的地址     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setImageUrl</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> imgUrl<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token keyword">is</span> ImageView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> iv<span class="token operator">:</span> ImageView <span class="token operator">=</span> view            iv<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对View及其子类设置背景图片     * @param viewId 对应的View 的id     * @param resId 需要设置的背景图片的资源地址     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setBackgroundResource</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token annotation builtin">@DrawableRes</span> resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        view<span class="token punctuation">.</span><span class="token function">setBackgroundResource</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对View及其子类设置背景颜色     * @param viewId 对应的View 的id     * @param color 需要设置的背景颜色     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setBackgroundColor</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token annotation builtin">@ColorInt</span> color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        view<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 对View及其子类设置点击事件     * @param viewId 对应的View 的id     * @param color 需要设置的背景颜色     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setOnClick</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">crossinline</span> onClick<span class="token operator">:</span> <span class="token punctuation">(</span>View<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">&#123;</span>            onClick<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-imageviewextend"><a class="markdownIt-Anchor" href="#4-imageviewextend"></a> 4、ImageViewExtend</h3><p>package: cn.onestravel.library.kotlin.base.extend</p><p>改文件是ImageView的扩展方法的文件，主要针对ImageView加载网络图片而新增的一些扩展方法</p><p>具体方法如下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> ImageView<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>imgUrl<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> ImageView <span class="token punctuation">&#123;</span>    ImageUtils<span class="token punctuation">.</span><span class="token function">loadImageUrl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> imgUrl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> ImageView<span class="token punctuation">.</span><span class="token function">loadBitmap</span><span class="token punctuation">(</span>imgUrl<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> ImageView <span class="token punctuation">&#123;</span>    ImageUtils<span class="token punctuation">.</span><span class="token function">loadImageBitmap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> imgUrl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> ImageView<span class="token punctuation">.</span><span class="token function">loadGif</span><span class="token punctuation">(</span>imgUrl<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> ImageView <span class="token punctuation">&#123;</span>    ImageUtils<span class="token punctuation">.</span><span class="token function">loadImageGif</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> imgUrl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> ImageView<span class="token punctuation">.</span><span class="token function">loadImgCallBack</span><span class="token punctuation">(</span>imgUrl<span class="token operator">:</span> String<span class="token punctuation">,</span> requestListener<span class="token operator">:</span> RequestListener<span class="token operator">&lt;</span>Bitmap<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> ImageView <span class="token punctuation">&#123;</span>    ImageUtils<span class="token punctuation">.</span><span class="token function">loadImageCallBack</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> imgUrl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> requestListener<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-basefragment"><a class="markdownIt-Anchor" href="#5-basefragment"></a> 5、BaseFragment</h3><p>package: cn.onestravel.library.kotlin.base.fragment</p><p>所有Fragment的基类，定义一些子类必须实现的和可实现的方法，具体方法与BaseActivity方法类似。</p><h3 id="6-baselistfragment"><a class="markdownIt-Anchor" href="#6-baselistfragment"></a> 6、BaseListFragment</h3><p>package: cn.onestravel.library.kotlin.base.fragment</p><p>继承自BaseFragment，实现针对RecyclerView实现列表数据的一些配置，简化实现只有一个列表布局的Fragment，并且实现上拉加载，下拉刷新操作；具体方法与BaseListActivity相同。</p><h3 id="7-densityutil"><a class="markdownIt-Anchor" href="#7-densityutil"></a> 7、DensityUtil</h3><p>package: cn.onestravel.library.kotlin.base.utils</p><p>尺寸转换工具类，可以将dip转为px，将px转为dip；获取屏幕宽度和高度。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/**    * dip转换为px    */</span>   <span class="token keyword">fun</span> <span class="token function">dip2px</span><span class="token punctuation">(</span>dp<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>dp <span class="token operator">*</span> density<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * px转换为dip    */</span>   <span class="token keyword">fun</span> <span class="token function">px2dip</span><span class="token punctuation">(</span>px<span class="token operator">:</span>  Float<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span>px <span class="token operator">/</span> density<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 获取屏幕宽度    */</span>   <span class="token keyword">fun</span> <span class="token function">appWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>widthPixels   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 获取屏幕高度    */</span>   <span class="token keyword">fun</span> <span class="token function">appHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>heightPixels   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-circletextview"><a class="markdownIt-Anchor" href="#8-circletextview"></a> 8、CircleTextView</h3><p>package：cn.onestravel.library.kotlin.base.view</p><p>自定义圆形TextView，一满足不同需求</p><h3 id="9-emptyview"><a class="markdownIt-Anchor" href="#9-emptyview"></a> 9、EmptyView</h3><p>package：cn.onestravel.library.kotlin.base.view</p><p>自定义 数据为空的页面视图，主要有三个功能类型，分别为：数据为空显示页面（TYPE_EMPTY）；加载进度提示页面（TYPE_LOADING）；加载失败可点击重试页面（TYPE_RELOAD）</p><p>重新定义的一下方法如下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/**     * 设置页面显示类型     *     * @param type     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyType</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">_setEmptyType</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置页面显示类型     *     * @param type     */</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">_setEmptyType</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Int<span class="token punctuation">,</span> isShow<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>emptyType <span class="token operator">=</span> type        <span class="token keyword">when</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            TYPE_EMPTY <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                layoutLoading<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                layoutReload<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                layoutEmpty<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                ivEmptyImg<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE            <span class="token punctuation">&#125;</span>            TYPE_LOADING <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                layoutLoading<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE                layoutEmpty<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                layoutReload<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                <span class="token keyword">if</span> <span class="token punctuation">(</span>tvLoadingMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    tvLoadingMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"正在加载..."</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            TYPE_RELOAD <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                layoutLoading<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                layoutEmpty<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                layoutReload<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE                ivEmptyImg<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置空数据界面的背景色     *     * @param color 背景色     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyBackgroundColor</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        layoutEmpty<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置错误描述     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyText</span><span class="token punctuation">(</span><span class="token annotation builtin">@StringRes</span> resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvEmptyMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvEmptyMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置错误描述     *     * @param text     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyText</span><span class="token punctuation">(</span>text<span class="token operator">:</span> CharSequence<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> text <span class="token operator">=</span> text        <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            text <span class="token operator">=</span> <span class="token string">""</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvEmptyMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvEmptyMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置错误描述字体大小     *     * @param size     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyTextSize</span><span class="token punctuation">(</span>size<span class="token operator">:</span> Float<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvEmptyMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvEmptyMsg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>TypedValue<span class="token punctuation">.</span>COMPLEX_UNIT_PX<span class="token punctuation">,</span> size<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置错误描述颜色     *     * @param color     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyTextColor</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvEmptyMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvEmptyMsg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置错误描述颜色     *     * @param colors     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyTextColor</span><span class="token punctuation">(</span>colors<span class="token operator">:</span> ColorStateList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvEmptyMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvEmptyMsg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置页面图片     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyImgResource</span><span class="token punctuation">(</span><span class="token annotation builtin">@DrawableRes</span> resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>LOLLIPOP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>noDataImg <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>noDataImg <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ivEmptyImg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ivEmptyImg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置页面图片     *     * @param noDataImg     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyImg</span><span class="token punctuation">(</span>noDataImg<span class="token operator">:</span> Drawable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>noDataImg <span class="token operator">=</span> noDataImg        <span class="token keyword">if</span> <span class="token punctuation">(</span>ivEmptyImg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ivEmptyImg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setImageDrawable</span><span class="token punctuation">(</span>noDataImg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取加载按钮文字     */</span>    <span class="token keyword">fun</span> <span class="token function">getReloadBtnText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> reloadBtnText    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置重新加载按钮文字     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnText</span><span class="token punctuation">(</span>resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnText <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnText        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置重新加载按钮文字     *     * @param reloadBtnText     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnText</span><span class="token punctuation">(</span>reloadBtnText<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnText <span class="token operator">=</span> reloadBtnText        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnText        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置重新加载按钮文字大小     *     * @param reloadBtnTextSize     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnTextSize</span><span class="token punctuation">(</span>reloadBtnTextSize<span class="token operator">:</span> Float<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnTextSize <span class="token operator">=</span> reloadBtnTextSize        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            btnReload<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>TypedValue<span class="token punctuation">.</span>COMPLEX_UNIT_PX<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnTextSize<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置重新加载按钮文字颜色     *     * @param color     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnTextColor</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnTextColor <span class="token operator">=</span> color        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            btnReload<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnTextColor<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置重新加载按钮文字颜色     *     * @param colors     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnTextColor</span><span class="token punctuation">(</span>colors<span class="token operator">:</span> ColorStateList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            btnReload<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置加载按钮背景     *     * @param reloadBackground     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnBackground</span><span class="token punctuation">(</span>reloadBackground<span class="token operator">:</span> Drawable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground <span class="token operator">=</span> reloadBackground        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>JELLY_BEAN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置加载按钮背景     *     * @param color     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnBackgroundColor</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground <span class="token operator">=</span> <span class="token function">ColorDrawable</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>JELLY_BEAN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置加载按钮背景     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnBackgroundResource</span><span class="token punctuation">(</span>resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>LOLLIPOP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>JELLY_BEAN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 获取加载提示文字     */</span>    <span class="token keyword">fun</span> <span class="token function">getReloadText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> reloadText    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置重新加载提示文字     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadText</span><span class="token punctuation">(</span>resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadText <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvReloadMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvReloadMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadText        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置重新加载提示文字     *     * @param reloadText     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadText</span><span class="token punctuation">(</span>reloadText<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadText <span class="token operator">=</span> reloadText        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvReloadMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvReloadMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadText        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置重新加载提示文字大小     *     * @param reloadTextSize     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadTextSize</span><span class="token punctuation">(</span>reloadTextSize<span class="token operator">:</span> Float<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadTextSize <span class="token operator">=</span> reloadTextSize        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvReloadMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvReloadMsg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>TypedValue<span class="token punctuation">.</span>COMPLEX_UNIT_PX<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadTextSize<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置重新加载提示文字颜色     *     * @param color     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadTextColor</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadTextColor <span class="token operator">=</span> color        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvReloadMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvReloadMsg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reloadTextColor<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置重新加载提示文字颜色     *     * @param colors     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadTextColor</span><span class="token punctuation">(</span>colors<span class="token operator">:</span> ColorStateList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvReloadMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvReloadMsg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置页面图片     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadImgResource</span><span class="token punctuation">(</span><span class="token annotation builtin">@DrawableRes</span> resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>LOLLIPOP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reloadImage <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reloadImage <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ivReloadImg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ivReloadImg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置页面图片     *     * @param reloadImage     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadImg</span><span class="token punctuation">(</span>reloadImage<span class="token operator">:</span> Drawable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadImage <span class="token operator">=</span> reloadImage        <span class="token keyword">if</span> <span class="token punctuation">(</span>ivReloadImg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ivReloadImg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setImageDrawable</span><span class="token punctuation">(</span>reloadImage<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置加载提示文字     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setLoadingText</span><span class="token punctuation">(</span>resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadingText <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvLoadingMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvLoadingMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingText        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置加载提示文字     *     * @param loadingText     */</span>    <span class="token keyword">fun</span> <span class="token function">setLoadingText</span><span class="token punctuation">(</span>loadingText<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadingText <span class="token operator">=</span> loadingText        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvLoadingMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            tvLoadingMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingText        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 显示此视图     */</span>    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 隐藏此视图     */</span>    <span class="token keyword">fun</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 设置重新加载监听事件     *     * @param listener     */</span>    <span class="token keyword">fun</span> <span class="token function">setOnReloadListener</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> OnReloadListener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onReloadListener <span class="token operator">=</span> listener    <span class="token punctuation">&#125;</span>    <span class="token keyword">interface</span> OnReloadListener <span class="token punctuation">&#123;</span>        <span class="token keyword">fun</span> <span class="token function">onReload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> TYPE_EMPTY <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 页面为空，没有数据时展示</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> TYPE_LOADING <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 正在加载视图</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> TYPE_RELOAD <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 加载失败，显示重新加载视图</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-shapeimageview"><a class="markdownIt-Anchor" href="#10-shapeimageview"></a> 10、ShapeImageView</h3><p>package：cn.onestravel.library.kotlin.base.view</p><p>自定义矩形和圆形ImageView，实现带边框的圆角矩形ImageView或圆形ImageVIew</p><p>viewShape的值为：</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>SHAPE_REC</td><td>矩形ImageView</td></tr><tr><td>SHAPE_CIRCLE</td><td>圆形ImageView</td></tr><tr><td>SHAPE_OVAL</td><td>椭圆ImageView</td></tr></tbody></table><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * 设置ImageView的形式，圆角矩形，圆形，或椭圆 **/</span><span class="token keyword">var</span> shape <span class="token operator">=</span> SHAPE_REC<span class="token operator">:</span> Int        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> shape        <span class="token keyword">set</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>shape <span class="token operator">=</span> shape            <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token comment">/** * 设置ImageView边框颜色 **/</span> <span class="token keyword">var</span> borderColor<span class="token operator">:</span> Int        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> mBorderColor        <span class="token keyword">set</span><span class="token punctuation">(</span>mBorderColor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mBorderColor <span class="token operator">=</span> mBorderColor            mBorderPaint<span class="token punctuation">.</span>color <span class="token operator">=</span> mBorderColor            <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token comment">/**  * 设置ImageView的圆角  **/</span>    <span class="token keyword">var</span> roundRadius<span class="token operator">:</span> Float        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> mRoundRadius        <span class="token keyword">set</span><span class="token punctuation">(</span>mRoundRadius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mRoundRadius <span class="token operator">=</span> mRoundRadius            <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token comment">/**  * 设置ImageView的边框宽度  **/</span>    <span class="token keyword">fun</span> <span class="token function">setBorderSize</span><span class="token punctuation">(</span>mBorderSize<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>borderSize <span class="token operator">=</span> mBorderSize<span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        mBorderPaint<span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> mBorderSize<span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">initRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token comment">/**  * 设置ImageView的图片资源  **/</span><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">setImageResource</span><span class="token punctuation">(</span>resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        mBitmap <span class="token operator">=</span> ImageUtils<span class="token punctuation">.</span><span class="token function">getBitmapFromDrawable</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span>        <span class="token function">setupBitmapShader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token comment">/**  * 设置ImageView的Drawable  **/</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">setImageDrawable</span><span class="token punctuation">(</span>drawable<span class="token operator">:</span> Drawable<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setImageDrawable</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span>        mBitmap <span class="token operator">=</span> ImageUtils<span class="token punctuation">.</span><span class="token function">getBitmapFromDrawable</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span>        <span class="token function">setupBitmapShader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-采用rxjavaretrofit架构封装的关于http请求以及生命周期处理的文件介绍"><a class="markdownIt-Anchor" href="#二-采用rxjavaretrofit架构封装的关于http请求以及生命周期处理的文件介绍"></a> 二、采用RxJava+Retrofit架构封装的关于Http请求以及生命周期处理的文件介绍</h2><h3 id="1-baserxactivity"><a class="markdownIt-Anchor" href="#1-baserxactivity"></a> 1、BaseRxActivity</h3><p>package：cn.onestravel.library.kotlin.rxrequest.activity</p><p>继承自BaseActivity ，针对RxJava处理了相对应的生命周期，同时拥有BaseActivity的所有特性。</p><p>生命周期处理：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseRxActivity <span class="token operator">:</span> <span class="token function">BaseActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LifecycleProvider<span class="token operator">&lt;</span>ActivityEvent<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> lifecycleSubject<span class="token operator">:</span>BehaviorSubject<span class="token operator">&lt;</span>ActivityEvent<span class="token operator">></span> <span class="token operator">=</span> BehaviorSubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token annotation builtin">@CheckResult</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">lifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>ActivityEvent<span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> lifecycleSubject<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CheckResult</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">bindUntilEvent</span><span class="token punctuation">(</span>event<span class="token operator">:</span> ActivityEvent<span class="token punctuation">)</span><span class="token operator">:</span> LifecycleTransformer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> RxLifecycle<span class="token punctuation">.</span><span class="token function">bindUntilEvent</span><span class="token punctuation">(</span>lifecycleSubject<span class="token punctuation">,</span> event<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CheckResult</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">bindToLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LifecycleTransformer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> RxLifecycleAndroid<span class="token punctuation">.</span><span class="token function">bindActivity</span><span class="token punctuation">(</span>lifecycleSubject<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ActivityEvent<span class="token punctuation">.</span>CREATE<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ActivityEvent<span class="token punctuation">.</span>START<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ActivityEvent<span class="token punctuation">.</span>RESUME<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ActivityEvent<span class="token punctuation">.</span>PAUSE<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ActivityEvent<span class="token punctuation">.</span>STOP<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ActivityEvent<span class="token punctuation">.</span>DESTROY<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-baserxlistactivity"><a class="markdownIt-Anchor" href="#2-baserxlistactivity"></a> 2、BaseRxListActivity</h3><p>package：cn.onestravel.library.kotlin.rxrequest.activity</p><p>继承自BaseListActivity ，针对RxJava处理了相对应的生命周期，同时拥有BaseListActivity下拉刷新，上拉加载的所有特性。</p><h3 id="3-baserxfragment"><a class="markdownIt-Anchor" href="#3-baserxfragment"></a> 3、BaseRxFragment</h3><p>package：cn.onestravel.library.kotlin.rxrequest.fragment</p><p>继承自BaseFragment ，针对RxJava处理了相对应的生命周期，同时拥有BaseFragment的所有特性。</p><p>生命周期处理：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseRxFragment <span class="token operator">:</span> <span class="token function">BaseFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LifecycleProvider<span class="token operator">&lt;</span>FragmentEvent<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> lifecycleSubject<span class="token operator">:</span>BehaviorSubject<span class="token operator">&lt;</span>FragmentEvent<span class="token operator">></span> <span class="token operator">=</span> BehaviorSubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">lifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>FragmentEvent<span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> lifecycleSubject<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CheckResult</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">bindUntilEvent</span><span class="token punctuation">(</span>event<span class="token operator">:</span> FragmentEvent<span class="token punctuation">)</span><span class="token operator">:</span> LifecycleTransformer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> RxLifecycle<span class="token punctuation">.</span><span class="token function">bindUntilEvent</span><span class="token punctuation">(</span>lifecycleSubject<span class="token punctuation">,</span> event<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CheckResult</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">bindToLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LifecycleTransformer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> RxLifecycleAndroid<span class="token punctuation">.</span><span class="token function">bindFragment</span><span class="token punctuation">(</span>lifecycleSubject<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>CREATE<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span>inflater<span class="token operator">:</span> LayoutInflater<span class="token punctuation">,</span> container<span class="token operator">:</span> ViewGroup<span class="token operator">?</span><span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> View<span class="token operator">?</span> <span class="token punctuation">&#123;</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>CREATE_VIEW<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreateView</span><span class="token punctuation">(</span>inflater<span class="token punctuation">,</span> container<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>START<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>RESUME<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>PAUSE<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>STOP<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>DESTROY_VIEW<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>DESTROY<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-baserxlistfragment"><a class="markdownIt-Anchor" href="#4-baserxlistfragment"></a> 4、BaseRxListFragment</h3><p>package：cn.onestravel.library.kotlin.rxrequest.fragment</p><p>继承自BaseListFragment ，针对RxJava处理了相对应的生命周期，同时拥有BaseListFragment下拉刷新，上拉加载的所有特性。</p><h3 id="5-baseobservert-responseresult"><a class="markdownIt-Anchor" href="#5-baseobservert-responseresult"></a> 5、BaseObserver&lt;T: ResponseResult&gt;</h3><p>package：cn.onestravel.library.kotlin.rxrequest.common</p><p>RxJava+Retrofit 请求的观察者，返回特定数据结构的数据，并进行相应的处理。</p><p>具体实现如下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * @name cn.onestravel.library.kotlin.rxrequest.common.BaseObserver * @description 请求返回结果，返回json数据必须符合 &#123;"code":"0000","msg":""&#125; * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseObserver<span class="token operator">&lt;</span>T <span class="token operator">:</span> ResponseResult<span class="token operator">></span> <span class="token operator">:</span> Observer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 请求开始 处理基本的loading框的显示等     *     * @param d     */</span>    <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Disposable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>            TAG<span class="token punctuation">,</span>            <span class="token string">"===========单个接口请求开始========="</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 此方法必须实现     *     * @param result 请求成功的结果     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>result<span class="token operator">:</span> T<span class="token punctuation">)</span>    <span class="token comment">/**     * 请求失败     *     * @param code 错误码     * @param msg  错误提示语     */</span>    <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>code<span class="token operator">:</span> String<span class="token punctuation">,</span> msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>            TAG<span class="token punctuation">,</span>            <span class="token string">"接口请求失败===code = "</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"errorMsg ="</span> <span class="token operator">+</span> msg         <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求都完成时之行此方法     */</span>    <span class="token keyword">fun</span> <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Disposable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">onStart</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onNext</span><span class="token punctuation">(</span>result<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BaseResponse<span class="token punctuation">.</span>REQUEST_OK <span class="token operator">==</span> result<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">onSuccess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"请求成功responseBody===="</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">onFailure</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code<span class="token punctuation">,</span> result<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">var</span> errorCode <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">is</span> HttpException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> httpException <span class="token operator">=</span> e <span class="token keyword">as</span> HttpException            errorCode <span class="token operator">=</span> httpException<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">404</span> <span class="token operator">==</span> errorCode <span class="token operator">||</span> <span class="token number">500</span> <span class="token operator">==</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                errorMsg <span class="token operator">=</span> <span class="token string">"请求异常，请稍候重试！"</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//todo 设置固定的错误码及错误提示</span>        <span class="token punctuation">&#125;</span>        <span class="token function">onFailure</span><span class="token punctuation">(</span>errorCode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string">"request"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BaseResponse:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * @name cn.onestravel.library.kotlin.rxrequest.common.BaseResponse * @description 请求返回结果数据基类 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">BaseResponse</span><span class="token punctuation">(</span><span class="token keyword">val</span> code<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"0000"</span><span class="token punctuation">,</span> <span class="token keyword">val</span> msg<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">:</span> Serializable <span class="token punctuation">&#123;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> REQUEST_OK <span class="token operator">=</span> <span class="token string">"0000"</span>  <span class="token comment">//请求成功的code码</span>        <span class="token keyword">val</span> REQUEST_ERROR <span class="token operator">=</span> <span class="token string">"-1"</span> <span class="token comment">//请求失败的code码</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ResponseResult:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * @name cn.onestravel.library.kotlin.rxrequest.common.ResponseResult * @description 请求返回结果数据 符合 &#123;"code":"0000","msg":"","data":&#123;&#125;,"datas":[]&#125; 的基类 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">class</span> ResponseResult <span class="token operator">:</span><span class="token function">BaseResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Serializable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-baseobserver1data-serializable"><a class="markdownIt-Anchor" href="#6-baseobserver1data-serializable"></a> 6、BaseObserver1&lt;DATA: Serializable&gt;</h3><p>package：cn.onestravel.library.kotlin.rxrequest.common</p><p>RxJava+Retrofit 请求的观察者，返回特定数据结构的数据，并进行相应的处理。</p><p>具体实现如下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * @name cn.onestravel.library.kotlin.rxrequest.common.BaseObserver * @description 请求返回结果，返回json数据必须符合  &#123;"code":"0000","msg":"","data":&#123;&#125;,"datas":[]&#125;,data 和 datas 的数据 bean 相同 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseObserver1<span class="token operator">&lt;</span>DATA <span class="token operator">:</span> Serializable<span class="token operator">></span> <span class="token operator">:</span> Observer<span class="token operator">&lt;</span>ResponseResult1<span class="token operator">&lt;</span>DATA<span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 请求开始 处理基本的loading框的显示等     *     * @param d     */</span>    <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Disposable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>            TAG<span class="token punctuation">,</span>            <span class="token string">"===========单个接口请求开始  =========="</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 此方法必须实现     *     * @param result 请求成功的结果     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>result<span class="token operator">:</span> ResponseResult1<span class="token operator">&lt;</span>DATA<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token comment">/**     * 请求失败     *     * @param code 错误码     * @param msg  错误提示语     */</span>    <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>code<span class="token operator">:</span> String<span class="token punctuation">,</span> msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>            TAG<span class="token punctuation">,</span>            <span class="token string">"接口请求失败============code = "</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"errorMsg ="</span> <span class="token operator">+</span> msg    <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求都完成时之行此方法     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Disposable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">onStart</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onNext</span><span class="token punctuation">(</span>result<span class="token operator">:</span> ResponseResult1<span class="token operator">&lt;</span>DATA<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BaseResponse<span class="token punctuation">.</span>REQUEST_OK <span class="token operator">==</span> result<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">onSuccess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"请求成功responseBody===="</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">onFailure</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code<span class="token punctuation">,</span> result<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">var</span> errorCode <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">is</span> HttpException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> httpException <span class="token operator">=</span> e <span class="token keyword">as</span> HttpException            errorCode <span class="token operator">=</span> httpException<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">404</span> <span class="token operator">==</span> errorCode <span class="token operator">||</span> <span class="token number">500</span> <span class="token operator">==</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                errorMsg <span class="token operator">=</span> <span class="token string">"请求异常，请稍候重试！"</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//todo 设置固定的错误码及错误提示</span>        <span class="token punctuation">&#125;</span>        <span class="token function">onFailure</span><span class="token punctuation">(</span>errorCode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string">"request"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ResponseResult1:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * @name cn.onestravel.library.kotlin.rxrequest.common.ResponseResult * @description 请求返回结果数据 符合 &#123;"code":"0000","msg":"","data":&#123;&#125;,"datas":[]&#125; 的基类 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">class</span> ResponseResult1<span class="token operator">&lt;</span>DATA<span class="token operator">:</span>Serializable<span class="token operator">></span><span class="token punctuation">(</span>    <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> DATA<span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token keyword">val</span> datas<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>DATA<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">BaseResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Serializable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-baseobserver2data-serializableitemserializable"><a class="markdownIt-Anchor" href="#7-baseobserver2data-serializableitemserializable"></a> 7、BaseObserver2&lt;DATA : Serializable,ITEM:Serializable&gt;</h3><p>package：cn.onestravel.library.kotlin.rxrequest.common</p><p>RxJava+Retrofit 请求的观察者，返回特定数据结构的数据，并进行相应的处理。</p><p>具体实现如下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>library<span class="token punctuation">.</span>kotlin<span class="token punctuation">.</span>rxrequest<span class="token punctuation">.</span>common<span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token keyword">import</span> io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>Observer<span class="token keyword">import</span> io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>disposables<span class="token punctuation">.</span>Disposable<span class="token keyword">import</span> retrofit2<span class="token punctuation">.</span>HttpException<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token comment">/** * @name cn.onestravel.library.kotlin.rxrequest.common.BaseObserver2 * @description 请求返回结果，返回json数据必须符合 &#123;"code":"0000","msg":"","data":&#123;&#125;,"datas":[]&#125;,data 和 datas 的数据 bean 可以不相同 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseObserver2<span class="token operator">&lt;</span>DATA <span class="token operator">:</span> Serializable<span class="token punctuation">,</span>ITEM<span class="token operator">:</span>Serializable<span class="token operator">></span> <span class="token operator">:</span> Observer<span class="token operator">&lt;</span>ResponseResult2<span class="token operator">&lt;</span>DATA<span class="token punctuation">,</span>ITEM<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">,</span> ObserverResult<span class="token operator">&lt;</span>ResponseResult2<span class="token operator">&lt;</span>DATA<span class="token punctuation">,</span>ITEM<span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 请求开始 处理基本的loading框的显示等     *     * @param d     */</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Disposable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>             BaseObserver2<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span>            <span class="token string">"===========单个接口请求开始  =========="</span>        <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 此方法必须实现     *     * @param result 请求成功的结果     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>result<span class="token operator">:</span> ResponseResult2<span class="token operator">&lt;</span>DATA<span class="token punctuation">,</span> ITEM<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token comment">/**     * 请求失败     *     * @param code 错误码     * @param msg  错误提示语     */</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>code<span class="token operator">:</span> String<span class="token punctuation">,</span> msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>             BaseObserver2<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span>            <span class="token string">"接口请求失败============code = "</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"errorMsg ="</span> <span class="token operator">+</span> msg    <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 请求都完成时之行此方法     */</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Disposable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">onStart</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onNext</span><span class="token punctuation">(</span>baseObject<span class="token operator">:</span> ResponseResult2<span class="token operator">&lt;</span>DATA<span class="token punctuation">,</span>ITEM<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//        Log.i("responseBody====",)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BaseResponse<span class="token punctuation">.</span>REQUEST_OK <span class="token operator">==</span> baseObject<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">onSuccess</span><span class="token punctuation">(</span>baseObject<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">onFailure</span><span class="token punctuation">(</span>baseObject<span class="token punctuation">.</span>code<span class="token punctuation">,</span> baseObject<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *     */</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">var</span> errorCode <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">is</span> HttpException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">val</span> httpException <span class="token operator">=</span> e <span class="token keyword">as</span> HttpException            errorCode <span class="token operator">=</span> httpException<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">404</span> <span class="token operator">==</span> errorCode <span class="token operator">||</span> <span class="token number">500</span> <span class="token operator">==</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                errorMsg <span class="token operator">=</span> <span class="token string">"请求异常，请稍候重试！"</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//todo 设置固定的错误码及错误提示</span>        <span class="token punctuation">&#125;</span>        <span class="token function">onFailure</span><span class="token punctuation">(</span>errorCode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string">"RequestBaseObserver2"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ResponseResult2:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * @name cn.onestravel.library.kotlin.rxrequest.common.ResponseResult * @description 请求返回结果数据 符合 &#123;"code":"0000","msg":"","data":&#123;&#125;,"datas":[]&#125; 的基类 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">class</span> ResponseResult2<span class="token operator">&lt;</span>DATA<span class="token operator">:</span>Serializable<span class="token punctuation">,</span>ITEM<span class="token operator">:</span>Serializable<span class="token operator">></span><span class="token punctuation">(</span>    <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> DATA<span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token keyword">val</span> datas<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>ITEM<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">BaseResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Serializable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-baseloader"><a class="markdownIt-Anchor" href="#8-baseloader"></a> 8、BaseLoader</h3><p>package：cn.onestravel.library.kotlin.rxrequest.loader</p><p>公共的Loader，处理observe针对请求进行线程切换</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseLoader<span class="token operator">&lt;</span>S <span class="token operator">:</span> BaseService<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">val</span> mServiceManager<span class="token operator">:</span> RetrofitServiceManager <span class="token keyword">by</span> lazy <span class="token punctuation">&#123;</span> RetrofitServiceManager<span class="token punctuation">.</span>INSTANCE <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">val</span> mService<span class="token operator">:</span> S <span class="token keyword">by</span> lazy <span class="token punctuation">&#123;</span> <span class="token function">createService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 创建 Service 实例     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">createService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> S    <span class="token comment">/**     * 设置Observable的工作线程     * @param observable     * @param &lt;T>     * @return    &lt;/T> */</span>    <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">observe</span><span class="token punctuation">(</span>observable<span class="token operator">:</span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">unsubscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-baseservice"><a class="markdownIt-Anchor" href="#9-baseservice"></a> 9、BaseService</h3><p>package：cn.onestravel.library.kotlin.rxrequest.service</p><p>所有 Retrofit 请求的 Service 的接口基类，目前只用于规范子类，可声明对应公用方法</p><h3 id="10-retrofitservicemanager"><a class="markdownIt-Anchor" href="#10-retrofitservicemanager"></a> 10、RetrofitServiceManager</h3><p>package：cn.onestravel.library.kotlin.rxrequest.service</p><p>生成接口service实例的管理类，初始化Retrofit 实例，设置请求相关的一些拦截器、超时时间等配置，定义Http请求的公共URL</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * @name cn.onestravel.library.kotlin.rxrequest.service.RetrofitServiceManager * @description 生成接口实例的管理类 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">class</span> RetrofitServiceManager <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> mRetrofit<span class="token operator">:</span> Retrofit    <span class="token keyword">init</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> interceptorBuild <span class="token operator">=</span> HttpCommonInterceptor<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token keyword">val</span> logging <span class="token operator">=</span> <span class="token function">HttpLoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>level <span class="token operator">=</span> HttpLoggingInterceptor<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>BODY        <span class="token keyword">val</span> okHttpClientBuild <span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        okHttpClientBuild<span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span>CONNECTION_TIMEOUT<span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span>READ_TIMEOUT<span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span>WRITE_TIMEOUT<span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptorBuild<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//拦截器添加公共请求参数</span>            <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">RetryInterceptor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//重试三次的拦截</span>                        <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>logging<span class="token punctuation">)</span><span class="token comment">//请求日志打印</span>        <span class="token comment">//初始化Retrofit</span>        mRetrofit <span class="token operator">=</span> Retrofit<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span>BASE_URL<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addCallAdapterFactory</span><span class="token punctuation">(</span>RxJava2CallAdapterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okHttpClientBuild<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 生成对应接口的实例     *     * @param service     * @param &lt;T>     * @return    &lt;/T> */</span>    <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">:</span>BaseService<span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span>service<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> mRetrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> INSTANCE <span class="token keyword">by</span> lazy <span class="token punctuation">&#123;</span> <span class="token function">RetrofitServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> CONNECTION_TIMEOUT <span class="token operator">=</span> <span class="token number">5</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> READ_TIMEOUT <span class="token operator">=</span> <span class="token number">20</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> WRITE_TIMEOUT <span class="token operator">=</span> <span class="token number">10</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> BASE_URL <span class="token operator">=</span> <span class="token string">"http://192.168.1.12:9090/"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-采用mvp架构封装的文件介绍"><a class="markdownIt-Anchor" href="#三-采用mvp架构封装的文件介绍"></a> 三、采用Mvp架构封装的文件介绍</h2><h3 id="1-basemvpactivityv-basemvpview-p-basemvppresenterv"><a class="markdownIt-Anchor" href="#1-basemvpactivityv-basemvpview-p-basemvppresenterv"></a> 1、BaseMvpActivity&lt;V : BaseMvpView, P : BaseMvpPresenter<V>&gt;</h3><p>package：cn.onestravel.library.kotlin.mvp.activity</p><p>所有Mvp架构的 Activity 的基类,自BaseActivity ，拥有BaseActivity的所有特性,处理了P层的相关生命周期。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * @name  BaseMvpActivity * @description 所有Mvp架构的 Activity 的基类 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseMvpActivity<span class="token operator">&lt;</span>V <span class="token operator">:</span> BaseMvpView<span class="token punctuation">,</span> P <span class="token operator">:</span> BaseMvpPresenter<span class="token operator">&lt;</span>V<span class="token operator">></span><span class="token operator">></span> <span class="token operator">:</span> <span class="token function">BaseActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BaseMvpView <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> presenter <span class="token keyword">by</span> lazy <span class="token punctuation">&#123;</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> mLoadingDialog<span class="token operator">:</span> LoadingDialog<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> P    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span>  <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"Presenter is null! Do you return null in createPresenter()?"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        presenter<span class="token punctuation">.</span><span class="token function">onMvpAttachView</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">as</span> V<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        presenter<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>            it<span class="token punctuation">.</span><span class="token function">onMvpStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        presenter<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>            it<span class="token punctuation">.</span><span class="token function">onMvpResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        presenter<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>            it<span class="token punctuation">.</span><span class="token function">onMvpPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        presenter<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>            it<span class="token punctuation">.</span><span class="token function">onMvpStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span>        presenter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>            it<span class="token punctuation">.</span><span class="token function">onMvpSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        presenter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>            it<span class="token punctuation">.</span><span class="token function">onMvpDetachView</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>            it<span class="token punctuation">.</span><span class="token function">onMvpDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        mLoadingDialog<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>            it<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            mLoadingDialog <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">showLoading</span><span class="token punctuation">(</span>content<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mLoadingDialog <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mLoadingDialog <span class="token operator">=</span> LoadingDialog<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            mLoadingDialog<span class="token operator">!!</span><span class="token punctuation">.</span>title <span class="token operator">=</span> content<span class="token operator">?:</span><span class="token string">"正在加载..."</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mLoadingDialog<span class="token operator">!!</span><span class="token punctuation">.</span>isShowing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mLoadingDialog<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mLoadingDialog<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>            mLoadingDialog<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponseError</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        msg<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">&#123;</span>            <span class="token function">showToast</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-basemvplistactivityv-basemvpview-p-basemvppresenterv"><a class="markdownIt-Anchor" href="#2-basemvplistactivityv-basemvpview-p-basemvppresenterv"></a> 2、BaseMvpListActivity&lt;V : BaseMvpView, P : BaseMvpPresenter<V>&gt;</h3><p>package：cn.onestravel.library.kotlin.mvp.activity</p><p>所有Mvp架构的 ListActivity 的基类,自BaseListActivity ，拥有BaseListActivity的所有特性，并且处理了P层的相关生命周期。</p><h3 id="3-baserxmvpactivityv-basemvpview-p-basemvppresenterv"><a class="markdownIt-Anchor" href="#3-baserxmvpactivityv-basemvpview-p-basemvppresenterv"></a> 3、BaseRxMvpActivity&lt;V : BaseMvpView, P : BaseMvpPresenter<V>&gt;</h3><p>package：cn.onestravel.library.kotlin.mvp.activity</p><p>所有Mvp架构的 采用RxJava+Retrofit 请求的Activity 的基类，继承自BaseRxActivity ，拥有BaseRxActivity的所有特性，并且处理了P层的相关生命周期。</p><h3 id="4-baserxmvplistactivityv-basemvpview-p-basemvppresenterv"><a class="markdownIt-Anchor" href="#4-baserxmvplistactivityv-basemvpview-p-basemvppresenterv"></a> 4、BaseRxMvpListActivity&lt;V : BaseMvpView, P : BaseMvpPresenter<V>&gt;</h3><p>package：cn.onestravel.library.kotlin.mvp.activity</p><p>所有Mvp架构的 采用RxJava+Retrofit 请求的带有列表的Activity，继承自BaseRxListActivity ，拥有BaseRxListActivity的所有特性，并且处理了P层的相关生命周期。</p><h3 id="5-fragment-有与前4个activity功能相同fragment就不多做介绍了"><a class="markdownIt-Anchor" href="#5-fragment-有与前4个activity功能相同fragment就不多做介绍了"></a> 5、Fragment 有与前4个Activity功能相同Fragment，就不多做介绍了。</h3><p>package：cn.onestravel.library.kotlin.mvp.fragment</p><h3 id="6-basemvpmodel"><a class="markdownIt-Anchor" href="#6-basemvpmodel"></a> 6、BaseMvpModel</h3><p>package：cn.onestravel.library.kotlin.mvp.model</p><p>Mvp模式中所有Model层的基类，是一个接口，可以声明共同的方法，交由子类去实现。</p><h3 id="7-basemvppresenter"><a class="markdownIt-Anchor" href="#7-basemvppresenter"></a> 7、BaseMvpPresenter</h3><p>package：cn.onestravel.library.kotlin.mvp.presenter</p><p>Mvp模式中所有presenter层的基类，是一个接口，声明了presenter层相关的生命周期方法，由子类去实现。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * @name  BaseMvpPresenterImpl * @description 所有界面presenter的接口类 * @createTime 2018/12/12 16:27 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">interface</span> BaseMvpPresenter<span class="token operator">&lt;</span><span class="token keyword">in</span> V <span class="token operator">:</span> BaseMvpView<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">onMvpAttachView</span><span class="token punctuation">(</span>view<span class="token operator">:</span> V<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpSaveInstanceState</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpDetachView</span><span class="token punctuation">(</span>retainInstance<span class="token operator">:</span> Boolean<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-basemvppresenterimplv-basemvpview"><a class="markdownIt-Anchor" href="#8-basemvppresenterimplv-basemvpview"></a> 8、BaseMvpPresenterImpl&lt;V: BaseMvpView&gt;</h3><p>package：cn.onestravel.library.kotlin.mvp.presenter.impl</p><p>Mvp模式中所有presenter层的接口的实现类，对presenter层相关的生命周期方法进行实现；并且实现与View层的绑定，持有View层的引用。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * @name  BaseMvpPresenterImpl * @description 所有界面presenter的接口类 * @createTime 2018/12/12 16:27 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">interface</span> BaseMvpPresenter<span class="token operator">&lt;</span><span class="token keyword">in</span> V <span class="token operator">:</span> BaseMvpView<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">onMvpAttachView</span><span class="token punctuation">(</span>view<span class="token operator">:</span> V<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpSaveInstanceState</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpDetachView</span><span class="token punctuation">(</span>retainInstance<span class="token operator">:</span> Boolean<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-basemvpview"><a class="markdownIt-Anchor" href="#9-basemvpview"></a> 9、BaseMvpView</h3><p>package：cn.onestravel.library.kotlin.mvp.view</p><p>Mvp模式中所有View层的接口类，声明了一些View层常用的加载进度显示与隐藏，请求失败提示等公用的方法。</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">/** * @name  BaseMvpPresenterImpl * @description 所有界面presenter的接口类 * @createTime 2018/12/12 16:27 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">interface</span> BaseMvpPresenter<span class="token operator">&lt;</span><span class="token keyword">in</span> V <span class="token operator">:</span> BaseMvpView<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">fun</span> <span class="token function">onMvpAttachView</span><span class="token punctuation">(</span>view<span class="token operator">:</span> V<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpSaveInstanceState</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpDetachView</span><span class="token punctuation">(</span>retainInstance<span class="token operator">:</span> Boolean<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="声明"><a class="markdownIt-Anchor" href="#声明"></a> 声明：</h2><p>针对Kotlin项目的一些常用封装，到这里就介绍完了，后面还会增加MVVM模式的一些封装，敬请期待！！</p><p>在封装或者介绍过程中，如有什么不正确或者不明白的地方，期待与您进行交流，共同提高！</p><p>联系邮件：server@onestravel.cn</p><p>鸣谢！！！</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(七)Kotlin 小案例与展望未来</title>
      <link href="20181212/kotlin/qi-kotlin-xiao-an-li-yu-zhan-wang-wei-lai/"/>
      <url>20181212/kotlin/qi-kotlin-xiao-an-li-yu-zhan-wang-wei-lai/</url>
      
        <content type="html"><![CDATA[<h3 id="一-kotlin-的应用场景"><a class="markdownIt-Anchor" href="#一-kotlin-的应用场景"></a> 一、Kotlin 的应用场景</h3><h4 id="1-kotlin-script"><a class="markdownIt-Anchor" href="#1-kotlin-script"></a> 1、Kotlin Script</h4><ul><li>Gradle 脚本，Gradle3.0 开始部分支出，尚在完善中</li></ul><h4 id="2-java-虚拟机应用"><a class="markdownIt-Anchor" href="#2-java-虚拟机应用"></a> 2、Java 虚拟机应用</h4><ul><li>Web 应用，完美支持</li><li>JavaFx,jdk8开始完美支持</li></ul><h4 id="3-前端开发"><a class="markdownIt-Anchor" href="#3-前端开发"></a> 3、前端开发</h4><ul><li>1.1 开始正式支持 Kotlin-JavaScript</li></ul><h4 id="4-android-应用开发"><a class="markdownIt-Anchor" href="#4-android-应用开发"></a> 4、Android 应用开发</h4><ul><li>Kotlin 目前的主要战场</li></ul><h4 id="5-native-程序"><a class="markdownIt-Anchor" href="#5-native-程序"></a> 5、Native 程序</h4><ul><li>直接编译 Kotlin 代码为机器码，不依赖Jvm</li><li>支持与 C 代码交互</li><li>技术预览版功能有限，前途无量</li></ul><h3 id="二-kotlin-script-实例"><a class="markdownIt-Anchor" href="#二-kotlin-script-实例"></a> 二、Kotlin Script 实例</h3><h4 id="1-安装-kotlin-编译库"><a class="markdownIt-Anchor" href="#1-安装-kotlin-编译库"></a> 1、安装 Kotlin 编译库</h4><h5 id="windows下kotlin命令行开发环境安装"><a class="markdownIt-Anchor" href="#windows下kotlin命令行开发环境安装"></a> Windows下Kotlin命令行开发环境安装</h5><ul><li>安装环境准备</li></ul><p>Kotlin编译器：从GitHub下载，截止2017-9-5 最新版本是1.1.4，<br /><a href="https://github.com/JetBrains/kotlin">GitHub主页</a></p><p>Java JDK 8，可以从Oracle官网下载，<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html/">下载JDK8</a></p><ul><li>安装</li></ul><p>在Windows操作系统完成JDK 8的安装以后，安装Kotlin编译器：</p><p>解压Kotlin安装包：kotlin-compiler-1.1.4.zip，本文解压到D盘kotlin目录下</p><p>将D:\kotlin\kotlinc\bin目录路径，添加到Windows系统环境变量即可</p><p>Windows 10环境变量设置：【控制面板】中直接搜索【环境变量】，然后【编辑系统环境变量】即可；</p><ul><li>验证安装是否成功</li></ul><p>打开windows的命令行窗口<br />输入命令：kotlinc -version，如果提示Kotlin 1.1.4版本号，安装成功</p><h5 id="其它可选的安装平台"><a class="markdownIt-Anchor" href="#其它可选的安装平台"></a> 其它可选的安装平台</h5><p>在Windows和Linux、OS X上通用的安装方法：</p><ul><li>Kotlin编译器，从GitHub下载，截止2017-9-5 最新版本是1.1.4，<a href="https://github.com/JetBrains/kotlin">GitHub  - Kotlin主页</a></li><li></li></ul><p>下载Java JDK 环境安装</p><p>Linux，OS X，FreeBSB，Solaris等*Unix系统支持以下方法：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; sdkman 包管理工具$ curl -s https:&#x2F;&#x2F;get.sdkman.io | bash&#x2F;&#x2F; 一定要新开终端窗口执行以下命令$ sdk install kotlin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Max OS X 还支持以下方式：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; homebrew工具安装$ brew update$ brew install kotlin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-编译执行kotlin-scriptkts-文件"><a class="markdownIt-Anchor" href="#2-编译执行kotlin-scriptkts-文件"></a> 2、编译执行Kotlin Script(.kts) 文件</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 编译.kts 脚本文件kotlinc -script *.kts&#x2F;&#x2F; 编译源码为可运行的jar包kotlinc D:\kotlin_code\hello.kt -include-runtime -d hello.jar&#x2F;&#x2F; 使用java执行hello.jarjava -jar D:\kotlin_code\hello.jar&#x2F;&#x2F; 使用java执行类名运行java -cp D:\kotlin_code\hello.jar  HelloKt&#x2F;&#x2F; 使用kotlin执行，需要指明main类，执行类名kotlin -cp D:\kotlin_code HelloKt&#x2F;&#x2F; 或者直接运行jar包kotlin D:\kotlin_code\hello.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-kotlin-android-实例"><a class="markdownIt-Anchor" href="#三-kotlin-android-实例"></a> 三、Kotlin Android 实例</h3><h4 id="1-kotlin-android-插件"><a class="markdownIt-Anchor" href="#1-kotlin-android-插件"></a> 1、Kotlin Android 插件</h4><h5 id="-kotlinandroidextensions"><a class="markdownIt-Anchor" href="#-kotlinandroidextensions"></a> - kotlin.android.extensions</h5><pre class="line-numbers language-none"><code class="language-none">apply plugin &quot;kotlin.android.extensions&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用该插件可以在代码中省去 findViewById ，可直接使用对应 xml 布局文件中对应 View 的 id 属性定义的名称来进行相应的操作<br />如：</p><p>main_layout.xml</p><pre class="line-numbers language-none"><code class="language-none">&lt;TextViewandroid:layout_width&#x3D;&quot;wrap_content&quot;android:layout_height&#x3D;&quot;wrap_content&quot;android:id&#x3D;&quot;@+id&#x2F;tvName&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>MainActivity.kt</p><pre class="line-numbers language-none"><code class="language-none">tvName.text&#x3D;&quot;Hello World&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="-anko-库"><a class="markdownIt-Anchor" href="#-anko-库"></a> - anko 库</h5><ul><li>添加 anko 库</li></ul><pre class="line-numbers language-none"><code class="language-none">compile &quot;org.jetbrains.anko:anko-sdk15:0.9.1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>改变 View 的setOnClickListener</li></ul><pre class="line-numbers language-none"><code class="language-none">tvName.onClick&#123;view -&gt;    (view!! as TextView).text&#x3D;&quot;$&#123;System.currentTimeMilles()&#125;&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>改变 startActivity</li></ul><pre class="line-numbers language-none"><code class="language-none">val intent &#x3D; Intent(this@MainAvtivity,Main2Activity::class.java)intent.putExtra(&quot;key&quot;,&quot;From MainActivity&quot;)this@MainAvtivity.startActivity(intent)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更改后为</p><pre class="line-numbers language-none"><code class="language-none">startActivity&lt;Main2Activity&gt;(&quot;key&quot; to &quot;From MainActivity&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>代码中定义View,可无需布局文件</li></ul><p>Main2Activity.kt</p><pre class="line-numbers language-none"><code class="language-none">override fun onCreate(savedInstanceState: Bundle?)&#123;    super.onCreate(savedInstanceState)    relativeLayout&#123;        textView(intent.extras[&quot;key&quot;]?.toString()?: &quot;Hello&quot;)&#123;        &#125;.lparams(matchParent,matchParent)&#123;            gravity &#x3D; Gravity.CENTER        &#125;    &#125;.lparams(matchParent,matchParent)&#123;        gravity &#x3D; Gravity.CENTER    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四-kotlin-javascript-实例"><a class="markdownIt-Anchor" href="#四-kotlin-javascript-实例"></a> 四、Kotlin javascript 实例</h3><p>创建一个kotlin (javascript) 的项目</p><p>新建 Main.kt 文件</p><pre class="line-numbers language-none"><code class="language-none">fun main(args:Array&lt;String&gt;)&#123;    document.write(&quot;Hello World!&quot;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>build 该项目，会在out 下生成对应的js 文件<br />；页面引入对应的js文件，就可以在浏览器访问该页面了</p><p>index.html</p><pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;    &lt;head&gt;        &lt;title&gt;Hello Kotlin javasicrpt&lt;&#x2F;title&gt;    &lt;script src&#x3D;&quot;$&#123;kotlin.js文件所在路径&#125;&#x2F;kotlin.js&quot;&#x2F;&gt;    &lt;script src&#x3D;&quot;$&#123;kotlin-javascript.js文件所在路径&#125;&#x2F;kotlin-javascript.js&quot;&#x2F;&gt;    &lt;&#x2F;head&gt;    &lt;body&gt;    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五-kotlin-springboot-实例"><a class="markdownIt-Anchor" href="#五-kotlin-springboot-实例"></a> 五、Kotlin SpringBoot 实例</h3><h4 id="1-配置插件"><a class="markdownIt-Anchor" href="#1-配置插件"></a> 1、配置插件</h4><pre class="line-numbers language-none"><code class="language-none">buildscript&#123;    ext.springBootVersion &#x3D; &quot;1.5.9.RELEASE&quot;    dependencies&#123;        classpath &quot;org.jetbrains.kotlin:kotlin-noarg:@kotlin_version&quot;        classpath &quot;org.jetbrains.kotlin:kotlin-allopen:@kotlin_version&quot;        classpath &quot;org.springframework.boot:Spring-boot-gradle-plugin:@springBootVersion&quot;    &#125;&#125;apply plugin: &#39;kotlin-spring&#39;apply plugin: &#39;kotlin-jpa&#39;apply plugin: &#39;org.springframework.boot&#39;dependencies&#123;    compile &quot;org.springframework.boot:spring-boot-starter-web&quot;    compile &quot;org.springframework.boot:spring-boot-starter-data-jpa&quot;    compile &quot;com.h2database:h2&quot;    compile &quot;com.fasterxml.jackson.module:jackson-module-kotlin:2.8.4&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五-kotlin-native-实例"><a class="markdownIt-Anchor" href="#五-kotlin-native-实例"></a> 五、Kotlin Native 实例</h3>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(六)Kotlin 与 Java 混合开发</title>
      <link href="20181211/kotlin/liu-kotlin-yu-java-hun-he-kai-fa/"/>
      <url>20181211/kotlin/liu-kotlin-yu-java-hun-he-kai-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="一-基本互操作"><a class="markdownIt-Anchor" href="#一-基本互操作"></a> 一、基本互操作</h3><h4 id="1-属性读写"><a class="markdownIt-Anchor" href="#1-属性读写"></a> 1、属性读写</h4><ul><li>Kotlin 自动识别 Java Getter/Setter</li><li>Java 操作 Kotlin 属性通过 Getter/Setter</li></ul><h4 id="2-空安全类型"><a class="markdownIt-Anchor" href="#2-空安全类型"></a> 2、空安全类型</h4><ul><li>Kotlin 空安全类型的原理</li><li>平台类型 Platform Type,自己明确传入的参数和返回值是否可能为空</li><li>可使用注解 @Nullable 和 @NotNull 来确保不能为空</li></ul><h4 id="3-几类函数的调用"><a class="markdownIt-Anchor" href="#3-几类函数的调用"></a> 3、几类函数的调用</h4><ul><li>包级函数：静态方法</li><li>扩展方法：带Receiver 的静态方法</li><li>运算符重载：带 Receiver 的对应名称的静态方法</li></ul><h4 id="4-几个常用注解的使用"><a class="markdownIt-Anchor" href="#4-几个常用注解的使用"></a> 4、几个常用注解的使用</h4><ul><li>@JvmField : 将属性编译为 Java 变量</li><li>@JvmStatic : 将对象的方法编译成 Java 静态方法</li><li>@JvmOverloads : 默认参数生成重载方法</li><li>@file:JvmName : 知道 Kotlin 文件编译后的类名，默认为 Kotlin 文件名+Kt</li></ul><h4 id="5-noarg-与-allopen"><a class="markdownIt-Anchor" href="#5-noarg-与-allopen"></a> 5、NoArg 与 AllOpen</h4><ul><li>NoArg 为被标注的类生成无参构造方法</li><li>NoArg 支持 Jpa 注解，如：@Entity</li><li>AllOpen 为被标注的类去掉 final ,允许被继承</li><li>AllOpen 支持 Spring 注解，如: @Component</li><li>支持自定义注解类型，如：@PoKo</li></ul><h4 id="6-泛型"><a class="markdownIt-Anchor" href="#6-泛型"></a> 6、泛型</h4><ul><li>通配符 Kotlin 的 * 对象于 Java 的 ?</li><li>协变和逆变 out/in</li></ul><pre class="line-numbers language-none"><code class="language-none">ArrayList&lt;out String&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>没有 Raw 类型</li></ul><pre class="line-numbers language-none"><code class="language-none">Java 的List  -&gt;   Kotlin 的List&lt;*&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二-sam-转换"><a class="markdownIt-Anchor" href="#二-sam-转换"></a> 二、SAM 转换</h3><ul><li>Single Abstract Method</li><li>SAM 转换的条件<br />Java的接口，单一接口方法</li><li>注意转换后的实例变化</li></ul><h3 id="三-正则表达式"><a class="markdownIt-Anchor" href="#三-正则表达式"></a> 三、正则表达式</h3><ul><li>用 Raw 字符串定义正则表达式</li><li>Java 的 Pattern 在 Kotlin 中同样适用</li><li>可通过Kotlin 的 Regex 自定义Kotlin 风格的正则表达式</li></ul><h3 id="四-集合框架"><a class="markdownIt-Anchor" href="#四-集合框架"></a> 四、集合框架</h3><ul><li>Kotlin 到 Java 的类型映射</li><li>不可变与可变集合接口，Kotlin 中所有的List,Map,Set 都是不可变的接口</li><li>部分接口优化，比如：list.removeAt(0);</li></ul><h3 id="五-io-操作"><a class="markdownIt-Anchor" href="#五-io-操作"></a> 五、IO 操作</h3><ul><li>File、Stream、Reader、Writer的扩展方法</li><li>使用use 扩展自动关闭资源</li><li>小文件一次性读取 readLines()</li></ul><h3 id="六-装箱与拆箱"><a class="markdownIt-Anchor" href="#六-装箱与拆箱"></a> 六、装箱与拆箱</h3><ul><li>Java 的基本数据类型，都会映射到 Kotlin 中的基本类型</li><li>由于Kotlin 中不区分Java 中的装箱类型与拆箱类型，需要注意规避基本类型相关的问题</li></ul><h3 id="七-注解处理器"><a class="markdownIt-Anchor" href="#七-注解处理器"></a> 七、注解处理器</h3><ul><li>apply plugin: “kotlin-kapt”</li><li>注意添加生成的代码路径到 SourceSets{}</li><li>注意 Intellij 暂时不支持注解处理器的编译</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(五)协程 Coroutine</title>
      <link href="20181210/kotlin/wu-xie-cheng-coroutine/"/>
      <url>20181210/kotlin/wu-xie-cheng-coroutine/</url>
      
        <content type="html"><![CDATA[<h3 id="一-协程的概念"><a class="markdownIt-Anchor" href="#一-协程的概念"></a> 一、协程的概念</h3><ul><li>协作程序，解决异步问题</li><li>应用层完成调度</li><li>常见的支持协程的语言如： lua，C#</li></ul><h3 id="二-协程要解决什么问题"><a class="markdownIt-Anchor" href="#二-协程要解决什么问题"></a> 二、协程要解决什么问题</h3><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">现在要开始协程啦&#123;    &#x2F;&#x2F;现在在协程里面了    &#x2F;&#x2F;花括号内的代码可以是一段运行在UI线程的代码    val view &#x3D; ...  &#x2F;&#x2F;初始化视图    val image &#x3D;    &#x2F;&#x2F;异步加载图片,运行在其他子线程，执行到这一步就挂起，等到子线程返回图片，继续执行，不会阻塞线程    view.setImage(image)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>异步代码想同步代码一样直观</li><li>简化异步代码异常处理</li><li>轻量级的并发方案</li></ul><h3 id="三-kotlin如何支持协程"><a class="markdownIt-Anchor" href="#三-kotlin如何支持协程"></a> 三、kotlin如何支持协程</h3><ul><li>编译器对 suspend 函数的编译支持</li><li>标准库的基本API支持</li><li>kotlinx.coroutine 应用级的支持</li></ul><h3 id="四-协程的基本api"><a class="markdownIt-Anchor" href="#四-协程的基本api"></a> 四、协程的基本API</h3><ul><li>createCoroutine：创建协程</li><li>startCoroutine：启动协程</li><li>suspendCoroutine：挂起协程</li><li>Continuation 接口：运行控制类，负责结果和异常的返回</li><li>CoroutineContext 接口：运行上下文，资源持有，运行调度</li><li>ContinuationInterceptor 接口：协程控制拦截器，可用来处理协程调度</li></ul><h3 id="五-协程的执行流程"><a class="markdownIt-Anchor" href="#五-协程的执行流程"></a> 五、协程的执行流程</h3><ul><li>协程被编译成状态机</li><li>suspend 函数即状态转移<br /><img src="/images/20181210/process.png" alt="执行流程图" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20181210/process.png" class="lozad post-image"></li></ul><h3 id="六-协程的运行结果"><a class="markdownIt-Anchor" href="#六-协程的运行结果"></a> 六、协程的运行结果</h3><ul><li>正常的结果通过 resume 返回</li><li>异常通过 resumeWithException 抛出<br /><img src="/images/20181210/result.png" alt="运行结果图" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20181210/result.png" class="lozad post-image"></li></ul><h3 id="七-kotlinxcoroutine-框架介绍"><a class="markdownIt-Anchor" href="#七-kotlinxcoroutine-框架介绍"></a> 七、kotlinx.coroutine 框架介绍</h3><ul><li>Kotlin 官方协程应用框架</li><li>提供大量对协程API的封装</li></ul><table><thead><tr><th>主要模块</th><th>说明</th></tr></thead><tbody><tr><td>kotlin-coroutines-core</td><td>核心库</td></tr><tr><td>kotlin-coroutines-jdk8</td><td>Java8 支持库</td></tr><tr><td>kotlin-coroutines-nio</td><td>异步IO库</td></tr><tr><td>kotlin-coroutines-reactive</td><td>Reactive Streams 支持</td></tr><tr><td>kotlin-coroutines-reactor</td><td>Reactor 支持</td></tr><tr><td>kotlin-coroutines-rx1</td><td>RxJava 1.x 支持</td></tr><tr><td>kotlin-coroutines-rx2</td><td>RxJava 2.x 支持</td></tr><tr><td>kotlin-coroutines-android</td><td>Android UI 支持</td></tr><tr><td>kotlin-coroutines-javafx</td><td>JavaFx UI 支持</td></tr><tr><td>kotlin-coroutines-swing</td><td>Swing UI 支持</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(四)Kotlin 领域特定语言 DSL</title>
      <link href="20181209/kotlin/si-kotlin-ling-yu-te-ding-yu-yan-dsl/"/>
      <url>20181209/kotlin/si-kotlin-ling-yu-te-ding-yu-yan-dsl/</url>
      
        <content type="html"><![CDATA[<h3 id="一-领域特定语言-dsl的概念"><a class="markdownIt-Anchor" href="#一-领域特定语言-dsl的概念"></a> 一、领域特定语言 DSL的概念</h3><ul><li>只在特定领域使用的语言;例如：HTML、Gradle、SQL</li></ul><h3 id="二-领域特定语言-dsl的特点"><a class="markdownIt-Anchor" href="#二-领域特定语言-dsl的特点"></a> 二、领域特定语言 DSL的特点</h3><ul><li>它也是计算机编程语言</li><li>具有语言表达能力</li><li>表达能力比较有限</li><li>关注某个特定领域</li></ul><h3 id="三-html-dsl"><a class="markdownIt-Anchor" href="#三-html-dsl"></a> 三、Html DSL</h3><h3 id="四-gradle-dsl"><a class="markdownIt-Anchor" href="#四-gradle-dsl"></a> 四、Gradle DSL</h3><h4 id="以下内容引用自-kotlin-语言中文站"><a class="markdownIt-Anchor" href="#以下内容引用自-kotlin-语言中文站"></a> 以下内容引用自 <a href="http://www.kotlincn.net/docs/reference/using-gradle.html#%E4%BD%BF%E7%94%A8-gradle">Kotlin 语言中文站</a></h4><h4 id="使用-gradle"><a class="markdownIt-Anchor" href="#使用-gradle"></a> 使用 Gradle<a href="#%E4%BD%BF%E7%94%A8-gradle"></a></h4><p>为了用 Gradle 构建 Kotlin，你应该<a href="#%E6%8F%92%E4%BB%B6%E5%92%8C%E7%89%88%E6%9C%AC">设置好 <em>kotlin-gradle</em> 插件</a>，<a href="#%E9%92%88%E5%AF%B9-jvm">将其应用</a>到你的项目中，并且<a href="#%E9%85%8D%E7%BD%AE%E4%BE%9D%E8%B5%96">添加 <em>kotlin-stdlib</em> 依赖</a>。这些操作也可以在 IntelliJ IDEA 中通过调用 Project action 中的 Tools | Kotlin | Configure Kotlin 自动执行。</p><h5 id="插件和版本"><a class="markdownIt-Anchor" href="#插件和版本"></a> 插件和版本<a href="#%E6%8F%92%E4%BB%B6%E5%92%8C%E7%89%88%E6%9C%AC"></a></h5><p>使用 <code>kotlin-gradle-plugin</code> 编译 Kotlin 源代码和模块.</p><p>要使用的 Kotlin 版本通常定义为 <code>kotlin_version</code> 属性：</p><pre class="line-numbers language-none"><code class="language-none">buildscript &#123;    ext.kotlin_version &#x3D; &#39;1.3.11&#39;    repositories &#123;        mavenCentral()    &#125;    dependencies &#123;        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当通过 <a href="https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block">Gradle 插件 DSL</a> 与 <a href="https://github.com/gradle/kotlin-dsl">Gradle Kotlin DSL</a> 使用 Kotlin Gradle 插件 1.1.1 及以上版本时，这不是必需的。</p><h5 id="针对-jvm"><a class="markdownIt-Anchor" href="#针对-jvm"></a> 针对 JVM<a href="#%E9%92%88%E5%AF%B9-jvm"></a></h5><p>针对 JVM，需要应用 Kotlin 插件：</p><pre class="line-numbers language-none"><code class="language-none">apply plugin: &quot;kotlin&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者，从 Kotlin 1.1.1 起，可以使用 <a href="https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block">Gradle 插件 DSL</a> 来应用该插件：</p><pre class="line-numbers language-none"><code class="language-none">plugins &#123;    id &quot;org.jetbrains.kotlin.jvm&quot; version &quot;1.3.11&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这个块中的 <code>version</code> 必须是字面值，并且不能从其他构建脚本中应用。<br />对于 Gradle Kotlin DSL，请按以下方式应用插件：</p><pre class="line-numbers language-none"><code class="language-none">plugins &#123;    kotlin(&quot;jvm&quot;) version &quot;1.3.11&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Kotlin 源代码可以与同一个文件夹或不同文件夹中的 Java 源代码混用。默认约定是使用不同的文件夹：</p><pre class="line-numbers language-none"><code class="language-none">project    - src        - main (root)            - kotlin            - java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不使用默认约定，那么应该更新相应的 <em>sourceSets</em> 属性：</p><pre class="line-numbers language-none"><code class="language-none">sourceSets &#123;    main.kotlin.srcDirs +&#x3D; &#39;src&#x2F;main&#x2F;myKotlin&#39;    main.java.srcDirs +&#x3D; &#39;src&#x2F;main&#x2F;myJava&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于 Gradle Kotlin DSL，请改用 <code>java.sourceSets &#123; …… &#125;</code> 配置源集。</p><h5 id="针对-javascript"><a class="markdownIt-Anchor" href="#针对-javascript"></a> 针对 JavaScript<a href="#%E9%92%88%E5%AF%B9-javascript"></a></h5><p>当针对 JavaScript 时，须应用不同的插件：</p><pre class="line-numbers language-none"><code class="language-none">apply plugin: &quot;kotlin2js&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个插件只适用于 Kotlin 文件，因此建议将 Kotlin 和 Java 文件分开（如果是同一项目包含 Java 文件的情况）。与针对 JVM 一样，如果不使用默认约定，我们需要使用 <em>sourceSets</em> 来指定源代码文件夹：</p><pre class="line-numbers language-none"><code class="language-none">sourceSets &#123;    main.kotlin.srcDirs +&#x3D; &#39;src&#x2F;main&#x2F;myKotlin&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>除了输出的 JavaScript 文件，该插件默认会创建一个带二进制描述符的额外 JS 文件。 如果你是构建其他 Kotlin 模块可以依赖的可重用库，那么该文件是必需的，并且应该与转换结果一起分发。 其生成由 <code>kotlinOptions.metaInfo</code> 选项控制：</p><pre class="line-numbers language-none"><code class="language-none">compileKotlin2Js &#123;    kotlinOptions.metaInfo &#x3D; true&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="针对-android"><a class="markdownIt-Anchor" href="#针对-android"></a> 针对 Android<a href="#%E9%92%88%E5%AF%B9-android"></a></h5><p>Android 的 Gradle 模型与普通 Gradle 有点不同，所以如果我们要构建一个用 Kotlin 编写的 Android 项目，我们需要用 <em>kotlin-android</em> 插件取代 <em>kotlin</em> 插件：</p><pre class="line-numbers language-none"><code class="language-none">buildscript &#123;    ext.kotlin_version &#x3D; &#39;1.3.11&#39;    ……    dependencies &#123;        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;    &#125;&#125;apply plugin: &#39;com.android.application&#39;apply plugin: &#39;kotlin-android&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不要忘记配置<a href="#%E9%85%8D%E7%BD%AE%E4%BE%9D%E8%B5%96">标准库依赖关系</a>。</p><h6 id="android-studio"><a class="markdownIt-Anchor" href="#android-studio"></a> Android Studio<a href="#android-studio"></a></h6><p>如果使用 Android Studio，那么需要在 android 下添加以下内容：</p><pre class="line-numbers language-none"><code class="language-none">android &#123;  ……  sourceSets &#123;    main.java.srcDirs +&#x3D; &#39;src&#x2F;main&#x2F;kotlin&#39;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这让 Android Studio 知道该 kotlin 目录是源代码根目录，所以当项目模型加载到 IDE 中时，它会被正确识别。或者，你可以将 Kotlin 类放在 Java 源代码目录中，该目录通常位于 <code>src/main/java</code>。</p><h5 id="配置依赖"><a class="markdownIt-Anchor" href="#配置依赖"></a> 配置依赖<a href="#%E9%85%8D%E7%BD%AE%E4%BE%9D%E8%B5%96"></a></h5><p>除了上面显示的 <code>kotlin-gradle-plugin</code> 依赖之外，还需要添加 Kotlin 标准库的依赖：</p><pre class="line-numbers language-none"><code class="language-none">repositories &#123;    mavenCentral()&#125;dependencies &#123;    compile &quot;org.jetbrains.kotlin:kotlin-stdlib&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果针对 JavaScript，请使用 <code>compile &quot;org.jetbrains.kotlin:kotlin-stdlib-js&quot;</code> 替代之。</p><p>如果是针对 JDK 7 或 JDK 8，那么可以使用扩展版本的 Kotlin 标准库，其中包含为新版 JDK 增加的额外的扩展函数。使用以下依赖之一来取代 <code>kotlin-stdlib</code> ：</p><pre class="line-numbers language-none"><code class="language-none">compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7&quot;compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于 Gradle Kotlin DSL，以下表示法的依赖关系与其等价：</p><pre class="line-numbers language-none"><code class="language-none">dependencies &#123;    compile(kotlin(&quot;stdlib&quot;))    &#x2F;&#x2F; 或者以下之一：    compile(kotlin(&quot;stdlib-jdk7&quot;))    compile(kotlin(&quot;stdlib-jdk8&quot;))&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Kotlin 1.1.x 中，请使用 <code>kotlin-stdlib-jre7</code> 与 <code>kotlin-stdlib-jre8</code>。</p><p>如果你的项目中使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/index.html">Kotlin 反射</a>或者测试设施，你也需要添加相应的依赖：</p><pre class="line-numbers language-none"><code class="language-none">compile &quot;org.jetbrains.kotlin:kotlin-reflect&quot;testCompile &quot;org.jetbrains.kotlin:kotlin-test&quot;testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者，对于 Gradle Kotlin DSL：</p><pre class="line-numbers language-none"><code class="language-none">compile(kotlin(&quot;reflect&quot;))testCompile(kotlin(&quot;test&quot;))testCompile(kotlin(&quot;test-junit&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从 Kotlin 1.1.2 起，使用 <code>org.jetbrains.kotlin</code> group 的依赖项默认使用从已应用的插件获得的版本来解析。你可以用完整的依赖关系符号 （如 <code>compile &quot;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version&quot;</code>，或者在 Gradle Kotlin DSL 中用 <code>kotlin(&quot;stdlib&quot;, kotlinVersion)</code>）手动提供其版本。</p><h5 id="注解处理"><a class="markdownIt-Anchor" href="#注解处理"></a> 注解处理<a href="#%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86"></a></h5><p>请参见 <a href="kapt.html">Kotlin 注解处理工具</a>（<code>kapt</code>）的描述。</p><h5 id="增量编译"><a class="markdownIt-Anchor" href="#增量编译"></a> 增量编译<a href="#%E5%A2%9E%E9%87%8F%E7%BC%96%E8%AF%91"></a></h5><p>Kotlin 支持 Gradle 中可选的增量编译。 增量编译跟踪构建之间源文件的改动，因此只有受这些改动影响的文件才会被编译。</p><p>从 Kotlin 1.1.1 起，默认启用增量编译。</p><p>有几种方法来覆盖默认设置：</p><ol><li><p>将 <code>kotlin.incremental=true</code> 或者 <code>kotlin.incremental=false</code> 行添加到一个 <code>gradle.properties</code> 或者一个 <code>local.properties</code> 文件中；</p></li><li><p>将 <code>-Pkotlin.incremental=true</code> 或 <code>-Pkotlin.incremental=false</code> 添加到 Gradle 命令行参数。请注意，这样用法中，该参数必须添加到后续每个子构建，并且任何具有禁用增量编译的构建将使增量缓存失效。</p></li></ol><p>请注意，第一次构建不会是增量的。</p><h5 id="coroutines-support"><a class="markdownIt-Anchor" href="#coroutines-support"></a> Coroutines support<a href="#coroutines-support"></a></h5><p><a href="coroutines.html">Coroutines</a> support is an experimental feature in Kotlin 1.2, so the Kotlin compiler reports a warning when you use coroutines in your project. To turn off the warning, add the following block to your <code>build.gradle</code> file:</p><pre class="line-numbers language-none"><code class="language-none">kotlin &#123;    experimental &#123;        coroutines &#39;enable&#39;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Or, with Gradle Kotlin DSL:</p><pre class="line-numbers language-none"><code class="language-none">import org.jetbrains.kotlin.gradle.dsl.Coroutines&#x2F;&#x2F; ...kotlin.experimental.coroutines &#x3D; Coroutines.ENABLE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="module-names"><a class="markdownIt-Anchor" href="#module-names"></a> Module names<a href="#module-names"></a></h5><p>The Kotlin modules that the build produces are named accordingly to the <code>archivesBaseName</code> property of the project. If a project has a broad name like <code>lib</code> or <code>jvm</code>, which is common for subprojects, the Kotlin output files related to the module (<code>*.kotlin_module</code>) might clash with those from third-party modules with the same name. This causes problems when a project is packaged into a single archive (e.g. APK).</p><p>To avoid this, consider setting a unique <code>archivesBaseName</code> manually:</p><pre class="line-numbers language-none"><code class="language-none">archivesBaseName &#x3D; &#39;myExampleProject_lib&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>With Gradle Kotlin DSL, it is:</p><pre class="line-numbers language-none"><code class="language-none">setProperty(&quot;archivesBaseName&quot;, &quot;myExampleProject_lib&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="gradle-构建缓存支持自-1220-起"><a class="markdownIt-Anchor" href="#gradle-构建缓存支持自-1220-起"></a> Gradle 构建缓存支持（自 1.2.20 起）<a href="#gradle-%E6%9E%84%E5%BB%BA%E7%BC%93%E5%AD%98%E6%94%AF%E6%8C%81%E8%87%AA-1220-%E8%B5%B7"></a></h5><p>Kotlin 插件支持 <a href="https://guides.gradle.org/using-build-cache/">Gradle 构建缓存</a>（需要 Gradle 4.3 及以上版本；低版本则禁用缓存）。</p><p>由于注解处理器运行的任意代码可能不一定会将任务输入转换为输出、可能访问与修改 Gradle 未跟踪的文件等，因此默认不缓存 kapt 注解处理任务。要启用 kapt 缓存，请将以下列几行添加到构建脚本中：</p><pre class="line-numbers language-none"><code class="language-none">kapt &#123;    useBuildCache &#x3D; true&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要禁用所有 Kotlin 任务的缓存，请将系统属性标志 <code>kotlin.caching.enabled</code> 设置为 <code>false</code>（运行构建带上参数 <code>-Dkotlin.caching.enabled=false</code>）。</p><h5 id="编译器选项"><a class="markdownIt-Anchor" href="#编译器选项"></a> 编译器选项<a href="#%E7%BC%96%E8%AF%91%E5%99%A8%E9%80%89%E9%A1%B9"></a></h5><p>要指定附加的编译选项，请使用 Kotlin 编译任务的 <code>kotlinOptions</code> 属性。</p><p>当针对 JVM 时，对于生产代码这些任务称为 <code>compileKotlin</code> 而对于测试代码称为 <code>compileTestKotlin</code>。对于自定义源文件集（source set）这些任务称呼取决于 <code>compile＜Name＞Kotlin</code> 模式。</p><p>Android 项目中的任务名称包含<a href="https://developer.android.com/studio/build/build-variants.html">构建变体</a> 名称，并遵循 <code>compile&lt;BuildVariant&gt;Kotlin</code> 的模式，例如 <code>compileDebugKotlin</code>、 <code>compileReleaseUnitTestKotlin</code>。</p><p>当针对 JavaScript 时，这些任务分别称为 <code>compileKotlin2Js</code> 与 <code>compileTestKotlin2Js</code>，以及对于自定义源文件集称为 <code>compile＜Name＞Kotlin2Js</code>。</p><p>要配置单个任务，请使用其名称。示例：</p><pre class="line-numbers language-none"><code class="language-none">compileKotlin &#123;    kotlinOptions.suppressWarnings &#x3D; true&#125;compileKotlin &#123;    kotlinOptions &#123;        suppressWarnings &#x3D; true    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 Gradle Kotlin DSL，首先从项目的 <code>tasks</code> 中获取任务：</p><pre class="line-numbers language-none"><code class="language-none">import org.jetbrains.kotlin.gradle.tasks.KotlinCompile&#x2F;&#x2F; ……val compileKotlin: KotlinCompile by taskscompileKotlin.kotlinOptions.suppressWarnings &#x3D; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相应地，为 JS 与 Common 目标使用类型 <code>Kotlin2JsCompile</code> 与 <code>KotlinCompileCommon</code>。</p><p>也可以在项目中配置所有 Kotlin 编译任务：</p><pre class="line-numbers language-none"><code class="language-none">tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile::class.java).all &#123;    kotlinOptions &#123; …… &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对于 Gradle 任务的完整选项列表如下：</p><h6 id="jvm-js-与-js-dce-的公共属性"><a class="markdownIt-Anchor" href="#jvm-js-与-js-dce-的公共属性"></a> JVM、JS 与 JS DCE 的公共属性<a href="#jvmjs-%E4%B8%8E-js-dce-%E7%9A%84%E5%85%AC%E5%85%B1%E5%B1%9E%E6%80%A7"></a></h6><table><thead><tr><th>名称</th><th>描述</th><th>可能的值</th><th>默认值</th></tr></thead><tbody><tr><td><code>allWarningsAsErrors</code></td><td>任何警告都报告为错误</td><td></td><td>false</td></tr><tr><td><code>suppressWarnings</code></td><td>不生成警告</td><td></td><td>false</td></tr><tr><td><code>verbose</code></td><td>启用详细日志输出</td><td></td><td>false</td></tr><tr><td><code>freeCompilerArgs</code></td><td>附加编译器参数的列表</td><td></td><td>[]</td></tr></tbody></table><h6 id="jvm-与-js-的公共属性"><a class="markdownIt-Anchor" href="#jvm-与-js-的公共属性"></a> JVM 与 JS 的公共属性<a href="#jvm-%E4%B8%8E-js-%E7%9A%84%E5%85%AC%E5%85%B1%E5%B1%9E%E6%80%A7"></a></h6><table><thead><tr><th>Name</th><th>Description</th><th>Possible values</th><th>Default value</th></tr></thead><tbody><tr><td><code>apiVersion</code></td><td>只允许使用来自捆绑库的指定版本中的声明</td><td>“1.0”、 “1.1”、 “1.2”、 “1.3”、 “1.4 (EXPERIMENTAL)”</td><td></td></tr><tr><td><code>languageVersion</code></td><td>提供与指定语言版本源代码兼容性</td><td>“1.0”、 “1.1”、 “1.2”、 “1.3”、 “1.4 (EXPERIMENTAL)”</td><td></td></tr></tbody></table><h6 id="jvm-特有的属性"><a class="markdownIt-Anchor" href="#jvm-特有的属性"></a> JVM 特有的属性<a href="#jvm-%E7%89%B9%E6%9C%89%E7%9A%84%E5%B1%9E%E6%80%A7"></a></h6><table><thead><tr><th>名称</th><th>描述</th><th>可能的值</th><th>默认值</th></tr></thead><tbody><tr><td><code>javaParameters</code></td><td>为方法参数生成 Java 1.8 反射的元数据</td><td></td><td>false</td></tr><tr><td><code>jdkHome</code></td><td>要包含到 classpath 中的 JDK 主目录路径，如果与默认 JAVA_HOME 不同的话</td><td></td><td></td></tr><tr><td><code>jvmTarget</code></td><td>生成的 JVM 字节码的目标版本（1.6 或 1.8），默认为 1.6</td><td>“1.6”、 “1.8”</td><td>“1.6”</td></tr><tr><td><code>noJdk</code></td><td>不要在 classpath 中包含 Java 运行时</td><td></td><td>false</td></tr><tr><td><code>noReflect</code></td><td>不要在 classpath 中包含 Kotlin 反射实现</td><td></td><td>true</td></tr><tr><td><code>noStdlib</code></td><td>不要在 classpath 中包含 Kotlin 运行时</td><td></td><td>true</td></tr></tbody></table><h6 id="js-特有的属性"><a class="markdownIt-Anchor" href="#js-特有的属性"></a> JS 特有的属性<a href="#js-%E7%89%B9%E6%9C%89%E7%9A%84%E5%B1%9E%E6%80%A7"></a></h6><table><thead><tr><th>名称</th><th>描述</th><th>可能的值</th><th>默认值</th></tr></thead><tbody><tr><td><code>friendModulesDisabled</code></td><td>禁用内部声明导出</td><td></td><td>false</td></tr><tr><td><code>main</code></td><td>是否要调用 main 函数</td><td>“call”、 “noCall”</td><td>“call”</td></tr><tr><td><code>metaInfo</code></td><td>使用元数据生成 .meta.js 与 .kjsm 文件。用于创建库</td><td></td><td>true</td></tr><tr><td><code>moduleKind</code></td><td>编译器生成的模块类型</td><td>“plain”、 “amd”、 “commonjs”、 “umd”</td><td>“plain”</td></tr><tr><td><code>noStdlib</code></td><td>不使用捆绑的 Kotlin stdlib</td><td></td><td>true</td></tr><tr><td><code>outputFile</code></td><td>输出文件路径</td><td></td><td></td></tr><tr><td><code>sourceMap</code></td><td>生成源代码映射（source map）</td><td></td><td>false</td></tr><tr><td><code>sourceMapEmbedSources</code></td><td>将源代码嵌入到源代码映射中</td><td>“never”、 “always”、 “inlining”</td><td></td></tr><tr><td><code>sourceMapPrefix</code></td><td>源代码映射中路径的前缀</td><td></td><td></td></tr><tr><td><code>target</code></td><td>生成指定 ECMA 版本的 JS 文件</td><td>“v5”</td><td>“v5”</td></tr><tr><td><code>typedArrays</code></td><td>将原生数组转换为 JS 带类型数组</td><td></td><td>true</td></tr></tbody></table><h5 id="生成文档"><a class="markdownIt-Anchor" href="#生成文档"></a> 生成文档<a href="#%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3"></a></h5><p>要生成 Kotlin 项目的文档，请使用 <a href="https://github.com/Kotlin/dokka">Dokka</a>； 相关配置说明请参见 <a href="https://github.com/Kotlin/dokka/blob/master/README.md#using-the-maven-plugin">Dokka README</a> 。Dokka 支持混合语言项目，并且可以生成多种格式的输出 ，包括标准 JavaDoc。</p><h5 id="osgi"><a class="markdownIt-Anchor" href="#osgi"></a> OSGi<a href="#osgi"></a></h5><p>关于 OSGi 支持请参见 <a href="kotlin-osgi.html">Kotlin OSGi 页</a>。</p><h5 id="使用-gradle-kotlin-dsl"><a class="markdownIt-Anchor" href="#使用-gradle-kotlin-dsl"></a> 使用 Gradle Kotlin DSL<a href="#%E4%BD%BF%E7%94%A8-gradle-kotlin-dsl"></a></h5><p>使用 <a href="https://github.com/gradle/kotlin-dsl">Gradle Kotlin DSL</a> 时，请使用 <code>plugins &#123; …… &#125;</code> 块应用 Kotlin 插件。如果使用 <code>apply &#123; plugin(……) &#125;</code> 来应用的话，可能会遇到未解析的到由 Gradle Kotlin DSL 所生成扩展的引用问题。为了解决这个问题，可以注释掉出错的用法，运行 Gradle 任务 <code>kotlinDslAccessorsSnapshot</code>，然后解除该用法注释并重新运行构建或者重新将项目导入到 IDE 中。</p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(三)Kotlin 高阶函数</title>
      <link href="20181208/kotlin/san-kotlin-gao-jie-han-shu/"/>
      <url>20181208/kotlin/san-kotlin-gao-jie-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="一-基本概念"><a class="markdownIt-Anchor" href="#一-基本概念"></a> 一、基本概念</h3><ul><li>传入或者返回函数的函数</li><li>函数引用  ::println</li><li>带有 Receiver 的引用 pdfPrinter::println</li></ul><h3 id="二-常见高阶函数foreachmapflatmap"><a class="markdownIt-Anchor" href="#二-常见高阶函数foreachmapflatmap"></a> 二、常见高阶函数（forEach/map/flatMap）</h3><ul><li>forEach : 迭代/遍历数组/list</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;forEach函数使用的一般结构object.forEach&#123;    &#x2F;&#x2F;todo&#125;例：val list &#x3D; listOf(1,3,5,10,18,36,2,9)list.forEach(::println)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>map : 接受一个lambda表达式，并且有返回值，形成一个新的list</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;map函数使用的一般结构object.map&#123;    &#x2F;&#x2F;todo&#125;例：val newList &#x3D; list.map&#123;    it * 2 + 3&#x2F;&#x2F;相当于返回值&#125;val newList2 &#x3D; list.map(Int::toDouble)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>flatMap : 集合数据进行合并成一个集合</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;map函数使用的一般结构object.flatMap &#123;    it    &#x2F;&#x2F;todo&#125;或object.flatMap &#123;    it.map &#123;        &#x2F;&#x2F;todo    &#125;&#125;例：val list &#x3D; listOf(    1..20,    2..15,    100..166) val flatList &#x3D; list.flatMap&#123;     it &#125;     val flatList &#x3D; list.flatMap&#123;     it.map&#123;         &quot;No.$it&quot;     &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>reduce : 使用reduce对集合进行计算操作</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;reduce函数使用的一般结构object.reduce&#123;acc,i -&gt;    &#x2F;&#x2F;acc 为累计的结果    &#x2F;&#x2F;acc todo&#125;例：list.reduce&#123;acc,i -&gt; acc + i&#125;fun factorial(n: Int):Int&#123;if(n&#x3D;&#x3D;0) return 1return (1..n)reduce&#123;acc,i -&gt; acc * i&#125;&#125;&#x2F;&#x2F;对0-6的数分别求阶乘，并且打印出来(0..6).map(::factorial).forEach(::println)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>fold : 使用fold对集合进行自定义计算</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;fold函数使用的一般结构object.fold([初始值])&#123;acc,i -&gt;    &#x2F;&#x2F;todo&#125;例：&#x2F;&#x2F; 对0-6 的阶乘进行求和并加上初始值 5println((0..6).map(::factorial).fold(5)&#123;acc,i -&gt; acc + i&#125;)&#x2F;&#x2F;字符串拼接println((0..6).map(::factorial).fold(StringBuilder())&#123;acc,i -&gt; acc.append(i).append(&quot;,&quot;)&#125;)&#x2F;&#x2F; 字符串连接println((0..6).joinToString(&quot;,&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>foldRight : 与fold不同的是顺序相反</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;foldRight函数使用的一般结构object.foldRight([初始值])&#123;i,acc -&gt;    &#x2F;&#x2F;todo&#125;例：&#x2F;&#x2F;字符串拼接println((0..6).map(::factorial).foldRight(StringBuilder())&#123;i,acc -&gt; acc.append(i).append(&quot;,&quot;)&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>filter : 传入Lambda 表达式为true是，保留该元素；使用filter对集合进行按条件过滤</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;filter函数使用的一般结构object.filter&#123;    &#x2F;&#x2F;todo&#125;例：&#x2F;&#x2F;给一个长度为 n 的数组，每个元素都在 [1,n] 之间，要求找出 [1,n] 中没有在数组里出现的元素。fun findDisappearNumbers(nums: IntArray): List&lt;Int&gt; &#123;    val ifAppear &#x3D; BooleanArray(nums.size + 1)    nums.forEach &#123; ifAppear[it] &#x3D; true &#125;    return ifAppear.mapIndexed &#123;        index, boolean -&gt;        if (boolean || index &#x3D;&#x3D; 0) -1 else index    &#125;.filter &#123; it !&#x3D; -1 &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>takeWhile : 循环遍历集合，直到第一个不满足条件的数据时，停止循环</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;takeWhile函数使用的一般结构object.takeWhile&#123;    &#x2F;&#x2F;todo&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>let : let扩展函数的实际上是一个作用域函数，当你需要去定义一个变量在一个特定的作用域范围内，let函数的是一个不错的选择；let函数另一个作用就是可以避免写一些判断null的操作。</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;let函数使用的一般结构object.let&#123;it.todo()&#x2F;&#x2F;在函数体内使用it替代object对象去访问其公有的属性和方法...&#125;&#x2F;&#x2F;另一种用途 判断object为null的操作object?.let&#123;&#x2F;&#x2F;表示object不为null的条件下，才会去执行let函数体it.todo()&#125;例：data class Person(val name: String,val age:Int)&#123;    fun work()&#123;        println(&quot;$name is working!!!&quot;)    &#125;&#125;fun findPerson():Person?&#123;    return null&#125;fun main(args: Array&lt;String&gt;)&#123;    findPerson()?.let&#123;person -&gt;        person.work()        println(person.age)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>apply : apply一般用于一个对象实例初始化的时候，需要对对象中的属性进行赋值;一般可用于多个扩展函数链式调用 ;数据model多层级包裹判空处理的问题</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;apply函数使用的一般结构object.apply&#123;&#x2F;&#x2F;todo&#125;&#x2F;&#x2F;例：&#x2F;&#x2F;1、data class Person(val name: String,val age:Int)&#123;    fun work()&#123;        println(&quot;$name is working!!!&quot;)    &#125;&#125;fun findPerson():Person?&#123;    return null&#125;fun main(args: Array&lt;String&gt;)&#123;    findPerson()?.apply&#123;        work()        println(age)    &#125;&#125;&#x2F;&#x2F;2、mSectionMetaData?.apply&#123;&#x2F;&#x2F;mSectionMetaData不为空的时候操作mSectionMetaData&#125;?.questionnaire?.apply&#123;&#x2F;&#x2F;questionnaire不为空的时候操作questionnaire&#125;?.section?.apply&#123;&#x2F;&#x2F;section不为空的时候操作section&#125;?.sectionArticle?.apply&#123;&#x2F;&#x2F;sectionArticle不为空的时候操作sectionArticle&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>with : 适用于调用同一个类的多个方法时，可以省去类名重复，直接调用类的方法即可</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;with函数使用的一般结构with(object)&#123;   &#x2F;&#x2F;todo &#125; 例： val br &#x3D; Buffered<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>run ： run函数是let,with两个函数结合体，准确来说它弥补了let函数在函数体内必须使用it参数替代对象，在run函数中可以像with函数一样可以省略，直接访问实例的公有属性和方法，另一方面它弥补了with函数传入对象判空问题，在run函数中可以像let函数一样做判空处理</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;run函数使用的一般结构object.run&#123;&#x2F;&#x2F;todo&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>also : 适用于let函数的任何场景，also函数和let很像，只是唯一的不同点就是let函数最后的返回值是最后一行的返回值而also函数的返回值是返回当前的这个对象。一般可用于多个扩展函数链式调用</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;also函数使用的一般结构object.also&#123;&#x2F;&#x2F;todo&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>use : use函数作用于现实了Closeable接口的类，比如文件io操作</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;use函数使用的一般结构object.use&#123;    &#x2F;&#x2F;todo&#125;例：var l &#x3D; BufferedReader(FileReader(&quot;123.txt&quot;)).use &#123;    var line: String &#x3D; &quot;&quot;    while (true)&#123;        line +&#x3D; it.readLine()?: break    &#125;    line&#125;println(l)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-尾递归优化"><a class="markdownIt-Anchor" href="#三-尾递归优化"></a> 三、尾递归优化</h3><ul><li>递归的一种特殊形式</li><li>调用自身后无其他操作</li><li>tailrec 关键字提示编译器尾递归优化</li><li>尾递归与迭代的关系，尾递归一般情况下可以直接转换为迭代</li></ul><h3 id="四-闭包"><a class="markdownIt-Anchor" href="#四-闭包"></a> 四、闭包</h3><ul><li>闭包就是函数的运行环境</li><li>持有函数运行状态</li><li>函数内部可以定义函数</li><li>函数内部也可以定义类</li></ul><h3 id="五-函数复合"><a class="markdownIt-Anchor" href="#五-函数复合"></a> 五、函数复合</h3><ul><li>函数复合就是f(g(x))的形式的函数</li></ul><h3 id="六-currying-科理化"><a class="markdownIt-Anchor" href="#六-currying-科理化"></a> 六、Currying (科理化)</h3><ul><li>就是多元函数变成一元函数调用链</li></ul><pre class="line-numbers language-none"><code class="language-none">fun log(tag:String,target:OutputStream,message:Any?)&#123;    target.write(&quot;[$tag]: $message\n&quot;.toByteArray())&#125;fun curriedLog(tag:String):(target:OutputStream) -&gt; (message:Any?)&#123;    &#x2F;&#x2F;todo&#125;&#x2F;&#x2F;fun log(tag:String)&#x2F;&#x2F;    &#x3D;fun (target:OutputStream)&#x2F;&#x2F;    &#x3D;(message:Any?)&#x2F;&#x2F;    &#x3D;target.write(&quot;[$tag]: $message\n&quot;.toByteArray())fun&lt;P1,P2,P3,R&gt; Function3&lt;P1,P2,P3,R&gt;.curried()    &#x3D;fun(p1:P1)&#x3D;fun(p2:P2)&#x3D;fun(p3:P3)&#x3D;this(p1,p2,p3)fun main(args: Array&lt;String&gt;)&#123;    log(&quot;Test&quot;,System.out,&quot;Hello World！&quot;)   &#x2F;&#x2F; log(&quot;Test&quot;)(System.out)(&quot;Hello World Currying&quot;)    ::log.curried()(&quot;Test&quot;)(System.out)(&quot;Hello World Currying&quot;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七-偏函数"><a class="markdownIt-Anchor" href="#七-偏函数"></a> 七、偏函数</h3><ul><li>传入部分参数之后得到的新函数就是偏函数</li></ul><pre class="line-numbers language-none"><code class="language-none">fun log(tag:String,target:OutputStream,message:Any?)&#123;    target.write(&quot;[$tag]: $message\n&quot;.toByteArray())&#125;fun&lt;P1,P2,P3,R&gt; Function3&lt;P1,P2,P3,R&gt;.curried()    &#x3D;fun(p1:P1)&#x3D;fun(p2:P2)&#x3D;fun(p3:P3)&#x3D;this(p1,p2,p3)fun main(args: Array&lt;String&gt;)&#123;    val consoleLog &#x3D; (::log.cueried())(&quot;Test out&quot;)(System.out)    consoleLog(&quot;Hello 偏函数！&quot;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(二)Kotlin 面向对象</title>
      <link href="20181207/kotlin/er-kotlin-mian-xiang-dui-xiang/"/>
      <url>20181207/kotlin/er-kotlin-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="一-面向对象的概念"><a class="markdownIt-Anchor" href="#一-面向对象的概念"></a> 一、面向对象的概念</h3><ul><li>本质上就是解决如何用程序描述世界的问题</li><li>讨论如何把实际存在的东西映射成程序的类和对象</li><li>一种程序设计的思路,思想,方法</li><li>程序设计层面的概念</li><li>设计模式：前人的程序设计经验</li></ul><h3 id="二-抽象类与接口"><a class="markdownIt-Anchor" href="#二-抽象类与接口"></a> 二、抽象类与接口</h3><p>相当于半成品与协议</p><h4 id="1-接口"><a class="markdownIt-Anchor" href="#1-接口"></a> 1、接口</h4><ul><li>接口，直观理解就是一种约定</li></ul><pre class="line-numbers language-none"><code class="language-none">interface InputDevice&#123;    fun input(event: Any)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>接口不能有状态</li><li>必须由类对其进行实现后使用</li></ul><h4 id="2-抽象类"><a class="markdownIt-Anchor" href="#2-抽象类"></a> 2、抽象类</h4><ul><li>实现了一部分协议的半成品</li><li>可以有状态，可以有方法实现</li><li>必须由子类继承后使用</li></ul><h4 id="3-抽象类和接口的共性"><a class="markdownIt-Anchor" href="#3-抽象类和接口的共性"></a> 3、抽象类和接口的共性</h4><ul><li>比较抽象，不能直接实例化</li><li>需要有子类（实现类）实现的方法</li><li>父类（接口）变量可以接受子类（实现类）的赋值</li></ul><h4 id="3-抽象类和接口的区别"><a class="markdownIt-Anchor" href="#3-抽象类和接口的区别"></a> 3、抽象类和接口的区别</h4><ul><li>抽象类有状态，接口没有状态</li><li>抽象类有方法实现，接口只能有无状态的默认实现</li><li>抽象类只能单继承，接口可以多实现</li><li>抽象类反应本质，接口体现能力</li></ul><h3 id="三-类的继承与接口的实现"><a class="markdownIt-Anchor" href="#三-类的继承与接口的实现"></a> 三、类的继承与接口的实现</h3><ul><li>父类需要 open 才可以被继承</li><li>父类方法、属性需要 open 才可以倍复写</li><li>接口、接口方法、抽象类默认为 open</li><li>复写父类（接口）成员需要 override 关键字</li><li>class D:A(),B,C</li><li>注意继承类时实际上调用了父类构造方法</li><li>类只能单继承，接口可以多实现</li></ul><h4 id="接口代理"><a class="markdownIt-Anchor" href="#接口代理"></a> 接口代理</h4><ul><li>class Manager(driver: Driver):Driver by driver</li><li>接口方法实现交给代理类实现</li></ul><h4 id="接口方法冲突"><a class="markdownIt-Anchor" href="#接口方法冲突"></a> 接口方法冲突</h4><pre class="line-numbers language-none"><code class="language-none">- 接口方法可以有默认实现- 签名一致且返回值相同的冲突- 子类（实现类）必须复写冲突方法- super&lt;[父类（接口）名]&gt;.[方法名]([参数列表])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四-类及其成员的可见性"><a class="markdownIt-Anchor" href="#四-类及其成员的可见性"></a> 四、类及其成员的可见性</h3><table><thead><tr><th>Kotlin</th><th>Java</th></tr></thead><tbody><tr><td>private</td><td>private</td></tr><tr><td>protected</td><td>protected</td></tr><tr><td>–</td><td>default(包内可见)</td></tr><tr><td>internal(模块内可见)</td><td>–</td></tr><tr><td>public</td><td>public</td></tr></tbody></table><h3 id="五-object"><a class="markdownIt-Anchor" href="#五-object"></a> 五、object</h3><ul><li>只有一个实例的类（单例）</li><li>不能自定义构造方法</li><li>可以实现接口、继承父类</li><li>本质上就是单例模式最基本的实现</li></ul><h3 id="六-伴生对象与静态成员"><a class="markdownIt-Anchor" href="#六-伴生对象与静态成员"></a> 六、伴生对象与静态成员</h3><ul><li>每个类可以对应一个伴生对象</li><li>伴生对象的成员全局独一份</li><li>伴生对象的成员类似Java的静态成员</li><li>静态成员考虑用包级函数、变量代替</li><li>使用JvmField和JvmStatic，可以让伴生对象在Java中使用时看起来像静态成员和静态方法</li></ul><h3 id="七-方法重载overloads和默认参数"><a class="markdownIt-Anchor" href="#七-方法重载overloads和默认参数"></a> 七、方法重载(Overloads)和默认参数</h3><h5 id="重载"><a class="markdownIt-Anchor" href="#重载"></a> 重载</h5><ul><li>写了一个方法和已经存在的方法重名，参数不相同</li><li>Jvm函数签名的概念：函数名、参数列表</li><li>跟返回值没有关系</li></ul><h5 id="默认参数"><a class="markdownIt-Anchor" href="#默认参数"></a> 默认参数</h5><ul><li>为函数参数设定一个默认值</li><li>可以为任意位置的参数设置默认值</li><li>函数调用产生混淆时用具名参数</li></ul><h5 id="方法重载与默认参数"><a class="markdownIt-Anchor" href="#方法重载与默认参数"></a> 方法重载与默认参数</h5><ul><li>方法重载与默认参数可以互相转换，在Java中调用有默认参数的方法时，该方法需要使用注解@JvmOverloads</li><li>避免定义关系不大的重载方法</li></ul><h3 id="八-扩展成员二次加工"><a class="markdownIt-Anchor" href="#八-扩展成员二次加工"></a> 八、扩展成员（二次加工）</h3><ul><li>为现有类添加方法、属性</li><li></li></ul><pre class="line-numbers language-none"><code class="language-none">fun X.y():Z&#123;...&#125;val X.m&#x2F;&#x2F;注意扩展属性不能初始化，类似接口属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Java 调用扩展成员类似调用静态方法</li></ul><h3 id="九-属性代理"><a class="markdownIt-Anchor" href="#九-属性代理"></a> 九、属性代理</h3><ul><li>定义方法</li><li></li></ul><pre class="line-numbers language-none"><code class="language-none">val&#x2F;var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>代理者需要实现相应的setValue/getValue方法</li><li>by lazy 就是在第一次使用的时候才去实例化对象</li></ul><h3 id="十-数据类data-class"><a class="markdownIt-Anchor" href="#十-数据类data-class"></a> 十、数据类（data class）</h3><ul><li>默认实现 copy()、toString()、equals()等方法</li><li>编译器默认生成component[1-N]方法，可以自己复写</li></ul><pre class="line-numbers language-none"><code class="language-none">data class China(val code:Int,name: String)val (a,b) &#x3D; China(0,&quot;中国&quot;)pringln(&quot;$a -&gt; $b&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>allOpen和noArg 插件解决data class 的类被解析成final类，并且无空构造方法的问题</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;build.gradle 中的 dependencies 中添加dependencies&#123;    classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;    classpath &quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;    classpath &quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;&#125;&#x2F;&#x2F;build.gradle 中 添加插件的应用apply plugin: &#39;kotlin-noarg&#39;apply plugin: &#39;kotlin-allopen&#39;&#x2F;&#x2F; 插件的配置noArg&#123;    annotation(&quot;注解类名&quot;)&#125;allOpen&#123;    annotation(&quot;注解类名&quot;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性需要写到构造方法，初始化时需要传入参数</li></ul><h3 id="十一-内部类"><a class="markdownIt-Anchor" href="#十一-内部类"></a> 十一、内部类</h3><ul><li>定义在类内部的类</li><li>与类成员有相似的访问控制</li><li>默认是静态内部类，非静态用 inner 关键字</li><li>this@Outter 与 this@Inner</li></ul><h5 id="匿名内部类"><a class="markdownIt-Anchor" href="#匿名内部类"></a> 匿名内部类</h5><ul><li>没有定义名字的类</li><li>类名编译时生成，类似Outter$1.class</li><li>可继承父类、实现多个接口，与Java 不一样</li></ul><h3 id="十二-枚举类"><a class="markdownIt-Anchor" href="#十二-枚举类"></a> 十二、枚举类</h3><ul><li>实例可数的类，注意枚举也是类</li><li>可以修改构造方法，添加成员</li><li>可以提升代码的表现力，也有一定的性能开销</li></ul><h3 id="十二-密封类sealed-class"><a class="markdownIt-Anchor" href="#十二-密封类sealed-class"></a> 十二、密封类（sealed class）</h3><ul><li>子类可数的类</li><li>&lt;V1.1,子类必须定义为密封类的内部类</li><li>v1.1开始,子类只需要与密封类在同一个文件中</li><li>子类可以有多个构造参数</li><li>表示状态适合使用枚举，需要传输指令时适合使用密封类</li></ul>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(一)Kotlin 基础语法</title>
      <link href="20181206/kotlin/yi-kotlin-ji-chu-yu-fa/"/>
      <url>20181206/kotlin/yi-kotlin-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="一-kotlin语法"><a class="markdownIt-Anchor" href="#一-kotlin语法"></a> 一、 Kotlin语法</h3><h4 id="1-变量与常量"><a class="markdownIt-Anchor" href="#1-变量与常量"></a> 1. 变量与常量</h4><pre class="line-numbers language-none"><code class="language-none">&lt;修饰符&gt; &lt;变量&#x2F;常量名&gt;[:类型] &#x3D; [值]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在一般情况下:[类型]可省略，编译器进行类型推导</p><h5 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量：</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;val 修饰的为常量，不可再次赋值val FINAL_HELLO_WORLD :String &#x3D; &quot;Hello World&quot;val USER_TYPE &#x3D; &quot;Admin&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量：</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;var 修饰的为变量，值可变化var index:Int &#x3D;1&#x2F;&#x2F;index 自增index++var username&#x3D;&quot;ZhangSan&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="字符串模板"><a class="markdownIt-Anchor" href="#字符串模板"></a> 字符串模板：</h5><p>在Kotlin中可使用字符串模板来实现字符串中输出变量/常量值</p><pre class="line-numbers language-none"><code class="language-none">var username&#x3D;&quot;ZhangSan&quot;fun main(args:Array&lt;String&gt;)&#123;    username &#x3D; args[0]    println(&quot;欢迎 $&#123;username&#125; 登录系统！&quot;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-函数得函数者得天下"><a class="markdownIt-Anchor" href="#2-函数得函数者得天下"></a> 2. 函数（得函数者得天下）</h4><ul><li><p>[函数修饰符] <fun><em>[函数名称]</em>([参数列表])[:返回值类型]{[函数体]}</p></li><li><p>[函数修饰符] <fun><em>[函数名称]</em>([参数列表])=[表达式]</p></li><li><p>注：[]中的内容可省略，编译器可进行类型推导得出</p></li></ul><pre class="line-numbers language-none"><code class="language-none"> &#x2F;&#x2F; 根据时间字符串返回日期private fun getDate(dateStr:String): Date &#123;    val sdf &#x3D; SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;)    return sdf.parse(dateStr)&#125;&#x2F;&#x2F; 传入两个整形数，计算他们的和并输出fun add(num1:Int,num2:Int)&#123;    println(&quot;$num1 + $num2 &#x3D; $&#123;num1+num2&#125;&quot;)&#125;&#x2F;&#x2F; 传入姓名，输出 Hi [传入的姓名]fun sayHi(name:String)&#x3D;println(&quot;Hi $name&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>匿名函数</li></ul><p>匿名函数就是没有函数名称的函数，但是匿名函数必须赋值给一个变量/常量</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 匿名函数val sayHi &#x3D; fun(name:String)&#x3D;println(&quot;Hi $name&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-lambda-表达式"><a class="markdownIt-Anchor" href="#3-lambda-表达式"></a> 3. Lambda 表达式</h4><p>Lambda 表达式 就是匿名函数</p><ul><li>语法：{[参数列表] -&gt; [函数体，最后一行是返回值]}</li></ul><pre class="line-numbers language-none"><code class="language-none">例如：val sum &#x3D; &#123;a:Int,b:Int -&gt; a+b&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Lambda 表达式类型表示</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 无参，返回值为Unit() -&gt; Unit&#x2F;&#x2F; 传入整型，返回一个整型(Int) -&gt; Int&#x2F;&#x2F; 传入字符串、Lambda表达式，返回Boolean(String,(String) -&gt; String) -&gt; Boolean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Lambda 表达式的调用</li></ul><p>用()进行调用</p><p>等价于 invoke()</p><pre class="line-numbers language-none"><code class="language-none">val sum &#x3D; &#123;a:Int,b:Int -&gt; a+b&#125;sum(2,3)sum.invoke(2,3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Lambda 表达式的简化</li></ul><p>函数参数调用时最后一个Lambda可以移出去</p><p>函数参数只有一个Lambda，调用时小括号可以省略</p><p>Lambda只有一个参数可以默认为it</p><p>入参、返回值与形参一致的函数可以用函数的引用的方式作为实参传入</p><pre class="line-numbers language-none"><code class="language-none">val arr: Array&lt;String&gt; &#x3D; arrayOf(&quot;1&quot;,&quot;s&quot;,&quot;sd&quot;,&quot;rer&quot;,&quot;54&quot;,&quot;65&quot;)&#x2F;&#x2F; Lambda 表达式 ，传入it ,并且打印it&#x2F;&#x2F; Lambda只有一个参数可以默认为itarr.forEach(&#123;it -&gt; println(it)&#125;)&#x2F;&#x2F; 上面的Lambda 表达式简化后&#x2F;&#x2F; Lambda只有一个参数可以默认为it&#x2F;&#x2F; 函数参数调用时最后一个Lambda可以移出去arr.forEach()&#123;println(it)&#125;&#x2F;&#x2F; 上面的Lambda 表达式简化后&#x2F;&#x2F; Lambda只有一个参数可以默认为it&#x2F;&#x2F; 函数参数只有一个Lambda，调用时小括号可以省略arr.forEach&#123;println(it)&#125;&#x2F;&#x2F; 上面的Lambda 表达式简化后&#x2F;&#x2F; Lambda只有一个参数可以默认为it&#x2F;&#x2F; 入参、返回值与形参一致的函数可以用函数的引用的方式作为实参传入arr.forEach(::println)&#x2F;&#x2F; 判断数组中值为rer 是跳出本次循环，继续下次循环，相当于continue arr.forEach ForEach@&#123;     if(it &#x3D;&#x3D; &quot;rer&quot;) return@ForEach     println(it) &#125;&#x2F;&#x2F; 判断数组中值为rer 是跳出循环，不再进行下面的循环，继续制作该循环后面的代码 run breaking@ &#123;     arr.forEach &#123;        if(it &#x3D;&#x3D; &quot;rer&quot;) return@breaking        println(it)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-类成员"><a class="markdownIt-Anchor" href="#3-类成员"></a> 3. 类成员</h4><ul><li>属性：或者说成员变量，类范围内的变量</li><li>方法：或者说成员函数，类范围内的函数</li></ul><p>函数和方法的区别：</p><p>函数强调功能本身，不考虑从属</p><p>方法的称呼通常是从类的角度出发</p><p>只是叫法不同而已</p><ul><li>定义属性</li></ul><p>构造方法参数中val/var 修饰的都是属性</p><p>类内部也可以定义属性</p><pre class="line-numbers language-none"><code class="language-none">class Hello(val aFiled:Int,notAField:Int)&#123;    var anotherField:Float &#x3D; 3f&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>属性访问控制</li></ul><p>属性可以定义getter/setter</p><pre class="line-numbers language-none"><code class="language-none">val a: Int&#x3D;0    get()&#x3D;fieldvar b: Float &#x3D; 0f    get()&#123;        return field &#x2F; 3;    &#125;    set(value)&#123;field &#x3D; value&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>属性初始化</li></ul><p>属性的初始化尽量在构造方法中完成</p><p>无法在构造方法中初始化，尝试降级为局部变量</p><p>var 用 lateinit 延迟初始化，val 用 lazy 延迟初始化</p><p>可空类型谨慎用 null 直接初始化</p><h4 id="4-运算符"><a class="markdownIt-Anchor" href="#4-运算符"></a> 4. 运算符( ±*/%^? )</h4><p>官网定义</p><table><thead><tr><th>Expression</th><th>Translated to</th></tr></thead><tbody><tr><td>+a</td><td>a.unaryPlus()</td></tr><tr><td>-a</td><td>a.unaryMinus()</td></tr><tr><td>!a</td><td>a.not()</td></tr><tr><td>—</td><td>—</td></tr><tr><td>a++</td><td>a.inc() + see below</td></tr><tr><td>a–</td><td>a.dec() + see below</td></tr><tr><td>—</td><td>—</td></tr><tr><td>a+b</td><td>a.plus(b)</td></tr><tr><td>a-b</td><td>a.minus(b)</td></tr><tr><td>a*b</td><td>a.times(b)</td></tr><tr><td>a/b</td><td>a.div(b)</td></tr><tr><td>a%b</td><td>a.rem(b),a.mod(b)(deprecated)</td></tr><tr><td>a…b</td><td>a.rangeTo(b)</td></tr><tr><td>—</td><td>—</td></tr><tr><td>a in b</td><td>b.contains(a)</td></tr><tr><td>a !in b</td><td>!b.contains(a)</td></tr><tr><td>—</td><td>—</td></tr><tr><td>a[i]</td><td>a.get(i)</td></tr><tr><td>a[i,j]</td><td>a.get(i,j)</td></tr><tr><td>a[i_1,…,i_n]</td><td>a.get(i_1,…,i_n)</td></tr><tr><td>a[i] = b</td><td>a.set(i,b)</td></tr><tr><td>a[i,j] = b</td><td>a.set(i,j,b)</td></tr><tr><td>a[i_1,…,i_n] =b</td><td>a.set(i_1,…,i_n,b)</td></tr><tr><td>—</td><td>—</td></tr><tr><td>a()</td><td>a.invoke()</td></tr><tr><td>a(i)</td><td>a.invoke(i)</td></tr><tr><td>a(i,j)</td><td>a.invoke(i,j)</td></tr><tr><td>—</td><td>—</td></tr><tr><td>a += b</td><td>a.plusAssign(b)</td></tr><tr><td>a -= b</td><td>a.minusAssign(b)</td></tr><tr><td>a *= b</td><td>a.timesAssign(b)</td></tr><tr><td>a /= b</td><td>a.divAssign(b)</td></tr><tr><td>a %= b</td><td>a.modAssign(b)</td></tr></tbody></table><ul><li>基本运算符</li></ul><p>任何类可以定义或者重载父类的基本运算符</p><p>通过运算符对应的具名函数来定义</p><p>对参数的个数做要求，对参数和返回值类型不做要求</p><p>不能像 Scala 一样定义人与运算符</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 定义一个复数，实部与实部相加，虚部与虚部相加class Complex(var real: Double,var imaginary: Double)&#123;    operator fun plus(other: Complex):Complex&#123;        return Complex(real+other.real,imaginary + other.imaginary)    &#125;    override fun toString():String&#123;        return &quot;$real + $&#123;imaginary&#125;i&quot;    &#125;&#125;fun main(args: Array&lt;String&gt;)&#123;    val c1 &#x3D; Complex(3.0,4.0)&#x2F;&#x2F;3.0+4.0i    val c2 &#x3D; Cpmplex(2.0,7.5)&#x2F;&#x2F;2.0+7.5i    println(c1 + c2)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>中缀表达式</li></ul><p>只有一个参数，且用infix 修饰的函数</p><pre class="line-numbers language-none"><code class="language-none">class Book &#123;    infix fun on(place:String)&#123;...&#125;&#125;Book() on &quot;My Desk&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>分支表达式</p></li><li><p>if 表达式<br />if … else</p></li></ul> <pre class="line-numbers language-none"><code class="language-none">if(a &#x3D;&#x3D; b) ... else if(a &#x3D;&#x3D; c) ... else ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表达式与完备性</p><pre class="line-numbers language-none"><code class="language-none">val x &#x3D; if(b&lt;0) 0 else bval x &#x3D; if(b&lt;0)0 &#x2F;&#x2F;错误，赋值时，分支必须完备<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>when 表达式</li></ul><p>加强版的 switch ，支持任意类型</p><p>支持纯表达式条件分支（类似if）</p><p>表达式与完备性特性</p><ul><li>循环语句</li></ul><p>基本写法:<br />for(element in elements) …</p><p>给任意类实现 Iterator 方法</p><pre class="line-numbers language-none"><code class="language-none">val arr: Array&lt;String&gt; &#x3D; arrayOf(&quot;1&quot;,&quot;s&quot;,&quot;sd&quot;,&quot;rer&quot;,&quot;54&quot;,&quot;65&quot;)for(a in arr)&#123;    println(a)&#125;for((index,value) in arr.withIndex())&#123;    println(&quot;$index -&gt; $value&quot;)&#125;for(indexedValue in arr.withIndex())&#123;    println(&quot;$&#123;indexedValue.index&#125; -&gt; $&#123;indexedValue.value&#125;&quot;)&#125;class MyIterator(val iterator: Iterator&lt;Int&gt;)&#123;    operator fun next():Int&#123;        return iterator.next    &#125;     operator fun hasNext():Boolean&#123;        return iterator.hasNext()    &#125;&#125;cal MyIntList&#123;    private val list &#x3D; ArrayList&lt;Int&gt;()    fun add(int: Int)&#123;        list.add(int)    &#125;    fun remove(int: Int)&#123;        list.remove(int)    &#125;    operator fun iterator():MyIterator&#123;        return MyIterator(list.iterator())    &#125;&#125;fun main(args: Array&lt;String&gt;)&#123;    val list &#x3D; MyIntList()    list.add(1)    list.add(2)    list.add(3)    for(i in list)&#123;        println(i)    &#125;&#125;&#x2F;&#x2F; whilevar x&#x3D;5while(x&gt;0)&#123;    println(x)    x--&#125;do&#123;   println(x)    x--&#125;while(x&gt;0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>跳出或跳过循环</li></ul><p>跳出，终止循环  break</p><p>跳过当前循环  continue</p><p>多层循环嵌套的终止结合标签使用</p><pre class="line-numbers language-none"><code class="language-none">Outter@for(...)&#123;    Inner@while(i&lt;0)&#123;        if(...) break@Outter    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-异常捕获"><a class="markdownIt-Anchor" href="#5-异常捕获"></a> 5. 异常捕获</h4><p>使用 try{}catch(e: Exception){} 进行异常捕获</p><pre class="line-numbers language-none"><code class="language-none">try&#123;      &#x2F;&#x2F;程序正常执行&#125;catch(e: Exception)&#123;    &#x2F;&#x2F;程序出现异常，可根据异常类型捕获相应的异常&#125;finally&#123;    &#x2F;&#x2F;无论执行成功还是出现异常都会执行&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-具名参数"><a class="markdownIt-Anchor" href="#6-具名参数"></a> 6. 具名参数</h4><p>给函数的实参附上形参</p><pre class="line-numbers language-none"><code class="language-none">fun sum(arg1:Int,arg2:Int) &#x3D; arg1 + arg2sun(arg2&#x3D;3,arg1&#x3D;2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="7-变长参数"><a class="markdownIt-Anchor" href="#7-变长参数"></a> 7. 变长参数</h4><p>使用 vararg 修饰</p><p>某个参数可以接受多个值</p><p>可以不为最后一个参数</p><p>如果传参是由歧义，需要使用具名参数</p><h4 id="8-spread-operator"><a class="markdownIt-Anchor" href="#8-spread-operator"></a> 8. Spread Operator</h4><p>使用 * 来展开</p><p>只支持展开Array</p><p>只用于变长列表的实参</p><pre class="line-numbers language-none"><code class="language-none">val arr&#x3D;intArrayOf(1,2,3,4,5)fun printMethod(vararg arrs:Int)&#123;    arrs.forEach(::println)&#125;printMethod(*arr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9默认参数"><a class="markdownIt-Anchor" href="#9默认参数"></a> 9.默认参数</h4><p>为函数参数指定默认值</p><p>可以为任意位置的参数指定默认值</p><p>传参时，如果有歧义，需要使用具名参数</p><pre class="line-numbers language-none"><code class="language-none">val arr&#x3D;intArrayOf(1,2,3,4,5)fun printMethod(name:String &#x3D; &quot;admin&quot;,vararg arrs:Int)&#123;    arrs.forEach(::println)&#125;printMethod(arrs&#x3D;*arr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-导出可执行程序"><a class="markdownIt-Anchor" href="#10-导出可执行程序"></a> 10. 导出可执行程序</h4><ul><li>在build.gradle 中增加</li></ul><pre class="line-numbers language-none"><code class="language-none">apply plugin: &#39;application&#39;mainClassName &#x3D; &quot;&quot;&#x2F;&#x2F;程序入口类路径，Kotlin文件名后加 Kt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>gradle 刷新/同步</li><li>gradle 中的distribution 中点击installDist得到可执行的文件</li><li>在项目目录下的build文件夹下的install文件夹下</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;命令行输入：# cd build&#x2F;install&#x2F;[项目名称]# chmod 755 bin&#x2F;[项目名称]# bin&#x2F;[项目名称]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（六）C++中的类型转换与STL标准模板库</title>
      <link href="20181123/c-c/liu-c-zhong-de-lei-xing-zhuan-huan-io-liu-yu-stl-biao-zhun-mo-ban-ku/"/>
      <url>20181123/c-c/liu-c-zhong-de-lei-xing-zhuan-huan-io-liu-yu-stl-biao-zhun-mo-ban-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="c中的类型转换与stl标准模板库"><a class="markdownIt-Anchor" href="#c中的类型转换与stl标准模板库"></a> C++中的类型转换与STL标准模板库</h1><h2 id="一-c类型转换"><a class="markdownIt-Anchor" href="#一-c类型转换"></a> 一、C++类型转换</h2><p><strong>在C++中类型转换包含 static_cast、const_cast、dynamic_cast、reinterpret_cast 四种类型转换。使用原始类型转换，所有转换都是一种写法，可读性不高，有可能有潜在的风险</strong></p><h3 id="1-static_cast"><a class="markdownIt-Anchor" href="#1-static_cast"></a> 1、static_cast</h3><p><strong>该类型转换函数用于不同类型的属性之间的转换</strong></p><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;using namespace std;void* func()&#123;    int i &#x3D; 0;    return &amp;i;&#125;void main()&#123;    &#x2F;&#x2F;自动类型转换    &#x2F;&#x2F;int i &#x3D; 0;    &#x2F;&#x2F;double d &#x3D; i;    &#x2F;&#x2F;或    &#x2F;&#x2F;double d &#x3D; 9.5;    &#x2F;&#x2F;int i &#x3D; d;        &#x2F;&#x2F; int i &#x3D; 8;    &#x2F;&#x2F; double d &#x3D; 9.5;    &#x2F;&#x2F; i &#x3D; static_cast&lt;int&gt;(d);    &#x2F;&#x2F; cout &lt;&lt; &quot;i &#x3D; &quot; &lt;&lt; i &lt;&lt; endl;        int i &#x3D; 9;    int *i_p &#x3D; &amp;i;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>void* 转 char*</p><pre class="line-numbers language-none"><code class="language-none">void* func(int type)&#123;    switch(type)&#123;        case 1:            int i &#x3D; 11;            return &amp;i;        case 2:            int a &#x3D; &#39;X&#39;;            return &amp;a;        default:            return NULL;    &#125;&#125;void main()&#123;   &#x2F;&#x2F;void* 转 char*   &#x2F;&#x2F;char* c_p &#x3D; (char*)func(2);   char* c_p &#x3D; static_cast&lt;char*&gt;(func(2));      &#x2F;&#x2F;C++      func   &#x2F;&#x2F;C&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-const_cast"><a class="markdownIt-Anchor" href="#2-const_cast"></a> 2、const_cast</h3><p><strong>该类型转换函数用于去常量，一般使用在常量属性转为非常量属性时使用</strong></p><pre class="line-numbers language-none"><code class="language-none">void func(char c[])&#123;    &#x2F;&#x2F;可以修改    c[0] &#x3D; &#39;H&#39;;    c[1] &#x3D; &#39;a&#39;;&#125;void func2(const char c[])&#123;    &#x2F;&#x2F;c[0] &#x3D; &#39;H&#39;; &#x2F;&#x2F;不能修改    &#x2F;&#x2F;c[1] &#x3D; &#39;a&#39;;&#x2F;&#x2F;不能修改    &#x2F;&#x2F;通过指针间接赋值    &#x2F;&#x2F;其他人并不知道，这次转型是为了去常量    &#x2F;&#x2F;char* c_p &#x3D; (char*)c;    &#x2F;&#x2F;c_p[1] &#x3D; &#39;a&#39;;    &#x2F;&#x2F;cout &lt;&lt; c &lt;&lt; endl;        &#x2F;&#x2F;C++ 去常量，可读性高    char* c_p &#x3D; const_cast&lt;char*&gt;(c);    c_p[1] &#x3D; &#39;y&#39;;    cout &lt;&lt; c &lt;&lt; endl;&#125;void main()&#123;    char c[] &#x3D; &quot;hello&quot;;    func2(c);        getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-dynamic_cast"><a class="markdownIt-Anchor" href="#3-dynamic_cast"></a> 3、dynamic_cast</h3><p><strong>该类型转换用于父类对象转换为子类时使用，处理父类转为子类时的不确定性（类型不匹配时转型失败，返回NULL）</strong></p><pre class="line-numbers language-none"><code class="language-none">class Person&#123;public:    virtual void print()&#123;        cout &lt;&lt; &quot;人&quot; &lt;&lt;endl;    &#125;    &#125;;class Man : public Person&#123;public:    void print()&#123;        cout &lt;&lt; &quot;男人&quot; &lt;&lt;endl;    &#125;    void smoking()&#123;        cout &lt;&lt; &quot;吸烟&quot; &lt;&lt;endl;    &#125;&#125;;class Woman : public Person&#123;public:    void print()&#123;        cout &lt;&lt; &quot;女人&quot; &lt;&lt;endl;    &#125;    void makeup()&#123;        cout &lt;&lt; &quot;化妆&quot; &lt;&lt;endl;    &#125;&#125;;void func(Person* obj)&#123;    obj-&gt;print();    &#x2F;&#x2F;调用子类的特有函数，需要转为实际类型    &#x2F;&#x2F;当传入Woman对象时，转型为Man，转型失败，但是编译器并为察觉    &#x2F;&#x2F;Man* man &#x3D; (Man*)obj;    &#x2F;&#x2F;man-&gt;print();          &#x2F;&#x2F;转型失败，返回NULL     &#x2F;&#x2F;Man* man &#x3D; dynamic_cast&lt;Man*&gt;(obj);    &#x2F;&#x2F;man-&gt;print();    Man* man &#x3D; dynamic_cast&lt;Man*&gt;(obj);    if(man!&#x3D;NULL)&#123;        man-&gt;smoking();    &#125;        Woman* woman &#x3D; dynamic_cast&lt;Woman*&gt;(obj);    if(woman!&#x3D;NULL)&#123;        woman-&gt;makeup();    &#125;        &#125;void main()&#123;    Woman w1;    &#x2F;&#x2F;父类类型的指针指向子类对象    Person* p &#x3D; &amp;w1;    func(p);        getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-reinterpret_cast"><a class="markdownIt-Anchor" href="#4-reinterpret_cast"></a> 4、reinterpret_cast</h3><p><strong>该类型转换用于函数指针之间的转型，在使用函数指针转型时使用</strong></p><pre class="line-numbers language-none"><code class="language-none">void func1()&#123;    &#125;char* func2()&#123;    return &quot;abc&quot;;&#125;typedef void(*f_p)();void main()&#123;    f_p f_array[6];    f_array[0] &#x3D; func1;    &#x2F;&#x2F;C 方式    f_array[1] &#x3D; (f_p)func2;    f_array[1] &#x3D; reinterpret_cast&lt;f_p&gt;func2;        getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-io-流"><a class="markdownIt-Anchor" href="#二-io-流"></a> 二、IO 流</h2><p><strong>在 C++ 中，通过<fstream> 头文件中的 ifstream 读取文件，ofstream 写入文件，完成 IO 流操作</strong></p><h3 id="1-文本文件操作"><a class="markdownIt-Anchor" href="#1-文本文件操作"></a> 1、文本文件操作</h3><p><strong>对于文本文件，可进行使用 ifstream 中的 get(ch) 读取一个字符；使用 fout &lt;&lt; 写入一个字符串</strong></p><pre class="line-numbers language-none"><code class="language-none">#include &lt;fstream&gt;void main()&#123;    char fname[] &#x3D; &quot;D:&#x2F;&#x2F;dest.text&quot;;    &#x2F;&#x2F;输出流    ofstream fout(fname);    &#x2F;&#x2F;创建失败    if(fout.bad())&#123;        return -1;    &#125;    fout &lt;&lt; &quot;Jack&quot; &lt;&lt; endl;    fout &lt;&lt; &quot;Rose&quot; &lt;&lt; endl;    fout.close();        &#x2F;&#x2F;读取    ifstream fin(fname);    if(fin.bad())&#123;        return -2;    &#125;    char ch;    while(fin.get(ch))&#123;        cout &lt;&lt; ch;    &#125;    fin.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-二进制文件操作"><a class="markdownIt-Anchor" href="#2-二进制文件操作"></a> 2、二进制文件操作</h3><p><strong>对于二进制文件，可进行使用 ifstream中的read(buff,1024) 读取二进制文件，通过 ofstream中的write(buff,1024) 写入到对应文件中</strong></p><pre class="line-numbers language-none"><code class="language-none">#include &lt;fstream&gt;void main()&#123;    char src[] &#x3D; &quot;D:&#x2F;&#x2F;xueshan.jpg&quot;;    char src_copy[] &#x3D; &quot;D:&#x2F;&#x2F;xueshan_copy.jpg&quot;;     &#x2F;&#x2F;读取    ifstream fin(src,ios::binary);        &#x2F;&#x2F;输出流    ofstream fout(src_copy,,ios::binary);    &#x2F;&#x2F;创建失败    if(fin.bad()||fout.bad())&#123;        return -1;    &#125;    while(!fin.eof())&#123;        char buff[1024] &#x3D; &#123;0&#125;;        fin.read(buff,1024);        &#x2F;&#x2F;写入        fout.write(buff, 1024);    &#125;    &#x2F;&#x2F;关闭    fin.close();    fout.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-对象持久化"><a class="markdownIt-Anchor" href="#3-对象持久化"></a> 3、对象持久化</h3><pre class="line-numbers language-none"><code class="language-none">class Person&#123;private:    char* name;    int age;public:    Person()&#123;&#125;    Person(char* name,int age)&#123;        this-&gt;name &#x3D; name;        this-&gt;age &#x3D; age;    &#125;        char* getName()&#123;        return this-&gt;name;    &#125;        int getAge()&#123;        return this-&gt;age;    &#125;        void print()&#123;        cout &lt;&lt; this-&gt;name &lt;&lt; &quot;,&quot; &lt;&lt; this-&gt;age &lt;&lt; endl;    &#125;&#125;;void main()&#123;    Person p1(const_cast&lt;char*&gt;(&quot;Jack&quot;),25);    Person p2(const_cast&lt;char*&gt;(&quot;Rose&quot;),22);    &#x2F;&#x2F;输出流    ofstream fout(&quot;D:&#x2F;&#x2F;c_obj.data&quot;,ios::binary);    &#x2F;&#x2F;指针能够读取到正确的数据，读取内存区的长度    fout.write((char*)(&amp;p1), sizeof(Person));    fout.write((char*)(&amp;p2), sizeof(Person));    fout.close();        &#x2F;&#x2F;输入流    ifstream fin(&quot;D:&#x2F;&#x2F;c_obj.data&quot;,ios::binary);    Person tmp;    fin.read((char*)(&amp;tmp), sizeof(Person));    tmp.print();        fin.read((char*)(&amp;tmp), sizeof(Person));    tmp.print();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-stlstandard-template-library标准模板库"><a class="markdownIt-Anchor" href="#三-stlstandard-template-library标准模板库"></a> 三、STL(standard template library)标准模板库</h2><p><strong>在 C++ 中包含很多标准模板库，可以让代码更加简洁</strong></p><h3 id="1-string-模板库"><a class="markdownIt-Anchor" href="#1-string-模板库"></a> 1、string 模板库</h3><p><em><em>使用 string 模板库，在边写代码时更改简洁易用，但是在JNI中 string 需要转为 char</em> ,，在转为jstring返回</em>*</p><h4 id="11-string-初始化"><a class="markdownIt-Anchor" href="#11-string-初始化"></a> 1.1 string 初始化</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;string&gt;void main()&#123;    string s1 &#x3D; &quot;Hello &quot;;    string s2(&quot; every day&quot;);    string s3 &#x3D; s1 + s2;    cout &lt;&lt; s3 &lt;&lt; endl;        &#x2F;&#x2F;string 转 c 字符串,在JNI中要转为C的str 然后再转为jstring返回    const char* c_str &#x3D; s1.c_str();    cout &lt;&lt; c_str &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-string-遍历"><a class="markdownIt-Anchor" href="#12-string-遍历"></a> 1.2 string 遍历</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;string&gt;&#x2F;&#x2F;string遍历void main()&#123;string s1 &#x3D; &quot;craig david&quot;;&#x2F;&#x2F; ^&#x2F;&#x2F;1 数组方式for (int i &#x3D; 0; i &lt; s1.length(); i++)&#123;cout &lt;&lt; s1[i] &lt;&lt; endl;&#125;&#x2F;&#x2F;2 迭代器指针for (string::iterator it &#x3D; s1.begin(); it !&#x3D; s1.end(); it++)&#123;cout &lt;&lt; *it &lt;&lt; &quot; &quot;;&#125;cout &lt;&lt; endl;&#x2F;&#x2F;3 at函数(charAt)&#x2F;&#x2F; 可能会抛出异常try&#123;for (int i &#x3D; 0; i &lt; s1.length() + 3; i++)&#123;cout &lt;&lt; s1.at(i) &lt;&lt; &quot; &quot;;&#125;&#125;catch (...)&#123;cout &lt;&lt; &quot;异常&quot; &lt;&lt; endl;&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="13-string-字符串查找替换"><a class="markdownIt-Anchor" href="#13-string-字符串查找替换"></a> 1.3 string 字符串查找替换</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;string&gt;#include &lt;iostream&gt;using namespace std;&#x2F;&#x2F;字符串查找替换void main()&#123;string s1 &#x3D; &quot;apple google apple iphone&quot;;&#x2F;&#x2F;从0开始查找&quot;google&quot;的位置int idx &#x3D; s1.find(&quot;google&quot;, 0);cout &lt;&lt; idx &lt;&lt; endl;&#x2F;&#x2F;统计apple出现的次数int idx_app &#x3D; s1.find(&quot;apple&quot;,0);&#x2F;&#x2F;npos大于任何有效下标的值int num &#x3D; 0;while (idx_app !&#x3D; string::npos)&#123;num++;cout &lt;&lt; &quot;找到的索引:&quot; &lt;&lt; idx_app &lt;&lt; endl;idx_app+&#x3D;5;idx_app &#x3D; s1.find(&quot;apple&quot;, idx_app);&#125;cout &lt;&lt; num &lt;&lt; endl;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14-string-删除截取和插入"><a class="markdownIt-Anchor" href="#14-string-删除截取和插入"></a> 1.4 string 删除（截取）和插入</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;string&gt;#include &lt;iostream&gt;using namespace std;&#x2F;&#x2F;删除（截取）和插入void main()&#123;string s1 &#x3D; &quot;apple google apple iphone&quot;;&#x2F;&#x2F;删除a，找到a所在的指针string::iterator it &#x3D; find(s1.begin(),s1.end(),&#39;g&#39;);&#x2F;&#x2F;只能删除一个字符s1.erase(it);&#x2F;&#x2F;开头末尾插入字符串s1.insert(0, &quot;macos&quot;);s1.insert(s1.length(), &quot; facebook&quot;);cout &lt;&lt; s1 &lt;&lt; endl;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="15-string-大小写转换"><a class="markdownIt-Anchor" href="#15-string-大小写转换"></a> 1.5 string 大小写转换</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;string&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt; &#x2F;&#x2F;算法using namespace std;&#x2F;&#x2F;java StringBuffer才可变&#x2F;&#x2F;String 不可变&#x2F;&#x2F;大小写转换void main()&#123;string s1 &#x3D; &quot;JASON&quot;;&#x2F;&#x2F;原始字符串的起始地址，原始字符串的结束地址, 目标字符串的起始地址, 函数名称transform(s1.begin(), s1.end()-1,s1.begin(), tolower);cout &lt;&lt; s1 &lt;&lt; endl;transform(s1.begin(), s1.end() - 1, s1.begin(), toupper);cout &lt;&lt; s1 &lt;&lt; endl;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-容器-vector-模板库"><a class="markdownIt-Anchor" href="#2-容器-vector-模板库"></a> 2、容器 vector 模板库</h3><p><strong>使用 vector 模板库，不需要使用动态内存分配，就可以使用动态数组</strong></p><h4 id="21-vector-初始化与遍历"><a class="markdownIt-Anchor" href="#21-vector-初始化与遍历"></a> 2.1 vector 初始化与遍历</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;vector&gt;void printVector(vector&lt;int&gt; &amp;v)&#123;&#x2F;&#x2F;通过数组的方式遍历for (int i &#x3D; 0; i &lt; v.size(); i++)&#123;cout &lt;&lt; v[i] &lt;&lt; endl;&#125;&#125;void main()&#123;    &#x2F;&#x2F;动态数组    vector&lt;int&gt; v;    v.push_back(12);    v.push_back(118);    v.push_back(1);    v.push_back(52);    v.push_back(20);    &#x2F;&#x2F;遍历    for(int i &#x3D; 0; i&lt;v.size(); i++)&#123;        cout &lt;&lt; v[i] &lt;&lt; endl;    &#125;        &#x2F;&#x2F;部分复制vector&lt;int&gt; v3(v1.begin(),v1.begin()+2); for(int i &#x3D; 0; i&lt;v3.size(); i++)&#123;        cout &lt;&lt; v3[i] &lt;&lt; endl;    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="22-vector-添加和删除"><a class="markdownIt-Anchor" href="#22-vector-添加和删除"></a> 2.2 vector 添加和删除</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;添加 删除void main()&#123;&#x2F;&#x2F;添加到结尾vector&lt;int&gt; v1;v1.push_back(20);v1.push_back(40);v1.push_back(15);v1.push_back(7);&#x2F;&#x2F;访问头部v1.front() &#x3D; 11;&#x2F;&#x2F;访问尾部v1.back() &#x3D; 90;&#x2F;&#x2F;删除结尾的元素&#x2F;&#x2F;v1.pop_back();while (v1.size() &gt; 0)&#123;cout &lt;&lt; &quot;末尾的元素：&quot; &lt;&lt; v1.back() &lt;&lt; endl;v1.pop_back();&#125;printVector(v1);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="23-vector-数组方式"><a class="markdownIt-Anchor" href="#23-vector-数组方式"></a> 2.3 vector 数组方式</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;数组的方式void main()&#123;vector&lt;int&gt; v1;v1.push_back(20);v1.push_back(40);v1.push_back(15);v1.push_back(7);v1[2] &#x3D; v1[2] +10;&#x2F;&#x2F;容器等价于动态数组vector&lt;int&gt; v2(10);for (int i &#x3D; 0; i &lt; v2.size(); i++)&#123;v2[i] &#x3D; i + 1;&#125;printVector(v2);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="24-vector-迭代器遍历"><a class="markdownIt-Anchor" href="#24-vector-迭代器遍历"></a> 2.4 vector 迭代器遍历</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;迭代器遍历&#x2F;&#x2F;迭代器的种类（正向，反向迭代器）void main()&#123;vector&lt;int&gt; v1;v1.push_back(20);v1.push_back(40);v1.push_back(15);v1.push_back(7);&#x2F;&#x2F;正向for (vector&lt;int&gt;::iterator it &#x3D; v1.begin(); it &lt; v1.end(); it++)&#123;cout &lt;&lt; *it &lt;&lt; endl;&#125;cout &lt;&lt; &quot;-----------------&quot; &lt;&lt; endl;&#x2F;&#x2F;反向迭代for (vector&lt;int&gt;::reverse_iterator it &#x3D; v1.rbegin(); it &lt; v1.rend(); it++)&#123;cout &lt;&lt; *it &lt;&lt; endl;&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="25-vector-插入和删除"><a class="markdownIt-Anchor" href="#25-vector-插入和删除"></a> 2.5 vector 插入和删除</h4><pre class="line-numbers language-none"><code class="language-none">void main()&#123;vector&lt;int&gt; v1(10);for (int i &#x3D; 0; i &lt; v1.size(); i++)&#123;v1[i] &#x3D; i + 1;&#125;&#x2F;&#x2F;删除指定位置vector&lt;int&gt;::iterator it &#x3D; v1.begin();it +&#x3D; 3;v1.erase(it);&#x2F;&#x2F;distance(v1.begin(), it);&#x2F;&#x2F;删除区间v1.erase(v1.begin(), v1.begin() + 3);for (vector&lt;int&gt;::iterator it &#x3D; v1.begin(); it &lt; v1.end(); it++)&#123;if (*it &#x3D;&#x3D; 5)&#123;printf(&quot;%x\n&quot;, it);vector&lt;int&gt;::iterator tmp &#x3D; v1.erase(it); &#x2F;&#x2F;注意以后开发中编译器版本问题printf(&quot;%x,%x\n&quot;,it,tmp);&#125;&#125;&#x2F;&#x2F;插入v1.insert(v1.begin() + 2, 100);v1.insert(v1.end() - 1, 200);printVector(v1);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-队列-deque-模板库"><a class="markdownIt-Anchor" href="#3-队列-deque-模板库"></a> 3、队列 deque 模板库</h3><h4 id="31-双向队列"><a class="markdownIt-Anchor" href="#31-双向队列"></a> 3.1 双向队列</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;双向队列#include &lt;deque&gt;void printDeque(deque&lt;int&gt;&amp; q)&#123;for (int i &#x3D; 0; i &lt; q.size(); i++)&#123;cout &lt;&lt; q[i] &lt;&lt; endl;&#125;&#125;void main()&#123;deque&lt;int&gt; d1;&#x2F;&#x2F;添加到尾部d1.push_back(2);d1.push_back(10);&#x2F;&#x2F;添加到头部d1.push_front(-90);d1.push_front(-30);&#x2F;&#x2F;printDeque(d1);&#x2F;&#x2F;cout &lt;&lt; d1.front() &lt;&lt; endl;&#x2F;&#x2F;cout &lt;&lt; d1.back() &lt;&lt; endl;&#x2F;&#x2F;两个方向弹出&#x2F;&#x2F;d1.pop_back();&#x2F;&#x2F;d1.pop_front();printDeque(d1);&#x2F;&#x2F;查找第一个-90元素索引位置，无需遍历deque&lt;int&gt;::iterator it &#x3D; find(d1.begin(), d1.end(), -90);if (it !&#x3D; d1.end())&#123;int idx &#x3D; distance(d1.begin(), it);cout &lt;&lt; &quot;索引位置为：&quot; &lt;&lt; idx &lt;&lt; endl;&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="32-没有迭代器的队列"><a class="markdownIt-Anchor" href="#32-没有迭代器的队列"></a> 3.2 没有迭代器的队列</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;void main()&#123;queue&lt;int&gt; q;q.push(78);q.push(18);q.push(20);q.push(33);&#x2F;&#x2F;q.front();&#x2F;&#x2F;q.back();while (!q.empty())&#123;int tmp &#x3D; q.front();cout &lt;&lt; tmp &lt;&lt; endl;q.pop();&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="33-优先级队列"><a class="markdownIt-Anchor" href="#33-优先级队列"></a> 3.3 优先级队列</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;void main()&#123;&#x2F;&#x2F;默认 最大值优先级priority_queue&lt;int&gt; pq1;pq1.push(12);pq1.push(3);pq1.push(40);pq1.push(15);while (!pq1.empty())&#123;int tmp &#x3D; pq1.top();cout &lt;&lt; tmp &lt;&lt; endl;pq1.pop();&#125;cout &lt;&lt; &quot;----------&quot; &lt;&lt; endl;&#x2F;&#x2F;最小值优先级队列priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq2;pq2.push(12);pq2.push(3);pq2.push(40);pq2.push(15);while (!pq2.empty())&#123;int tmp &#x3D; pq2.top();cout &lt;&lt; tmp &lt;&lt; endl;pq2.pop();&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-stack-栈-模板"><a class="markdownIt-Anchor" href="#4-stack-栈-模板"></a> 4、stack 栈 模板</h3><h4 id="41-stack-栈的初始化"><a class="markdownIt-Anchor" href="#41-stack-栈的初始化"></a> 4.1 stack 栈的初始化</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;stack&gt;using namespace std;void main()&#123;stack&lt;int&gt; s;for (int i &#x3D; 0; i &lt; 10; i++)&#123;s.push(i + 1);&#125;while (!s.empty())&#123;int tmp &#x3D; s.top();cout &lt;&lt; tmp &lt;&lt; endl;s.pop();&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-list-模板"><a class="markdownIt-Anchor" href="#5-list-模板"></a> 5、list 模板</h3><h4 id="51-list-初始化"><a class="markdownIt-Anchor" href="#51-list-初始化"></a> 5.1 list 初始化</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;list&gt;using namespace std;void printList(list&lt;int&gt;&amp; lst)&#123;&#x2F;&#x2F;迭代器&#x2F;&#x2F;没有重载“&lt;”运算符for (list&lt;int&gt;::iterator it &#x3D; lst.begin(); it !&#x3D; lst.end(); it++)&#123;cout &lt;&lt; *it &lt;&lt; endl;&#125;&#125;&#x2F;&#x2F;基本操作&#x2F;*void main()&#123;list&lt;int&gt; lst;for (int i &#x3D; 0; i &lt; 10; i++)&#123;&#x2F;&#x2F;尾部插入元素lst.push_back(i);&#125;&#x2F;&#x2F;头部插入元素lst.push_front(80);lst.push_front(90);list&lt;int&gt;::iterator it &#x3D; lst.begin();it++;cout &lt;&lt; *it &lt;&lt; endl;&#x2F;&#x2F;it &#x3D; it + 3; 注意：不支持随机访问printList(lst);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="52-list-插入"><a class="markdownIt-Anchor" href="#52-list-插入"></a> 5.2 list 插入</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;list&gt;using namespace std;void main()&#123;list&lt;int&gt; lst;for (int i &#x3D; 0; i &lt; 10; i++)&#123;&#x2F;&#x2F;尾部插入元素lst.push_back(i);&#125;list&lt;int&gt;::iterator it &#x3D; lst.begin();it++;lst.insert(it, 100);printList(lst);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="53-list-初始化"><a class="markdownIt-Anchor" href="#53-list-初始化"></a> 5.3 list 初始化</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;list&gt;using namespace std;void main()&#123;list&lt;int&gt; lst;for (int i &#x3D; 0; i &lt; 10; i++)&#123;&#x2F;&#x2F;尾部插入元素lst.push_back(i);&#125;list&lt;int&gt;::iterator it &#x3D; lst.begin();&#x2F;&#x2F;删除it++;&#x2F;&#x2F;删除第二个元素&#x2F;&#x2F;lst.erase(it);&#x2F;&#x2F;删除区间（已经被删除了元素不能再删除）list&lt;int&gt;::iterator it_begin &#x3D; lst.begin();list&lt;int&gt;::iterator it_end &#x3D; lst.begin();it_end++;it_end++;it_end++;lst.erase(it_begin, it_end);&#x2F;&#x2F;直接根据内容删除元素lst.remove(5);printList(lst);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-set-模板"><a class="markdownIt-Anchor" href="#6-set-模板"></a> 6、set 模板</h3><h4 id="61-set-初始化"><a class="markdownIt-Anchor" href="#61-set-初始化"></a> 6.1 set 初始化</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;&#x2F;&#x2F;set 元素唯一 默认从小到大void printSet(set&lt;int&gt; &amp;s)&#123;for (set&lt;int&gt;::iterator it &#x3D; s.begin(); it !&#x3D; s.end(); it++)&#123;cout &lt;&lt; *it &lt;&lt; endl;&#125;&#125;void main()&#123;set&lt;int&gt; s;&#x2F;&#x2F;添加元素for (int i &#x3D; 0; i &lt; 10; i++)&#123;s.insert(i+1);&#125;s.insert(20);s.insert(15);s.insert(15);&#x2F;&#x2F;删除set&lt;int&gt;::iterator it &#x3D; s.begin();it++;s.erase(it);printSet(s);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="62-set-元素按照从大到小排列"><a class="markdownIt-Anchor" href="#62-set-元素按照从大到小排列"></a> 6.2 set 元素按照从大到小排列</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;set&gt;#include &lt;functional&gt;using namespace std;void main()&#123;&#x2F;&#x2F;同Java中：Map&lt;String,List&lt;String&gt;&gt; set&lt;int,greater&lt;int&gt;&gt; s;s.insert(10);s.insert(5);s.insert(20);s.insert(99);for (set&lt;int,greater&lt;int&gt;&gt;::iterator it &#x3D; s.begin(); it !&#x3D; s.end(); it++)&#123;cout &lt;&lt; *it &lt;&lt; endl;&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="63-set-自定义排序规则"><a class="markdownIt-Anchor" href="#63-set-自定义排序规则"></a> 6.3 set 自定义排序规则</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;set&gt;#include &lt;functional&gt;using namespace std;&#x2F;&#x2F;元素类型为Teacher对象，按照年龄排序class Teacher&#123;public:Teacher(char* name, int age)&#123;this-&gt;name &#x3D; name;this-&gt;age &#x3D; age;&#125;void print()&#123;cout &lt;&lt; name &lt;&lt; &quot;,&quot; &lt;&lt; age &lt;&lt; endl;&#125;public:char* name;int age;&#125;;&#x2F;&#x2F;自定义排序规则&#x2F;&#x2F;仿函数struct MyAgeSorter&#123;bool operator()(const Teacher &amp;left, const Teacher &amp;right)&#123;return left.age &lt; right.age;&#125;&#125;;void main()&#123;set&lt;Teacher, MyAgeSorter&gt; s;s.insert(Teacher(const_cast&lt;char*&gt;(&quot;jack&quot;),18));s.insert(Teacher(const_cast&lt;char*&gt;(&quot;rose&quot;), 20));s.insert(Teacher(const_cast&lt;char*&gt;(&quot;jason&quot;), 22));s.insert(Teacher(const_cast&lt;char*&gt;(&quot;alan&quot;), 5));&#x2F;&#x2F;s.insert(Teacher(&quot;jimy&quot;, 5)); &#x2F;&#x2F;不会插入for (set&lt;Teacher&gt;::iterator it &#x3D; s.begin(); it !&#x3D; s.end(); it++)&#123;cout &lt;&lt; (*it).name &lt;&lt; &quot;,&quot; &lt;&lt; (*it).age &lt;&lt; endl;&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="63-set-查找"><a class="markdownIt-Anchor" href="#63-set-查找"></a> 6.3 set 查找</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;void main()&#123;set&lt;int&gt; s;&#x2F;&#x2F;添加元素for (int i &#x3D; 0; i &lt; 10; i++)&#123;s.insert(i + 1);&#125;&#x2F;&#x2F;printSet(s);&#x2F;&#x2F;等于4的元素指针set&lt;int&gt;::iterator s_4 &#x3D; s.lower_bound(4); &#x2F;&#x2F;cout &lt;&lt; *s_4 &lt;&lt; endl;&#x2F;&#x2F;大于4的元素指针set&lt;int&gt;::iterator s_5 &#x3D; s.upper_bound(4);&#x2F;&#x2F;cout &lt;&lt; *s_5 &lt;&lt; endl;&#x2F;&#x2F;一次性获取等于4的元素指针，和大于4的元素指针\&#x2F;&#x2F;BasicNameValuePairpair&lt;set&lt;int&gt;::iterator, set&lt;int&gt;::iterator&gt; p &#x3D; s.equal_range(4);cout &lt;&lt; *p.first &lt;&lt; endl;cout &lt;&lt; *p.second &lt;&lt; endl;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="64-multiset-允许重复的元素"><a class="markdownIt-Anchor" href="#64-multiset-允许重复的元素"></a> 6.4 multiset 允许重复的元素</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;void main()&#123;multiset&lt;int&gt; s;s.insert(2);s.insert(8);s.insert(2);s.insert(8);for (multiset&lt;int&gt;::iterator it &#x3D; s.begin(); it !&#x3D; s.end(); it++)&#123;cout &lt;&lt;  *it &lt;&lt; endl;&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-map-模板"><a class="markdownIt-Anchor" href="#7-map-模板"></a> 7、map 模板</h3><h4 id="71-map-初始化"><a class="markdownIt-Anchor" href="#71-map-初始化"></a> 7.1 map 初始化</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;using namespace std;void main()&#123;&#x2F;&#x2F;key -&gt; value&#x2F;&#x2F;1.map&lt;int, string&gt; map1;map1.insert(pair&lt;int, string&gt;(1, &quot;jack&quot;));map1.insert(pair&lt;int, string&gt;(2, &quot;rose&quot;));&#x2F;&#x2F;2map1.insert(make_pair(3, &quot;jason&quot;));&#x2F;&#x2F;3map1.insert(map&lt;int, string&gt;::value_type(4, &quot;alan&quot;));&#x2F;&#x2F;4map1[5] &#x3D; &quot;jimmy&quot;; &#x2F;&#x2F;map[&quot;NO1&quot;] &#x3D; 90;&#x2F;&#x2F;前三种方式，如果key已经存在，重复添加会报错&#x2F;&#x2F;第四种方式，如果key已经存在，重复添加会覆盖&#x2F;&#x2F;遍历输出for (map&lt;int, string&gt;::iterator it &#x3D; map1.begin(); it !&#x3D; map1.end(); it++)&#123;cout &lt;&lt; it-&gt;first &lt;&lt; &quot;,&quot; &lt;&lt; it-&gt;second &lt;&lt; endl;&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="72-map-删除元素的方式"><a class="markdownIt-Anchor" href="#72-map-删除元素的方式"></a> 7.2 map 删除元素的方式</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;using namespace std;void printMap(map&lt;int, string&gt; &amp;map1)&#123;for (map&lt;int, string&gt;::iterator it &#x3D; map1.begin(); it !&#x3D; map1.end(); it++)&#123;cout &lt;&lt; it-&gt;first &lt;&lt; &quot;,&quot; &lt;&lt; it-&gt;second &lt;&lt; endl;&#125;&#125;void main()&#123;map&lt;int, string&gt; map1;map1.insert(pair&lt;int, string&gt;(1, &quot;jack&quot;));map1.insert(pair&lt;int, string&gt;(2, &quot;rose&quot;));map1.insert(pair&lt;int, string&gt;(3, &quot;jason&quot;));map&lt;int, string&gt;::iterator it &#x3D; map1.begin();it++;map1.erase(it);printMap(map1);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="73-map-添加元素的结果"><a class="markdownIt-Anchor" href="#73-map-添加元素的结果"></a> 7.3 map 添加元素的结果</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;using namespace std;void main()&#123;map&lt;int, string&gt; map1;map1.insert(pair&lt;int, string&gt;(1, &quot;jack&quot;));map1.insert(pair&lt;int, string&gt;(2, &quot;rose&quot;));map1.insert(pair&lt;int, string&gt;(3, &quot;jason&quot;));&#x2F;&#x2F;获取添加的结果（first元素指针，second 是否成功）pair&lt;map&lt;int, string&gt;::iterator, bool&gt; res &#x3D; map1.insert(pair&lt;int, string&gt;(3, &quot;alan&quot;));if (res.second)&#123;cout &lt;&lt; &quot;添加成功&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;添加失败&quot; &lt;&lt; endl;&#125;printMap(map1);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="73-map-查找"><a class="markdownIt-Anchor" href="#73-map-查找"></a> 7.3 map 查找</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;using namespace std;void main()&#123;map&lt;int, string&gt; map1;map1.insert(pair&lt;int, string&gt;(1, &quot;jack&quot;));map1.insert(pair&lt;int, string&gt;(2, &quot;rose&quot;));map1.insert(pair&lt;int, string&gt;(3, &quot;jason&quot;));printMap(map1);cout &lt;&lt; &quot;---------&quot; &lt;&lt; endl;&#x2F;&#x2F;获取key等于大于5的元素的值pair&lt;map&lt;int, string&gt;::iterator, map&lt;int, string&gt;::iterator&gt; p &#x3D; map1.equal_range(2);if (p.first !&#x3D; map1.end())&#123;&#x2F;&#x2F;等于2的元素key valuecout &lt;&lt; p.first-&gt;first &lt;&lt; p.first-&gt;second &lt;&lt; endl;&#x2F;&#x2F;大于2的元素key valuecout &lt;&lt; p.second-&gt;first &lt;&lt; p.second-&gt;second &lt;&lt; endl;&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="73-multimap"><a class="markdownIt-Anchor" href="#73-multimap"></a> 7.3 multimap</h4><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;using namespace std;&#x2F;&#x2F;一个key对应多个value&#x2F;&#x2F;一个部门多个员工&#x2F;&#x2F;multimapclass Employee&#123;public:Employee(char* name,int age)&#123;this-&gt;name &#x3D; name;this-&gt;age &#x3D; age;&#125;public:char* name;int age;&#125;;void main()&#123;multimap&lt;string, Employee&gt; map1;&#x2F;&#x2F;开发部map1.insert(make_pair(&quot;开发&quot;, Employee(const_cast&lt;char*&gt;(&quot;搁浅&quot;), 20)));map1.insert(make_pair(&quot;开发&quot;, Employee(const_cast&lt;char*&gt;(&quot;彪哥&quot;), 20)));&#x2F;&#x2F;财务map1.insert(make_pair(&quot;财务&quot;, Employee(const_cast&lt;char*&gt;(&quot;小颖&quot;), 16)));map1.insert(make_pair(&quot;财务&quot;, Employee(const_cast&lt;char*&gt;(&quot;rose&quot;), 20)));&#x2F;&#x2F;销售map1.insert(make_pair(&quot;销售&quot;, Employee(const_cast&lt;char*&gt;(&quot;阿呆&quot;), 30)));map1.insert(make_pair(&quot;销售&quot;, Employee(const_cast&lt;char*&gt;(&quot;呵呵&quot;), 30)));&#x2F;&#x2F;遍历输出for (multimap&lt;string, Employee&gt;::iterator it &#x3D; map1.begin(); it !&#x3D; map1.end(); it++)&#123;cout &lt;&lt; it-&gt;first &lt;&lt; &quot;,&quot; &lt;&lt; it-&gt;second.name  &lt;&lt; &quot;,&quot; &lt;&lt; it-&gt;second.age &lt;&lt; endl;&#125;cout &lt;&lt; &quot;----------------&quot; &lt;&lt; endl;&#x2F;&#x2F;只获取“财务”部的员工&#x2F;&#x2F;获取“财务部”员工的个数，key对应的value的个数int num &#x3D; map1.count(&quot;财务&quot;);multimap&lt;string, Employee&gt;::iterator it &#x3D; map1.find(&quot;财务&quot;);int c &#x3D; 0; &#x2F;&#x2F;控制循环的次数while (it !&#x3D; map1.end() &amp;&amp; c &lt; num)&#123;cout &lt;&lt; it-&gt;first &lt;&lt; &quot;,&quot; &lt;&lt; it-&gt;second.name &lt;&lt; &quot;,&quot; &lt;&lt; it-&gt;second.age &lt;&lt; endl;it++;c++;&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-深拷贝与浅拷贝"><a class="markdownIt-Anchor" href="#8-深拷贝与浅拷贝"></a> 8、深拷贝与浅拷贝</h3><pre class="line-numbers language-none"><code class="language-none">#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;#include &lt;vector&gt;using namespace std;class Employee&#123;public:&#x2F;&#x2F;构造函数Employee(char* name, int age)&#123;this-&gt;name &#x3D; new char[strlen(name) + 1];strcpy(this-&gt;name, name);this-&gt;age &#x3D; age;&#125;&#x2F;&#x2F;析构函数~Employee()&#123;if (this-&gt;name !&#x3D; NULL)&#123;delete[] this-&gt;name;this-&gt;name &#x3D; NULL;this-&gt;age &#x3D; 0;&#125;&#125;&#x2F;&#x2F;拷贝构造函数&#x2F;&#x2F;Employee e &#x3D; Employee(const Employee &amp;obj)&#123;this-&gt;name &#x3D; new char[strlen(obj.name) + 1];strcpy(this-&gt;name, obj.name);this-&gt;age &#x3D; obj.age;&#125;&#x2F;&#x2F;重载&#x3D;&#x2F;&#x2F;e1 &#x3D; e2;Employee&amp; operator&#x3D;(const Employee &amp;obj)&#123;&#x2F;&#x2F;释放旧的内存if (this-&gt;name !&#x3D; NULL)&#123;delete[] this-&gt;name;this-&gt;name &#x3D; NULL;this-&gt;age &#x3D; 0;&#125;&#x2F;&#x2F;重新分配this-&gt;name &#x3D; new char[strlen(obj.name) + 1];strcpy(this-&gt;name, obj.name);this-&gt;age &#x3D; obj.age;return *this;&#125;public:char* name;int age;&#125;;void func()&#123;vector&lt;Employee&gt; v1;Employee e1(const_cast&lt;char*&gt;(&quot;jack&quot;), 20);v1.push_back(e1);&#125;void main()&#123;&#x2F;&#x2F;vector&lt;Employee&gt; v1;&#x2F;&#x2F;Employee e1(&quot;jack&quot;,20);&#x2F;&#x2F;将e1拷贝到vector中&#x2F;&#x2F;v1.push_back(e1);func();system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（五）C++中的异常处理与模板类</title>
      <link href="20181103/c-c/wu-c-zhong-de-yi-chang-chu-li-yu-mo-ban-lei/"/>
      <url>20181103/c-c/wu-c-zhong-de-yi-chang-chu-li-yu-mo-ban-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="c中的异常处理与模板类"><a class="markdownIt-Anchor" href="#c中的异常处理与模板类"></a> C++中的异常处理与模板类</h1><h2 id="一-c-中的异常处理"><a class="markdownIt-Anchor" href="#一-c-中的异常处理"></a> 一、C++ 中的异常处理</h2><h3 id="1-异常处理"><a class="markdownIt-Anchor" href="#1-异常处理"></a> 1、异常处理</h3><p><strong>在C++ 中可以抛出任何类型的异常，根据抛出的异常数据类型，进入到相应的 catch块中 ，未知类型可用 … 代替</strong></p><pre class="line-numbers language-none"><code class="language-none">void main() &#123;try &#123;int a &#x3D; 300;if (a &gt; 200) &#123;throw - 1;&#125;&#125;catch (int a) &#123;cout &lt;&lt; a &lt;&lt; endl;&#125;try &#123;int b &#x3D; 0;if (b &#x3D;&#x3D; 0) &#123;throw &quot;不能为0&quot;;&#125;&#125;catch (const char* b) &#123;cout &lt;&lt; b &lt;&lt; endl;&#125;try &#123;int c &#x3D; -1;if (c &lt; 0 ) &#123;throw 0.1;&#125;&#125;catch (...) &#123;cout &lt;&lt; &quot;未知异常&quot; &lt;&lt; endl;&#125;getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-throw-抛出函数外"><a class="markdownIt-Anchor" href="#2-throw-抛出函数外"></a> 2、throw 抛出函数外</h3><pre class="line-numbers language-none"><code class="language-none">float div2(float a, float b) &#123;if (b &#x3D;&#x3D; 0) &#123;throw &quot;除数为零&quot;;&#125;return a &#x2F; b;&#125;void main() &#123;try &#123;float c &#x3D; div2(8, 0);&#125;catch (const char* e) &#123;cout &lt;&lt; e &lt;&lt; endl;&#125;getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-抛出异常对象"><a class="markdownIt-Anchor" href="#3-抛出异常对象"></a> 3、抛出异常对象</h3><p><strong>抛出异常对象可以使用异常对象来捕获异常或者使用异常对象的引用来捕获异常,采用引用方式不会产生副本（可实现拷贝构造函数来验证）；尽量不要抛出异常指针（new 动态内存），需要delete动态内存</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;异常类class MyException &#123;public:MyException() &#123;&#125;&#125;;float div2(float a, float b) &#123;if (b &#x3D;&#x3D; 0) &#123;&#x2F;&#x2F;抛出对象throw MyException();&#x2F;&#x2F;抛出异常指针throw new MyException;&#125;return a &#x2F; b;&#125;void main() &#123;try &#123;float c &#x3D; div2(8, 0);&#125;&#x2F;&#x2F;catch (MyException e) &#123;&#x2F;&#x2F;对象，被拷贝了对象，产生对象副本&#x2F;&#x2F;cout &lt;&lt; &quot;MyException&quot; &lt;&lt; endl;&#x2F;&#x2F;&#125;catch (MyException &amp;e1) &#123;&#x2F;&#x2F;对象的引用，效率更高cout &lt;&lt; &quot;MyException引用&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;catch (MyException* e2) &#123;&#x2F;&#x2F;异常指针，需要delete&#x2F;&#x2F;cout &lt;&lt; &quot;MyException指针&quot; &lt;&lt; endl;&#x2F;&#x2F;delete e2;&#x2F;&#x2F;&#125;getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-声明抛出异常的类型"><a class="markdownIt-Anchor" href="#4-声明抛出异常的类型"></a> 4、声明抛出异常的类型</h3><p><strong>throw 加载函数名称上，表示声明函数会抛出的异常类型</strong></p><pre class="line-numbers language-none"><code class="language-none">float div2(float a, float b) throw(char*,int) &#123;if (b &#x3D;&#x3D; 0) &#123;throw &quot;除数为零&quot;;&#125;return a &#x2F; b;&#125;void main() &#123;try &#123;float c &#x3D; div2(8, 0);&#125;catch (const char* e) &#123;cout &lt;&lt; e &lt;&lt; endl;&#125;getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-标准异常类似于java-nullpointerexception"><a class="markdownIt-Anchor" href="#5-标准异常类似于java-nullpointerexception"></a> 5、标准异常(类似于Java NullPointerException)</h3><p><strong>需要引入 <stdexcept></strong></p><pre class="line-numbers language-none"><code class="language-none">#define &lt;stdexcept&gt; class NullPointerException : public exception&#123;public:    NullPointerException(char* msg) : exception(msg)&#123;            &#125;&#125;;float div2(float a, float b) throw(char*,int) &#123;if(b &#x3D;&#x3D; NULL)&#123;    throw NullPointerException(&quot;is NULL&quot;);&#125; else if (b &gt; 10000) &#123;throw out_of_range(&quot;超出范围&quot;);&#125;else if(b &#x3D;&#x3D; 0)&#123;    throw invalid_argument(&quot;参数不合法&quot;);&#125;return a &#x2F; b;&#125;void main() &#123;try &#123;float c &#x3D; div2(8, 0);&#125;catch (out_of_range e) &#123;cout &lt;&lt; e.what() &lt;&lt; endl;&#125;catch (NullPointerException&amp; e1) &#123;cout &lt;&lt; e1.what() &lt;&lt; endl;&#125;catch (...) &#123;cout &lt;&lt; &quot;未知异常&quot; &lt;&lt; endl;&#125;getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-模板类"><a class="markdownIt-Anchor" href="#二-模板类"></a> 二、模板类</h2><p><strong>属性或者构造函数中存在泛型参数的类叫模板类</strong></p><h3 id="1-模板类示例"><a class="markdownIt-Anchor" href="#1-模板类示例"></a> 1、模板类示例</h3><pre class="line-numbers language-none"><code class="language-none">template&lt;class T&gt;class A&#123;public:    A(T a)&#123;        this-&gt;a &#x3D; a;    &#125;protected:    T a;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-普通类继承模板类"><a class="markdownIt-Anchor" href="#2-普通类继承模板类"></a> 2、普通类继承模板类</h3><pre class="line-numbers language-none"><code class="language-none">class B : public A&lt;int&gt;&#123;public:    B(int a,int b) : A&lt;int&gt;(a)&#123;        this-&gt;b &#x3D; b;    &#125; private:    int b;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-模板类继承模板类"><a class="markdownIt-Anchor" href="#3-模板类继承模板类"></a> 3、模板类继承模板类</h3><pre class="line-numbers language-none"><code class="language-none">template&lt;class T&gt;class C : public A&lt;T&gt;&#123;public:    C(T a,T c) : A&lt;T&gt;(a)&#123;        this-&gt;c &#x3D; c;    &#125; protected:    T c;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-模板类对象实例化"><a class="markdownIt-Anchor" href="#4-模板类对象实例化"></a> 4、模板类对象实例化</h3><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    &#x2F;&#x2F;实例化模板类对象    A&lt;int&gt;(6);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（四）C++中的继承、多态和模板函数</title>
      <link href="20181025/c-c/si-c-zhong-de-ji-cheng-duo-tai-he-mo-ban-han-shu/"/>
      <url>20181025/c-c/si-c-zhong-de-ji-cheng-duo-tai-he-mo-ban-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="c中的继承-多态和模板函数"><a class="markdownIt-Anchor" href="#c中的继承-多态和模板函数"></a> C++中的继承、多态和模板函数</h1><h2 id="一-继承"><a class="markdownIt-Anchor" href="#一-继承"></a> 一、继承</h2><h3 id="1-属性和方法的继承"><a class="markdownIt-Anchor" href="#1-属性和方法的继承"></a> 1、属性和方法的继承</h3><p><strong>继承可以更好的实现代码的重用性</strong></p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdlib.h&gt;#include &lt;iostream&gt;using namespace std;&#x2F;&#x2F;开发者class Developer &#123;protected:char* language;char* ide;int age;public:void say() &#123;cout &lt;&lt; &quot;我是开发者&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;Android开发者class AndroidDeveloper : public Developer &#123;public:AndroidDeveloper() &#123;this-&gt;language &#x3D; (char*)&quot;Android+Kotlin&quot;;this-&gt;ide &#x3D; (char*)&quot;Android Stuio&quot;;&#125;&#x2F;&#x2F;开发Android Applicationvoid createAndroidApp() &#123;cout &lt;&lt; &quot;我使用&quot; &lt;&lt; this-&gt;ide &lt;&lt; &quot;开发了一款Android应用,使用了&quot; &lt;&lt; this-&gt;language &lt;&lt; &quot;语言&quot; &lt;&lt; endl;&#125;private:&#x2F;&#x2F;Android 版本char* androidVersion;&#125;;&#x2F;&#x2F;所有开发者都有开发工作void work(Developer&amp; d) &#123;d.say();&#125;void main() &#123;AndroidDeveloper androidDev;androidDev.say();androidDev.createAndroidApp();    &#x2F;&#x2F;子类对象初始化父类类型的对象Developer d1 &#x3D; androidDev;work(d1);&#x2F;&#x2F;父类类型的指针Developer* d_p &#x3D; &amp;androidDev;d_p-&gt;say();&#x2F;&#x2F;父类类型的引用Developer d2 &#x3D; androidDev;d2.say();getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-通过子类给父类构造方法传参"><a class="markdownIt-Anchor" href="#2-通过子类给父类构造方法传参"></a> 2、通过子类给父类构造方法传参</h3><p><strong>父类的构造函数先调用；子类的析构函数先调用</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;开发者class Developer &#123;protected:char* language;char* ide;int age;public:Developer(char * language, char* ide, int age) &#123;this-&gt;language &#x3D; language;this-&gt;ide &#x3D; ide;this-&gt;age &#x3D; age;cout &lt;&lt; &quot;Developer 构造函数&quot; &lt;&lt; endl;&#125;~Developer() &#123;cout &lt;&lt; &quot;Developer 析构函数&quot; &lt;&lt; endl;&#125;void say() &#123;cout &lt;&lt; &quot;我是开发者&quot; &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;Android开发者class AndroidDeveloper : public Developer &#123;public:AndroidDeveloper(char* language, char* ide, int age, char* androidVersion) : Developer(language, ide, age) &#123;this-&gt;language &#x3D; language;this-&gt;ide &#x3D; ide;this-&gt;age &#x3D; age;cout &lt;&lt; &quot;AndroidDeveloper 构造函数&quot; &lt;&lt; endl;&#125;~AndroidDeveloper()&#123;cout &lt;&lt; &quot;AndroidDeveloper 析构函数&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;开发Android Applicationvoid createAndroidApp() &#123;cout &lt;&lt; &quot;我使用&quot; &lt;&lt; this-&gt;ide &lt;&lt; &quot;开发了一款Android应用,使用了&quot; &lt;&lt; this-&gt;language &lt;&lt; &quot;语言&quot; &lt;&lt; endl;&#125;private:&#x2F;&#x2F;Android 版本char* androidVersion;&#125;;void work(Developer&amp; d) &#123;d.say();&#125;&#x2F;&#x2F;父类的构造函数先调用&#x2F;&#x2F;子类的析构函数先调用void func() &#123;AndroidDeveloper androidDev((char*)&quot;Kotlin&quot;, (char*)&quot;Android Studio&quot;, 5, (char*)&quot;5.0.1&quot;);androidDev.say();androidDev.createAndroidApp();&#125;void main() &#123;func();getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">Developer 构造函数AndroidDeveloper 构造函数我是开发者我使用Android Studio开发了一款Android应用,使用了Kotlin语言AndroidDeveloper 析构函数Developer 析构函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-继承中父类和子类的权限继承关系"><a class="markdownIt-Anchor" href="#3-继承中父类和子类的权限继承关系"></a> 3、继承中父类和子类的权限继承关系</h3><table><thead><tr><th>基类中</th><th>继承方式</th><th>子类中</th></tr></thead><tbody><tr><td>public</td><td>＆ public继承</td><td>=&gt; public</td></tr><tr><td>public</td><td>＆ protected继承</td><td>=&gt; protected</td></tr><tr><td>public</td><td>＆ private继承</td><td>=&gt; private</td></tr><tr><td>protected</td><td>＆ public继承</td><td>=&gt; protected</td></tr><tr><td>protected</td><td>＆ protected继承</td><td>=&gt; protected</td></tr><tr><td>protected</td><td>＆ private继承</td><td>=&gt; private</td></tr><tr><td>private</td><td>＆ public继承</td><td>=&gt; 子类无权访问</td></tr><tr><td>private</td><td>＆ protected继承</td><td>=&gt; 子类无权访问</td></tr><tr><td>private</td><td>＆ private继承</td><td>=&gt; 子类无权访问</td></tr></tbody></table><h3 id="4-继承的二义性"><a class="markdownIt-Anchor" href="#4-继承的二义性"></a> 4、继承的二义性</h3><h4 id="41-继承的二义性定义"><a class="markdownIt-Anchor" href="#41-继承的二义性定义"></a> 4.1 继承的二义性定义</h4><p><strong>在某个类B同时继承另一个类A的两个或多个子类时(A1和A2)，通过类B访问类A的成员时，会出现成员不明确的情况，即继承的二义性</strong></p><pre class="line-numbers language-none"><code class="language-none">class A &#123;public:char* name;&#125;;class A1 : public A &#123;&#125;;class A2 : public A &#123;&#125;;class B : public A1, public A2 &#123;&#125;;void main() &#123;B b;&#x2F;&#x2F;报错，提示B::name不明确&#x2F;&#x2F;b.name &#x3D; (char*)&quot;Jack&quot;;&#x2F;&#x2F;指定父类显式调用b.A1::name &#x3D; (char*)&quot;Rose&quot;;getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="42-继承的二义性定义解决方案"><a class="markdownIt-Anchor" href="#42-继承的二义性定义解决方案"></a> 4.2 继承的二义性定义解决方案</h4><p><strong>再遇到继承的二义性时，可使用虚继承来解决继承的二义性问题</strong><br /><strong>虚继承：不同路径继承来的同名成员只有一份拷贝</strong></p><pre class="line-numbers language-none"><code class="language-none">class A &#123;public:char* name;&#125;;class A1 : virtual public A &#123;&#125;;class A2 : virtual public A &#123;&#125;;class B : public A1, public A2 &#123;&#125;;void main() &#123;B b;&#x2F;&#x2F;报错，提示B::name不明确&#x2F;&#x2F;b.name &#x3D; (char*)&quot;Jack&quot;;&#x2F;&#x2F;指定父类显式调用b.A1::name &#x3D; (char*)&quot;Rose&quot;;getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-多态"><a class="markdownIt-Anchor" href="#二-多态"></a> 二、多态</h2><ul><li><strong>多态是为了提高程序的扩展性</strong></li><li><strong>动态多态：子类重写父类的函数，程序运行过程中，决定哪一个函数被调用</strong></li><li><strong>静态多态：就是函数重载</strong></li></ul><h3 id="1-虚函数"><a class="markdownIt-Anchor" href="#1-虚函数"></a> 1、虚函数</h3><p><strong>virtual 关键字修饰的函数叫虚函数，用来实现多态</strong></p><p>例如：</p><p>Plane.h</p><pre class="line-numbers language-none"><code class="language-none">#pragma onceclass Plane &#123;public:virtual void fly();virtual void land();&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Plane.cpp</p><pre class="line-numbers language-none"><code class="language-none">#include &quot;Plane.h&quot;#include &lt;stdlib.h&gt;#include &lt;iostream&gt;using namespace std;void Plane::fly() &#123;cout &lt;&lt; &quot;飞机起飞&quot; &lt;&lt; endl;&#125;void Plane::land() &#123;cout &lt;&lt; &quot;飞机降落&quot; &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Helicopter.h</p><pre class="line-numbers language-none"><code class="language-none">#pragma once#include &quot;Plane.h&quot;class Helicopter : public Plane &#123;public:virtual void fly();virtual void land();&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Helicopter.cpp</p><pre class="line-numbers language-none"><code class="language-none">#include &quot;Helicopter.h&quot;#include &lt;stdlib.h&gt;#include &lt;iostream&gt;using namespace std;void Helicopter::fly() &#123;cout &lt;&lt; &quot;直升飞机在原地起飞&quot; &lt;&lt; endl;&#125;void Helicopter::land() &#123;cout &lt;&lt; &quot;直升飞机降落在屋顶&quot; &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Test.cpp</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdlib.h&gt;#include &lt;iostream&gt;#include &quot;Plane.h&quot;#include &quot;Helicopter.h&quot;using namespace std;&#x2F;&#x2F;业务函数void runPlane(Plane &amp;p) &#123;p.fly();p.land();&#125;void main() &#123;Plane p;runPlane(p);Helicopter h;&#x2F;&#x2F;在 Plane.h 和 Helicopter.h 中的函数上不使用 virtual 修饰时，打印“飞机起飞”和“飞机降落”&#x2F;&#x2F;使用 virtual 修饰时，打印“直升飞机在原地起飞”和“直升飞机降落在屋顶”，实现多态runPlane(h);getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-发生动态多态的条件"><a class="markdownIt-Anchor" href="#2-发生动态多态的条件"></a> 2、发生动态多态的条件</h3><ul><li>使用继承</li><li>父类的引用或指针指向子类的对象</li><li>函数的重写</li></ul><h3 id="3-纯虚函数抽象类"><a class="markdownIt-Anchor" href="#3-纯虚函数抽象类"></a> 3、纯虚函数（抽象类）</h3><ul><li><strong>当一个类具有一个纯虚函数时，这个类就是抽象类</strong></li><li><strong>抽象类不能被实例化</strong></li><li><strong>子类继承抽象类，必须要实现纯虚函数，如果没有重新，子类也是抽象类</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;形状class Shape &#123;public:virtual void sayArea() &#x3D; 0;&#125;;&#x2F;&#x2F;圆class Circle : public Shape &#123;private:int r;public:Circle(int r) &#123;this-&gt;r &#x3D; r;&#125;void sayArea() &#123;cout &lt;&lt; &quot;圆的面积：&quot; &lt;&lt; 3.14 * r * r &lt;&lt; endl;&#125;&#125;;void main() &#123;Circle c(5);c.sayArea();getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-接口"><a class="markdownIt-Anchor" href="#4-接口"></a> 4、接口</h3><p><strong>接口只是逻辑上的划分，语法上跟抽象类的写法没有区别</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;可以看作一个接口class Drawable&#123;    virtual void draw() &#x3D; 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-抽象类的作用"><a class="markdownIt-Anchor" href="#5-抽象类的作用"></a> 5、抽象类的作用</h3><p><strong>为了继承约束，子类必须按照约束实现</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;可以看作一个接口class Drawable&#123;    virtual void draw() &#x3D; 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-模板函数泛型"><a class="markdownIt-Anchor" href="#二-模板函数泛型"></a> 二、模板函数（泛型）</h2><p><strong>函数模板类似于泛型，用于在业务相同，参数类型不同时进行声明，在使用过程中，根据实际类型进行推导</strong></p><pre class="line-numbers language-none"><code class="language-none">template &lt;typename T,typename Z&gt;&#x2F;&#x2F;交换两个变量的值void swap(T&amp; a, Z&amp; b)&#123;    T tmp &#x3D; 0;    tmp &#x3D; a;    a &#x3D; b;    b &#x3D; tmp;&#125;void main()&#123;    int a &#x3D; 10;    int b &#x3D; 25;    swap(a,b);    cout &lt;&lt; a &lt;&lt; &quot;,&quot; &lt;&lt; b &lt;&lt; endl;        char* x &#x3D; (char*)&quot;abc&quot;;    char* y &#x3D; (char*)&quot;def&quot;;    swap(x,y);    cout &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; endl;        getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（三）C++中的静态成员与this指针</title>
      <link href="20181020/c-c/san-c-zhong-de-jing-tai-cheng-yuan-this-zhi-zhen-you-yuan-han-shu-yu-yun-suan-fu-chong-zai/"/>
      <url>20181020/c-c/san-c-zhong-de-jing-tai-cheng-yuan-this-zhi-zhen-you-yuan-han-shu-yu-yun-suan-fu-chong-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="c中的静态成员与this指针"><a class="markdownIt-Anchor" href="#c中的静态成员与this指针"></a> C++中的静态成员与this指针</h1><h2 id="一-静态成员"><a class="markdownIt-Anchor" href="#一-静态成员"></a> 一、静态成员</h2><h3 id="1-static-关键字"><a class="markdownIt-Anchor" href="#1-static-关键字"></a> 1、static 关键字</h3><ul><li><strong>静态属性只能在全局范围内进行初始化赋值</strong></li><li><strong>静态方法可以直接通过类名进行访问，也可以通过对象名进行访问</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">class Teacher &#123;private:char* name;public:&#x2F;&#x2F;计数器static int total;public:Teacher(char* name) &#123;this-&gt;name &#x3D; name;cout &lt;&lt; &quot;Teacher有参构造函数&quot; &lt;&lt; endl;&#125;~Teacher() &#123;cout &lt;&lt; &quot;Teacher析构函数&quot; &lt;&lt; endl;&#125;void setName(char* name) &#123;this-&gt;name &#x3D; name;&#125;char* getName() &#123;return this-&gt;name;&#125;&#x2F;&#x2F;计数的静态函数static void count()&#123;    total++;    cout &lt;&lt; &quot;total:&quot; &lt;&lt; total &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;静态属性初始化赋值int Teacher::total &#x3D; 10;void main() &#123;    Teacher::total++;cout &lt;&lt; Teacher::total &lt;&lt; endl;&#x2F;&#x2F;直接通过类名访问Teacher::count();cout &lt;&lt; Teacher::total &lt;&lt; endl;&#x2F;&#x2F;通过对象名访问Teacher t1((char*)&quot;JACK&quot;);t1.count();cout &lt;&lt; Teacher::total &lt;&lt; endl;getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-类的大小"><a class="markdownIt-Anchor" href="#二-类的大小"></a> 二、类的大小</h2><p>C/C++ 内存分区：栈、堆、全局（静态、全局）、常量区（字符串）、程序代码区<br /><strong>普通属性与结构体具有相同的内存布局</strong></p><pre class="line-numbers language-none"><code class="language-none">class A &#123;public:int i;int j;int k;&#125;;class B &#123;public:int i;int j;int k;void myprint() &#123;cout &lt;&lt; &quot;打印&quot; &lt;&lt; endl;&#125;&#125;;void main() &#123;cout &lt;&lt; sizeof(A) &lt;&lt; endl;cout &lt;&lt; sizeof(B) &lt;&lt; endl;getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-this-指针"><a class="markdownIt-Anchor" href="#三-this-指针"></a> 三、this 指针</h2><h3 id="1-this指针"><a class="markdownIt-Anchor" href="#1-this指针"></a> 1、this指针</h3><p><strong>this 是当前对象的指针</strong><br /><strong>因为函数是共享的，所有使用this指针用来标识当前对象</strong></p><pre class="line-numbers language-none"><code class="language-none">class Teacher &#123;private:char* name;int age;public:Teacher(char* name,int age) &#123;this-&gt;name &#x3D; name;this-&gt;age &#x3D; age;cout &lt;&lt; &quot;Teacher有参构造函数&quot; &lt;&lt; endl;&#125;~Teacher() &#123;cout &lt;&lt; &quot;Teacher析构函数&quot; &lt;&lt; endl;&#125;void setName(char* name) &#123;this-&gt;name &#x3D; name;&#125;char* getName() &#123;return this-&gt;name;&#125;void setAge(int age) &#123;this-&gt;age &#x3D; age;&#125;int getAge() &#123;return this-&gt;age;&#125;void myprint() &#123;cout &lt;&lt; this-&gt;getName() &lt;&lt; &quot;,&quot; &lt;&lt; this-&gt;getAge() &lt;&lt; endl;&#125;&#125;;void main() &#123;Teacher t1((char*)&quot;Jack&quot;, 20);Teacher t2((char*)&quot;Rose&quot;, 18);t1.myprint();t2.myprint();getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-常函数const修饰函数"><a class="markdownIt-Anchor" href="#2-常函数const修饰函数"></a> 2、常函数（const修饰函数）</h3><p><strong>常函数，修饰的是this；既不能改变指针的值，也不能改变指针指向的内容</strong><br /><strong>常量对象只能调用常量函数,不能调用非常量函数</strong><br /><strong>常函数当前对象不能被修改，防止数据成员被非法访问</strong></p><pre class="line-numbers language-none"><code class="language-none">class Teacher &#123;private:char* name;int age;public:Teacher(char* name,int age) &#123;this-&gt;name &#x3D; name;this-&gt;age &#x3D; age;cout &lt;&lt; &quot;Teacher有参构造函数&quot; &lt;&lt; endl;&#125;~Teacher() &#123;cout &lt;&lt; &quot;Teacher析构函数&quot; &lt;&lt; endl;&#125;void setName(char* name) &#123;this-&gt;name &#x3D; name;&#125;char* getName() &#123;return this-&gt;name;&#125;void setAge(int age) &#123;this-&gt;age &#x3D; age;&#125;int getAge() &#123;return this-&gt;age;&#125;void myprint() const &#123;    printf(&quot;%#x\n&quot;,this);    &#x2F;&#x2F;不能改变属性的值    &#x2F;&#x2F;this-&gt;name &#x3D; &quot;Jason&quot;;    &#x2F;&#x2F;不能改变this指针的值    &#x2F;&#x2F;this &#x3D; (Teacher*)0x000090;cout &lt;&lt; this-&gt;getName() &lt;&lt; &quot;,&quot; &lt;&lt; this-&gt;getAge() &lt;&lt; endl;&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-友元函数与友元类"><a class="markdownIt-Anchor" href="#四-友元函数与友元类"></a> 四、友元函数与友元类</h2><h3 id="1-友元函数"><a class="markdownIt-Anchor" href="#1-友元函数"></a> 1、友元函数</h3><p><strong>在友元函数中可以访问私有的属性</strong></p><pre class="line-numbers language-none"><code class="language-none">class A &#123;private:int i;public:A(int i) &#123;this-&gt;i &#x3D; i;&#125;void myprint() &#123;cout &lt;&lt; i &lt;&lt; endl;&#125;&#x2F;&#x2F;友元函数friend void modify_i(A*p, int a);&#125;;&#x2F;&#x2F;友元函数的实现,在友元函数中可以访问私有的属性void modify_i(A*p, int a) &#123;p-&gt;i &#x3D; a;&#125;void main() &#123;A* a &#x3D; new A(10);a-&gt;myprint();modify_i(a, 20);a-&gt;myprint();getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-友元类"><a class="markdownIt-Anchor" href="#2-友元类"></a> 2、友元类</h3><p><strong>友元类可以访问引用友元类的类的任何成员</strong></p><pre class="line-numbers language-none"><code class="language-none">class A &#123;&#x2F;&#x2F;友元类friend class B;private:int i;public:A(int i) &#123;this-&gt;i &#x3D; i;&#125;void myprint() &#123;cout &lt;&lt; i &lt;&lt; endl;&#125;&#x2F;&#x2F;友元函数friend void modify_i(A*p, int a);&#125;;&#x2F;&#x2F;友元函数的实现,在友元函数中可以访问私有的属性void modify_i(A*p, int a) &#123;p-&gt;i &#x3D; a;&#125;class B &#123;private:A a;public:B(int a_i):a(a_i) &#123;this-&gt;a &#x3D; a;&#125;&#x2F;&#x2F;B这个友元类可以访问A类的任何成员void accessAny() &#123;a.i &#x3D; 30;&#125;A getA() &#123;return a;&#125;&#125;;void main() &#123;B* b &#x3D; new B(10);A a &#x3D; b-&gt;getA();a.myprint();b-&gt;accessAny();a &#x3D; b-&gt;getA();a.myprint();getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五-运算符重载"><a class="markdownIt-Anchor" href="#五-运算符重载"></a> 五、运算符重载</h2><p><strong>运算符的重载，本质上还是函数的调用</strong></p><h3 id="1-单独进行运算符重载"><a class="markdownIt-Anchor" href="#1-单独进行运算符重载"></a> 1、单独进行运算符重载</h3><pre class="line-numbers language-none"><code class="language-none">class Point &#123;public:int x;int y;public:Point(int x &#x3D; 0,int y &#x3D; 0) &#123;this-&gt;x &#x3D; x;this-&gt;y &#x3D; y;&#125;void myprint() &#123;cout &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;重载+号Point operator+(Point &amp;p1, Point &amp;p2) &#123;Point tmp(p1.x + p2.x, p1.y + p2.y);return tmp;&#125;&#x2F;&#x2F;重载-号Point operator-(Point &amp;p1, Point &amp;p2) &#123;Point tmp(p1.x - p2.x, p1.y - p2.y);return tmp;&#125;void main() &#123;Point p1(10,20);Point p2(20,10);Point p3 &#x3D; p1 + p2;p3.myprint();getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-类成员函数运算符重载"><a class="markdownIt-Anchor" href="#2-类成员函数运算符重载"></a> 2、类成员函数运算符重载</h3><pre class="line-numbers language-none"><code class="language-none">class Point &#123;public:int x;int y;public:Point(int x &#x3D; 0, int y &#x3D; 0) &#123;this-&gt;x &#x3D; x;this-&gt;y &#x3D; y;&#125;void myprint() &#123;cout &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; endl;&#125;&#x2F;&#x2F;成员函数运算符重载+号Point operator+(Point &amp;p2) &#123;Point tmp(this-&gt;x + p2.x, this-&gt;y + p2.y);return tmp;&#125;&#x2F;&#x2F;成员函数运算符重载-号Point operator-(Point &amp;p2) &#123;Point tmp(this-&gt;x - p2.x, this-&gt;y - p2.y);return tmp;&#125;&#125;;void main() &#123;Point p1(10, 20);Point p2(20, 10);&#x2F;&#x2F;p1.operator+(p1);Point p3 &#x3D; p1 + p2;p3.myprint();getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-友元函数运算符重载"><a class="markdownIt-Anchor" href="#3-友元函数运算符重载"></a> 3、友元函数运算符重载</h3><p><strong>当属性私有时，通过友元函数完成运算符重载</strong></p><pre class="line-numbers language-none"><code class="language-none">class Point &#123;friend Point operator+(Point &amp;p1, Point &amp;p2);friend Point operator-(Point &amp;p1, Point &amp;p2);private:int x;int y;public:Point(int x &#x3D; 0, int y &#x3D; 0) &#123;this-&gt;x &#x3D; x;this-&gt;y &#x3D; y;&#125;void myprint() &#123;cout &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; endl;&#125;&#125;;&#x2F;&#x2F;友元函数运算符重载+号Point operator+(Point &amp;p1, Point &amp;p2) &#123;Point tmp(p1.x + p2.x, p1.y + p2.y);return tmp;&#125;&#x2F;&#x2F;友元函数运算符重载-号Point operator-(Point &amp;p1, Point &amp;p2) &#123;Point tmp(p1.x - p2.x, p1.y - p2.y);return tmp;&#125;void main() &#123;Point p1(10, 20);Point p2(20, 10);Point p3 &#x3D; p1 + p2;p3.myprint();getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）C++中的类与构造函数</title>
      <link href="20181015/c-c/er-c-zhong-de-lei-yu-gou-zao-han-shu/"/>
      <url>20181015/c-c/er-c-zhong-de-lei-yu-gou-zao-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="c中的类与构造函数"><a class="markdownIt-Anchor" href="#c中的类与构造函数"></a> C++中的类与构造函数</h1><h2 id="一-c中类的常用写法"><a class="markdownIt-Anchor" href="#一-c中类的常用写法"></a> 一、C++中类的常用写法</h2><h3 id="1-在头文件中声明类的属性和方法"><a class="markdownIt-Anchor" href="#1-在头文件中声明类的属性和方法"></a> 1、在头文件中声明类的属性和方法</h3><p>如：MyTeacher.h</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;防止重复引入#pragma onceclass MyTeacher&#123;private:    char* name;    int age;public:    void setName(char* name);    char* getName();    void setAge(int age);    int getAge();&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-在源文件中cpp实现对应的方法"><a class="markdownIt-Anchor" href="#2-在源文件中cpp实现对应的方法"></a> 2、在源文件中（.cpp）实现对应的方法</h3><p>如：MyTeacher.cpp</p><pre class="line-numbers language-none"><code class="language-none">#define _CRT_SECURE_NO_WARNINGS#include &quot;MyTeacher.h&quot;#include &lt;iostream&gt;void MyTeacher::setName(const char* name) &#123;this-&gt;name &#x3D; new char[100];strcpy(this-&gt;name, name);&#125;char* MyTeacher::getName() &#123;return this-&gt;name;&#125;void MyTeacher::setAge(int age) &#123;this-&gt;age &#x3D; age;&#125;int MyTeacher::getAge() &#123;return this-&gt;age;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-在具体c代码中使用"><a class="markdownIt-Anchor" href="#3-在具体c代码中使用"></a> 3、在具体C++代码中使用</h3><p>如：test.cpp</p><pre class="line-numbers language-none"><code class="language-none">#include &quot;MyTeacher.h&quot;using namespace std;void main() &#123;MyTeacher t;t.setName(&quot;Jack&quot;);t.setAge(25);cout &lt;&lt; t.getName() &lt;&lt; &quot;,&quot; &lt;&lt; t.getAge() &lt;&lt; endl;getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二-c中类的构造函数-析构函数-拷贝构造函数"><a class="markdownIt-Anchor" href="#二-c中类的构造函数-析构函数-拷贝构造函数"></a> 二、C++中类的构造函数、析构函数、拷贝构造函数</h2><h3 id="1-构造函数"><a class="markdownIt-Anchor" href="#1-构造函数"></a> 1、构造函数</h3><ul><li><strong>C++类默认有无参构造函数，重写无参构造函数会覆盖默认的无参构造函数</strong></li><li><strong>有参构造函数会覆盖默认无参构造函数</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">class Teacher&#123;private:    char* name;    int age;public:    &#x2F;&#x2F;无参构造函数    Teacher()&#123;        cout &lt;&lt; &quot;无参构造函数&quot; &lt;&lt; endl;    &#125;        &#x2F;&#x2F;有参构造函数    Teacher(char *name,int age)&#123;        this-&gt;name &#x3D; name;        this-&gt;age &#x3D; age;        cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;    &#125;&#125;;void main()&#123;    Teacher t1;    Teacher t2(&quot;Rose&quot;,23);    &#x2F;&#x2F;有参构造函数另一个调用方式    Teacher t3 &#x3D; Teacher(&quot;jack&quot;,21);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-析构函数"><a class="markdownIt-Anchor" href="#2-析构函数"></a> 2、析构函数</h3><p><strong>当对象要被系统释放时，析构函数会被调用，一般用作善后处理</strong></p><pre class="line-numbers language-none"><code class="language-none">class Teacher&#123;private:    char* name;    int age;public:    &#x2F;&#x2F;无参构造函数    Teacher()&#123;        this-&gt;name &#x3D; (char*)malloc(100);        strcpy(name,&quot;Hello,Jack Teacher&quot;);        this-&gt;age &#x3D; 25;        cout &lt;&lt; &quot;无参构造函数&quot; &lt;&lt; endl;    &#125;    &#x2F;&#x2F;析构函数    ~Teacher()&#123;        cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;        free(this-&gt;name);    &#125;        &#x2F;&#x2F;有参构造函数    Teacher(char *name,int age)&#123;        this-&gt;name &#x3D; name;        this-&gt;age &#x3D; age;        cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;    &#125;&#125;;void func()&#123;    Teacher t1;&#125;void main()&#123;    func();        getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-拷贝构造函数"><a class="markdownIt-Anchor" href="#3-拷贝构造函数"></a> 3、拷贝构造函数</h3><h4 id="31-浅拷贝"><a class="markdownIt-Anchor" href="#31-浅拷贝"></a> 3.1 浅拷贝</h4><ul><li><strong>默认拷贝构造函数，就是值拷贝（浅拷贝）</strong></li><li><strong>浅拷贝拷贝的是指针的地址（同一块内存区域）</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">using namespace std;class Teacher &#123;private:char* name;int age;public:&#x2F;&#x2F;有参构造函数Teacher(char *name, int age) &#123;this-&gt;name &#x3D; name;this-&gt;age &#x3D; age;cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;析构函数~Teacher() &#123;cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;free(this-&gt;name);&#125;&#x2F;&#x2F;拷贝构造函数Teacher(const Teacher &amp;obj) &#123;this-&gt;name &#x3D; obj.name;this-&gt;age &#x3D; obj.age;cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;&#125;void myprint() &#123;cout &lt;&lt; name &lt;&lt; &quot;,&quot; &lt;&lt; age &lt;&lt; endl;&#125;&#125;;void main() &#123;Teacher t1((char*)&quot;rose&quot;, 30);Teacher t2 &#x3D; t1;t2.myprint();getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">有参构造函数拷贝构造函数rose,30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><strong>浅拷贝有可能会出现第二次释放变量导致出现异常的情况</strong></li></ul><p>例如：出现异常的情况</p><pre class="line-numbers language-none"><code class="language-none">using namespace std;class Teacher &#123;private:char* name;int age;public:&#x2F;&#x2F;有参构造函数Teacher(char *name, int age) &#123;int len &#x3D; strlen(obj.name);this-&gt;name &#x3D; (char*)malloc(len+1);strcpy(this-&gt;name,name);this-&gt;age &#x3D; age;cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;析构函数~Teacher() &#123;cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;free(this-&gt;name);&#125;    void myprint() &#123;cout &lt;&lt; name &lt;&lt; &quot;,&quot; &lt;&lt; age &lt;&lt; endl;&#125;&#125;;void func()&#123;    Teacher t1((char*)&quot;rose&quot;, 30);Teacher t2 &#x3D; t1;t2.myprint();&#125; void main() &#123;    func();getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="32-深拷贝"><a class="markdownIt-Anchor" href="#32-深拷贝"></a> 3.2 深拷贝</h4><p><strong>深拷贝拷贝的是指针指向的数据内容（两块内存区域）</strong></p><pre class="line-numbers language-none"><code class="language-none">using namespace std;class Teacher &#123;private:char* name;int age;public:&#x2F;&#x2F;有参构造函数Teacher(char *name, int age) &#123;    int len &#x3D; strlen(obj.name);this-&gt;name &#x3D; (char*)malloc(len+1);strcpy(this-&gt;name,name);this-&gt;age &#x3D; age;cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;&#125;&#x2F;&#x2F;析构函数~Teacher() &#123;cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;free(this-&gt;name);&#125;&#x2F;&#x2F;拷贝构造函数(深拷贝)Teacher(const Teacher &amp;obj) &#123;    &#x2F;&#x2F;复制name属性    int len &#x3D; strlen(obj.name);this-&gt;name &#x3D; (char*)malloc(len+1);strcpy(this-&gt;name,obj.name);this-&gt;age &#x3D; obj.age;cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;&#125;void myprint() &#123;cout &lt;&lt; name &lt;&lt; &quot;,&quot; &lt;&lt; age &lt;&lt; endl;&#125;&#125;;void func()&#123;    Teacher t1((char*)&quot;rose&quot;, 30);    &#x2F;&#x2F;声明时会被调用Teacher t2 &#x3D; t1;&#x2F;&#x2F;下面这种方式不会被调用&#x2F;&#x2F;Teacher t1;&#x2F;&#x2F;Teacher t2;&#x2F;&#x2F;t1 &#x3D; t2;t2.myprint();&#125;void main() &#123;func();getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="33-拷贝构造函数被被调用的场景"><a class="markdownIt-Anchor" href="#33-拷贝构造函数被被调用的场景"></a> 3.3 拷贝构造函数被被调用的场景</h4><ol><li>声明时赋值</li><li>作为参数传入，实参给形参赋值</li><li>作为函数返回值返回，给变量初始化赋值</li></ol><h3 id="4-构造函数属性初始化列表"><a class="markdownIt-Anchor" href="#4-构造函数属性初始化列表"></a> 4、构造函数属性初始化列表</h3><p><strong>构造函数属性初始化列表的格式为:</strong></p><pre class="line-numbers language-none"><code class="language-none">[构造函数名称]([本类中属性列表],[第一个类对象的属性列表],[第二个类对象的属性列表]):[第一个类对象]([第一个类对象的属性列表]),[第二个类对象]([第二个类对象的属性列表])&#123;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例如下：</p><pre class="line-numbers language-none"><code class="language-none">class Teacher&#123;private:    char* name;public:    Teacher(char* name)&#123;        this-&gt;name &#x3D; name;        cout &lt;&lt; &quot;Teacher有参构造函数&quot; &lt;&lt; endl;    &#125;    ~Teacher()&#123;        cout &lt;&lt; &quot;Teacher析构函数&quot; &lt;&lt; endl;    &#125;    char* getName()&#123;        return this-&gt;name;    &#125;&#125;;class Student&#123;private:    int id;    Teacher t1;public:    Student(int id,char* t1_name) : t1(t1_name)&#123;        this-&gt;id &#x3D; id;            cout &lt;&lt; &quot;Student有参构造函数&quot; &lt;&lt; endl;    &#125;    ~Student()&#123;        cout &lt;&lt; &quot;Student析构函数&quot; &lt;&lt; endl;    &#125;    void myprint()&#123;        cout &lt;&lt; this-&gt;id &lt;&lt; &quot;同学的老师是&quot; &lt;&lt; t1.getName() &lt;&lt; endl;    &#125;&#125;;void func()&#123;    Student t1(16,(char*)&quot;Jack&quot;);    t1.myprint();&#125;void main()&#123;    func();        getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-c中的new-和-delete的使用"><a class="markdownIt-Anchor" href="#三-c中的new-和-delete的使用"></a> 三、C++中的new 和 delete的使用</h2><p><strong>C++中通过new和delete来进行动态内存分配,new 和delete成对出现</strong><br /><strong>C++中在使用new和delete会对应调用构造函数和析构参数，通过C中的malloc方式则不会调用构造函数和析构函数</strong></p><pre class="line-numbers language-none"><code class="language-none">class Teacher&#123;private:    char* name;public:    Teacher(char* name)&#123;        this-&gt;name &#x3D; name;        cout &lt;&lt; &quot;Teacher有参构造函数&quot; &lt;&lt; endl;    &#125;    ~Teacher()&#123;        cout &lt;&lt; &quot;Teacher析构函数&quot; &lt;&lt; endl;    &#125;    void setName(char* name)&#123;        this-&gt;name &#x3D; name;    &#125;    char* getName()&#123;        return this-&gt;name;    &#125;&#125;;void func()&#123;    &#x2F;&#x2F;初始化，返回指针地址    Teacher *t1 &#x3D; new Teacher((char*)&quot;Jack&quot;);    &#x2F;&#x2F;使用    &#x2F;&#x2F;释放    delete t1;    int *p2 &#x3D; new int[10];    p2[0] &#x3D; 11;    &#x2F;&#x2F;释放数组    delete p2;&#125;void main()&#123;    func();        getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）C++命名空间及引用</title>
      <link href="20180930/c-c/yi-c-ming-ming-kong-jian-ji-yin-yong/"/>
      <url>20180930/c-c/yi-c-ming-ming-kong-jian-ji-yin-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="c命名空间及引用"><a class="markdownIt-Anchor" href="#c命名空间及引用"></a> C++命名空间及引用</h1><h2 id="一-c-与-c-的关系"><a class="markdownIt-Anchor" href="#一-c-与-c-的关系"></a> 一、C 与 C++ 的关系</h2><ol><li>C++ 可以与 C 代码进行混编</li><li>C++ 是一个面向对象编程语言、C 语言是面向过程的编程语言</li><li>C++ 是对 C 的一个增强</li></ol><h2 id="二-c-命名空间"><a class="markdownIt-Anchor" href="#二-c-命名空间"></a> 二、C++ 命名空间</h2><ol><li>C++ 标准的命名空间为 std ，包含很多标准的定义</li><li>&lt;&lt; 为运算符重载</li><li>命名空间类似于Java中的包</li><li>命名空间可以先进行使用</li><li>:: 为访问修饰符</li></ol><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdlib.h&gt;#include &lt;iostream&gt;&#x2F;&#x2F;使用标准命名空间using namespace std;&#x2F;&#x2F;自定义命名空间namespace NSP_A&#123;    int a &#x3D; 9;    struct Teacher&#123;        char name[20];        int age;    &#125;;    struct Student&#123;        char name[20];        int age;    &#125;;&#125;void main()&#123;    &#x2F;&#x2F;std::cout &lt;&lt; &quot;this is c plus plus&quot; &lt;&lt; std::endl;    cout &lt;&lt; &quot;this is c plus plus&quot; &lt;&lt; endl;    cout &lt;&lt; &quot;访问自定义命名空间的属性a:&quot; &lt;&lt; NSP_A::a &lt;&lt; endl;        &#x2F;&#x2F;使用命名空间中的结构体    using NSP_A::Student;    Student t;    t.age &#x3D; 19;    cout &lt;&lt; &quot;学生的年龄为:&quot; &lt;&lt; t.age &lt;&lt; endl;    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-c-中的类"><a class="markdownIt-Anchor" href="#三-c-中的类"></a> 三、C++ 中的类</h2><p><strong>C++ 中的类中的属性共享权限访问修饰符</strong></p><p><strong>类的 } 后有分号;</strong></p><pre class="line-numbers language-none"><code class="language-none">using namespace std;#define PI 3.14class MyCircle&#123;&#x2F;&#x2F;属性private:    double r;    double s;public:    double length;public:    void setR(double r)&#123;        this-&gt;r &#x3D; r;    &#125;    double getS()&#123;        return PI * r * r;    &#125;&#125;;void main()&#123;    MyCircle c1;    c1.setR(4);    cout &lt;&lt; &quot;圆的面积：&quot; &lt;&lt; c1.getS() &lt;&lt; endl;        getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">圆的面积：50.24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四-c-中的结构体"><a class="markdownIt-Anchor" href="#四-c-中的结构体"></a> 四、C++ 中的结构体</h2><ul><li><p><strong>C++ 中的结构体中有权限访问修饰符</strong></p></li><li><p><strong>结构体在C++ 中使用时可以省略 struct</strong></p></li><li><p><strong>结构体不能被继承</strong></p></li></ul><pre class="line-numbers language-none"><code class="language-none">using namespace std;struct Teacher&#123;&#x2F;&#x2F;属性public:    char* name;    int age;public:    void say()&#123;       cout &lt;&lt; &quot;My name is &quot; &lt;&lt; this-&gt;name &lt;&lt; &quot;, I am &quot; &lt;&lt; this-&gt;age &lt;&lt; &quot; years old.&quot; &lt;&lt; endl;    &#125;&#125;;void main()&#123;    Teacher t1;    strcpy(t1.name, &quot;Jack&quot;);    t1.age &#x3D; 25;    t1.say();    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五-c-中的数据类型"><a class="markdownIt-Anchor" href="#五-c-中的数据类型"></a> 五、C++ 中的数据类型</h2><ul><li><strong>C++中有 bool 类型 ，大小为1字节</strong></li><li><strong>C++中的三目运算可以成为左值，改变复合条件的属性的值</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">using namespace std;void main()&#123;    &#x2F;&#x2F;bool isSingle &#x3D; true;        bool isSingle &#x3D; -1;        if(isSingle)&#123;        cout &lt;&lt; &quot;单身&quot; &lt;&lt; endl;    &#125;else&#123;        cout &lt;&lt; &quot;有对象&quot; &lt;&lt; endl;    &#125;        int a &#x3D; 10, b &#x3D; 20;    int c &#x3D; (a &gt; b) ? a : b;    cout &lt;&lt; &quot;最大的数为&quot; &lt;&lt; ((a &gt; b) ? a : b) &lt;&lt; endl;        &#x2F;&#x2F;三目运算可以成为左值    (a &gt; b) ? a : b &#x3D; 30;     cout &lt;&lt; &quot;b 的值为&quot; &lt;&lt; b &lt;&lt; endl;    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六-c-中的引用"><a class="markdownIt-Anchor" href="#六-c-中的引用"></a> 六、C++ 中的引用</h2><h3 id="1-引用的定义"><a class="markdownIt-Anchor" href="#1-引用的定义"></a> 1、引用的定义</h3><ul><li><strong>C++ 中的引用就是在声明的变量名称前加&amp;符号,是为变量取别名，作为函数参数传递，能保证参数传递过程中不产生副本</strong></li><li><strong>引用必须要有值，不能为NULL</strong></li><li>*<em>引用可以直接操作变量，指针要通过取值(<em>p),间接操作变量，指针的可读性差</em></em></li></ul><pre class="line-numbers language-none"><code class="language-none">using namespace std;void main()&#123;    int a &#x3D; 10;    &#x2F;&#x2F;b就是a的内存空间的另一个别名    int &amp;b &#x3D; a;        cout &lt;&lt; b &lt;&lt; endl;    getchar();    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-c-中的引用的作用"><a class="markdownIt-Anchor" href="#2-c-中的引用的作用"></a> 2、C++ 中的引用的作用</h3><ul><li><strong>在 C++ 代码中使用引用比使用指针写起来更加方便</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">using namespace std;&#x2F;&#x2F;通过指针进行值交换void swap_1(int *a, int *b)&#123;    int c &#x3D; 0;    c &#x3D; *a;    *a &#x3D; *b;    *b &#x3D; c;&#125;&#x2F;&#x2F;通过引用进行值交换void swap_2(int &amp;a, int &amp;b)&#123;    int c &#x3D; 0;    c &#x3D; a;    a &#x3D; b;    b &#x3D; c;&#125;void main()&#123;    int x &#x3D; 30;    int y &#x3D; 50;    swap_1(&amp;x, &amp;y);    cout &lt;&lt; &quot;指针交换：x的值为：&quot;&lt;&lt; x &lt;&lt; &quot;,y的值为&quot; &lt;&lt; y &lt;&lt; endl;        swap_2(x,y);    cout &lt;&lt; &quot;引用交换：x的值为：&quot;&lt;&lt; x &lt;&lt; &quot;,y的值为&quot; &lt;&lt; y &lt;&lt; endl;    getchar();    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-c中引用的主要功能"><a class="markdownIt-Anchor" href="#3-c中引用的主要功能"></a> 3、C++中引用的主要功能</h3><ul><li><strong>在 C++ 中，引用的主要功能是作为函数的参数或返回值</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">using namespace std;struct Teacher&#123;   const char* name;    int age&#125;;void myprint(Teacher &amp;t)&#123;    cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; t.name &lt;&lt; &quot;,年龄：&quot; &lt;&lt; t.age &lt;&lt; endl;&#125;void main()&#123;    Teacher t;    t.name &#x3D; &quot;jsaon&quot;;    t.age &#x3D; 29;    myprint(t);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>在 C++ 中，对指针的引用可以代替二级指针</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">using namespace std;struct Teacher&#123;   const char* name;    int age&#125;;void getTeacher(Teacher **p)&#123;    Teacher *tmp &#x3D; (Teacher*)malloc(sizeof(Teacher));    tmp-&gt;age &#x3D; 20;    *p &#x3D; tmp;&#125;&#x2F;&#x2F;指针的引用，代替二级指针void getTeacher(Teacher* &amp;p)&#123;    p &#x3D; (Teacher*)malloc(sizeof(Teacher));    p-&gt;age &#x3D; 20;&#125;void main()&#123;    Teacher *t &#x3D; NULL;    getTeacher(&amp;t);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-指针常量和常量指针"><a class="markdownIt-Anchor" href="#4-指针常量和常量指针"></a> 4、指针常量和常量指针</h3><ul><li><strong>指针常量就是指针的常量，不改变地址的指针，但是可以修改它指向的内容</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    int a &#x3D; 2, b &#x3D; 3;    int *const p1 &#x3D; &amp;a;    &#x2F;&#x2F;p1 &#x3D; &amp;b; &#x2F;&#x2F;失败的，不能改变地址    *p1 &#x3D; 4; &#x2F;&#x2F;可以改变a的值    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>常量指针就是指向常量的指针，不能修改内容，可以修改地址</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    int a &#x3D; 2, b &#x3D; 3;    const int *p2 &#x3D; &amp;a;    p1 &#x3D; &amp;b; &#x2F;&#x2F;可以改变地址    &#x2F;&#x2F;*p2 &#x3D; 9; &#x2F;&#x2F;不可以改变a的值    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-常引用"><a class="markdownIt-Anchor" href="#5-常引用"></a> 5、常引用</h3><p><strong>常引用类似于Java中的final，值不可修改</strong></p><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    int a &#x3D; 10,b &#x3D; 9;    const int &amp;c &#x3D; a;    &#x2F;&#x2F;c &#x3D; b; &#x2F;&#x2F;不能再次赋值        const int &amp;d &#x3D; 66;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七-c-中的函数"><a class="markdownIt-Anchor" href="#七-c-中的函数"></a> 七、C++ 中的函数</h2><h3 id="1-函数参数的默认值"><a class="markdownIt-Anchor" href="#1-函数参数的默认值"></a> 1、函数参数的默认值</h3><ul><li><strong>在C++中，可以对函数的参数设置默认值</strong></li><li><strong>有默认值的参数必须在无默认值参数的最后</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">using namespace std;int add(int x, int y &#x3D; 13, int z &#x3D; 20) &#123;return (x + y + z);&#125;void main() &#123;int x &#x3D; 17;int sum &#x3D; add(10);cout &lt;&lt; &quot;x+y+z&#x3D;&quot; &lt;&lt; sum &lt;&lt; endl;getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-函数的可变参数"><a class="markdownIt-Anchor" href="#2-函数的可变参数"></a> 2、函数的可变参数</h3><ul><li><strong>在C++中，针对函数参数不确定的情况下，可使用可变参数</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdarg.h&gt;using namespace std;void func(int i,...)&#123;    &#x2F;&#x2F;可变参数指针    va_list args_p;    &#x2F;&#x2F;开始读取可变参数，i是最后一个固定参数    va_start(args_p,i);        int a &#x3D; va_arg(args_p,int);    int b &#x3D; va_arg(args_p,int);    char c &#x3D; va_arg(args_p,char);    cout &lt;&lt; a &lt;&lt; endl;    cout &lt;&lt; b &lt;&lt; endl;    cout &lt;&lt; c &lt;&lt; endl;    &#x2F;&#x2F;结束    va_end(args_p);&#125;void main() &#123;func(9,10,32,&#39;C&#39;);getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-函数的可变参数循环读取"><a class="markdownIt-Anchor" href="#3-函数的可变参数循环读取"></a> 3、函数的可变参数(循环读取)</h3><ul><li><strong>在C++中，针对函数参数不确定的情况下，可使用可变参数</strong></li><li><strong>可变参数在循环遍历时，不能获取个数，只能通过约定来确定可变参数个数；如第一个值来表<br />-示可变参数个数</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdarg.h&gt;using namespace std;void func(int count, ...) &#123;&#x2F;&#x2F;可变参数指针va_list args_p;&#x2F;&#x2F;开始读取可变参数，i是最后一个固定参数va_start(args_p, count);char value;int i &#x3D; 0;for (;i &lt; count; i++) &#123;value &#x3D; va_arg(args_p, char);cout &lt;&lt; value &lt;&lt; endl;&#125;&#x2F;&#x2F;结束va_end(args_p);&#125;void main() &#123;func(3, &#39;a&#39;, &#39;b&#39;, &#39;C&#39;);getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI 引用、异常处理和缓存策略</title>
      <link href="20180925/jni/san-jni-yin-yong-yi-chang-chu-li-he-huan-cun-ce-lue/"/>
      <url>20180925/jni/san-jni-yin-yong-yi-chang-chu-li-he-huan-cun-ce-lue/</url>
      
        <content type="html"><![CDATA[<h1 id="jni-引用-异常处理和缓存策略"><a class="markdownIt-Anchor" href="#jni-引用-异常处理和缓存策略"></a> JNI 引用、异常处理和缓存策略</h1><h2 id="一-jni-引用变量"><a class="markdownIt-Anchor" href="#一-jni-引用变量"></a> 一、JNI 引用变量</h2><h3 id="1-引用类型"><a class="markdownIt-Anchor" href="#1-引用类型"></a> 1、引用类型</h3><p><strong>JNI 引用的类型分为局部引用和全局引用</strong></p><h3 id="2-引用的作用"><a class="markdownIt-Anchor" href="#2-引用的作用"></a> 2、引用的作用</h3><p><strong>在JNI中告知虚拟机何时回收一个 JNI 变量</strong></p><h3 id="3-局部引用的使用"><a class="markdownIt-Anchor" href="#3-局部引用的使用"></a> 3、局部引用的使用</h3><p><strong>通过DeleteLocalRef 手动释放</strong></p><ol><li>访问一个很大的java对象，使用完成之后，还要进行复杂的耗时操作</li><li>创建了大量的局部引用，占用了太多的内存，而且这些局部引用跟后面的操作没有关联性。</li></ol><p>例如：</p><ul><li>编写JNITest.java文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class JNITest &#123;        public native void localRef();    public static void main(String[] args)&#123;        JNITest t &#x3D; new JNITest();        t.localRef();    &#125;    static &#123;        System.loadLibrary(&quot;JNIProject&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre class="line-numbers language-none"><code class="language-none">javap -s -p com.example.jni.JNITest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;#include &quot;jni.h&quot;&#x2F;* Header for class com_example_jni_JNITest *&#x2F;#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; &#123;#endif&#x2F;* * Class:     com_example_jni_JNITest * Method:    localRef * Signature:  *&#x2F;JNIEXPORT void JNICALL Java_com_example_jni_JNITest_localRef(JNIEnv *, jobject);#ifdef __cplusplus&#125;#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_jni_JNITest.h&quot;#include &lt;stdlib.h&gt;int compare(int *a,int *b)&#123;    return (*a) - (*b);&#125;&#x2F;&#x2F;模拟：循环创建数组 JNIEXPORT void JNICALL Java_com_example_jni_JNITest_localRef(JNIEnv *env, jobject jobj) &#123;int i &#x3D; 0;for(; i &lt; 5; i++)&#123;    &#x2F;&#x2F;创建Date对象    jclass cls &#x3D; (*env)-&gt;FindClass(env,&quot;java.util.Date&quot;);    jmethodID constructor_mid &#x3D; (*env)-&gt;GetMethodID(env,cls,&quot;&lt;init&gt;&quot;,&quot;()V&quot;);    jobject obj &#x3D; (*env)-&gt;NewObject(env,cls,constructor_mid);    &#x2F;&#x2F;此处省略100行代码    &#x2F;&#x2F;不再使用obj对象了    &#x2F;&#x2F;通知垃圾回收器回收这些对象    (*env)-&gt;DeleteLocalRef(env,obj);    &#x2F;&#x2F;此处省略100行代码&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-全局引用的使用"><a class="markdownIt-Anchor" href="#4-全局引用的使用"></a> 4、全局引用的使用</h3><p><strong>全局引用可以共享（跨多个方法，多个线程），手动控制内存使用（不再使用时通过 DeleteGlobalRef 手动释放）</strong></p><p>例如：</p><ul><li>编写JNITest.java文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class JNITest &#123;        public native void createGlobalRef();         public native String getGlobalRef();          public native void deleteGlobalRef();    public static void main(String[] args)&#123;        JNITest t &#x3D; new JNITest();        t.createGlobalRef();        t.getGlobalRef();        t.deleteGlobalRef();    &#125;    static &#123;        System.loadLibrary(&quot;JNIProject&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre class="line-numbers language-none"><code class="language-none">javap -s -p com.example.jni.JNITest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;#include &quot;jni.h&quot;&#x2F;* Header for class com_example_jni_JNITest *&#x2F;#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; &#123;#endif&#x2F;* * Class:     com_example_jni_JNITest * Method:    createGlobalRef * Signature:  *&#x2F;JNIEXPORT void JNICALL Java_com_example_jni_JNITest_createGlobalRef(JNIEnv *, jobject);&#x2F;* * Class:     com_example_jni_JNITest * Method:    getGlobalRef * Signature:  *&#x2F;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_getGlobalRef(JNIEnv *, jobject);&#x2F;* * Class:     com_example_jni_JNITest * Method:    deleteGlobalRef * Signature:  *&#x2F;JNIEXPORT void JNICALL Java_com_example_jni_JNITest_deleteGlobalRef(JNIEnv *, jobject);#ifdef __cplusplus&#125;#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_jni_JNITest.h&quot;#include &lt;stdlib.h&gt;&#x2F;&#x2F;全局引用jstring global_str;JNIEXPORT void JNICALL Java_com_example_jni_JNITest_createGlobalRef(JNIEnv *env, jobject jobj) &#123;    jstring obj &#x3D; (*env)-&gt;NewStringUTF(env,&quot;JNI development is powerful!&quot;);    global_str &#x3D; (*env)-&gt;NewGlobalRef(env,obj);&#125;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_getGlobalRef(JNIEnv *env, jobject jobj) &#123;    return global_str;&#125;JNIEXPORT void JNICALL Java_com_example_jni_JNITest_deleteGlobalRef(JNIEnv *env, jobject jobj) &#123;    (*env)-&gt;DeleteGlobalRef(env,global_str);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-弱全局引用的使用"><a class="markdownIt-Anchor" href="#5-弱全局引用的使用"></a> 5、弱全局引用的使用</h3><p><strong>弱全局引用可以节省内存，在内存不足时可以释放所引用的对象，可以引用一个不常用的对象，如果为NULL，再临时创建</strong></p><p>创建：NewWeakGlobalRef</p><p>销毁：DeleteGlobalWeakRef</p><h2 id="二-jni-的异常处理"><a class="markdownIt-Anchor" href="#二-jni-的异常处理"></a> 二、JNI 的异常处理</h2><p><strong>JNI自己抛出的异常，在java层无法被捕获，只能在C层清空；用户通过ThrowNew抛出的异常，可以在Java层捕获</strong></p><ol><li>保证java代码可以继续运行</li><li>补救措施，保证 C 代码继续执行</li></ol><p>例如：</p><ul><li>编写JNITest.java文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class JNITest &#123;    private String key&#x3D;&quot;World!&quot;;        public native void exception();    public static void main(String[] args)&#123;        JNITest t &#x3D; new JNITest();        t.exception();    &#125;    static &#123;        System.loadLibrary(&quot;JNIProject&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre class="line-numbers language-none"><code class="language-none">javap -s -p com.example.jni.JNITest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;#include &quot;jni.h&quot;&#x2F;* Header for class com_example_jni_JNITest *&#x2F;#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; &#123;#endif&#x2F;* * Class:     com_example_jni_JNITest * Method:    exception * Signature:  *&#x2F;JNIEXPORT void JNICALL Java_com_example_jni_JNITest_exception(JNIEnv *, jobject);#ifdef __cplusplus&#125;#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_jni_JNITest.h&quot;#include &lt;stdlib.h&gt;JNIEXPORT void JNICALL Java_com_example_jni_JNITest_exception(JNIEnv *env, jobject jobj) &#123;   jclass cls &#x3D; (*env)-&gt;GetObjectClass(env,jobj);   jfieldID fid &#x3D; (*env)-&gt;GetFieldID(env,cls,&quot;key2&quot;,&quot;Ljava&#x2F;lang&#x2F;String;&quot;);   &#x2F;&#x2F;检测是否发生java异常   jthrowable exception &#x3D; (*env)-&gt;ExceptionOccurred(env);   if(exception !&#x3D; NULL)&#123;       &#x2F;&#x2F;让java代码可以继续运行       &#x2F;&#x2F;清空异常信息       (*env)-&gt;ExceptionClear(env);       fid &#x3D; (*env)-&gt;GetFieldID(env,cls,&quot;key&quot;,&quot;Ljava&#x2F;lang&#x2F;String;&quot;);   &#125;   jstring jstr &#x3D; (*env)-&gt;GetObjectField(env,jobj,fid);   char *str &#x3D; (*env)-&gt;GetStringUTFChars(env,jstr,NULL);   &#x2F;&#x2F;比对属性值是否合法，i 忽略大小写   if(_stricmp(str,&quot;Hello World!&quot;)!&#x3D;0)&#123;       &#x2F;&#x2F;人为抛出异常，交给Java层处理       jclass newExCls &#x3D; (*env)-&gt;FindClass(env,&quot;java&#x2F;lang&#x2F;IllegalArgumentException&quot;);       (*env)-&gt;ThrowNew(env,newExCls,&quot;Key&#39;s value is invalid!&quot;);   &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-jni-缓存策略"><a class="markdownIt-Anchor" href="#三-jni-缓存策略"></a> 三、JNI 缓存策略</h2><h3 id="1-局部的静态变量"><a class="markdownIt-Anchor" href="#1-局部的静态变量"></a> 1、局部的静态变量</h3><p><strong>局部的静态变量，当程序运行结束之后，变量的值还会在内存中</strong></p><p>例如：</p><ul><li>编写JNITest.java文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class JNITest &#123;        private String key&#x3D;&quot;Hello World!&quot;;    public native String cached();    public static void main(String[] args)&#123;        JNITest t &#x3D; new JNITest();        for (int 1 &#x3D; 0; i&lt;100; i++)&#123;           System.out.pringln(&quot;第&quot;+(i+1)+&quot;次执行，结果为：&quot;+t.cached());         &#125;    &#125;    static &#123;        System.loadLibrary(&quot;JNIProject&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre class="line-numbers language-none"><code class="language-none">javap -s -p com.example.jni.JNITest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;#include &quot;jni.h&quot;&#x2F;* Header for class com_example_jni_JNITest *&#x2F;#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; &#123;#endif&#x2F;* * Class:     com_example_jni_JNITest * Method:    cached * Signature:  *&#x2F;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_cached(JNIEnv *, jobject);#ifdef __cplusplus&#125;#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_jni_JNITest.h&quot;#include &lt;stdlib.h&gt;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_cached(JNIEnv *env, jobject jobj) &#123;   jclass cls &#x3D; (*env)-&gt;GetObjectClass(env,jobj);   static jfieldID key_id &#x3D; NULL;   &#x2F;&#x2F;获取jfieldID只获取一次   if(key_id &#x3D;&#x3D; NULL)&#123;       key_id &#x3D; (*env)-&gt;GetFieldID(env,cls,&quot;key&quot;,&quot;Ljava&#x2F;lang&#x2F;String;&quot;);       printf(&quot;------------GetFieldID--------\n&quot;)   &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-全局变量"><a class="markdownIt-Anchor" href="#2-全局变量"></a> 2、全局变量</h3><p><strong>全局变量在动态库加载完成之后，立刻缓存起来</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;初始化全局变量jfieldID key_fid;jmethodID random_mid;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_initIds(JNIEnv *env, jclass jcls) &#123;    key_fid &#x3D; (*env)-&gt;GetFieldID(env,jcls,&quot;key&quot;,&quot;Ljava&#x2F;lang&#x2F;String;&quot;);    random_mid &#x3D; (*env)-&gt;GetMethodID(env,jcls,&quot;getRandomInt&quot;,&quot;(I)I&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JNI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> JNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI 的数据类型</title>
      <link href="20180920/jni/er-jni-de-shu-ju-lei-xing-yi-ji-c-fang-wen-java-shu-xing-he-fang-fa/"/>
      <url>20180920/jni/er-jni-de-shu-ju-lei-xing-yi-ji-c-fang-wen-java-shu-xing-he-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="jni-的数据类型"><a class="markdownIt-Anchor" href="#jni-的数据类型"></a> JNI 的数据类型</h1><h2 id="一-jni-数据类型"><a class="markdownIt-Anchor" href="#一-jni-数据类型"></a> 一、JNI 数据类型</h2><p><strong>Java基本数据类型与JNI数据类型的映射关系</strong></p><table><thead><tr><th>Java数据类型</th><th>JNI数据类型</th><th>C/C++数据类型</th></tr></thead><tbody><tr><td>boolean</td><td>jboolean</td><td>unsigned char</td></tr><tr><td>byte</td><td>jbyte</td><td>signed char</td></tr><tr><td>char</td><td>jchar</td><td>unsigned short</td></tr><tr><td>short</td><td>jshort</td><td>short</td></tr><tr><td>int</td><td>jint</td><td>int</td></tr><tr><td>long</td><td>jlong</td><td>long long</td></tr><tr><td>float</td><td>jfloat</td><td>float</td></tr><tr><td>double</td><td>jdouble</td><td>double</td></tr><tr><td>void</td><td>void</td><td>void</td></tr></tbody></table><p><strong>Java引用数据类型与JNI数据类型的映射关系</strong></p><table><thead><tr><th>Java数据类型</th><th>JNI数据类型</th></tr></thead><tbody><tr><td>String</td><td>jstring</td></tr><tr><td>Object</td><td>jobject</td></tr><tr><td>基本数据类型数组如： byte[]</td><td>jbyteArray</td></tr><tr><td>对象数组如： Object[],String[]</td><td>jobjectArray</td></tr></tbody></table><h2 id="二-c通过jni调用java"><a class="markdownIt-Anchor" href="#二-c通过jni调用java"></a> 二、C通过JNI调用Java</h2><h3 id="1-访问java属性"><a class="markdownIt-Anchor" href="#1-访问java属性"></a> 1、访问Java属性</h3><p><strong>GET<Type>Field</strong></p><ul><li>编写JNITest.java文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class JNITest &#123;    public String key &#x3D; &quot;World!&quot;;    &#x2F;&#x2F;访问属性，返回修改之后的属性内容    public native String accessField();    public static void main(String[] args)&#123;        JNITest t &#x3D; new JNITest();        System.out.println(&quot;key修改前：&quot;+t.key);        t.accessField();        System.out.println(&quot;key修改后：&quot;+t.key);    &#125;    static &#123;        System.loadLibrary(&quot;JNIProject&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;#include &quot;jni.h&quot;&#x2F;* Header for class com_example_jni_JNITest *&#x2F;#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; &#123;#endif&#x2F;* * Class:     com_example_jni_JNITest * Method:    accessField * Signature: ()Ljava&#x2F;lang&#x2F;String; *&#x2F;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_accessField(JNIEnv *, jobject);#ifdef __cplusplus&#125;#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_accessField(JNIEnv *jEnv, jobject jobj) &#123;&#x2F;&#x2F;jobj是t对象，JniTest.classjclass cls &#x3D; (*jEnv)-&gt;GetObjectClass(jEnv, jobj);&#x2F;&#x2F;jfieldID&#x2F;&#x2F;属性名称，属性签名jfieldID fid &#x3D; (*jEnv)-&gt;GetFieldID(jEnv, cls, &quot;key&quot;, &quot;Ljava&#x2F;lang&#x2F;String;&quot;);&#x2F;&#x2F;World! &gt;&gt; Hello World!&#x2F;&#x2F;获取key属性的值&#x2F;&#x2F;Get&lt;Type&gt;Fieldjstring jstr &#x3D; (*jEnv)-&gt;GetObjectField(jEnv, jobj, fid);printf(&quot;jstr:%#x\n&quot;, &amp;jstr);&#x2F;&#x2F;jstring -&gt; c字符串&#x2F;&#x2F;isCopy 是否复制（true代表复制，false不复制）char *c_str &#x3D; (*jEnv)-&gt;GetStringUTFChars(jEnv, jstr, NULL);&#x2F;&#x2F;拼接得到新的字符串char text[20] &#x3D; &quot;Hello &quot;;strcat(text, c_str);&#x2F;&#x2F;c字符串 -&gt;jstringjstring new_jstr &#x3D; (*jEnv)-&gt;NewStringUTF(jEnv, text);&#x2F;&#x2F;修改key&#x2F;&#x2F;Set&lt;Type&gt;Field(*jEnv)-&gt;SetObjectField(jEnv, jobj, fid, new_jstr);printf(&quot;new_jstr:%#x\n&quot;, &amp;new_jstr);return new_jstr;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h3 id="2-访问java静态属性"><a class="markdownIt-Anchor" href="#2-访问java静态属性"></a> 2、访问Java静态属性</h3><p><strong>GET<Type>Field</strong></p><ul><li>编写JNITest.java文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class JNITest &#123;    public static int count &#x3D; 5;    &#x2F;&#x2F;访问属性，返回修改之后的属性内容    public native int accessStaticField();    public static void main(String[] args)&#123;        JNITest t &#x3D; new JNITest();        System.out.println(&quot;count 修改前：&quot;+t.count);        t.accessStaticField();        System.out.println(&quot;count 修改后：&quot;+t.count);    &#125;    static &#123;        System.loadLibrary(&quot;JNIProject&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;#include &quot;jni.h&quot;&#x2F;* Header for class com_example_jni_JNITest *&#x2F;#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; &#123;#endif&#x2F;* * Class:     com_example_jni_JNITest * Method:    accessField * Signature: ()Ljava&#x2F;lang&#x2F;String; *&#x2F;JNIEXPORT jint JNICALL Java_com_example_jni_JNITest_accessStaticField(JNIEnv *, jobject);#ifdef __cplusplus&#125;#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT jint JNICALL Java_com_example_jni_JNITest_accessStaticField(JNIEnv *jEnv, jobject jobj) &#123;&#x2F;&#x2F;jobj是t对象，JniTest.classjclass cls &#x3D; (*jEnv)-&gt;GetObjectClass(jEnv, jobj);&#x2F;&#x2F;jfieldID&#x2F;&#x2F;属性名称，属性签名jfieldID fid &#x3D; (*jEnv)-&gt;GetStaticFieldID(jEnv, cls, &quot;count&quot;, &quot;I&quot;);&#x2F;&#x2F;获取 count 属性的值&#x2F;&#x2F;Get&lt;Type&gt;Fieldjint count &#x3D; (*jEnv)-&gt;GetStaticIntField(jEnv, jobj, fid);printf(&quot;jstr:%#x\n&quot;, &amp;jstr);    count++;    (*jEnv)-&gt;SetStaticIntField(jEnv, jobj, fid,count);return count;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h3 id="3-访问java方法"><a class="markdownIt-Anchor" href="#3-访问java方法"></a> 3、访问java方法</h3><p><strong>Call<Type>Method</strong></p><ul><li>编写JNITest.java文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class JNITest &#123;      public native void accessMethod();    public static void main(String[] args)&#123;        JNITest t &#x3D; new JNITest();        t.accessMethod();    &#125;    &#x2F;&#x2F;产生指定范围的随机数public int genRandomInt(int max)&#123;System.out.println(&quot;genRandomInt 执行了...&quot;);return new Random().nextInt(max); &#125;    static &#123;        System.loadLibrary(&quot;JNIProject&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre class="line-numbers language-none"><code class="language-none">javap -s -p com.example.jni.JNITest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;#include &quot;jni.h&quot;&#x2F;* Header for class com_example_jni_JNITest *&#x2F;#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; &#123;#endif&#x2F;* * Class:     com_example_jni_JNITest * Method:    accessMethod * Signature: (I)I; *&#x2F;JNIEXPORT void JNICALL Java_com_example_jni_JNITest_accessMethod(JNIEnv *, jobject);#ifdef __cplusplus&#125;#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT void JNICALL Java_com_example_jni_JNITest_accessMethod(JNIEnv *env, jobject jobj)&#123;&#x2F;&#x2F;jclassjclass cls &#x3D; (*env)-&gt;GetObjectClass(env, jobj);&#x2F;&#x2F;jmethodIDjmethodID mid &#x3D; (*env)-&gt;GetMethodID(env, cls, &quot;genRandomInt&quot;, &quot;(I)I&quot;);&#x2F;&#x2F;调用&#x2F;&#x2F;Call&lt;Type&gt;Methodjint random &#x3D; (*env)-&gt;CallIntMethod(env, jobj, mid, 200);printf(&quot;random num:%ld&quot;,random);&#x2F;&#x2F;.....&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h3 id="4-访问静态方法"><a class="markdownIt-Anchor" href="#4-访问静态方法"></a> 4、访问静态方法</h3><p><strong>CallStatic<Type>Method</strong></p><ul><li>编写JNITest.java文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class JNITest &#123;      public native void accessStaticMethod();    public static void main(String[] args)&#123;        JNITest t &#x3D; new JNITest();        t.accessStaticMethod();    &#125;    &#x2F;&#x2F;产生UUID字符串public static String getUUID()&#123;return UUID.randomUUID().toString();&#125;    static &#123;        System.loadLibrary(&quot;JNIProject&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre class="line-numbers language-none"><code class="language-none">javap -s -p com.example.jni.JNITest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;#include &quot;jni.h&quot;&#x2F;* Header for class com_example_jni_JNITest *&#x2F;#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; &#123;#endif&#x2F;* * Class:     com_example_jni_JNITest * Method:    accessStaticMethod * Signature: ()Ljava&#x2F;lang&#x2F;String;; *&#x2F;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_accessStaticMethod(JNIEnv *, jobject);#ifdef __cplusplus&#125;#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_accessStaticMethod(JNIEnv *env, jobject jobj)&#123;&#x2F;&#x2F;jclassjclass cls &#x3D; (*env)-&gt;GetObjectClass(env, jobj);&#x2F;&#x2F;jmethodIDjmethodID mid &#x3D; (*env)-&gt;GetStaticMethodID(env, cls, &quot;getUUID&quot;, &quot;()Ljava&#x2F;lang&#x2F;String;&quot;);&#x2F;&#x2F;调用&#x2F;&#x2F;CallStatic&lt;Type&gt;Methodjstring uuid &#x3D; (*env)-&gt;CallStaticObjectMethod(env, cls, mid);&#x2F;&#x2F;随机文件名称 uuid.txt&#x2F;&#x2F;jstring -&gt; char*&#x2F;&#x2F;isCopy ，代表java和c操作的是同一个字符串char *uuid_str &#x3D; (*env)-&gt;GetStringUTFChars(env, uuid, NULL);&#x2F;&#x2F;拼接char filename[100];sprintf(filename, &quot;D:&#x2F;&#x2F;%s.txt&quot;,uuid_str);FILE *fp &#x3D; fopen(filename,&quot;w&quot;);fputs(&quot;How are you?&quot;, fp);fclose(fp);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h3 id="5-访问构造方法"><a class="markdownIt-Anchor" href="#5-访问构造方法"></a> 5、访问构造方法</h3><p><strong>通过FindClass找到对应的类</strong></p><ul><li>编写JNITest.java文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class JNITest &#123;    &#x2F;&#x2F;java.util.Date    public native Date accessConstructor();    public static void main(String[] args)&#123;        JNITest t &#x3D; new JNITest();        t.accessConstructor();    &#125;    static &#123;        System.loadLibrary(&quot;JNIProject&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre class="line-numbers language-none"><code class="language-none">javap -s -p com.example.jni.JNITest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;#include &quot;jni.h&quot;&#x2F;* Header for class com_example_jni_JNITest *&#x2F;#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; &#123;#endif&#x2F;* * Class:     com_example_jni_JNITest * Method:    accessConstructor * Signature:  *&#x2F;JNIEXPORT jobject JNICALL Java_com_example_jni_JNITest_accessConstructor(JNIEnv *, jobject);#ifdef __cplusplus&#125;#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_jni_JNITest.h&quot;&#x2F;&#x2F;使用java.util.Date产生一个当前的时间戳JNIEXPORT jobject JNICALL Java_com_example_jni_JNITest_accessConstructor(JNIEnv *env, jobject jobj)&#123;jclass cla &#x3D; (*env)-&gt;FindClass(env,&quot;java&#x2F;util&#x2F;Date&quot;);&#x2F;&#x2F;jmethodID,构造方法的方法名称固定为&quot;&lt;init&gt;&quot;jmethodID constructor_mid &#x3D; (*env)-&gt;GetMethodID(env,cls,&quot;&lt;init&gt;&quot;,&quot;()V&quot;);&#x2F;&#x2F;实例化一个Date对象jobject date_obj &#x3D; (*env)-&gt;NewObject(env,cls,constructor_mid);&#x2F;&#x2F;调用getTime方法jmehoodID mid &#x3D; (*env)-&gt;GetMethodID(env,cls,&quot;getTime&quot;,&quot;()J&quot;);&#x2F;&#x2F;调用jlong time &#x3D; (*env)-&gt;CallLongMethod(env,date_obj,mid);&#x2F;&#x2F;time 为long long类型printf(&quot;time: %lld\n&quot;,time);return date_obj;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h3 id="6-访问父类的方法"><a class="markdownIt-Anchor" href="#6-访问父类的方法"></a> 6、访问父类的方法</h3><hr /><ul><li>编写父类文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class Human &#123;    public void sayHi()&#123;        System.out.println(&quot;Human say Hi...&quot;);    &#125;&#125;public class man extends Human&#123;    @override    public void sayHi()&#123;        System.out.println(&quot;Man say Hi,How are you?&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编写JNITest.java文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class JNITest &#123;    public Human human &#x3D; new Man();    public native void accessNonvirtualMethod();    public static void main(String[] args)&#123;        JNITest t &#x3D; new JNITest();        t.accessNonvirtualMethod();    &#125;    static &#123;        System.loadLibrary(&quot;JNIProject&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre class="line-numbers language-none"><code class="language-none">javap -s -p com.example.jni.JNITest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;#include &quot;jni.h&quot;&#x2F;* Header for class com_example_jni_JNITest *&#x2F;#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; &#123;#endif&#x2F;* * Class:     com_example_jni_JNITest * Method:    accessNonvirtualMethod * Signature:  *&#x2F;JNIEXPORT jobject JNICALL Java_com_example_jni_JNITest_accessNonvirtualMethod(JNIEnv *, jobject);#ifdef __cplusplus&#125;#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_jni_JNITest.h&quot;&#x2F;&#x2F;调用父类的方法 JNIEXPORT jobject JNICALL Java_com_example_jni_JNITest_accessNonvirtualMethod(JNIEnv *env, jobject jobj)&#123;    jclass cls &#x3D; (*env)-&gt;GetObjectClass(env,jobj);&#x2F;&#x2F;获取Man属性    jfieldID fid &#x3D;(*env)-&gt;GetFieldID(env,cls,&quot;human&quot;,&quot;Lcom&#x2F;example&#x2F;jni&#x2F;Human;&quot;);    jobject human_obj &#x3D; (*env)-&gt;GetObjectField(env,jobj,fid);    &#x2F;&#x2F;执行sayHi方法    &#x2F;&#x2F;传父类的父类    jclass human_cls &#x3D; (*env)-&gt;FindClass(env,&quot;com&#x2F;example&#x2F;jni&#x2F;Human&quot;);    jmethodID  mid &#x3D; (*env)-&gt;GetMethodID(env,human_cls,&quot;sayHi&quot;,&quot;()V&quot;);    &#x2F;&#x2F;执行子类方法    (*env)-&gt;CallObjectMethod(env,human_obj,mid);        &#x2F;&#x2F;执行父类方法    (*env)-&gt;CallNonvirtualObjectMethod(env,human_obj,human_cls,mid);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h2 id="三-jni字符串乱码问题"><a class="markdownIt-Anchor" href="#三-jni字符串乱码问题"></a> 三、JNI字符串乱码问题</h2><ul><li>编写JNITest.java文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class JNITest &#123;        public native String chineseChars(String in);    public static void main(String[] args)&#123;        JNITest t &#x3D; new JNITest();        String outStr &#x3D; t.chineseChars(&quot;传入一串中文&quot;);        System.out.println(outStr);    &#125;    static &#123;        System.loadLibrary(&quot;JNIProject&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre class="line-numbers language-none"><code class="language-none">javap -s -p com.example.jni.JNITest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;#include &quot;jni.h&quot;&#x2F;* Header for class com_example_jni_JNITest *&#x2F;#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; &#123;#endif&#x2F;* * Class:     com_example_jni_JNITest * Method:    chineseChars * Signature:  *&#x2F;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_chineseChars(JNIEnv *, jobject,jstring);#ifdef __cplusplus&#125;#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_jni_JNITest.h&quot;&#x2F;&#x2F;中文问题JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_chineseChars(JNIEnv *env, jobject jobj, jstring in) &#123;char *c_str &#x3D; (*env)-&gt;GetStringUTFChars(env, in, NULL);printf(&quot;%s\n&quot;, c_str);char *c_str_out &#x3D; &quot;传出一段文字&quot;;&#x2F;&#x2F;NewStringUTF 是utf-16编码jstring j_str &#x3D; (*env)-&gt;NewStringUTF(env, c_str_out);&#x2F;&#x2F;使用Java处理乱码问题jclass jcls &#x3D; (*env)-&gt;FindClass(env, &quot;java&#x2F;lang&#x2F;String&quot;);&#x2F;&#x2F;jmethodIDjmethodID c_mid &#x3D; (*env)-&gt;GetMethodID(env, jcls, &quot;&lt;init&gt;&quot;, &quot;([BLjava&#x2F;lang&#x2F;String;)V&quot;);&#x2F;&#x2F;byte[]数组&#x2F;&#x2F;jbyteArray -&gt; char[]jbyteArray bytes &#x3D; (*env)-&gt;NewByteArray(env, strlen(c_str_out));&#x2F;&#x2F;byte数组赋值(*env)-&gt;SetByteArrayRegion(env, bytes, 0, strlen(c_str_out), c_str_out);&#x2F;&#x2F;字符编码jstring charsetName &#x3D; (*env)-&gt;NewStringUTF(env, &quot;GB2312&quot;);&#x2F;&#x2F;调用构造函数，返回编码之后的字符串return (*env)-&gt;NewObject(env, jcls, c_mid, bytes, charsetName);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h2 id="四-jni数组处理传入一个数组返回另一个数组"><a class="markdownIt-Anchor" href="#四-jni数组处理传入一个数组返回另一个数组"></a> 四、JNI数组处理，传入一个数组，返回另一个数组</h2><ul><li>编写JNITest.java文件</li></ul><pre class="line-numbers language-none"><code class="language-none">public class JNITest &#123;        public native int[] sortArray(int[] array);    public static void main(String[] args)&#123;        JNITest t &#x3D; new JNITest();        int[] arr &#x3D; new int[]&#123;6,8,1,17,23,12,65,32&#125;;        int newArr &#x3D; t.sortArray();        for (int i : arr) &#123;            System.out.println(i);        &#125;        System.out.println(&quot;返回的新数组为：&quot;);         for (int i : newArr) &#123;            System.out.println(i);        &#125;    &#125;    static &#123;        System.loadLibrary(&quot;JNIProject&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre class="line-numbers language-none"><code class="language-none">javap -s -p com.example.jni.JNITest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;* DO NOT EDIT THIS FILE - it is machine generated *&#x2F;#include &quot;jni.h&quot;&#x2F;* Header for class com_example_jni_JNITest *&#x2F;#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; &#123;#endif&#x2F;* * Class:     com_example_jni_JNITest * Method:    sortArray * Signature:  *&#x2F;JNIEXPORT jintArray JNICALL Java_com_example_jni_JNITest_sortArray(JNIEnv *, jobject,jintArray);#ifdef __cplusplus&#125;#endif#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre class="line-numbers language-none"><code class="language-none">#include &quot;com_example_jni_JNITest.h&quot;#include &lt;stdlib.h&gt;int compare(int *a,int *b)&#123;    return (*a) - (*b);&#125;&#x2F;&#x2F;数组处理JNIEXPORT jintArray JNICALL Java_com_example_jni_JNITest_sortArray(JNIEnv *env, jobject jobj, jintArray arr) &#123;&#x2F;&#x2F;拿到 jintArray 的指针 -&gt; 得到 c int 数组jint *elems &#x3D; (*env)-&gt;GetIntArrayElements(env,arr,NULL);&#x2F;&#x2F;数组的长度int len &#x3D; (*env)-&gt;GetArrayLength(env,arr);&#x2F;&#x2F;排序qsort(elems, len, sizeof(jint), compare);&#x2F;&#x2F;同步,第4个参数：&#x2F;&#x2F;JNI_OK(0)：Java数组进行更新，并且释放C&#x2F;C++数组&#x2F;&#x2F;JNI_COMMIT(1):Java数组进行更新，不释放C&#x2F;C++数组（函数执行完数组会释放）&#x2F;&#x2F;JNI_ABOUT：Java数组不进行更新，但释放C&#x2F;C++数组(*env)-&gt;ReleaseIntArrayElements(env, arr, elems,JNI_COMMIT);&#x2F;&#x2F;将原数组倒序生成一个新的数组jintArray jint_new_arr &#x3D; (*env)-&gt;NewIntArray(env,len);jint *new_elems &#x3D; (*env)-&gt;GetIntArrayElements(env,jint_new_arr,NULL);int i &#x3D; len-1;for(; i &gt;&#x3D; 0; i--)&#123;    int j &#x3D; len-1-i;    new_elems[j] &#x3D; elems[i];&#125;&#x2F;&#x2F;同步(*env)-&gt;ReleaseIntArrayElements(env, jint_new_arr, new_elems, JNI_COMMIT);return jint_new_arr;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JNI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> JNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI 开发流程</title>
      <link href="20180915/jni/yi-jni-kai-fa-liu-cheng/"/>
      <url>20180915/jni/yi-jni-kai-fa-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="jni-开发流程"><a class="markdownIt-Anchor" href="#jni-开发流程"></a> JNI 开发流程</h1><h2 id="一-c-语言执行的流程"><a class="markdownIt-Anchor" href="#一-c-语言执行的流程"></a> 一、C 语言执行的流程</h2><ol><li>编辑：编写代码的过程。</li><li>预编译（预处理）：为编译做准备工作，完成代码文本的替换工作。</li><li>编译：形成目标代码(.obj)。</li><li>连接：将目标代码与C 函数库连接合并，形成最终的可执行文件。</li><li>执行：执行可执行文件。</li></ol><h2 id="二-头文件"><a class="markdownIt-Anchor" href="#二-头文件"></a> 二、头文件</h2><h3 id="1-头文件的作用"><a class="markdownIt-Anchor" href="#1-头文件的作用"></a> 1、头文件的作用</h3><p><strong>头文件告诉编译器有这样一个函数，连接器负责找到这个函数的实现</strong></p><h3 id="2-自定义头文件"><a class="markdownIt-Anchor" href="#2-自定义头文件"></a> 2、自定义头文件</h3><p>*<strong>注：开发工具为 Visual Studio 2017</strong></p><h4 id="1-创建-h-文件对相应方法进行声明"><a class="markdownIt-Anchor" href="#1-创建-h-文件对相应方法进行声明"></a> 1、创建 .h 文件，对相应方法进行声明。</h4><p>例如：创建 math.h</p><pre class="line-numbers language-none"><code class="language-none">#ifndef _MATH_H  &#x2F;&#x2F;如果没有定义 _MATH_H 标识#define _MATH_H  &#x2F;&#x2F;定义 _MATH_H 标识int add(int, int, int);#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;该头文件只被包含一次，让编译器自己处理好循环包含问题#pragma once int add(int, int, int);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-在-h-文件同级目录下创建对应的-c-文件对-h-文件中声明的方法进行实现"><a class="markdownIt-Anchor" href="#2-在-h-文件同级目录下创建对应的-c-文件对-h-文件中声明的方法进行实现"></a> 2、在 .h 文件同级目录下创建对应的 .c 文件，对 .h 文件中声明的方法进行实现。</h4><p>例如：创建 head.c</p><pre class="line-numbers language-none"><code class="language-none">#define _CRT_SECURE_NO_WARNINGS#include &quot;math.h&quot;#include &lt;stdio.h&gt;int add(int a, int b, int c)&#123;   int result &#x3D; 0;   result &#x3D; a + b + c;   return result;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-创建一个c文件进行验证头文件是否编写成功"><a class="markdownIt-Anchor" href="#3-创建一个c文件进行验证头文件是否编写成功"></a> 3、创建一个C文件，进行验证头文件是否编写成功。</h4><p>例如：创建 test.c</p><pre class="line-numbers language-none"><code class="language-none">#include&lt;stdio.h&gt;#include &quot;math.h&quot;void main()&#123;int a &#x3D; 3, b &#x3D; 4, c &#x3D; 5, result &#x3D; 0;result &#x3D; add(a, b, c);printf(&quot;The result is %d!\n&quot;, result);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-define-指令"><a class="markdownIt-Anchor" href="#三-define-指令"></a> 三、define 指令</h2><h3 id="1-define-指令的作用"><a class="markdownIt-Anchor" href="#1-define-指令的作用"></a> 1、define 指令的作用</h3><ol><li>define 指令用来定义标识；<br />如：** #ifdef __cplusplus 标识支持C++语法；防止文件重复引入**</li><li>define 指令用来定义常数；如：<strong>#define MAX 100</strong></li><li>define 指令用来定义“宏函数”。<br />如：</li></ol><pre class="line-numbers language-none"><code class="language-none">void jni_read()&#123;    printf(&quot;read\n&quot;);&#125;void jni_write()&#123;    printf(&quot;write\n&quot;);&#125;&#x2F;** * 宏函数 *&#x2F;#define jin(NAME) jni_##NAME();void main()&#123;    jni(read);    jni(write);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>日志输出示例：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** *__VA_ARGS__    可变参数 *&#x2F;#define LOG(FOTMAT,...) printf(##FOTMAT,__VA_ARGS__);printf(&quot;\n&quot;);void main()&#123;    LOG(&quot;%s: %d&quot;,&quot;size&quot;,99);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-jni-java-native-interface"><a class="markdownIt-Anchor" href="#四-jni-java-native-interface"></a> 四、JNI (Java Native Interface)</h2><h3 id="1-定义"><a class="markdownIt-Anchor" href="#1-定义"></a> 1、定义</h3><p>**Java 调用C/C<ins>或者C/C</ins>调用 Java 的一套 API **</p><h3 id="2-java调用cc项目开发步骤windows系统下"><a class="markdownIt-Anchor" href="#2-java调用cc项目开发步骤windows系统下"></a> 2、Java调用C/C++项目开发步骤（Windows系统下）</h3><ul><li>编写native方法</li></ul><pre class="line-numbers language-none"><code class="language-none">package com.example.jni;public class JNITest &#123;    public native static String getStringFromC();        public static void main(String[] args)&#123;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>javah命令，生成.h文件</li></ul><pre class="line-numbers language-none"><code class="language-none">javah com.example.jni.JNITest&#x2F;&#x2F;生成 com_example_jni_JNITest.h 文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>复制.h头文件到CPP工程中</li><li>复制jni.h和jni_md.h文件到CPP工程中</li><li>实现.h头文件中声明的函数；C函数名称：Java_完整类名_函数名</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;JNITest.c#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_getStringFromC(JNIEnv *jEnv, jclass jcls) &#123;&#x2F;&#x2F;简单实现，将C的字符传转成Java的字符串return (*jEnv)-&gt;NewStringUTF(jEnv, &quot;C String&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>生成动态库.dll文件(Windows环境下默认dll，Linux环境下默认为so)</li><li>配置D:\dll 目录到环境变量，并将刚刚生成的 .dll 文件复制到D:\dll 目录下；或者复制到项目根目录下；</li><li>重启Eclipse，使用IDEA的需要在项目运行配置中的 VM options 中增加配置：</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; VM options:-Djava.library.path&#x3D;D:\dll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="五-jnienv"><a class="markdownIt-Anchor" href="#五-jnienv"></a> 五、JNIEnv</h2><h3 id="1-jnienv-是什么"><a class="markdownIt-Anchor" href="#1-jnienv-是什么"></a> 1、JNIEnv 是什么</h3><ul><li><strong>在C语言中JNIEnv是一个结构体指针，代表Java运行环境，主要是调用Java中的代码，在上面JNITest.c中实现函数声明的时候，jEnv 是一个二级指针</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;JNITest.c#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_getStringFromC(JNIEnv *jEnv, jclass jcls) &#123;&#x2F;&#x2F;简单实现，将C的字符传转成Java的字符串return (*jEnv)-&gt;NewStringUTF(jEnv, &quot;C String&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>在C++中JNIEnv是一个结构体的别名，代表Java运行环境，主要是调用Java中的代码，jEnv 是一个结构体的一级指针</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;JNITest.cpp#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_getStringFromC(JNIEnv *jEnv, jclass jcls) &#123;&#x2F;&#x2F;简单实现，将C的字符传转成Java的字符串return jEnv-&gt;NewStringUTF(&quot;C String&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模拟C 的实现</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;JNIEnv 是结构体指针的别名typedef struct JNINativeInferface_* JNIEnv;&#x2F;&#x2F;结构体struct JNINativeInferface_&#123;    char* (*NewStringUTF)(JNIEnv*,char*);&#125;;&#x2F;&#x2F;函数实现char* NewStringUTF(JNIEnv* env,char* str)&#123;    return str;&#125;void main()&#123;    &#x2F;&#x2F;实例化结构体    struct JNINativeInferface_ struct_env;    struct_env.NewStringUTF &#x3D; NewStringUTF;        &#x2F;&#x2F;结构体指针    JNIEnv e &#x3D; &amp;struct_env;    &#x2F;&#x2F;结构体的二级指针    JNIEnv *env &#x3D; &amp;e;    &#x2F;&#x2F;通过二级指针调用函数    char* str &#x3D; (*env)-&gt;NewStringUTF(env,&quot;Hello&quot;);    printf(&quot;str &#x3D; %s\n&quot;,str);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-jnienv-调用函数时c和c的区别"><a class="markdownIt-Anchor" href="#2-jnienv-调用函数时c和c的区别"></a> 2、JNIEnv 调用函数时C和C++的区别</h3><ul><li>C 中需要传入 JNIEnv ，因为函数执行过程中需要 JNIEnv</li><li>C++ 中不需要传入 JNIEnv ，是因为C++中有 this，相当与JNIEnv</li><li>C++只是针对C的那一套进行分装，给一个变量赋值为指针，这个变量是二级指针</li></ul><h2 id="六-jclass"><a class="markdownIt-Anchor" href="#六-jclass"></a> 六、jclass</h2><p>每个native函数（C中的函数），都至少有两个参数(JNIEnv* jclass或者jobject)。</p><ul><li>当native方法为静态方法时：jclass代表native 方法所属类的class对象（JNITest.class）；</li><li>当 native 方法为非静态方法时：jobject 代表 native 方法所属的对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JNI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> JNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（五）C语言之联合体，枚举与IO</title>
      <link href="20180910/c-c/wu-c-yu-yan-zhi-lian-he-ti-mei-ju-yu-io/"/>
      <url>20180910/c-c/wu-c-yu-yan-zhi-lian-he-ti-mei-ju-yu-io/</url>
      
        <content type="html"><![CDATA[<h1 id="五c语言之联合体枚举与io"><a class="markdownIt-Anchor" href="#五c语言之联合体枚举与io"></a> （五）C语言之联合体，枚举与IO</h1><h2 id="一-联合体共用体"><a class="markdownIt-Anchor" href="#一-联合体共用体"></a> 一、联合体（共用体）</h2><h3 id="1-定义"><a class="markdownIt-Anchor" href="#1-定义"></a> 1、定义</h3><p><strong>不同类型的变量共同占用一段内存（相互覆盖），联合变量任何时刻只有一个成员存在，节省内存</strong></p><h3 id="2-大小"><a class="markdownIt-Anchor" href="#2-大小"></a> 2、大小</h3><p><strong>联合体变量的大小=最大的成员所占的字节数</strong></p> <pre class="line-numbers language-none"><code class="language-none">union MyValue&#123;    int x;    int y;    double z;&#125;;void main()&#123;    union MyValue d1;    d1.x &#x3D; 90;    d1.y &#x3D; 100;    printf(&quot;%d,%d,%lf\n&quot;,d1.x,d1.y,d1.z);    d1.z &#x3D; 25.8;    printf(&quot;%d,%d,%lf\n&quot;,d1.x,d1.y,d1.z);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">100,100,-92559592117433135502616407313071917486139351398276445610442752.000000-858993459,-858993459,25.800000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>根据上面代码可得出结论：<strong>在联合体中，最后一次赋值有效</strong></p><h2 id="二-枚举"><a class="markdownIt-Anchor" href="#二-枚举"></a> 二、枚举</h2><h3 id="1-定义-2"><a class="markdownIt-Anchor" href="#1-定义-2"></a> 1、定义</h3><p><strong>“枚举”就是把可能的值（固定的数据）一一的列举出来，变量的值只限于列举出来的值的范围</strong></p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">enum Day&#123;    Monday,    Tuesday,    Wednesday,    Thursday,    Friday,    Saturday,    Sunday&#125;;void main()&#123;    enum Day d &#x3D; Wednesday;    printf(&quot;Today is %d,%#x\n&quot;,d,&amp;d);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-io操作"><a class="markdownIt-Anchor" href="#三-io操作"></a> 三、IO操作</h2><h3 id="1-读取文本文件"><a class="markdownIt-Anchor" href="#1-读取文本文件"></a> 1、读取文本文件</h3><p><a href="http://www.cplusplus.com/reference/cstdio/fopen/">参考文档</a></p><p>读取文件的方法为:</p><p><strong>FILE * fopen(char * path,char * model)</strong></p><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    char path[] &#x3D; &quot;D:\\test.txt&quot;;    &#x2F;&#x2F;打开     FILE *fp &#x3D; fopen(path,&quot;r&quot;);    if(fp &#x3D;&#x3D; NULL)&#123;        printf(&quot;文件打开失败...\n&quot;);        return;    &#125;    &#x2F;&#x2F;读取    char buff[50];&#x2F;&#x2F;缓冲    while(fgets(buff,50,fp))&#123;        printf(&quot;%s&quot;,buff);    &#125;    &#x2F;&#x2F;关闭    fclose(fp);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-写入文本文件"><a class="markdownIt-Anchor" href="#2-写入文本文件"></a> 2、写入文本文件</h3><p><a href="http://www.cplusplus.com/reference/cstdio/fputs/">参考文档</a></p><p>写入文件的方法为:</p><p><strong>fputs(char * text,FILE * _file)</strong></p><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    char path[] &#x3D; &quot;D:\\test_new.txt&quot;;    &#x2F;&#x2F;打开     FILE *fp &#x3D; fopen(path,&quot;w&quot;);    if(fp &#x3D;&#x3D; NULL)&#123;        printf(&quot;文件打开失败...\n&quot;);        return;    &#125;    &#x2F;&#x2F;写入    char *text &#x3D; &quot;How are you?\nI am fine,Thank You!&quot;;    fputs(text,fp);    &#x2F;&#x2F;关闭    fclose(fp);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-操作二进制文件"><a class="markdownIt-Anchor" href="#3-操作二进制文件"></a> 3、操作二进制文件</h3><ul><li><p>计算机的文件存储在物理上都是二进制；文本文件和二进制之分，其实是一个逻辑之分</p></li><li><p>C读写文本文件与二进制文件的差别仅仅体现在回车换行符</p></li><li><p>写文本时，每遇到一个’\n’,会将其转换成’\r\n’,(回车换行)</p></li><li><p>读文本时，每遇到一个’\r\n’,会将其转换成’\n’</p></li></ul><p><strong>size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );</strong><br /><a href="http://www.cplusplus.com/reference/cstdio/fread/">参考文档</a><br /><strong>参数：</strong></p><ul><li>ptr :<br />指向大小至少为（size * count）个字节的内存块的指针，转换为void *。</li><li>size :<br />要读取的每个元素的大小（以字节为单位）。<br />size_t是无符号整数类型。</li><li>count :<br />元素数量，每个元素的大小为字节大小。<br />size_t是无符号整数类型。</li><li>stream:<br />指向指定输入流的FILE对象的指针。</li></ul><p><strong>size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );</strong><br /><a href="http://www.cplusplus.com/reference/cstdio/fwrite/">参考文档</a><br /><strong>参数：</strong></p><ul><li>ptr :<br />指向大小至少为（size * count）个字节的内存块的指针，转换为void *。</li><li>size :<br />要读取的每个元素的大小（以字节为单位）。<br />size_t是无符号整数类型。</li><li>count :<br />元素数量，每个元素的大小为字节大小。<br />size_t是无符号整数类型。</li><li>stream:<br />指向指定输入流的FILE对象的指针。</li></ul><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    char read_path[] &#x3D; &quot;D:\\avatar.jpg&quot;;    char write_path[] &#x3D; &quot;D:\\avatar_new.jpg&quot;;    &#x2F;&#x2F;读的文件,b字符表示操作二进制文件（binary）    FILE *read_fp &#x3D; fopen(read_path,&quot;rb&quot;);        &#x2F;&#x2F;写的文件    FILE *write_fp &#x3D; fopen(write_path,&quot;wb&quot;);;    &#x2F;&#x2F;复制    int buff[50];&#x2F;&#x2F;缓冲区域    int len &#x3D; 0;&#x2F;&#x2F;每次读到的内容的长度    while((len &#x3D; fread(buff,sizeof(int),50,read_fp))!&#x3D;0)&#123;        &#x2F;&#x2F;将读取到的内容写入新文件        fwrite(buff,sizeof(int),50,write_fp);    &#125;    &#x2F;&#x2F;关闭    fclose(read_fp);     fclose(write_fp);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-获取文件的大小"><a class="markdownIt-Anchor" href="#4-获取文件的大小"></a> 4、获取文件的大小</h3><p><strong>重新定位文件指针：</strong></p><p><strong>int fseek ( FILE * stream, long int offset, int origin );</strong></p><p>参数：</p><ul><li>stream：<br />指向标识流的FILE对象的指针。</li><li>offset：<br />二进制文件：从原点偏移的字节数。<br />文本文件：零或ftell返回的值</li><li>origin：<br />位置用作偏移的参考。 它由<cstdio>中定义的以下常量之一指定，专门用作此函数的参数：</li></ul><table><thead><tr><th>Constant</th><th>Reference position</th></tr></thead><tbody><tr><td>SEEK_SET</td><td>文件开头</td></tr><tr><td>SEEK_CUR</td><td>文件指针的当前位置</td></tr><tr><td>SEEK_END</td><td>文件结束</td></tr></tbody></table><p>*允许库实现无意义地支持SEEK_END（因此，使用它的代码没有真正的标准可移植性）。</p><p><strong>返回当前的文件指针，相对于文件开头的位移量：</strong></p><p><strong>long ftell ( FILE * stream);</strong></p><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    char read_path[] &#x3D; &quot;D:\\avatar.jpg&quot;;    FILE *fp &#x3D; fopen(read_path,&quot;r&quot;);    &#x2F;&#x2F;重新定位文件指针    fseek(fp,0,SEEK_END);    &#x2F;&#x2F;返回当前的文件指针，相对于文件开头的位移量    long filesize &#x3D; ftell(fp);    printf(&quot;filesize &#x3D; %d\n&quot;,filesize);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-文本文件的加密解密"><a class="markdownIt-Anchor" href="#5-文本文件的加密解密"></a> 5、文本文件的加密解密</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;加密void crpypt(char normal_path[], char crypt_path[]) &#123;&#x2F;&#x2F;打开文件FILE *normal_fp &#x3D; fopen(normal_path, &quot;r&quot;);FILE *crypt_fp &#x3D; fopen(crypt_path, &quot;w&quot;);&#x2F;&#x2F;一次读取一个字符int ch;while ((ch &#x3D; fgetc(normal_fp)) !&#x3D; EOF) &#123;&#x2F;&#x2F;End of FILE&#x2F;&#x2F;加密fputc(ch ^ 9, crypt_fp);&#125;fclose(normal_fp);fclose(crypt_fp);&#125;&#x2F;&#x2F;解密void decrpypt(char crypt_path[], char decrpypt_path[]) &#123;&#x2F;&#x2F;打开文件FILE *crypt_fp &#x3D; fopen(crypt_path, &quot;r&quot;);FILE *decrpypt_fp &#x3D; fopen(decrpypt_path, &quot;w&quot;);&#x2F;&#x2F;一次读取一个字符int ch;while ((ch &#x3D; fgetc(crypt_fp)) !&#x3D; EOF) &#123;&#x2F;&#x2F;End of FILE&#x2F;&#x2F;加密fputc(ch ^ 9, decrpypt_fp);&#125;fclose(crypt_fp);fclose(decrpypt_fp);&#125;void main() &#123;char normal_path[] &#x3D; &quot;D:\\test.txt&quot;;char crypt_path[] &#x3D; &quot;D:\\test_crypt.txt&quot;;char decrypt_path[] &#x3D; &quot;D:\\test_decrypt.txt&quot;;crpypt(normal_path, crypt_path);decrpypt(crypt_path, decrypt_path);getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-二进制文件的加密解密"><a class="markdownIt-Anchor" href="#6-二进制文件的加密解密"></a> 6、二进制文件的加密解密</h3><p><strong>读取二进制文件中的数据时，一个一个字符读取</strong><br />密码：qazwsx</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;加密void crpypt(char normal_path[], char crypt_path[], char password[]) &#123;&#x2F;&#x2F;打开文件FILE *normal_fp &#x3D; fopen(normal_path, &quot;rb&quot;);FILE *crypt_fp &#x3D; fopen(crypt_path, &quot;wb&quot;);&#x2F;&#x2F;一次读取一个字符int ch;    int i &#x3D; 0;int pwd_len &#x3D; strlen(password);while ((ch &#x3D; fgetc(normal_fp)) !&#x3D; EOF) &#123;&#x2F;&#x2F;End of FILE&#x2F;&#x2F;加密fputc(ch ^ password[i % pwd_len], crypt_fp);i++;&#125;fclose(normal_fp);fclose(crypt_fp);&#125;&#x2F;&#x2F;解密void decrpypt(char crypt_path[], char decrpypt_path[], char password[]) &#123;&#x2F;&#x2F;打开文件FILE *crypt_fp &#x3D; fopen(crypt_path, &quot;rb&quot;);FILE *decrpypt_fp &#x3D; fopen(decrpypt_path, &quot;wb&quot;);&#x2F;&#x2F;一次读取一个字符int ch;int i &#x3D; 0;int pwd_len &#x3D; strlen(password);while ((ch &#x3D; fgetc(crypt_fp)) !&#x3D; EOF) &#123;&#x2F;&#x2F;End of FILE&#x2F;&#x2F;加密fputc(ch ^ password[i % pwd_len], decrpypt_fp);i++;&#125;fclose(crypt_fp);fclose(decrpypt_fp);&#125;void main() &#123;    char password[] &#x3D;&quot;qazwsx&quot;;char normal_path[] &#x3D; &quot;D:\\avatar.jpg&quot;;char crypt_path[] &#x3D; &quot;D:\\avatar_crypt.jpg&quot;;char decrypt_path[] &#x3D; &quot;D:\\avatar_decrypt.jpg&quot;;crpypt(normal_path, crypt_path,password);decrpypt(crypt_path, decrypt_path,password);getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（四）C语言之结构体</title>
      <link href="20180903/c-c/si-c-yu-yan-zhi-jie-gou-ti/"/>
      <url>20180903/c-c/si-c-yu-yan-zhi-jie-gou-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="四c语言之结构体"><a class="markdownIt-Anchor" href="#四c语言之结构体"></a> （四）C语言之结构体</h1><h2 id="一-什么是结构体"><a class="markdownIt-Anchor" href="#一-什么是结构体"></a> 一、什么是结构体</h2><p>结构体是一种构造数据类型，就是把不同的数据类型整合起来成为一个自定义的数据类型</p><h2 id="二-初始化结构体的变量"><a class="markdownIt-Anchor" href="#二-初始化结构体的变量"></a> 二、初始化结构体的变量</h2><h3 id="1-第一种初始化方式"><a class="markdownIt-Anchor" href="#1-第一种初始化方式"></a> 1. 第一种初始化方式</h3><p>struct [结构体类型] [结构体变量名] = {[结构体内参数实例化值]</p><h3 id="2-第二种初始化方式"><a class="markdownIt-Anchor" href="#2-第二种初始化方式"></a> 2. 第二种初始化方式</h3><p>struct [结构体类型] [结构体变量名] ;</p><p>[结构体变量名].[结构体参数名] = [实例化值];</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">struct Man&#123;char name[20];int age;char* mobile;&#125;;void main() &#123;struct Man m1 &#x3D; &#123; &quot;Jack&quot;,20 ,&quot;18800008888&quot;&#125;;printf(&quot;%s,%d,%s\n&quot;, m1.name, m1.age,m1.mobile);&#x2F;&#x2F;或struct Man m2 ;&#x2F;&#x2F;m2.name 数组类型不能直接复制strcpy(m2.name, &quot;Rose&quot;);m2.age &#x3D; 23;m2.mobile &#x3D; &quot;16600001111&quot;;printf(&quot;%s,%d,%s\n&quot;, m2.name, m2.age,m2.mobile);getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">Jack,20,18800008888Rose,23,16600001111<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三-结构体的几种写法"><a class="markdownIt-Anchor" href="#三-结构体的几种写法"></a> 三、结构体的几种写法</h2><h3 id="1-第一种写法"><a class="markdownIt-Anchor" href="#1-第一种写法"></a> 1、第一种写法</h3><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">struct Man&#123;char name[20];int age;&#125;;void main() &#123;struct Man m1 &#x3D; &#123; &quot;Jack&quot;,20&#125;;printf(&quot;%s,%d\n&quot;, m1.name, m1.age);getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-第二种写法可以在结构体类型的后定义结构体变量名也可以对结构体变量名进行初始化"><a class="markdownIt-Anchor" href="#2-第二种写法可以在结构体类型的后定义结构体变量名也可以对结构体变量名进行初始化"></a> 2、第二种写法，可以在结构体类型的}后，定义结构体变量名，也可以对结构体变量名进行初始化。</h3><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">struct Man &#123;char* name;int age;&#125; Man,m2&#x3D;&#123;&quot;jack&quot;,20&#125;;void main() &#123;Man.name &#x3D; &quot;Tom&quot;;Man.age &#x3D; 19;printf(&quot;%s,%d\n&quot;, Man.name,Man.age);getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-第三种写法匿名结构体控制结构体变量的个数限量版相当于单例"><a class="markdownIt-Anchor" href="#3-第三种写法匿名结构体控制结构体变量的个数限量版相当于单例"></a> 3、第三种写法:匿名结构体,控制结构体变量的个数（限量版），相当于单例</h3><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">struct  &#123;char* name;int age;&#125; Woman;void main() &#123;Woman.name &#x3D; &quot;Lili&quot;;Woman.age &#x3D; 19;printf(&quot;%s,%d\n&quot;, Woman.name,Woman.age);getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-结构体嵌套"><a class="markdownIt-Anchor" href="#四-结构体嵌套"></a> 四、结构体嵌套</h2><p>结构体是可以进行嵌套使用的,可以分别定义使用，或者在一个结构体中定义另一个结构体</p><h3 id="1-分别定义结构体嵌套"><a class="markdownIt-Anchor" href="#1-分别定义结构体嵌套"></a> 1、分别定义结构体嵌套</h3><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 老师的结构体struct Teacher &#123;char name[20];&#125;;&#x2F;&#x2F; 学生的结构体struct Student &#123;char name[20];int age;struct Teacher t;&#125;;void main() &#123;struct Student s1 &#x3D; &#123; &quot;jack&quot;,21,&#123;&quot;Jason&quot;&#125; &#125;;struct Student s2;strcpy(s2.name, &quot;Tom&quot;);s2.age &#x3D; 23;strcpy(s2.t.name, &quot;Jason&quot;);getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-结构体内定义结构体嵌套"><a class="markdownIt-Anchor" href="#2-结构体内定义结构体嵌套"></a> 2、结构体内定义结构体嵌套</h3><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 学生的结构体struct Student &#123;char name[20];int age;&#x2F;&#x2F; 老师的结构体    struct Teacher &#123;    char name[20];    &#125; t;&#125;;void main() &#123;struct Student s1 &#x3D; &#123; &quot;jack&quot;,21,&#123;&quot;Jason&quot;&#125; &#125;;struct Student s2;strcpy(s2.name, &quot;Tom&quot;);s2.age &#x3D; 23;strcpy(s2.t.name, &quot;Jason&quot;);getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五-结构体与指针"><a class="markdownIt-Anchor" href="#五-结构体与指针"></a> 五、结构体与指针</h2><p>结构体变量也可以使用指针进行操作，&quot;p-&gt;“是”(*p).&quot;的简写形式</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">struct Man&#123;    char name[20];    int age;&#125;;void main()&#123;    struct Man m1 &#x3D; &#123;&quot;Jack&quot;,30&#125;;    &#x2F;&#x2F;结构体指针    struct Man *p &#x3D; &amp;m1;    printf(&quot;%s,%d\n&quot;,(*p).name,(*p).age);    &#x2F;&#x2F;&quot;p-&gt;&quot;是&quot;(*p).&quot;的简写形式    printf(&quot;%s,%d\n&quot;,p-&gt;name,p-&gt;age);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六-结构体数组与指针"><a class="markdownIt-Anchor" href="#六-结构体数组与指针"></a> 六、结构体数组与指针</h2><p>结构体变量也可以使用指针进行操作，&quot;p-&gt;“是”(*p).&quot;的简写形式</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">struct Man &#123;char name[20];int age;&#125;;void main() &#123;struct Man mans[] &#x3D; &#123; &#123;&quot;Jack&quot;,30&#125;,&#123;&quot;Rose&quot;,19&#125; &#125;;&#x2F;&#x2F;遍历数组struct Man *p &#x3D; mans;for (; p &lt; mans + 2; p++) &#123;printf(&quot;%s,%d\n&quot;, p-&gt;name, p-&gt;age);&#125;int i &#x3D; 0;for (; i &lt; sizeof(mans) &#x2F; sizeof(struct Man); i++) &#123;printf(&quot;%s,%d\n&quot;, mans[i].name, mans[i].age);&#125;getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七-结构体的大小字节对齐"><a class="markdownIt-Anchor" href="#七-结构体的大小字节对齐"></a> 七、结构体的大小（字节对齐）</h2><p><strong>结构体的大小必须是结构体中最宽基本数据类型的整数倍</strong></p><p><strong>牺牲一定的存储空间（本需要12字节的空间，实际分配16字节，（最宽基本数据类型的整数倍）），提升读取的效率</strong></p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">struct Man &#123;int age;double weight;&#125;;void main() &#123;struct Man m1 &#x3D; &#123; 20,80.9 &#125;;printf(&quot;%#x,%d\n&quot;, &amp;m1,sizeof(m1));getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">0xcffcc4,16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="八-结构体与动态内存分配"><a class="markdownIt-Anchor" href="#八-结构体与动态内存分配"></a> 八、结构体与动态内存分配</h2><pre class="line-numbers language-none"><code class="language-none">struct Man&#123;    char *name;    int age;&#125;;void main()&#123;    struct Man *man_p &#x3D; (struct Man*)malloc(sizeof(struct Man)*10);    struct Man *p &#x3D; man_p;    &#x2F;&#x2F;赋值    p-&gt;name &#x3D; &quot;Jack&quot;;    p-&gt;age &#x3D; 20;    p++;    p-&gt;name &#x3D; &quot;Rose&quot;;    p-&gt;age &#x3D; 23;        struct Man *loop_p &#x3D;man_p  ;    for(;loop_p &lt; man_p+2;loop_p++)&#123;        printf(&quot;%s,%d\n&quot;,loop_p-&gt;name,loop_p-&gt;age);    &#125;    free(man_p);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九-typedef-类型取别名"><a class="markdownIt-Anchor" href="#九-typedef-类型取别名"></a> 九、typedef 类型取别名</h2><p><strong>1、不同的名称代表在干不同的事情；typedef int jint;</strong></p><p><strong>2、不同的情况下，使用不同的别名</strong></p><pre class="line-numbers language-none"><code class="language-none">if(_cplusplus)&#123;    typedef _JNIEvn JNIEvn;    typedef _JavaVM JavaVM;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3、书写简洁</strong></p><pre class="line-numbers language-none"><code class="language-none">struct Man&#123;    char *name;    int age;&#125;;&#x2F;&#x2F;Age  int 类型的别名typedef int Age;&#x2F;&#x2F;Ap int 类型指针的别名typedef int* Ap;typedef struct Man JavaMan;typedef struct Man* JM;&#x2F;&#x2F;简写typedef struct Woman&#123;    char name[20];    int age;&#125; W,*WP;&#x2F;&#x2F; W 是Woman结构体的别名；WP 是Woman结构体指针的别名。void main()&#123;    int i &#x3D; 5;    Ap p &#x3D; &amp;i;    &#x2F;&#x2F;结构体变量    W w1 &#x3D; &#123;&quot;Rose&quot;,25&#125;;    &#x2F;&#x2F;结构体指针    WP wp1 &#x3D; &amp;w1;        printf(&quot;%s,%d\n&quot;,wp1-&gt;name,wp1-&gt;age);    getchar(); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十-结构体函数指针成员"><a class="markdownIt-Anchor" href="#十-结构体函数指针成员"></a> 十、结构体函数指针成员</h2><pre class="line-numbers language-none"><code class="language-none">#include &lt;Windows.h&gt;&#x2F;&#x2F;Girl 结构体类似于Java中的类，name和age类似于属性，sayHi类似于方法struct Girl&#123;    char *name;    int age;    &#x2F;&#x2F;函数指针    void(*sayHi) (char*);&#125;;void sayHi(char* text)&#123;    MessageBoxA(0,text,&quot;title&quot;,0);&#125;void main()&#123;   struct Girl g1;   g1.name &#x3D; &quot;Lucy&quot;;   g1.age &#x3D; 18;   g1.sayHi &#x3D; sayHi;      g1.sayHi(&quot;Hello!&quot;);   getchar(); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>取别名的写法</strong></p><pre class="line-numbers language-none"><code class="language-none">#include &lt;Windows.h&gt;&#x2F;&#x2F;Girl 结构体类似于Java中的类，name和age类似于属性，sayHi类似于方法typedef struct Girl&#123;    char *name;    int age;    &#x2F;&#x2F;函数指针    void(*sayHi) (char*);&#125;Girl;&#x2F;&#x2F;Girl结构体指针取别名typedef Girl* GirlP;void sayHi(char* text)&#123;    MessageBoxA(0,text,&quot;title&quot;,0);&#125;void main()&#123;   struct Girl g1 &#x3D; &#123;&quot;Lucy&quot;,19,sayHi&#125;;   GirlP gp1 &#x3D; &amp;g1;   gp1-&gt;sayHi(&quot;Hello&quot;);   getchar(); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（三）C语言之字符串与字符串函数</title>
      <link href="20180901/c-c/san-c-yu-yan-zhi-zi-fu-chuan-yu-zi-fu-chuan-han-shu/"/>
      <url>20180901/c-c/san-c-yu-yan-zhi-zi-fu-chuan-yu-zi-fu-chuan-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="三c语言之字符串与字符串函数"><a class="markdownIt-Anchor" href="#三c语言之字符串与字符串函数"></a> （三）C语言之字符串与字符串函数</h1><h3 id="字符串与字符串函数"><a class="markdownIt-Anchor" href="#字符串与字符串函数"></a> 字符串与字符串函数</h3><h4 id="1-字符串"><a class="markdownIt-Anchor" href="#1-字符串"></a> 1. 字符串</h4><ul><li>使用字符数组存储字符串,\0 表示结束符，字符串可以被修改</li></ul><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    char str[] &#x3D; &#123;&#39;c&#39;,&#39;h&#39;,&#39;i&#39;,&#39;n&#39;,&#39;a&#39;,&#39;\0&#39;&#125;;    &#x2F;&#x2F;char str[6] &#x3D; &#123;&#39;c&#39;,&#39;h&#39;,&#39;i&#39;,&#39;n&#39;,&#39;a&#39;&#125;;    &#x2F;&#x2F;char str[10] &#x3D; &quot;china&quot;;    printf(&quot;%s\n&quot;,str);    str[0] &#x3D; &#39;s&#39;;    printf(&quot;%s\n&quot;,str);    printf(&quot;%#x\n&quot;,str);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">chinashina0xd9fd64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用字符指针存储字符串，字符串不能被修改</li></ul><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    &#x2F;&#x2F;内存连续排列    char *str &#x3D; &quot;how are you?&quot;;    &#x2F;&#x2F;字符串不能被修改    &#x2F;&#x2F;str[0] &#x3D; &quot;w&quot;;    &#x2F;&#x2F;    &#x2F;&#x2F; str +&#x3D; 1;    &#x2F;&#x2F;*str &#x3D; &#39;y&#39;;    printf(&quot;%s\n&quot;,str);    printf(&quot;%#x\n&quot;,str);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">how are you?0x967be4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-字符串相关函数"><a class="markdownIt-Anchor" href="#2-字符串相关函数"></a> 2. 字符串相关函数</h4><p><a href="http://www.kuqin.com/clib/string/strcpy.html">在线API文档</a></p><ul><li>strcat 字符串拼接函数</li><li>strcpy 字符串复制函数</li></ul><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    char dest[50];    char *a &#x3D; &quot;china&quot;;    char *b &#x3D; &quot; is powerful!&quot;    &#x2F;&#x2F;将数组a复制到数组dest中    strcpy(dest,a);    &#x2F;&#x2F;将数组b拼接到数组dest上    strcat(dest,b);    printf(&quot;%s\n&quot;,dest);        getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">china is powerful!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>strchr 在一个字符串中查找给定字符的第1个匹配的之处</li></ul><pre class="line-numbers language-none"><code class="language-none"> void main(void)&#123;char *haystack &#x3D; &quot;I want go to USA!&quot;;char *needle &#x3D; &quot;to&quot;;&#x2F;&#x2F;U元素的指针char* p &#x3D; strstr(haystack, needle);if (p)&#123;printf(&quot;索引位置：%d\n&quot;, p - haystack);&#125;else&#123;printf(&quot;没有找到&quot;);&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>strcmp 比较字符串</li><li>strcmpi 比较字符串，忽略大小写</li></ul><pre class="line-numbers language-none"><code class="language-none">void main(void)&#123;char *str1 &#x3D; &quot;abc&quot;;char *str2 &#x3D; &quot;ABC&quot;;&#x2F;&#x2F;int r &#x3D; strcmpi(str1, str2);int r &#x3D; _strcmpi(str1, str2);printf(&quot;%d\n&quot;,r);&#x2F;&#x2F;str1 &gt; str2if (r &gt; 0)&#123;printf(&quot;str1 大于str2\n&quot;);&#125;else if (r &#x3D;&#x3D; 0)&#123;printf(&quot;str1 等于str2\n&quot;);&#125;&#x2F;&#x2F;str1 &lt; str2else if (r &lt; 0)&#123;printf(&quot;str1 小于str2\n&quot;);&#125;system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>strset 把字符串s中的所有字符都设置成字符c</li></ul><pre class="line-numbers language-none"><code class="language-none">void main(void)&#123;char str[] &#x3D; &quot;internet change the world!&quot;;_strset(str,&#39;w&#39;);printf(&quot;%s\n&quot;,str);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>strrev 把字符串s的所有字符的顺序颠倒过来</li></ul><pre class="line-numbers language-none"><code class="language-none">void main(void)&#123;char str[] &#x3D; &quot;internet change the world!&quot;;_strrev(str);printf(&quot;%s\n&quot;, str);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>atoi 字符串转为int类型</li><li>atol()：将字符串转换为长整型值</li></ul><pre class="line-numbers language-none"><code class="language-none">void main(void)&#123;char* str &#x3D; &quot;a78&quot;;&#x2F;&#x2F;int r &#x3D; atoi(str);printf(&quot;%d\n&quot;, r);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>strtod:字符串转为double类型</li></ul><pre class="line-numbers language-none"><code class="language-none">void main(void)&#123;char* str &#x3D; &quot;77b8b&quot;;char** p &#x3D; NULL;&#x2F;&#x2F;char* p &#x3D; str + 2;&#x2F;&#x2F;参数说明：str为要转换的字符串，endstr 为第一个不能转换的字符的指针double r &#x3D; strtod(str,p);printf(&quot;%lf\n&quot;, r);printf(&quot;%#x\n&quot;, p);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>strupr转换为大写</li></ul><pre class="line-numbers language-none"><code class="language-none">void main(void)&#123;char str[] &#x3D; &quot;CHINA motherland!&quot;;_strupr(str);printf(&quot;%s\n&quot;,str);system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>转换为小写</li></ul><pre class="line-numbers language-none"><code class="language-none">void mystrlwr(char str[],int len)&#123;int i &#x3D; 0;for (; i &lt; len; i++)&#123;&#x2F;&#x2F;A-Z 字母 a-Zif (str[i] &gt;&#x3D; &#39;A&#39; &amp;&amp; str[i] &lt;&#x3D; &#39;Z&#39;)&#123;str[i] &#x3D; str[i]-&#39;A&#39; + &#39;a&#39;;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）C语言之动态内存分配</title>
      <link href="20180828/c-c/er-c-yu-yan-zhi-dong-tai-nei-cun-fen-pei/"/>
      <url>20180828/c-c/er-c-yu-yan-zhi-dong-tai-nei-cun-fen-pei/</url>
      
        <content type="html"><![CDATA[<h1 id="二c语言之动态内存分配"><a class="markdownIt-Anchor" href="#二c语言之动态内存分配"></a> （二）C语言之动态内存分配</h1><h3 id="一-静态内存分配"><a class="markdownIt-Anchor" href="#一-静态内存分配"></a> 一、静态内存分配</h3><h5 id="定义是指定分配的内存长度就是静态内存分配是在栈内存中分配"><a class="markdownIt-Anchor" href="#定义是指定分配的内存长度就是静态内存分配是在栈内存中分配"></a> 定义是指定分配的内存长度就是静态内存分配，是在栈内存中分配</h5><pre class="line-numbers language-none"><code class="language-none">int a[1024];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二-c语言内存分配"><a class="markdownIt-Anchor" href="#二-c语言内存分配"></a> 二、C语言内存分配</h3><h4 id="1-栈区stack"><a class="markdownIt-Anchor" href="#1-栈区stack"></a> 1、栈区（stack）</h4><ul><li>windows下，栈内存分配2M(确定的常数)，超出了限制，提示 stack overflow 错误；</li><li>栈区中内存自动分配，自动释放</li></ul><h4 id="2-堆区heap"><a class="markdownIt-Anchor" href="#2-堆区heap"></a> 2、堆区（heap）</h4><ul><li>程序员手动分配内存，手动释放内存，占有操作系统80%的内存,通过malloc进行内存分配</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;在堆内存分配40M内存&#x2F;&#x2F;malloc参数是字节&#x2F;&#x2F;malloc 返回值是 void * ,是任意类型的指针int* p &#x3D; malloc(1024 * 1024 * 10 * sizeof(int));&#x2F;&#x2F;释放分配的内存free(p);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>calloc</li><li>realloc 重新分配内存</li><li>创建一个数组，动态指定数组的大小（在程序运行过程中，可以随意的开辟指定大小的内存，以供使用；相对于Java中的集合）</li></ul><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    &#x2F;&#x2F;静态内存分配创建数组，数组的大小是固定的    &#x2F;&#x2F;int a[10];        int len;    printf(&quot;输入数组的长度：&quot;);    scanf(&quot;%d&quot;,&amp;len);    &#x2F;&#x2F;开辟内存    int* p &#x3D; malloc(len * sizeof(int));    &#x2F;&#x2F;p是数组的首地址    &#x2F;&#x2F;给数组元素赋值（使用这一块刚刚开辟出来的内存区域）    int i &#x3D; 0;    for(;i &lt; len; i++)&#123;        p[i] &#x3D; rand() % 100;        printf(&quot;%d,%#x\n&quot;,p[i],&amp;p[i]);    &#125;    &#x2F;&#x2F;扩大刚刚分配的内存空间    printf(&quot;重新输入数组的长度：&quot;);    scanf(&quot;%d&quot;,&amp;len);    &#x2F;&#x2F;参数说明    &#x2F;&#x2F;1：原来的内存的指针    &#x2F;&#x2F;2：内存扩大之后的总大小    int* p2 &#x3D; realloc(p,sizeof(int) * len);    &#x2F;&#x2F;重新赋值    i &#x3D; 0;    for(;i &lt; len; i++)&#123;        p2[i] &#x3D; rand() % 200;        printf(&quot;%d,%#x\n&quot;,p2[i],&amp;p2[i]);    &#125;    &#x2F;&#x2F;手动释放内存    if(p !&#x3D; NULL)&#123;        free(p);        p &#x3D; NULL;    &#125;     if(p2 !&#x3D; NULL)&#123;        free(p2);        p2 &#x3D; NULL;    &#125;        getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入结果为（参考）：</p><pre class="line-numbers language-none"><code class="language-none">输入数组的长度：641,0x20233067,0x20233434,0x2023380,0x20233c69,0x20234024,0x202344<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-全局区或静态区"><a class="markdownIt-Anchor" href="#3-全局区或静态区"></a> 3、全局区或静态区</h4><h4 id="4-字符常量"><a class="markdownIt-Anchor" href="#4-字符常量"></a> 4、字符常量</h4><h4 id="5-程序代码区"><a class="markdownIt-Anchor" href="#5-程序代码区"></a> 5、程序代码区</h4><h3 id="三-静态内存分配与动态内存分配的区别"><a class="markdownIt-Anchor" href="#三-静态内存分配与动态内存分配的区别"></a> 三、静态内存分配与动态内存分配的区别</h3><h5 id="静态内存分配分配内存大小是固定的容易出现以下问题"><a class="markdownIt-Anchor" href="#静态内存分配分配内存大小是固定的容易出现以下问题"></a> 静态内存分配，分配内存大小是固定的；容易出现以下问题：</h5><ul><li>很容易超出栈内存的最大值</li><li>为了防止内存不够用会开辟更多的内存，容易浪费</li></ul><h5 id="动态内存分配在程序运行过程中动态指定需要使用的内存大小手动释放释放之后这些内存还可以被重新使用容易出现以下问题"><a class="markdownIt-Anchor" href="#动态内存分配在程序运行过程中动态指定需要使用的内存大小手动释放释放之后这些内存还可以被重新使用容易出现以下问题"></a> 动态内存分配，在程序运行过程中，动态指定需要使用的内存大小，手动释放，释放之后这些内存还可以被重新使用；容易出现以下问题：</h5><ul><li>缩小，缩小的那部分数据会丢失</li><li>扩大（连续的），如果当前内存段后面有需要的内存空间，直接扩展这段内存空间，realloc返回原指针；如果当前内存段后面的空闲字节不够，那么久使用堆中的第一个能够满足这一要求的内存块，将目前的数据复制到新的位置，并将原来的数据释放，返回新的内存地址；如果申请失败，返回NULL,原来的指针任然有效。</li></ul><h3 id="四-内存分配的几个注意细节"><a class="markdownIt-Anchor" href="#四-内存分配的几个注意细节"></a> 四、内存分配的几个注意细节</h3><ol><li>不能多次释放</li><li>释放完之后，给指针置为NULL</li><li>内存泄漏（p重载赋值之后，在free，并没有真正释放内存）</li></ol>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）C语言之基本数据类型、输入输出、指针</title>
      <link href="20180825/c-c/yi-c-yu-yan-zhi-ji-ben-shu-ju-lei-xing-shu-ru-shu-chu-zhi-zhen/"/>
      <url>20180825/c-c/yi-c-yu-yan-zhi-ji-ben-shu-ju-lei-xing-shu-ru-shu-chu-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="一c语言之基本数据类型-输入输出-指针"><a class="markdownIt-Anchor" href="#一c语言之基本数据类型-输入输出-指针"></a> （一）C语言之基本数据类型、输入输出、指针</h1><h3 id="一-基本数据类型"><a class="markdownIt-Anchor" href="#一-基本数据类型"></a> 一、基本数据类型</h3><h4 id="1-头文件"><a class="markdownIt-Anchor" href="#1-头文件"></a> 1、头文件</h4><p>引入头文件,在头文件中只有函数的声明，在编译的时候会去找到函数的实现</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-基本数据类型"><a class="markdownIt-Anchor" href="#2-基本数据类型"></a> 2、基本数据类型</h4><h5 id="1-基本数据类型所使用的输出占位符"><a class="markdownIt-Anchor" href="#1-基本数据类型所使用的输出占位符"></a> (1)、基本数据类型所使用的输出占位符</h5><table><thead><tr><th>数据类型</th><th>占位符</th></tr></thead><tbody><tr><td>short</td><td>%d</td></tr><tr><td>int</td><td>%d</td></tr><tr><td>long</td><td>%d</td></tr><tr><td>float</td><td>%f</td></tr><tr><td>double</td><td>%lf</td></tr><tr><td>char</td><td>%c</td></tr><tr><td>十六进制</td><td>%x</td></tr><tr><td>八进制</td><td>%o</td></tr><tr><td>字符串</td><td>%s</td></tr></tbody></table><h5 id="2-基本数据类型所占字节数"><a class="markdownIt-Anchor" href="#2-基本数据类型所占字节数"></a> (2)、基本数据类型所占字节数</h5><table><thead><tr><th>数据类型</th><th>字节数</th></tr></thead><tbody><tr><td>short</td><td>2</td></tr><tr><td>int</td><td>4</td></tr><tr><td>long</td><td>8</td></tr><tr><td>float</td><td>4</td></tr><tr><td>double</td><td>8</td></tr><tr><td>char</td><td>1</td></tr></tbody></table><h3 id="二-输入输出函数"><a class="markdownIt-Anchor" href="#二-输入输出函数"></a> 二、输入输出函数</h3><h4 id="1-输入函数"><a class="markdownIt-Anchor" href="#1-输入函数"></a> 1、输入函数</h4><p>scanf(&quot;%d&quot;,&amp;i);<br />控制台输入，&amp; 为取地址符</p><h4 id="2-输出函数"><a class="markdownIt-Anchor" href="#2-输出函数"></a> 2、输出函数</h4><p>printf(“i的值为：%d\n”,i);<br />控制台输输出函数</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;void main()&#123;    int i;    printf(&quot;请输入一个整数：&quot;);    &#x2F;&#x2F;赋值    scanf(&quot;%d&quot;,&amp;i);    &#x2F;&#x2F;打印    printf(&quot;i的值为：%d\n&quot;,i);    system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三-指针"><a class="markdownIt-Anchor" href="#三-指针"></a> 三、指针</h3><h4 id="1-指针的定义"><a class="markdownIt-Anchor" href="#1-指针的定义"></a> 1、指针的定义</h4><h5 id="指针存储的是变量的内存地址"><a class="markdownIt-Anchor" href="#指针存储的是变量的内存地址"></a> 指针存储的是变量的内存地址</h5><h5 id="变量名就是对内存空间中一段数据的抽象"><a class="markdownIt-Anchor" href="#变量名就是对内存空间中一段数据的抽象"></a> 变量名就是对内存空间中一段数据的抽象</h5><h5 id="内存地址就是系统给数据分配的编号"><a class="markdownIt-Anchor" href="#内存地址就是系统给数据分配的编号"></a> 内存地址就是系统给数据分配的编号</h5><pre class="line-numbers language-none"><code class="language-none">#include &lt;stdio.h&gt;void main()&#123;    int i &#x3D; 0;    &#x2F;&#x2F;指针变量,p 的值就是 i 这个变量的内存地址    int* p &#x3D; &amp;i;    printf(&quot;内存地址为：%#X\n&quot;,p);    system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><pre class="line-numbers language-none"><code class="language-none">内存地址为：0X8FF764<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="指针类型的定义在基本数据类型后加"><a class="markdownIt-Anchor" href="#指针类型的定义在基本数据类型后加"></a> 指针类型的定义：在基本数据类型后加*</h5><p>如：</p><pre class="line-numbers language-none"><code class="language-none">float f &#x3D; 88.6;&#x2F;&#x2F;创建一个float类型的指针float* fp &#x3D; &amp;f;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-none"><code class="language-none">float f &#x3D; 88.6;&#x2F;&#x2F;创建一个float类型的指针float *fp &#x3D; &amp;f;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="通过指针修改变量的值"><a class="markdownIt-Anchor" href="#通过指针修改变量的值"></a> 通过指针修改变量的值</h5><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    int i &#x3D; 90;    &#x2F;&#x2F;创建一个int类型的指针变量    int *p &#x3D; &amp;i;    printf(&quot;i的值为：%d\n&quot;,i);    &#x2F;&#x2F; p 代表变量 i 的内存地址    &#x2F;&#x2F; *p 代表 p 这个内存地址上的数据    *p &#x3D; 210;    printf(&quot;i的值为：%d\n&quot;,i);    system(&quot;pause&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出：</p><pre class="line-numbers language-none"><code class="language-none">i的值为：90i的值为：210<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="指针变量的内存地址说明"><a class="markdownIt-Anchor" href="#指针变量的内存地址说明"></a> 指针变量的内存地址说明：</h5><p><img src="/images/20180825/tu-01.png" alt="指针变量的内存地址说明" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/images/20180825/tu-01.png" class="lozad post-image"></p><h4 id="2-指针的类型"><a class="markdownIt-Anchor" href="#2-指针的类型"></a> 2、指针的类型</h4><h5 id="指针有类型地址没有类型"><a class="markdownIt-Anchor" href="#指针有类型地址没有类型"></a> 指针有类型，地址没有类型；</h5><p>地址只是开始的位置，类型是指明读取到什么位置结束</p><h4 id="3-null空指针"><a class="markdownIt-Anchor" href="#3-null空指针"></a> 3、NULL空指针</h4><p>指针为NULL的指针，默认值为0,默认内存地址访问0x000000操作系统不允许</p><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    int i &#x3D; 9;    int *p &#x3D; NULL;        &#x2F;&#x2F;空指针的默认值为0    printf(&quot;%#X\n&quot;,p);    &#x2F;&#x2F;访问内存地址0x000000操作系统不允许    printf(&quot;%d\n&quot;,*p);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-多级指针"><a class="markdownIt-Anchor" href="#4-多级指针"></a> 4、多级指针</h4><h5 id="指针保存的是变量的地址保存的这个变量还可以是一个指针变量"><a class="markdownIt-Anchor" href="#指针保存的是变量的地址保存的这个变量还可以是一个指针变量"></a> 指针保存的是变量的地址，保存的这个变量还可以是一个指针变量</h5><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    int a &#x3D; 50;    &#x2F;&#x2F;p1上保存的是 a 的地址    int* p1 &#x3D; &amp;a;    &#x2F;&#x2F;p2上保存的是 p1 的地址    int** p2 &#x3D; &amp;p1;    printf(&quot;p1d的值为：%#x,p2的值为：%#x\n&quot;,p1,p2);    &#x2F;&#x2F;通过p2 改变a的值    **p2 &#x3D; 90;    printf(&quot;a的值为：%d\n&quot;,a);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">p1d的值为：0xcffa9c,p2的值为：0xcffa90a的值为：90<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-指针运算"><a class="markdownIt-Anchor" href="#5-指针运算"></a> 5、指针运算</h4><h5 id="指针的运算一般在数组遍历时才有意义基于数据在内存中线性排列的方式"><a class="markdownIt-Anchor" href="#指针的运算一般在数组遍历时才有意义基于数据在内存中线性排列的方式"></a> 指针的运算，一般在数组遍历时才有意义，基于数据在内存中线性排列的方式</h5><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    &#x2F;&#x2F;数组在内存中连续存储    int ids[] &#x3D; &#123;78,90,23,65,19&#125;;    &#x2F;&#x2F;数组的变量名：ids就是数组的首地址    printf(&quot;%#x\n&quot;,ids);    printf(&quot;%#x\n&quot;,&amp;ids);    printf(&quot;%#x\n&quot;,&amp;ids[0]);    &#x2F;&#x2F;指针变量    int *p &#x3D; ids;    printf(&quot;%d\n&quot;,*p);    &#x2F;&#x2F;指针的加法    p++;&#x2F;&#x2F;指针向前移动sizeof(数据类型)个字节    printf(&quot;%d\n&quot;,*p);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">0x7dfaa00x7dfaa00x7dfaa07890<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通过指针给数组赋值"><a class="markdownIt-Anchor" href="#通过指针给数组赋值"></a> 通过指针给数组赋值</h5><pre class="line-numbers language-none"><code class="language-none">void main()&#123;    int uids[5];    int* p &#x3D; uids;    &#x2F;&#x2F;&#x2F;&#x2F;高级写法    &#x2F;&#x2F;int i &#x3D; 0;    &#x2F;&#x2F;for (;i &lt; 5; i++)&#123;    &#x2F;&#x2F;    uids[i] &#x3D; i;    &#x2F;&#x2F;&#125;    &#x2F;&#x2F;早些版本的写法    int i &#x3D; 0;    for(; p &lt; uids + 5 ; p++)&#123;        *p &#x3D; i;        i++;    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-函数指针"><a class="markdownIt-Anchor" href="#6-函数指针"></a> 6、函数指针</h4><p>函数指针的定义：</p><pre class="line-numbers language-none"><code class="language-none">[函数返回值类型]([函数指针的名称])([函数的参数列表])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#include &lt;Windows.h&gt;void msg(char* title,char* content)&#123;    MessageBox(0,content,title,0);&#125;void main()&#123;    &#x2F;&#x2F;msg();    &#x2F;&#x2F;函数指针    void(*fun_p)(char* title,char* content) &#x3D; msg;    fun_p(&quot;消息标题&quot;,&quot;消息内容&quot;);    getchar();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo 来优化管理自己的博客</title>
      <link href="20180620/h5/shi-yong-hexo-lai-you-hua-guan-li-zi-ji-de-bo-ke/"/>
      <url>20180620/h5/shi-yong-hexo-lai-you-hua-guan-li-zi-ji-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>上一篇博客<a href="/2017/10/20/github-yu-ming-da-jian-ge-ren-zhu-ye-ge-ren-bo-ke/">Github+域名搭建个人主页（个人博客）</a> 写了如何使用GitHub+域名搭建一个静态的个人主页，搭建好之后，就可以使用对应的域名来进行访问了，这篇博客主要是跟大家介绍使用Hexo对自己的个人博客进行优化，管理。</p><h1 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h1><h5 id="git客户端-下载安装一路默认安装即可"><a class="markdownIt-Anchor" href="#git客户端-下载安装一路默认安装即可"></a> Git客户端 ： <a href="https://git-scm.com/download/win">下载安装</a>，一路默认安装即可</h5><h5 id="nodejs-下载安装-一路默认安装即可"><a class="markdownIt-Anchor" href="#nodejs-下载安装-一路默认安装即可"></a> NodeJs: <a href="https://nodejs.org/en/">下载安装</a> ,一路默认安装即可</h5><h5 id="验证nodejs-是否安装成功"><a class="markdownIt-Anchor" href="#验证nodejs-是否安装成功"></a> 验证NodeJs 是否安装成功</h5><pre class="line-numbers language-none"><code class="language-none">Microsoft Windows [版本 10.0.17134.472](c) 2018 Microsoft Corporation。保留所有权利。C:\Users\Administrator&gt;node -vv11.6.0C:\Users\Administrator&gt;npm -v6.5.0-next.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1><p>参考  <a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></p><h5 id="安装-hexo"><a class="markdownIt-Anchor" href="#安装-hexo"></a> 安装 Hexo</h5><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><pre class="line-numbers language-none"><code class="language-none">$ npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="初始化-hexo"><a class="markdownIt-Anchor" href="#初始化-hexo"></a> 初始化 Hexo</h5><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre class="line-numbers language-none"><code class="language-none">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="_configyml"><a class="markdownIt-Anchor" href="#_configyml"></a> _config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p><h3 id="packagejson"><a class="markdownIt-Anchor" href="#packagejson"></a> package.json</h3><p>应用程序的信息。<a href="http://embeddedjs.com/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p><figcaption style="box-sizing: inherit; margin: -5px 0px 5px; font-size: 0.9em; color: rgb(153, 153, 153);">package.json</figcaption><pre class="line-numbers language-none"><code class="language-none">&#123; &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.0.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-index&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.1.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.1.0&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.2.4&quot;, &quot;hexo-server&quot;: &quot;^0.1.2&quot; &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="scaffolds"><a class="markdownIt-Anchor" href="#scaffolds"></a> scaffolds</h3><p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a class="markdownIt-Anchor" href="#source"></a> source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a class="markdownIt-Anchor" href="#themes"></a> themes</h3><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h2><p>您可以在 _config.yml 中修改大部分的配置。</p><h3 id="网站"><a class="markdownIt-Anchor" href="#网站"></a> 网站</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h3 id="网址"><a class="markdownIt-Anchor" href="#网址"></a> 网址</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td><td></td></tr><tr><td><code>root</code></td><td>网站根目录</td><td></td></tr><tr><td><code>permalink</code></td><td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td><td><code>:year/:month/:day/:title/</code></td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td><td></td></tr></tbody></table><blockquote><p><strong>网站存放在子目录</strong></p><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><h3 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>source_dir</code></td><td>资源文件夹，这个文件夹用来存放内容。</td><td><code>source</code></td></tr><tr><td><code>public_dir</code></td><td>公共文件夹，这个文件夹用于存放生成的站点文件。</td><td><code>public</code></td></tr><tr><td><code>tag_dir</code></td><td>标签文件夹</td><td><code>tags</code></td></tr><tr><td><code>archive_dir</code></td><td>归档文件夹</td><td><code>archives</code></td></tr><tr><td><code>category_dir</code></td><td>分类文件夹</td><td><code>categories</code></td></tr><tr><td><code>code_dir</code></td><td>Include code 文件夹</td><td><code>downloads/code</code></td></tr><tr><td><code>i18n_dir</code></td><td>国际化（i18n）文件夹</td><td><code>:lang</code></td></tr><tr><td><code>skip_render</code></td><td>跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob">glob 表达式</a>来匹配路径。</td><td></td></tr></tbody></table><blockquote><p><strong>提示</strong></p><p>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p></blockquote><h3 id="文章"><a class="markdownIt-Anchor" href="#文章"></a> 文章</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>new_post_name</code></td><td>新文章的文件名称</td><td>:title.md</td></tr><tr><td><code>default_layout</code></td><td>预设布局</td><td>post</td></tr><tr><td><code>auto_spacing</code></td><td>在中文和英文之间加入空格</td><td>false</td></tr><tr><td><code>titlecase</code></td><td>把标题转换为 title case</td><td>false</td></tr><tr><td><code>external_link</code></td><td>在新标签中打开链接</td><td>true</td></tr><tr><td><code>filename_case</code></td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td>0</td></tr><tr><td><code>render_drafts</code></td><td>显示草稿</td><td>false</td></tr><tr><td><code>post_asset_folder</code></td><td>启动 <a href="https://hexo.io/zh-cn/docs/asset-folders">Asset 文件夹</a></td><td>false</td></tr><tr><td><code>relative_link</code></td><td>把链接改为与根目录的相对位址</td><td>false</td></tr><tr><td><code>future</code></td><td>显示未来的文章</td><td>true</td></tr><tr><td><code>highlight</code></td><td>代码块的设置</td><td></td></tr></tbody></table><blockquote><p><strong>相对地址</strong></p><p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为<code>example.com</code>,您有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h3 id="分类-标签"><a class="markdownIt-Anchor" href="#分类-标签"></a> 分类 &amp; 标签</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>default_category</code></td><td>默认分类</td><td><code>uncategorized</code></td></tr><tr><td><code>category_map</code></td><td>分类别名</td><td></td></tr><tr><td><code>tag_map</code></td><td>标签别名</td><td></td></tr></tbody></table><h3 id="日期-时间格式"><a class="markdownIt-Anchor" href="#日期-时间格式"></a> 日期 / 时间格式</h3><p>Hexo 使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>date_format</code></td><td>日期格式</td><td><code>YYYY-MM-DD</code></td></tr><tr><td><code>time_format</code></td><td>时间格式</td><td><code>H:mm:ss</code></td></tr></tbody></table><h3 id="分页"><a class="markdownIt-Anchor" href="#分页"></a> 分页</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>per_page</code></td><td>每页显示的文章量 (0 = 关闭分页功能)</td><td><code>10</code></td></tr><tr><td><code>pagination_dir</code></td><td>分页目录</td><td><code>page</code></td></tr></tbody></table><h3 id="扩展"><a class="markdownIt-Anchor" href="#扩展"></a> 扩展</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>theme</code></td><td>当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td><code>deploy</code></td><td>部署部分的设置</td></tr></tbody></table><h2 id="选择主题"><a class="markdownIt-Anchor" href="#选择主题"></a> 选择主题</h2><p>在Hexo <a href="https://hexo.io/themes/">主题</a>中选择自己喜欢的主题，下载下来，解压之后，将主题的文件夹复制到 hexo 文件夹中的 theme 文件夹下 ；然后再hexo 根目录下更改<code>_config.yml</code> 文件中的 <code>theme</code> 的值</p><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">theme: hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要修改主题中的样式，可根据主题的说明文档 在 主题文件夹中的 <code>_config.yml</code> 文件中修改 或者修改对应的样式文件</p><h2 id="hexo-操作命令"><a class="markdownIt-Anchor" href="#hexo-操作命令"></a> Hexo 操作命令</h2><h3 id="init"><a class="markdownIt-Anchor" href="#init"></a> init</h3><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo init [folder]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="new"><a class="markdownIt-Anchor" href="#new"></a> New</h3><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo new [layout] &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="generate"><a class="markdownIt-Anchor" href="#generate"></a> generate</h3><p>生成静态文件。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>,<code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>,<code>--watch</code></td><td>监视文件变动</td></tr></tbody></table><p>该命令可以简写为</p><pre class="line-numbers language-none"><code class="language-none">$ hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="publish"><a class="markdownIt-Anchor" href="#publish"></a> publish</h3><p>发表草稿。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo publish [layout] &lt;filename&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="server"><a class="markdownIt-Anchor" href="#server"></a> server</h3><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>重设端口</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="deploy"><a class="markdownIt-Anchor" href="#deploy"></a> deploy</h3><p>部署网站。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令可以简写为：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="render"><a class="markdownIt-Anchor" href="#render"></a> render</h3><p>渲染文件。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-o</code>, <code>--output</code></td><td>设置输出路径</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">$ hexo render &lt;file1&gt; [file2] ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="migrate"><a class="markdownIt-Anchor" href="#migrate"></a> migrate</h3><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo migrate &lt;type&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="clean"><a class="markdownIt-Anchor" href="#clean"></a> clean</h3><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="list"><a class="markdownIt-Anchor" href="#list"></a> list</h3><p>列出网站资料。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo list &lt;type&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="version"><a class="markdownIt-Anchor" href="#version"></a> version</h3><p>显示 Hexo 版本。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="选项"><a class="markdownIt-Anchor" href="#选项"></a> 选项</h2><h3 id="安全模式"><a class="markdownIt-Anchor" href="#安全模式"></a> 安全模式</h3><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo --safe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="调试模式"><a class="markdownIt-Anchor" href="#调试模式"></a> 调试模式</h3><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo --debug<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="简洁模式"><a class="markdownIt-Anchor" href="#简洁模式"></a> 简洁模式</h3><p>隐藏终端信息。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo --silent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自定义配置文件的路径"><a class="markdownIt-Anchor" href="#自定义配置文件的路径"></a> 自定义配置文件的路径</h3><p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo --config custom.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="显示草稿"><a class="markdownIt-Anchor" href="#显示草稿"></a> 显示草稿</h3><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo --draft<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自定义-cwd"><a class="markdownIt-Anchor" href="#自定义-cwd"></a> 自定义 CWD</h3><p>自定义当前工作目录（Current working directory）的路径。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="服务器"><a class="markdownIt-Anchor" href="#服务器"></a> 服务器</h2><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 <a href="https://github.com/hexojs/hexo-server">hexo-server</a> 才能使用。</p><pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-server --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后，输入以下命令以启动服务器，您的网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果您想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 <code>-p</code> 选项指定其他端口，如下：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo server -p 5000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="静态模式"><a class="markdownIt-Anchor" href="#静态模式"></a> 静态模式</h3><p>在静态模式下，服务器只处理 <code>public</code> 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 <code>hexo generate</code>，此模式通常用于生产环境（production mode）下。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo server -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自定义-ip"><a class="markdownIt-Anchor" href="#自定义-ip"></a> 自定义 IP</h3><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：</p><pre class="line-numbers language-none"><code class="language-none">$ hexo server -i 192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p><h2 id="pow"><a class="markdownIt-Anchor" href="#pow"></a> Pow</h2><p><a href="http://pow.cx/">Pow</a> 是一个 Mac 系统上的零配置 Rack 服务器，它也可以作为一个简单易用的静态文件服务器来使用。</p><h3 id="安装-2"><a class="markdownIt-Anchor" href="#安装-2"></a> 安装</h3><pre class="line-numbers language-none"><code class="language-none">$ curl get.pow.cx | sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置"><a class="markdownIt-Anchor" href="#设置"></a> 设置</h3><p>在 <code>~/.pow</code> 文件夹建立链接（symlink）。</p><pre class="line-numbers language-none"><code class="language-none">$ cd ~&#x2F;.pow$ ln -s &#x2F;path&#x2F;to&#x2F;myapp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>您的网站将会在 <code>http://myapp.dev</code> 下运行，网址根据链接名称而定。</p><h2 id="生成文件"><a class="markdownIt-Anchor" href="#生成文件"></a> 生成文件</h2><p>使用 Hexo 生成静态文件快速而且简单。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="监视文件变动"><a class="markdownIt-Anchor" href="#监视文件变动"></a> 监视文件变动</h3><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo generate --watch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="完成后部署"><a class="markdownIt-Anchor" href="#完成后部署"></a> 完成后部署</h3><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo generate --deploy$ hexo deploy --generate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>简写</strong></p><p>上面两个命令可以简写为</p><pre class="line-numbers language-none"><code class="language-none">$ hexo g -d$ hexo d -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="部署"><a class="markdownIt-Anchor" href="#部署"></a> 部署</h2><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在开始之前，您必须先在 <code>_config.yml</code> 中修改参数，一个正确的部署配置中至少要有 <code>type</code> 参数，例如：</p><pre class="line-numbers language-none"><code class="language-none">deploy: type: git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。</p><pre class="line-numbers language-none"><code class="language-none">deploy:- type: git repo:- type: heroku repo:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>缩进</strong></p><p>YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。</p></blockquote><h3 id="git"><a class="markdownIt-Anchor" href="#git"></a> Git</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p><pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置。</p><pre class="line-numbers language-none"><code class="language-none">deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>repo</code></td><td>库（Repository）地址</td></tr><tr><td><code>branch</code></td><td>分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</td></tr><tr><td><code>message</code></td><td>自定义提交信息 (默认为 <code>Site updated: &#123;&#123; ('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code>)</td></tr></tbody></table><h3 id="heroku"><a class="markdownIt-Anchor" href="#heroku"></a> Heroku</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-heroku">hexo-deployer-heroku</a>。</p><pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-deployer-heroku --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置。</p><pre class="line-numbers language-none"><code class="language-none">deploy: type: heroku repo: &lt;repository url&gt; message: [message]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>repo</code></td><td>Heroku 库（Repository）地址</td></tr><tr><td><code>message</code></td><td>自定提交信息 (默认为 <code>Site updated: &#123;&#123; ('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code>)</td></tr></tbody></table><h3 id="rsync"><a class="markdownIt-Anchor" href="#rsync"></a> Rsync</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-rsync">hexo-deployer-rsync</a>。</p><pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-deployer-rsync --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置。</p><pre class="line-numbers language-none"><code class="language-none">deploy: type: rsync host: &lt;host&gt; user: &lt;user&gt; root: &lt;root&gt; port: [port] delete: [true|false] verbose: [true|false] ignore_errors: [true|false]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>host</code></td><td>远程主机的地址</td><td></td></tr><tr><td><code>user</code></td><td>使用者名称</td><td></td></tr><tr><td><code>root</code></td><td>远程主机的根目录</td><td></td></tr><tr><td><code>port</code></td><td>端口</td><td>22</td></tr><tr><td><code>delete</code></td><td>删除远程主机上的旧文件</td><td>true</td></tr><tr><td><code>verbose</code></td><td>显示调试信息</td><td>true</td></tr><tr><td><code>ignore_errors</code></td><td>忽略错误</td><td>false</td></tr></tbody></table><blockquote><p><strong>rsync部署模块的工作方式</strong></p><p>需要注意的是，要求您提供的实际上是一个能通过SSH登陆远程主机的Linux用户。Hexo会自动处理关于rsync使用的一切操作。因此，您需要在远程主机上为您的Hexo站点建立一个用户，并允许其通过SSH登陆。不过，这里的<code>port</code>，的确是指rsync监听的端口，请确保防火墙打开了该端口。</p></blockquote><h3 id="openshift"><a class="markdownIt-Anchor" href="#openshift"></a> OpenShift</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-openshift">hexo-deployer-openshift</a>。</p><pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-deployer-openshift --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置。</p><pre class="line-numbers language-none"><code class="language-none">deploy: type: openshift repo: &lt;repository url&gt; message: [message]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>repo</code></td><td>OpenShift 库（Repository）地址</td></tr><tr><td><code>message</code></td><td>自定提交信息 (默认为 <code>Site updated: &#123;&#123; ('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code>)</td></tr></tbody></table><h3 id="ftpsync"><a class="markdownIt-Anchor" href="#ftpsync"></a> FTPSync</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-ftpsync">hexo-deployer-ftpsync</a>。</p><pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-deployer-ftpsync --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置。</p><pre class="line-numbers language-none"><code class="language-none">deploy: type: ftpsync host: &lt;host&gt; user: &lt;user&gt; pass: &lt;password&gt; remote: [remote] port: [port] ignore: [ignore] connections: [connections] verbose: [true|false]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>host</code></td><td>远程主机的地址</td><td></td></tr><tr><td><code>user</code></td><td>使用者名称</td><td></td></tr><tr><td><code>pass</code></td><td>密码</td><td></td></tr><tr><td><code>remote</code></td><td>远程主机的根目录</td><td><code>/</code></td></tr><tr><td><code>port</code></td><td>端口</td><td>21</td></tr><tr><td><code>ignore</code></td><td>忽略的文件或目录</td><td></td></tr><tr><td><code>connections</code></td><td>使用的连接数</td><td>1</td></tr><tr><td><code>verbose</code></td><td>显示调试信息</td><td>false</td></tr></tbody></table><blockquote><p><strong>FTP部署可能出现的问题</strong></p><p>您可能需要预先通过其他方式将所有文件上传到远程主机中。否则初次使用ftpsync插件就可能出现报错。另外，由于FTP协议的特征，它每传送一个文件就需要一次握手，相对速度较慢。</p></blockquote><h3 id="其他方法"><a class="markdownIt-Anchor" href="#其他方法"></a> 其他方法</h3><p>Hexo 生成的所有文件都放在 <code>public</code> 文件夹中，您可以将它们复制到您喜欢的地方。</p>]]></content>
      
      
      <categories>
          
          <category> 前端H5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 环境配置</title>
      <link href="20180619/linux/centos-7-huan-jing-pei-zhi/"/>
      <url>20180619/linux/centos-7-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="centos-7-环境配置"><a class="markdownIt-Anchor" href="#centos-7-环境配置"></a> CentOS 7 环境配置</h1><h2 id="一-centos7如何修改ssh默认端口22"><a class="markdownIt-Anchor" href="#一-centos7如何修改ssh默认端口22"></a> 一、Centos7如何修改ssh默认端口22</h2><h3 id="1-修改-sshd_config-端口"><a class="markdownIt-Anchor" href="#1-修改-sshd_config-端口"></a> 1. 修改 sshd_config 端口</h3><ul><li>编辑sshd_config 配置文件</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>取消 #Port 22 的注释，在下一行添加你需要修改的新端口 Port<br />10022。（这里不删除 22 端口是为了防止修改后新端口无法访问，造成无法用 ssh 连接服务器。）</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Port 22  Port 10022  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-8440b63d98fab2c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加新端口" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-8440b63d98fab2c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><ul><li><p>修改保存 sshd_config 文件<br />按下esc 退出编辑模式，输入 :wq，保存修改并退出</p></li><li><p>重启 sshd 服务</p></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$  systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-配置防火墙-firewalld"><a class="markdownIt-Anchor" href="#2-配置防火墙-firewalld"></a> 2. 配置防火墙 firewalld</h3><ul><li>启用防火墙：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ systemctl enable firewalld$ systemctl start firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看防火墙状态</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ systemctl status firewalld● firewalld.service - firewalld - dynamic firewall daemon   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;firewalld.service; enabled; vendor preset: enabled)   Active: active (running) since 二 2016-12-20 02:12:59 CST; 1 day 13h ago Main PID: 10379 (firewalld)   CGroup: &#x2F;system.slice&#x2F;firewalld.service           └─10379 &#x2F;usr&#x2F;bin&#x2F;python -Es &#x2F;usr&#x2F;sbin&#x2F;firewalld --nofork --nopid$ firewall-cmd --staterunning  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看防火墙当前「默认」和「激活」zone（区域）：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ firewall-cmd --get-default-zonepublic  $ firewall-cmd --get-active-zonespublic    interfaces: eth0 eth1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若没有激活区域的话，要执行下面的命令。</p><ul><li>激活 public 区域，增加网卡接口：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ firewall-cmd --set-default-zone&#x3D;public$ firewall-cmd --zone&#x3D;public --add-interface&#x3D;eth0success  $ firewall-cmd --zone&#x3D;public --add-interface&#x3D;eth1success  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>*新增防火墙规则，开放 10022/TCP 端口：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 以防新端口不生效，先把 22 端口暴露$ firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;22&#x2F;tcp$ firewall-cmd --permanent --zone&#x3D;public --add-port&#x3D;10022&#x2F;tcpsuccess  # 重载防火墙$ firewall-cmd --reload# 查看暴露端口规则$ firewall-cmd --permanent --list-port443&#x2F;tcp 80&#x2F;tcp 22&#x2F;tcp 10022&#x2F;tcp  $ firewall-cmd --zone&#x3D;public --list-allpublic (default, active)    interfaces: eth0 eth1  sources:  services: dhcpv6-client ssh  ports: 443&#x2F;tcp 80&#x2F;tcp 22&#x2F;tcp 10022&#x2F;tcp  masquerade: no  forward-ports:  icmp-blocks:  rich rules:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>退出 ssh 会话后，再用新的端口连接：</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ssh -p 10022 root@example.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-打开-selinux-端口"><a class="markdownIt-Anchor" href="#3-打开-selinux-端口"></a> 3.  打开 SELinux 端口</h3><p>SELinux 全称 Security Enhanced Linux (安全强化 Linux)，是 MAC (Mandatory Access Control，强制访问控制系统)的一个实现，目的在于明确的指明某个进程可以访问哪些资源(文件、网络端口等)。</p><p>对于 ssh，SELinux 默认只允许 22 端口，我们可以用 SELinux 管理配置工具 semanage，来修改 ssh 可访问的端口。</p><p><strong>安装 semanage 工具</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ yum provides semanage$ yum -y install policycoreutils-python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>** 打开ssh 10022 端口**</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 为 ssh 添加新的允许端口$ semanage port -a -t ssh_port_t -p tcp 10022# 查看当前 SELinux 允许的端口$ semanage port -l | grep sshssh_port_t                     tcp      10022, 22  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-4b2745ba22a5366d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-4b2745ba22a5366d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p><strong>错误处理</strong></p><p>当 SELINUX 配置为禁用状态时，使用 semanage 会报错提示无法读取 policy 文件：</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-55f7160624f176a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="semanage 报错" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-55f7160624f176a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>修改 /etc/selinux/config 配置，启用 SELinux：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ vi &#x2F;etc&#x2F;selinux&#x2F;configSELINUX&#x3D;permissive  # 重启服务器$ init 6# 重启后查看 SELinux 状态$ sestatus# if it shows disable, you can run$ load_policy -qi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>检查SELINUX配置</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ semanage port -a -t ssh_port_t -p tcp 10022$ semanage port -l | grep sshssh_port_t                     tcp      10022, 22  # 重启 ssh 服务systemctl restart sshd <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>######*注：semange 不能禁用 ssh 的 22 端口：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ semanage port -d -t ssh_port_t -p tcp 22ValueError: 在策略中定义了端口 tcp&#x2F;22，无法删除。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-e14990f00465816c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="semange 不能禁用 ssh 的 22 端口" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-e14990f00465816c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><h2 id="二-新建组和用户"><a class="markdownIt-Anchor" href="#二-新建组和用户"></a> 二、新建组和用户</h2><h3 id="组的操作"><a class="markdownIt-Anchor" href="#组的操作"></a> 【组的操作】</h3><h4 id="1-新建组-example"><a class="markdownIt-Anchor" href="#1-新建组-example"></a> 1、新建组 example</h4><ul><li>使用groupadd 命令添加组<br />用法：groupadd [选项] 组</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">选项:  -f, --force如果组已经存在则成功退出并且如果 GID 已经存在则取消 -g  -g, --gid GID                 为新组使用 GID  -h, --help                    显示此帮助信息并推出  -K, --key KEY&#x3D;VALUE           不使用 &#x2F;etc&#x2F;login.defs 中的默认值  -o, --non-unique              允许创建有重复 GID 的组  -p, --password PASSWORD       为新组使用此加密过的密码  -r, --system                  创建一个系统账户  -R, --root CHROOT_DIR         chroot 到的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>example：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># groupadd -g [组的ID] [组名]$ groupadd -g 10005 example<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-删除组-example"><a class="markdownIt-Anchor" href="#2-删除组-example"></a> 2、删除组 example</h4><ul><li>使用 groupdel 命令删除组<br />用法：groupdel [选项] 组</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">选项:  -h, --help                    显示此帮助信息并推出  -R, --root CHROOT_DIR         chroot 到的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>example：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># groupdel [组名]$ groupdel example<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>删除组 example</li></ol><ul><li>使用 groupdel 命令删除组<br />用法：groupdel [选项] 组</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">选项:  -h, --help                    显示此帮助信息并推出  -R, --root CHROOT_DIR         chroot 到的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>example：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># groupdel [组名]$ groupdel example<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-修改组信息-example-将组example-的id-更改为-10006-名称更改为-examplegroup"><a class="markdownIt-Anchor" href="#3-修改组信息-example-将组example-的id-更改为-10006-名称更改为-examplegroup"></a> 3、修改组信息 example ，将组example 的id 更改为 10006 ，名称更改为 exampleGroup</h4><ul><li>使用 groupmod 来修改组信息</li></ul><p>用法：groupmod [选项] 组</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">选项:  -g, --gid GID                 将组 ID 改为 GID  -h, --help                    显示此帮助信息并推出  -n, --new-name NEW_GROUP      改名为 NEW_GROUP  -o, --non-unique              允许使用重复的 GID  -p, --password PASSWORD将密码更改为(加密过的) PASSWORD  -R, --root CHROOT_DIR         chroot 到的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>example:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># groupmod -g [组ID] [组名]$ groupmod -g 10006 example# groupmod -n [新组名] [组名]groupmod -n exampleGroup example<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用户的操作"><a class="markdownIt-Anchor" href="#用户的操作"></a> 【用户的操作】</h3><h4 id="1-新建用户-example"><a class="markdownIt-Anchor" href="#1-新建用户-example"></a> 1、新建用户 example</h4><ul><li>使用adduser 命令来新建用户<br />用法：adduser [选项] 登录<br />adduser -D<br />adduser -D [选项]</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">选项：  -b, --base-dir BASE_DIR新账户的主目录的基目录  -c, --comment COMMENT         新账户的 GECOS 字段  -d, --home-dir HOME_DIR       新账户的主目录  -D, --defaults显示或更改默认的 useradd 配置 -e, --expiredate EXPIRE_DATE  新账户的过期日期  -f, --inactive INACTIVE       新账户的密码不活动期  -g, --gid GROUP新账户主组的名称或 ID  -G, --groups GROUPS新账户的附加组列表  -h, --help                    显示此帮助信息并推出  -k, --skel SKEL_DIR使用此目录作为骨架目录  -K, --key KEY&#x3D;VALUE           不使用 &#x2F;etc&#x2F;login.defs 中的默认值  -l, --no-log-init不要将此用户添加到最近登录和登录失败数据库  -m, --create-home创建用户的主目录  -M, --no-create-home不创建用户的主目录  -N, --no-user-group不创建同名的组  -o, --non-unique允许使用重复的 UID 创建用户  -p, --password PASSWORD加密后的新账户密码  -r, --system                  创建一个系统账户  -R, --root CHROOT_DIR         chroot 到的目录  -s, --shell SHELL新账户的登录 shell  -u, --uid UID新账户的用户 ID  -U, --user-group创建与用户同名的组  -Z, --selinux-user SEUSER为 SELinux 用户映射使用指定 SEUSER<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>example: 新建用户 example  ,指定用户id 为10010</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># adduser -u [用户ID] [用户名]$ adduser -u 10010 example# 查看新创建的用户$ id exampleuid&#x3D;10010(example) gid&#x3D;10010(example) 组&#x3D;10010(example)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-为新建的用户设置密码-passwd-新建用户名"><a class="markdownIt-Anchor" href="#2-为新建的用户设置密码-passwd-新建用户名"></a> 2、为新建的用户设置密码 passwd [新建用户名]</h4><ul><li>使用passwd [新建用户名] 命令来设置新用户密码</li></ul><p>直接输入passwd，回车，修改的是当前用户的密码</p><p>example:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ passwd example更改用户 example 的密码 。新的 密码：无效的密码： 密码包含用户名在某些地方重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在设置密码的时候，会进行验证密码是否包含用户名，是否含有特殊字符，大小写字母和数字，会有相应的提示，但是继续输入，也是可以设置成功的。</p><h4 id="3-删除用户-example"><a class="markdownIt-Anchor" href="#3-删除用户-example"></a> 3、删除用户 example</h4><ul><li>使用 userdel 命令来删除用户<br />用法：userdel [选项] 登录</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">选项：  -f, --force                   force some actions that would fail otherwise                                e.g. removal of user still logged in                                or files, even if not owned by the user  -h, --help                    显示此帮助信息并推出  -r, --remove                  删除主目录和邮件池  -R, --root CHROOT_DIR         chroot 到的目录  -Z, --selinux-user            为用户删除所有的 SELinux 用户映射<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>example: 删除用户 example</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># userdel [用户名]$ userdel  example# 查看用户example$ id exampleid: example: no such user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-修改用户-example-为-exampleuser"><a class="markdownIt-Anchor" href="#4-修改用户-example-为-exampleuser"></a> 4、修改用户 example 为 exampleUser</h4><ul><li>使用 usermod 命令来修改用户信息<br />用法：usermod [选项] 登录</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">选项：  -c, --comment 注释            GECOS 字段的新值  -d, --home HOME_DIR           用户的新主目录  -e, --expiredate EXPIRE_DATE  设定帐户过期的日期为 EXPIRE_DATE  -f, --inactive INACTIVE       过期 INACTIVE 天数后，设定密码为失效状态  -g, --gid GROUP               强制使用 GROUP 为新主组  -G, --groups GROUPS           新的附加组列表 GROUPS  -a, --append GROUP            将用户追加至上边 -G 中提到的附加组中，                                并不从其它组中删除此用户  -h, --help                    显示此帮助信息并推出  -l, --login LOGIN             新的登录名称  -L, --lock                    锁定用户帐号  -m, --move-home               将家目录内容移至新位置 (仅于 -d 一起使用)  -o, --non-unique              允许使用重复的(非唯一的) UID  -p, --password PASSWORD       将加密过的密码 (PASSWORD) 设为新密码  -R, --root CHROOT_DIR         chroot 到的目录  -s, --shell SHELL             该用户帐号的新登录 shell  -u, --uid UID                 用户帐号的新 UID  -U, --unlock                  解锁用户帐号  -Z, --selinux-user  SEUSER       用户账户的新 SELinux 用户映射<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>example: 修改用户 example 为 exampleUser  ,更改组为 exampleGroup</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># usermod -u  [用户ID] [用户名]$ usermod -u 10006 example# 查看用户example$ id exampleuid&#x3D;10006(example) gid&#x3D;10010(example) 组&#x3D;10010(example)# usermod -g  [组ID] [用户名]$ usermod -u 10006 example# 查看用户example$ id exampleuid&#x3D;10006(example) gid&#x3D;10006(exampleGroup) 组&#x3D;10006(exampleGroup)# usermod -l  [新用户名] [用户名]$ usermod -l exampleUser example# 查看用户exampleUser$ id exampleUseruid&#x3D;10006(exampleUser) gid&#x3D;10006(exampleGroup) 组&#x3D;10006(exampleGroup)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux上配置Jenkins自动化构建Android项目的环境 ---- Jenkins自动化部署学习笔记（五）</title>
      <link href="20180615/jenkins/zai-linux-shang-pei-zhi-android-zi-dong-hua-gou-jian-huan-jing/"/>
      <url>20180615/jenkins/zai-linux-shang-pei-zhi-android-zi-dong-hua-gou-jian-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="在linux上配置jenkins自动化构建android项目的环境"><a class="markdownIt-Anchor" href="#在linux上配置jenkins自动化构建android项目的环境"></a> 在Linux上配置Jenkins自动化构建Android项目的环境</h1><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>  之前写了一些在 Windows 系统上安装配置 Jenkins 环境，创建自动化构建项目的一些博客，今天来跟大家介绍一下在 Linux 系统下配置Jenkins自动化构建Android项目的环境，下面就来具体操作一下吧：</p><h2 id="一-sdk安装"><a class="markdownIt-Anchor" href="#一-sdk安装"></a> 一 、sdk安装</h2><h3 id="1-下载sdk-for-linux"><a class="markdownIt-Anchor" href="#1-下载sdk-for-linux"></a> 1. 下载sdk for linux</h3><pre class="line-numbers language-none"><code class="language-none">$ wget https:&#x2F;&#x2F;dl.google.com&#x2F;android&#x2F;android-sdk_r24.4.1-linux.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-解压android-sdk"><a class="markdownIt-Anchor" href="#2-解压android-sdk"></a> 2. 解压Android SDK</h3><pre class="line-numbers language-none"><code class="language-none">$ tar -zvxf android-sdk_r24.4.1-linux.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-配置环境变量"><a class="markdownIt-Anchor" href="#3-配置环境变量"></a> 3. 配置环境变量</h3><p>在文件/etc/profile末端添加如下两行：</p><pre class="line-numbers language-none"><code class="language-none">export ANDROID_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;android-sdk-linuxexport PATH&#x3D;$ANDROID_HOME&#x2F;tools:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>android-sdk-linux是你解压后的文件名，tools一定要这样写，是里面文件夹的名称</p><p>执行命令文件立马生效</p><pre class="line-numbers language-none"><code class="language-none">$ source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4安装所有包"><a class="markdownIt-Anchor" href="#4安装所有包"></a> 4.安装所有包</h3><pre class="line-numbers language-none"><code class="language-none">$ android update sdk --no-ui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者查看序列号</p><pre class="line-numbers language-none"><code class="language-none">$ android list sdk --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果:</p><pre class="line-numbers language-none"><code class="language-none"> 1- Android SDK Tools, revision 24.1.2 2- Android SDK Platform-tools, revision 22 3- Android SDK Build-tools, revision 22.0.1 4- Android SDK Build-tools, revision 22 (Obsolete) 5- Android SDK Build-tools, revision 21.1.2 6- Android SDK Build-tools, revision 21.1.1 (Obsolete) 7- Android SDK Build-tools, revision 21.1 (Obsolete) 8- Android SDK Build-tools, revision 21.0.2 (Obsolete) 9- Android SDK Build-tools, revision 21.0.1 (Obsolete)10- Android SDK Build-tools, revision 21 (Obsolete)11- Android SDK Build-tools, revision 2012- Android SDK Build-tools, revision 19.113- Android SDK Build-tools, revision 19.0.3 (Obsolete)14- Android SDK Build-tools, revision 19.0.2 (Obsolete)15- Android SDK Build-tools, revision 19.0.1 (Obsolete)16- Android SDK Build-tools, revision 19 (Obsolete)17- Android SDK Build-tools, revision 18.1.1 (Obsolete)18- Android SDK Build-tools, revision 18.1 (Obsolete)19- Android SDK Build-tools, revision 18.0.1 (Obsolete)20- Android SDK Build-tools, revision 17 (Obsolete)21- Documentation for Android SDK, API 22, revision 122- SDK Platform Android 5.1.1, API 22, revision 223- SDK Platform Android 5.0.1, API 21, revision 224- SDK Platform Android 4.4W.2, API 20, revision 225- SDK Platform Android 4.4.2, API 19, revision 426- SDK Platform Android 4.3.1, API 18, revision 327- SDK Platform Android 4.2.2, API 17, revision 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按序列号安装</p><pre class="line-numbers language-none"><code class="language-none">$ android update sdk -u --all --filter 1,2,3,5,11,12,22,23,24,25,26,27,28,29,88,89<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二-gradle安装"><a class="markdownIt-Anchor" href="#二-gradle安装"></a> 二 、gradle安装</h2><h3 id="1-下载gradle"><a class="markdownIt-Anchor" href="#1-下载gradle"></a> 1. 下载gradle</h3><pre class="line-numbers language-none"><code class="language-none">$ wget https:&#x2F;&#x2F;downloads.gradle.org&#x2F;distributions&#x2F;gradle-4.4.1-all.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-解压gradle"><a class="markdownIt-Anchor" href="#2-解压gradle"></a> 2. 解压gradle</h3><pre class="line-numbers language-none"><code class="language-none">$ unzp gradle-4.4.1-all.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-设置环境变量"><a class="markdownIt-Anchor" href="#3-设置环境变量"></a> 3. 设置环境变量</h3><h4 id="31简要配置"><a class="markdownIt-Anchor" href="#31简要配置"></a> 3.1.简要配置</h4><pre class="line-numbers language-none"><code class="language-none">export GRADLE_HOME&#x3D;&#x2F;usr&#x2F;gradle&#x2F;gradle-4.4.1export PATH&#x3D;$PATH:$GRADLE_HOME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ echo $GRADLE_HOME<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;gradle&#x2F;gradle-4.4.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ echo $PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;lib64&#x2F;qt-3.3&#x2F;bin:&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_151&#x2F;bin:&#x2F;usr&#x2F;gradle&#x2F;gradle-4.4.1&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;root&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种设置环境变量虽方便，但安装路径会在机器重启以后会消失。需进行以下步骤设置：</p><h4 id="32持久配置"><a class="markdownIt-Anchor" href="#32持久配置"></a> 3.2.持久配置</h4><h5 id="321添加执行配置文件"><a class="markdownIt-Anchor" href="#321添加执行配置文件"></a> 3.2.1.添加执行配置文件</h5><pre class="line-numbers language-none"><code class="language-none">$ vi &#x2F;etc&#x2F;profile.d&#x2F;gradle.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加以下内容：</p><pre class="line-numbers language-none"><code class="language-none">GRADLE_HOME&#x3D;&#x2F;usr&#x2F;gradle&#x2F;gradle-4.4.1PATH&#x3D;$GRADLE_HOME&#x2F;bin:$PATHexport PATH GRADLE_HOME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="322添加权限"><a class="markdownIt-Anchor" href="#322添加权限"></a> 3.2.2.添加权限</h5><pre class="line-numbers language-none"><code class="language-none">$ chmod +x &#x2F;etc&#x2F;profile.d&#x2F;gradle.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="323设置环境变量永久有效"><a class="markdownIt-Anchor" href="#323设置环境变量永久有效"></a> 3.2.3.设置环境变量永久有效</h5><pre class="line-numbers language-none"><code class="language-none">$ source &#x2F;etc&#x2F;profile.d&#x2F;gradle.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检测版本：</p><pre class="line-numbers language-none"><code class="language-none">$ gradle -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">------------------------------------------------------------Gradle 4.4.1------------------------------------------------------------Build time:   2017-12-20 15:45:23 UTCRevision:     10ed9dc355dc39f6307cc98fbd8cea314bdd381cGroovy:       2.4.12Ant:          Apache Ant(TM) version 1.9.9 compiled on February 2 2017JVM:          1.8.0_151 (Oracle Corporation 25.151-b12)OS:           Linux 2.6.32-573.el6.x86_64 amd64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三-新建项目"><a class="markdownIt-Anchor" href="#三-新建项目"></a> 三 、新建项目</h2><p>在Linux上新建项目与在windows系统上搭建的Jenkins 创建项目的方法是一样的，只需要将对应的 windows 系统路径更改为 Linux 系统路径即可。</p><h3 id="附linux-系统下移动文件命令"><a class="markdownIt-Anchor" href="#附linux-系统下移动文件命令"></a> 附：Linux 系统下移动文件命令</h3> <pre class="line-numbers language-none"><code class="language-none"> # 定义当前时间# today&#x3D;&#96;date &quot;+%Y%m%d%H%M%S&quot;&#96; today&#x3D;&#96;date +&quot;%Y%m%d&quot;&#96;# 工作空间目录space&#x3D;&#x2F;opt&#x2F;datas&#x2F;android&#x2F;newEcoClinic# apk文件目录apkDir&#x3D;$space&#x2F;app&#x2F;build&#x2F;outputs&#x2F;apk# 共享文件夹挂载的文件目录shareDir&#x3D;.&#x2F;windows# apk要放置的目标文件夹targetDir&#x3D;AndroidApk&#x2F;jenkinsBuildApks&#x2F;newEcoClinic# 定义开发apk文件路径devPath&#x3D;$shareDir&#x2F;$targetDir&#x2F;dev&#x2F;$today# 定义测试apk文件路径testPath&#x3D;$shareDir&#x2F;$targetDir&#x2F;test&#x2F;$today# 定义正式apk文件路径releasePath&#x3D;$shareDir&#x2F;$targetDir&#x2F;release&#x2F;$today# 创建文件夹mkdir -p $shareDir# 将共享文件夹挂载到创建好的文件夹上sudo mount -t cifs -o username&#x3D;&#39;tech&#39;,password&#x3D;&#39;!qaz2wsx3edc&#39; &#x2F;&#x2F;192.168.22.156&#x2F;tech $shareDir# 创建开发APK文件夹mkdir -p  $devPath# 创建测试APK文件夹mkdir -p  $testPath# 创建正式APK文件夹mkdir -p  $releasePath# 复制开发apk到开发APK文件夹cp $apkDir&#x2F;*dev*.apk $devPath# 复制测试apk到测试APK文件夹cp $apkDir&#x2F;*test*.apk $testPath# 复制正式apk到正式APK文件夹cp $apkDir&#x2F;*release*.apk $releasePath# 取消挂载sudo umount $shareDir# 删除源目录的jar文件# find $space&#x2F;app&#x2F;build&#x2F;outputs&#x2F;apk&#x2F;* -name &#39;*.jar&#39;|xargs rm -rf# 删除无用的文件rm -rf  $space&#x2F;app&#x2F;build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四-邮件通知"><a class="markdownIt-Anchor" href="#四-邮件通知"></a> 四 、邮件通知</h2><p><strong>邮件通知配置与Windows 环境下的Jenkins系统配置方法一样。</strong></p><p><strong>请参考 :  配置项目构建完成后邮件通知---- Jenkins自动化部署学习笔记（四）</strong></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> 自动化部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA创建类注释模板和方法注释模板</title>
      <link href="20180615/devtools/idea-chuang-jian-lei-zhu-shi-mo-ban-he-fang-fa-zhu-shi-mo-ban/"/>
      <url>20180615/devtools/idea-chuang-jian-lei-zhu-shi-mo-ban-he-fang-fa-zhu-shi-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="idea-创建类注释模板和方法注释模板"><a class="markdownIt-Anchor" href="#idea-创建类注释模板和方法注释模板"></a> IDEA 创建类注释模板和方法注释模板</h1><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>  在使用Idea的时候，它的注释模板很简单，不够详细；所有大多数开发者都想设置一个比较详细的注释模板，我现在把我了解的创建类注释模板和方法注释模板的操作记录下来，分享给大家<br />我们需要定义的注释模板如下：<br />类注释模板：</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-1a315507b56b08ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="类注释模板" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-1a315507b56b08ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>方法注释模板：</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-8d4ab11bd45f5566.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="方法注释模板" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-8d4ab11bd45f5566.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><h1 id="一-设置idea-中的类注释模板"><a class="markdownIt-Anchor" href="#一-设置idea-中的类注释模板"></a> 一、设置IDEA 中的类注释模板</h1><h2 id="1-找到file-headerjava文件"><a class="markdownIt-Anchor" href="#1-找到file-headerjava文件"></a> 1、找到File Header.java文件</h2><p>File -&gt; Settings -&gt; Editor -&gt; File and Code Templates -&gt; Files<br />选择Class , Interface ，Enum 等等，我们都可以看到，在右侧区域中，在public class 上面，都有一行 #parse(“File Header.java”) ，<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-3da571f314086061.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="类注释模板" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-3da571f314086061.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>这句代码是引入了File Header.java文件，作为我们创建的Class Interface ,Enum 等文件的注释，那么这个类在哪呢，我们可以看到，在 Files 右侧，有一个 Includes 选项，在这里，我们可以定义各种的模板，在需要的地方去引入这个模板，这里已经在类文件中引入了File Header.java 模板，那我们就更改这个模板成为我们想设置成的样子</p><h2 id="2-定义类文件注释模板"><a class="markdownIt-Anchor" href="#2-定义类文件注释模板"></a> 2、定义类文件注释模板</h2><p><img src="https://upload-images.jianshu.io/upload_images/3236417-a1f6f52b4c48e29f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置类注释模板" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-a1f6f52b4c48e29f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * @ClassName $&#123;NAME&#125;.java * @author admin * @version 1.0.0 * @Description TODO * @createTime $&#123;YEAR&#125;年$&#123;MONTH&#125;月$&#123;DAY&#125;日 $&#123;HOUR&#125;:$&#123;MINUTE&#125;:00 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-类文件变量说明"><a class="markdownIt-Anchor" href="#3-类文件变量说明"></a> 3、类文件变量说明</h2><p>*注：<br />${PACKAGE_NAME} :  包路径<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>N</mi><mi>A</mi><mi>M</mi><mi>E</mi></mrow><mo>:</mo><mi mathvariant="normal">文</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">名</mi></mrow><annotation encoding="application/x-tex">{NAME} :  文件名</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">名</span></span></span></span>{USER} ： 主机用户名<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>D</mi><mi>A</mi><mi>T</mi><mi>E</mi></mrow><mi mathvariant="normal">：</mi><mi mathvariant="normal">系</mi><mi mathvariant="normal">统</mi><mi mathvariant="normal">当</mi><mi mathvariant="normal">前</mi><mi mathvariant="normal">日</mi><mi mathvariant="normal">期</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">格</mi><mi mathvariant="normal">式</mi><mi mathvariant="normal">为</mi><mi mathvariant="normal">：</mi><mi>y</mi><mi>y</mi><mi>y</mi><mi>y</mi><mi mathvariant="normal">/</mi><mi>m</mi><mi>m</mi><mi mathvariant="normal">/</mi><mi>d</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">{DATE} ： 系统当前日期，格式为：yyyy/mm/dd</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">统</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">日</span><span class="mord cjk_fallback">期</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">格</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">：</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">/</span><span class="mord mathdefault">m</span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span></span></span></span>{TIME} ： 系统当前时间 格式为：HH:mm<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>Y</mi><mi>E</mi><mi>A</mi><mi>R</mi></mrow><mi mathvariant="normal">：</mi><mi mathvariant="normal">当</mi><mi mathvariant="normal">前</mi><mi mathvariant="normal">年</mi></mrow><annotation encoding="application/x-tex">{YEAR}：当前年</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">年</span></span></span></span>{MONTH}：当前月<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>M</mi><mi>O</mi><mi>N</mi><mi>T</mi><msub><mi>H</mi><mi>N</mi></msub><mi>A</mi><mi>M</mi><msub><mi>E</mi><mi>S</mi></msub><mi>H</mi><mi>O</mi><mi>R</mi><mi>T</mi></mrow><mi mathvariant="normal">：</mi><mi mathvariant="normal">月</mi><mi mathvariant="normal">份</mi><mi mathvariant="normal">名</mi><mi mathvariant="normal">称</mi><mi mathvariant="normal">简</mi><mi mathvariant="normal">写</mi><mi mathvariant="normal">；</mi><mi mathvariant="normal">如</mi><mi mathvariant="normal">：</mi><mi>J</mi><mi>a</mi><mi>n</mi><mo separator="true">,</mo><mi>F</mi><mi>e</mi><mi>b</mi><mo separator="true">,</mo><mi>e</mi><mi>t</mi><mi>c</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">{MONTH_NAME_SHORT} ： 月份名称简写；如：Jan, Feb, etc.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">月</span><span class="mord cjk_fallback">份</span><span class="mord cjk_fallback">名</span><span class="mord cjk_fallback">称</span><span class="mord cjk_fallback">简</span><span class="mord cjk_fallback">写</span><span class="mord cjk_fallback">；</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">：</span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault">e</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault">c</span><span class="mord">.</span></span></span></span>{MONTH_NAME_FULL} ： 月份名称全拼；如：January, February.<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>D</mi><mi>A</mi><mi>Y</mi></mrow><mi mathvariant="normal">：</mi><mi mathvariant="normal">当</mi><mi mathvariant="normal">前</mi><mi mathvariant="normal">天</mi></mrow><annotation encoding="application/x-tex">{DAY} ：当前天</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">天</span></span></span></span>{DAY_NAME_SHORT} ：星期简写；如：Mon, Tue, etc.<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>D</mi><mi>A</mi><msub><mi>Y</mi><mi>N</mi></msub><mi>A</mi><mi>M</mi><msub><mi>E</mi><mi>F</mi></msub><mi>U</mi><mi>L</mi><mi>L</mi></mrow><mi mathvariant="normal">：</mi><mi mathvariant="normal">星</mi><mi mathvariant="normal">期</mi><mi mathvariant="normal">全</mi><mi mathvariant="normal">写</mi><mi mathvariant="normal">；</mi><mi mathvariant="normal">如</mi><mi mathvariant="normal">：</mi><mi>M</mi><mi>o</mi><mi>n</mi><mo separator="true">,</mo><mi>T</mi><mi>u</mi><mi>e</mi><mo separator="true">,</mo><mi>e</mi><mi>t</mi><mi>c</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">{DAY_NAME_FULL}：星期全写；如：Mon, Tue, etc.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault">L</span><span class="mord mathdefault">L</span></span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">星</span><span class="mord cjk_fallback">期</span><span class="mord cjk_fallback">全</span><span class="mord cjk_fallback">写</span><span class="mord cjk_fallback">；</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">：</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault">c</span><span class="mord">.</span></span></span></span>{HOUR} ： 当前小时<br /><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>M</mi><mi>I</mi><mi>N</mi><mi>U</mi><mi>T</mi><mi>E</mi></mrow><mi mathvariant="normal">：</mi><mi mathvariant="normal">当</mi><mi mathvariant="normal">前</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">钟</mi></mrow><annotation encoding="application/x-tex">{MINUTE} ：当前分钟</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">钟</span></span></span></span>{PROJECT_NAME} ： 项目名称</p><h1 id="二-定义方法注释模板"><a class="markdownIt-Anchor" href="#二-定义方法注释模板"></a> 二、定义方法注释模板</h1><h2 id="1-创建自定义方法模板组"><a class="markdownIt-Anchor" href="#1-创建自定义方法模板组"></a> 1、创建自定义方法模板组</h2><p>File -&gt; Settings -&gt; Editor -&gt; Live Templates</p><p>在Live Templates 右侧点击+号，添加一个Templates Group，命名为 methodTemplates<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-5dfc04cb236a6cef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加一个Templates Group" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-5dfc04cb236a6cef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-405fbd745d525698.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="methodTemplates" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-405fbd745d525698.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><h1 id="2-在刚刚创建的-methodtemplates-下创建一个-live-templates-如下"><a class="markdownIt-Anchor" href="#2-在刚刚创建的-methodtemplates-下创建一个-live-templates-如下"></a> 2、在刚刚创建的 methodTemplates 下创建一个 Live Templates ，如下</h1><p><img src="https://upload-images.jianshu.io/upload_images/3236417-cc1c1469d64456f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-cc1c1469d64456f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><ul><li>1）、在位置1处： 输入模板的简写码<br />在位置2处：输入模板的描述<br />在位置3处： 输入方法注释模板样式，可变变量要用 <strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">变</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">名</mi></mrow><annotation encoding="application/x-tex">变量名</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">名</span></span></span></span></strong> 来表示，如：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>a</mi><mi>r</mi><mi>a</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">param</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span></span></span></span>；<br />若不设置成如此的变量名，位置4不可点击，模板如下：</li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;** * @title $title$ * @description $description$ * @author admin $param$ * @updateTime $date$ $TIME$ $return$ * @throws $throws$ *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>        点击位置4处：可编辑定义的变量的值，如下：</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-2537a95833ec23ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编辑定义的变量值" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-2537a95833ec23ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>变量param 为方法的参数变量，需要根据方法的参数多少进行变化；变量 return 为返回值类型，也要根据方法的返回值进行变化，所一要自行设置该方法，设置的代码如下，复制粘贴即可：</p><p><strong>param  :</strong></p><pre class="line-numbers language-none"><code class="language-none">groovyScript(&quot;def result&#x3D;&#39;&#39;; def stop&#x3D;false; def params&#x3D;\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#39;[\\\\[|\\\\]|\\\\s]&#39;, &#39;&#39;).split(&#39;,&#39;).toList(); if (params.size()&#x3D;&#x3D;1 &amp;&amp; (params[0]&#x3D;&#x3D;null || params[0]&#x3D;&#x3D;&#39;null&#39; || params[0]&#x3D;&#x3D;&#39;&#39;)) &#123; stop&#x3D;true; &#125;; if(!stop) &#123; for(i&#x3D;0; i &lt; params.size(); i++) &#123;result +&#x3D;((i&#x3D;&#x3D;0) ? &#39;\\r\\n&#39; : &#39;&#39;) + ((i &lt; params.size() - 1) ? &#39; * @param: &#39; + params[i] + &#39;\\r\\n&#39; : &#39; * @param: &#39; + params[i] + &#39;&#39;)&#125;; &#125;; return result;&quot;, methodParameters())<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>return  :</strong></p><pre class="line-numbers language-none"><code class="language-none">groovyScript(&quot;def result&#x3D;&#39;&#39;; def data&#x3D;\&quot;$&#123;_1&#125;\&quot;; def stop&#x3D;false; if(data&#x3D;&#x3D;null || data&#x3D;&#x3D;&#39;null&#39; || data&#x3D;&#x3D;&#39;&#39; || data&#x3D;&#x3D;&#39;void&#39; ) &#123; stop&#x3D;true; &#125;; if(!stop) &#123; result +&#x3D; &#39;\\r\\n&#39; + &#39; * @return: &#39; + data; &#125;; return result;&quot;, methodReturnType())<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>2）、在位置3下方，点击选择该模板应用的范围，可选Everywhere 表示任何位置都可添加该注释<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-4ea0a8d155fd339c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-4ea0a8d155fd339c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></li></ul><p>改位置首次为 define<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-782a5a153a41e457.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-782a5a153a41e457.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>修改时为change<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-d5ca37754ced7ff7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-d5ca37754ced7ff7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><ul><li>3）、点击options 中的 Expand with 可选择该模板配合使用的快捷键，如 Tab键，Space 空格键 ， Enter 回车键 等等；<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-1c3ebd262a086049.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-1c3ebd262a086049.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></li></ul><p>如在这里设置的模板关键词为 *  ，配合使用快捷键为Tab键</p><h2 id="3-方法模板使用说明"><a class="markdownIt-Anchor" href="#3-方法模板使用说明"></a> 3、方法模板使用说明</h2><p>则在方法中输入 * ，在按下Tab 键，即可按照模板生成注释。<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-165f571c5e6512ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成注释" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-165f571c5e6512ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><hr /><p>大功告成，仅供参考！</p>]]></content>
      
      
      <categories>
          
          <category> DevTools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevTools </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Android studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置项目构建完成后邮件通知---- Jenkins自动化部署学习笔记（四）</title>
      <link href="20180612/jenkins/pei-zhi-xiang-mu-gou-jian-wan-cheng-hou-you-jian-tong-zhi-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-si/"/>
      <url>20180612/jenkins/pei-zhi-xiang-mu-gou-jian-wan-cheng-hou-you-jian-tong-zhi-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-si/</url>
      
        <content type="html"><![CDATA[<h1 id="配置项目构建完成后邮件通知-jenkins自动化部署学习笔记四"><a class="markdownIt-Anchor" href="#配置项目构建完成后邮件通知-jenkins自动化部署学习笔记四"></a> 配置项目构建完成后邮件通知---- Jenkins自动化部署学习笔记（四）</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>  在之前的文章中，跟大家介绍了配置Jenkins程序， 使用Jenkins 进行自动化构建，构建成功后的文件移动，这篇文章，我们来说说构建任务失败怎么邮件通知相关人员。</p><h2 id="一-全局邮件配置"><a class="markdownIt-Anchor" href="#一-全局邮件配置"></a> 一、全局邮件配置</h2><ol><li>在Jenkins 的主视图下点击系统管理 -&gt; 系统设置 ，在系统设置中找到 Jenkins Location 区块，这这一区块中，有两个需要配置的</li></ol><ul><li>A：Jenkins URL   值为自己Jenkins所在主机IP或者有效域名+Jenkins端口号</li><li>B：系统管理员邮件地址 值为Jenkins系统的邮件地址，用于发送邮件，进行通知，必须填写，否则无法发送邮件<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-8e5595f138fb4ce0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" Jenkins Location " / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-8e5595f138fb4ce0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></li></ul><ol start="2"><li>在系统设置下方找到邮件通知区块，填写邮件配置信息<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-3cdae6f96f6ba118.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-3cdae6f96f6ba118.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></li></ol><p>SMPT 服务器：你的邮箱服务器的SMTP服务地址<br />如：阿里云企业邮箱，为：smtp@[你的域名]<br />腾讯企业邮箱为：<a href="http://smtp.exmail.qq.com">smtp.exmail.qq.com</a><br />默认邮件后缀，写自己企业邮箱的后缀，qq邮箱写@qq.com，163邮箱写@163.com<br />勾选使用SMTP验证：<br />用户名：输入Jenkins系统邮件地址，如service@***.com<br />密码：输入 Jenkins系统邮件用户对应的密码</p><p>然后我们可以勾选  “通过发送测试邮件测试配置”来验证邮件配置是否正确<br />输入测试需要接受通知邮件的地址，点击右下侧的 Test configuration，<br />若邮件地址下方出现 Email was successfuly sent 表示邮件配置成功。<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-78be86bafc5a5246.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-78be86bafc5a5246.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br />点击保存，我们去进行项目配置</p><h2 id="二-在任务列表中点击需要配置的构建任务进入构建任务中点击左侧的配置进行邮件的配置"><a class="markdownIt-Anchor" href="#二-在任务列表中点击需要配置的构建任务进入构建任务中点击左侧的配置进行邮件的配置"></a> 二 、 在任务列表中，点击需要配置的构建任务，进入构建任务中，点击左侧的配置，进行邮件的配置</h2><p>在页面最底处，我们看到有一个区块，叫构建后操作，点击 添加构建后操作步骤 ，选择Email-Notifiction,<br />在Recipients 中输入收件人地址<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-2824f3ad02c3ef8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-2824f3ad02c3ef8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>Jenkins会在发生某个重要事件时向指定的收件人发送电子邮件。</p><ul><li>每一次失败的构建触发一个新的电子邮件。</li><li>失败（或不稳定）构建后的成功构建会触发新电子邮件，表明危机已经结束。</li><li>成功构建后的不稳定构建会触发新电子邮件，表明存在回归。</li><li>除非进行配置，否则每个不稳定的构建都会触发新的电子邮件，表明回归仍然存在。</li></ul><p><strong>对于那些不稳定构建是常态的懒惰项目，请取消选中“每次不稳定构建都发送电子邮件”。</strong><br />至此，构建失败发送邮件通知配置完成。可自行验证</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> 自动化部署 </tag>
            
            <tag> 邮件通知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置项目构建完成后文件移动---- Jenkins自动化部署学习笔记（三）</title>
      <link href="20180530/jenkins/pei-zhi-xiang-mu-gou-jian-wan-cheng-hou-wen-jian-yi-dong-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-san/"/>
      <url>20180530/jenkins/pei-zhi-xiang-mu-gou-jian-wan-cheng-hou-wen-jian-yi-dong-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-san/</url>
      
        <content type="html"><![CDATA[<h1 id="配置项目构建完成后文件移动-jenkins自动化部署学习笔记三"><a class="markdownIt-Anchor" href="#配置项目构建完成后文件移动-jenkins自动化部署学习笔记三"></a> 配置项目构建完成后文件移动---- Jenkins自动化部署学习笔记（三）</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>  在前两篇文章中，跟大家分享了在 Windows 系统上安装 Jenkins 和使用 Jenkins 进行 Android 项目的编译打包；相信可能会有人疑问，打包完成之后，我需要将 apk 文件放入指定位置怎么办。</p><p>  其实，Jenkins 功能很强大，它可以配置在打包完成之后将你所需的文件拷贝至目标路径，亦可配置在打包完成后（成功/失败），邮件通知相关人员。下面详细介绍：</p><h2 id="一-将打好的包移动至指定目录"><a class="markdownIt-Anchor" href="#一-将打好的包移动至指定目录"></a> 一、将打好的包移动至指定目录</h2><ol><li>我在自己的电脑上安装 Jenkins ，进行项目构建，并且想要将每次构建的包存入到E盘的AndroidApk目录下：<br />在上篇文章中，我们说到了，在配置构建任务时，有一个构建的选项，我们可以增加相应的操作来实现；</li></ol><ul><li><p>（1）、在构建选项区域下方，点击 <strong>增加构建步骤</strong> ，选择<strong>Execete Windows batch commond</strong><br />添加一个构建任务（务必在<strong>Invoke Gradle script</strong> 任务下方）<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-82616e807b302e26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-82616e807b302e26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li><li><p>（2）、在增加的 Windows 命令框中，需要配置相应的操作命令来实现移动的功能</p></li></ul><p>其实移动的功能，我们可以看作是将源文件复制到目标目录，然后将源文件删除。<br />在打包时我们可以根据不同的环境配置不同的包，比如<em>debug</em>.apk ，<em>release</em>.apk；<br />我们也可以使用命令，将不同环境的包，移动至不同的目录下：</p><p>复制文件，我们需要源文件目录和目标文件目录：<br />此项目中：<br />源文件目录：D:\jenkinsSpace\example\app\build\outputs\apk\<br />目标文件目录：E:\AndroidApk<br />在AndroidApk下，我们再创建不同的文件夹，如：devApk 和 releaseApk<br />故，命令如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-37c45381987196df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="移动文件命令" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-37c45381987196df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><pre class="line-numbers language-none"><code class="language-none">copy D:\jenkinsSpace\example\app\build\outputs\apk\*debug*.apk E:\AndroidApk\devApkcopy D:\jenkinsSpace\example\app\build\outputs\apk\*release*.apk E:\AndroidApk\releaseApkrmdir &#x2F;s &#x2F;q D:\jenkinsSpace\example\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到，这个总共有三条命令</p><p>第一条命令：是将源文件目录下的名称包含 debug ，后缀名为  .apk  的文件复制到 E:\AndroidApk\devApk  目录下</p><p>第二条命令：是将源文件目录下的名称包含 release ，后缀名为  .apk  的文件复制到 E:\AndroidApk\releaseApk  目录下</p><p>第三条命令：是将 Jenkins 构建该项目的工作空间进行清空（删除工作空间目录及子文件）</p><ul><li>（3）、配置好之后，我们点击保存， 进行立即构建，构建结果如下：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3236417-0716cd05044fa6e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建结果" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-0716cd05044fa6e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>我们可以看到，在位置 1 处：项目构建成功，耗时 1分56秒</p><p>位置 2 处 ：执行了复制名称包含 debug ，后缀名为 .apk 的文件的命令，成功</p><p>位置 3 处 ：执行了复制名称包含 release ，后缀名为 .apk 的文件的命令，失败</p><p>位置 4 处：执行了删除工作空间的命令，成功</p><p>位置 5 处：退出执行命令，exit</p><p>位置 3 出执行失败的原因是，我们再配置项目构建任务的时候，只是写了 clean assembleDebug 这两个命令，进行项目clean 和debug构建，我们将这个命令更改为clean build，就会构建所有配置的渠道包。</p><ol start="2"><li>我们有时候需要将打好的apk 移动至共享文件夹，方便大家使用获取安装，这时候，我们只需要在执行复制命令前增加一行命令，将共享文件夹目录映射到本地盘符：</li></ol><p>命令如下：<br />net use [盘符] \[ip][共享文件夹] “[password]” /user:&quot;[userName]&quot;</p><pre class="line-numbers language-none"><code class="language-none">% 将共享文件夹映射为盘符 Y:%net use Y: \\192.168.22.156\tech  &quot;!qaz2wsx3edc&quot; &#x2F;user:&quot;tech&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在此命令下，我们更改上面的命令中的盘符为共享文件夹盘符，就可将apk移动至共享文件夹了</p><pre class="line-numbers language-none"><code class="language-none">copy D:\jenkinsSpace\example\app\build\outputs\apk\*debug*.apk Y:\AndroidApk\devApkcopy D:\jenkinsSpace\example\app\build\outputs\apk\*release*.apk Y:\AndroidApk\releaseApkrmdir &#x2F;s &#x2F;q D:\jenkinsSpace\example\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>我们也可以定义一个bat文件，放在主机上，让Jenkins任务去调用执行这个bat文件，来复制/移动文件<br />bat文件内容如下：</li></ol><pre class="line-numbers language-none"><code class="language-none">% 将共享文件夹映射为盘符 Y:%net use Y: \\192.168.22.156\tech  &quot;!qaz2wsx3edc&quot; &#x2F;user:&quot;tech&quot;% 配置工作空间目录变量%set &quot;spaceDir&#x3D;D:\jenkinsSpace\example&quot;% 配置目标文件夹目录变量%set &quot;targetDir&#x3D;Y:\AndroidApk\jekinsBuildApks&quot;% 定义当前日期字符串的变量如 20180505%set &quot;dateStr&#x3D;%date:~0,4%%date:~5,2%%date:~8,2%&quot;% 定义Apk源文件目录%set &quot;resourceDir&#x3D;%spaceDir%\app\build\outputs\apk&quot;% 根据日期分别定义在dev,test , release 下需要创建的文件夹目录%set &quot;devPath&#x3D;%targetDir%\dev\%dateStr%&quot;set &quot;testPath&#x3D;%targetDir%\test\%dateStr%&quot;set &quot;releasePath&#x3D;%targetDir%\release\%dateStr%&quot;% 创建文件夹%md %devPath%md %testPath%md %releasePath%% 复制apk到目标文件夹%copy %resourceDir%\*dev*.apk %devPath%copy %resourceDir%\*test*.apk %testPath%copy %resourceDir%\*release*.apk %releasePath%% 强制删除工作空间目录%rd&#x2F;s&#x2F;q %spaceDir%\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该文件中 <strong>%%</strong> 之间的内容为<strong>注释内容</strong><br />然后我们将该bat文件命名为copyApp.bat ,放置在D:\bat\目录下，<br />我们再Jenkins 任务中做如下配置</p><pre class="line-numbers language-none"><code class="language-none">call D:\bat\copyApp.batexit 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-84cee5e0e631f58e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="执行bat文件" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-84cee5e0e631f58e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>call D:\bat\copyApp.bat 是调用执行bat文件，<br />exit 0 是用来处理上面出现的因windows 命令执行错误导致Build FAILURE，<br />Jenkins 任务根据cmd命令行返回是否为0来判断是否Build 成功，故只要exit 0,每次返回0，无论windows 命令执行成功与否，只要项目Build 成功了，整个任务就是成功的。<br />至此项目移动至其他目录完成！</p><p>上一篇：<a href="https://www.jianshu.com/p/f3cf39738788">自动化构建Android项目 ---- Jenkins自动化部署学习笔记（二）</a></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> 自动化部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化构建Android项目 ---- Jenkins自动化部署学习笔记（二）</title>
      <link href="20180522/jenkins/zi-dong-hua-gou-jian-android-xiang-mu-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-er/"/>
      <url>20180522/jenkins/zi-dong-hua-gou-jian-android-xiang-mu-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<h1 id="自动化构建android项目-jenkins自动化部署学习笔记二"><a class="markdownIt-Anchor" href="#自动化构建android项目-jenkins自动化部署学习笔记二"></a> 自动化构建Android项目 ---- Jenkins自动化部署学习笔记（二）</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>  上篇文章跟大家分享了在Windows上安装Jenkins的方法，这篇文章来跟大家分享一下利用Jenkins自动化构建Android项目：</p><h2 id="一-所需准备"><a class="markdownIt-Anchor" href="#一-所需准备"></a> 一、所需准备：</h2><ol><li>Android项目上传至版本管理平台，这里我准备了Github上的Android项目https://github.com/onestravel/WebView404Example.git</li><li>配置Android SDK环境变量<br />参考上篇文章，我们进入   系统管理 -&gt; 系统设置  ，选择环境变量，进行增加<br />输入 键：ANDROID_HOME<br />输入 值：D:\android\sdk<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-cc4874a8851f29f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置Android SDK环境变量" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-cc4874a8851f29f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br />SDK环境变量配置完成，点击保存。</li></ol><h2 id="二-自动化构建配置"><a class="markdownIt-Anchor" href="#二-自动化构建配置"></a> 二、自动化构建配置</h2><p>1.我们再Jenkins网站，新建一个任务<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-63920a9fd6df1393.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建任务" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-63920a9fd6df1393.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>2.我们在新建任务界面，输入任务名称，选择任务类型，我们来选择构建一个自由风格的软件项目</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-00829bb1801c9a96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="任务创建" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-00829bb1801c9a96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>3.点击确定，进入任务配置界面，进行自动化构建的一些配置，包括任务设置，源码管理，构建触发器，构建环境，构建和构建后操作。</p><ul><li><p>(1)、配置自定义工作空间<br />Jenkins构建默认使用的是Jenkins安装目录下的workspace，我们也可以更改为自定义的workspace，如下，在 General  板块右下方，点击高级 ，勾选<strong>使用自定义的工作空间</strong>，设置工作空间目录和显示名称。<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-30053e0a62f18bfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置自定义工作空间" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-30053e0a62f18bfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li><li><p>(2)、配置源码管理，这里我们选择Git，在Repository URL输入框中输入Android项目存放的Git路径，Credentials，需要配置Git仓库访问的用户名和密码或者SSH验证，点击Add进行添加用户验证口令</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3236417-5397376b0f9e017f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="源码管理" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-5397376b0f9e017f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-67fa5a9859b8fe67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加用户验证口令-用户名密码模式" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-67fa5a9859b8fe67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br />添加完用户验证口令后，我们在Credentials中选择这个验证口令，在Branches to build中更改需要自动打包的分支，这里采用默认分支master<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-6ef1d5f9fa14ec80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择验证口令，选择build分支" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-6ef1d5f9fa14ec80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><ul><li>(3)、构建触发器，这里我们一般选择 Poll SCM 可以自定义构建触发，如：每日定时触发构建，提<br />交时触发构建，这里采用每两分钟检查构建</li></ul><table><thead><tr><th>构建时间</th><th>命令</th></tr></thead><tbody><tr><td>每 15分钟构建一次</td><td>H/15 * * * *   或*/5 * * * *</td></tr><tr><td>每天8点构建一次</td><td>0 8 * * *</td></tr><tr><td>每天8点~17点，两小时构建一次</td><td>0 8-17/2 * * *</td></tr><tr><td>周一到周五，8点~17点，两小时构建一次</td><td>0 8-17/2 * * 1-5</td></tr><tr><td>每月1号、15号各构建一次，除12月</td><td>H H 1,15 1-11 *</td></tr></tbody></table><p><img src="https://upload-images.jianshu.io/upload_images/3236417-2c56b434364b6919.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建触发器" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-2c56b434364b6919.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><ul><li><p>(4)、构建环境我们这里不用设置</p></li><li><p>(5)、构建设置，点击增加构建步骤，选择Invoke Gradle Script，我们采用Gradle进行编译，选择完成之后，在增加的内容中，点击高级，展开构建配置界面<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-25e6b0a7b8369b54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="增加构建步骤" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-25e6b0a7b8369b54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li></ul><p>在Invoke Gradle 的Gradle Version中选择我们上篇文章配置好的本地Gradle环境，采用本地环境进行编译<br />在Task中，我们输入编译的命令，多命令用空格隔开，如果有配置渠道，我们可以设置打对应的渠道包，如：clean assembleDebug，或者 clean build<br />Root build script 中输入我们的工作空间路径<br />Build File 写项目的build.gradle文件名</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-2f219073bd942cb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建配置" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-2f219073bd942cb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>至此，我们自动化构建配置完成，点击保存按钮，保存配置。<br />我们来点击立即构建，即可查看项目正在构建，点击Build History 中本次构建的时间上的小箭头（鼠标移上就会出现），点击控制台输出，即可实时查看编译日志<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-c8a5f9a5eb51edfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="立即构建" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-c8a5f9a5eb51edfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-fcca34e42fed0d63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台输出" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-fcca34e42fed0d63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><h2 id="三-项目构建中遇到的一些问题"><a class="markdownIt-Anchor" href="#三-项目构建中遇到的一些问题"></a> 三、项目构建中遇到的一些问题</h2><ol><li>Error: Some file crunching failed, see logs for details<br />:app:mergeCeshiDebugResources** FAILED</li></ol><pre class="line-numbers language-none"><code class="language-none">* What went wrong:Execution failed for task &#39;:app:mergeCeshiDebugResources&#39;.&gt; Error: Some file crunching failed, see logs for details* Try:Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-7c8dbaae0a42bde7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误信息 一" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-7c8dbaae0a42bde7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-c8a9e391d23beda8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误信息 一" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-c8a9e391d23beda8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>出现该问题主要是gradle 编译时的 build-cache 目录路径太长，导致 jenkins 无法识别该路径，才会出现此错误。</p><p>如图所示，现在build-cache 目录是在 C:\Windows\System32\config\systemprofile.android\build-cache 下，目录太长（深），导致运行时找不到文件</p><pre class="line-numbers language-none"><code class="language-none">C:\Windows\System32\config\systemprofile\.android\build-cache\63e2e64e89749266e10d6160c2536dd981719789\output\res\drawable-xhdpi-v4\abc_ab_share_pack_mtrl_alpha.9.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决此错误的方法，是在项目的gradle.properties 文件中增加 build-cache 目录，设置一个较短的目录</p><pre class="line-numbers language-none"><code class="language-none">android.buildCacheDir&#x3D;D:&#x2F;android-studio&#x2F;build-cache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-fc303f1010ebf64d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-fc303f1010ebf64d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><ol start="2"><li>如果我们的项目中有使用 google 服务，如：下图一</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3236417-4efd06ea88e1fb09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图一" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-4efd06ea88e1fb09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>这时候使用jenkins 自动化构建时，有可能会编译出错，找不到google()的服务，这是因为我们的gradle版本太低的缘故，在本文中，我们的gradle 版本使用的是3.3 的，页使用的google的服务，在编译时，出现了错误，错误信息如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-b876552e488cac90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误信息" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-b876552e488cac90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>我们在Jenkins 中的  系统管理 -&gt; 全局系统设置中，重新添加高版本的Gradle 这里使用的是4.1 版本（本地）；</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-cc2079e209a9a04e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Gradle 4.1" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-cc2079e209a9a04e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br />配置完成之后，我们再本次构建任务中选用Gradle4.1进行编译该项目，则会编译通过。</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-69a31e0b785bc5b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建任务中选用Gradle4.1" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-69a31e0b785bc5b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-11e5508da83d551c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Gradle编译成功" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-11e5508da83d551c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>上一篇：<a href="https://www.jianshu.com/p/de9c4f5ae7fa">在Windows系统上安装Jenkins ---- Jenkins自动化部署学习笔记（一）</a></p><p>下一篇：<a href="https://www.jianshu.com/p/ca07a19d036a">配置项目构建完成后文件移动---- Jenkins自动化部署学习笔记（三）</a></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> 自动化部署 </tag>
            
            <tag> 构建Android项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始-使用IntelliJ IDEA创建SpringBoot项目</title>
      <link href="20180509/java/cong-ling-kai-shi-shi-yong-intellij-idea-chuang-jian-springboot-xiang-mu/"/>
      <url>20180509/java/cong-ling-kai-shi-shi-yong-intellij-idea-chuang-jian-springboot-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="从零开始-使用intellij-idea创建springboot项目"><a class="markdownIt-Anchor" href="#从零开始-使用intellij-idea创建springboot项目"></a> 从零开始-使用IntelliJ IDEA创建SpringBoot项目</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>*<strong>注：此文章谨以记录学习过程，分享学习心得！</strong></p><p>刚刚开始了解SpringBoot框架，觉得很好用，觉得很有必要深入学习一下该框架，现在就来创建一个SpringBoot项目：</p><h2 id="新建项目"><a class="markdownIt-Anchor" href="#新建项目"></a> 新建项目</h2><h3 id="1-在idea上新建一个project"><a class="markdownIt-Anchor" href="#1-在idea上新建一个project"></a> 1、在IDEA上新建一个Project</h3><p>​在IDEA上新建一个Project，选择Spring Initializr,<br />​      Project SDK 选择安装的JDK；<br />​      Choose Initializr Service URL  选择默认（Default：<a href="https://start.spring.io">https://start.spring.io</a>）</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-3dd7f5da4930f511.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择项目模板" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-3dd7f5da4930f511.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>点击Next</p><h3 id="2-进行项目配置"><a class="markdownIt-Anchor" href="#2-进行项目配置"></a> 2、进行项目配置</h3><p>设置项目数组（group），项目标识（Artifact），Type选择一个Maven Project 表示是一个maven项目<br />Version：项目版本号<br />Name：项目名称<br />Description：项目描述<br />Package：项目包名</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-ca5e4ffea9f0a2a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目配置" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-ca5e4ffea9f0a2a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>点击Next 下一步</p><h3 id="3-选择项目模板"><a class="markdownIt-Anchor" href="#3-选择项目模板"></a> 3、选择项目模板</h3><p>我们来选择创建一个Web项目<br />选择Spring Boot版本</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-e84e96fd9ff5e6e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择项目模板" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-e84e96fd9ff5e6e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><h3 id="4-设置项目名称和项目路径"><a class="markdownIt-Anchor" href="#4-设置项目名称和项目路径"></a> 4、设置项目名称和项目路径</h3><p><img src="https://upload-images.jianshu.io/upload_images/3236417-e76ff34a55cf62aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置项目名称和项目路径" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-e76ff34a55cf62aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br />设置完项目路径，和项目名称后，点击FInish，创建项目完成，需要进行项目构建，等一小会即可完成。</p><h3 id="5-创建完成我们删除mvn文件夹mvnw文件和-mvnwcmd文件"><a class="markdownIt-Anchor" href="#5-创建完成我们删除mvn文件夹mvnw文件和-mvnwcmd文件"></a> 5、创建完成，我们删除.mvn文件夹，mvnw文件和 mvnw.cmd文件</h3><p><img src="https://upload-images.jianshu.io/upload_images/3236417-13751e9373b17cf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="删除文件" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-13751e9373b17cf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><h3 id="6-maven配置的pomxml文件"><a class="markdownIt-Anchor" href="#6-maven配置的pomxml文件"></a> 6、maven配置的pom.xml文件</h3><p>我们来看一下maven配置的pom.xml文件，里面包含了SpringBoot项目运行所需的版本库</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-e29067d2f0672163.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pom.xml" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-e29067d2f0672163.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>SpringBoot运行所需库为：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- SpringBoot项目的基础库文件--&gt;    &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;&lt;version&gt;2.0.1.RELEASE&lt;&#x2F;version&gt;&lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;&lt;&#x2F;parent&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;!-- SpringBoot项目的基础库文件--&gt;    &lt;dependencies&gt;&lt;!-- web项目库--&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;&lt;!-- 测试所需库--&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;&lt;scope&gt;test&lt;&#x2F;scope&gt;&lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-创建一个helloservice"><a class="markdownIt-Anchor" href="#7-创建一个helloservice"></a> 7、创建一个HelloService</h3><pre class="line-numbers language-none"><code class="language-none">package com.example.springbootdemo.service;import org.springframework.stereotype.Service;@Servicepublic interface HelloService &#123;    String sayHello();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-创建helloservice的实现类helloserviceimpl实现sayhello方法返回hello-world"><a class="markdownIt-Anchor" href="#8-创建helloservice的实现类helloserviceimpl实现sayhello方法返回hello-world"></a> 8、创建HelloService的实现类HelloServiceImpl，实现sayHello()方法，返回&quot;Hello World!&quot;</h3>  <pre class="line-numbers language-none"><code class="language-none">package com.example.springbootdemo.service.impl;import com.example.springbootdemo.service.HelloService;import org.springframework.stereotype.Component;@Componentpublic class HelloServiceImpl implements HelloService &#123;    @Override    public String sayHello() &#123;        return &quot;Hello World!&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-创建hellocontroller调用helloservice实现类打印hello-world到浏览器"><a class="markdownIt-Anchor" href="#9-创建hellocontroller调用helloservice实现类打印hello-world到浏览器"></a> 9、创建HelloController，调用HelloService实现类，打印&quot;Hello World!&quot;到浏览器</h3><pre class="line-numbers language-none"><code class="language-none">package com.example.springbootdemo.controller;import com.example.springbootdemo.service.HelloService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping(&quot;&#x2F;&quot;)public class HelloController &#123;    @Autowired    private HelloService helloService;    @RequestMapping(&quot;&#x2F;hello&quot;)    @ResponseBody    public String helloWorld()&#123;        return helloService.sayHello();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-见证奇迹的时刻我们来运行一下所建项目看能不能跟我们预期一样在浏览器输入访问地址httplocalhost8080hello"><a class="markdownIt-Anchor" href="#10-见证奇迹的时刻我们来运行一下所建项目看能不能跟我们预期一样在浏览器输入访问地址httplocalhost8080hello"></a> 10、见证奇迹的时刻，我们来运行一下所建项目，看能不能跟我们预期一样，在浏览器输入访问地址http://localhost:8080/hello</h3><p>就可以看到Hello World!<br />至此，学习创建一个SpringBoot项目就完成了。</p><h2 id="源码"><a class="markdownIt-Anchor" href="#源码"></a> 源码</h2><p><a href="https://github.com/onestravel/SpringBootDemo">查看源码</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Windows系统上安装Jenkins ---- Jenkins自动化部署学习笔记（一）</title>
      <link href="20180509/jenkins/zai-windows-xi-tong-shang-an-zhuang-jenkins-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-yi/"/>
      <url>20180509/jenkins/zai-windows-xi-tong-shang-an-zhuang-jenkins-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="在windows系统上安装jenkins-jenkins自动化部署学习笔记一"><a class="markdownIt-Anchor" href="#在windows系统上安装jenkins-jenkins自动化部署学习笔记一"></a> 在Windows系统上安装Jenkins ---- Jenkins自动化部署学习笔记（一）</h1><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>  之前一直想着学习一下Jenkins自动化部署，最近刚好有点时间，就利用这点时间来学习一下Jenkins自动化部署，做个笔记，既可以巩固自己的学习，也可以帮助更多的人了解Jenkins自动化部署。</p><p>  先从简单的开始，我们先用Windows系统来安装Jenkins，当然以后肯定会在Ubuntu上进行Jenkins安装配置的。</p><h1 id="一-安装前准备"><a class="markdownIt-Anchor" href="#一-安装前准备"></a> 一、安装前准备：</h1><h3 id="1-jdk17或者jdk18"><a class="markdownIt-Anchor" href="#1-jdk17或者jdk18"></a> 1、JDK1.7，或者JDK1.8：</h3><p>​Jdk下载地址如下：<br />​Windows  X86:  <a href="http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-windows-i586.exe">jdk-8u171-windows-i586.exe</a><br />​Windows  X64:  <a href="http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-windows-x64.exe">jdk-8u171-windows-x64.exe</a><br />​Linux X64：<a href="http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz">jdk-8u171-linux-x64.tar.gz</a></p><h3 id="2-jenkins安装包"><a class="markdownIt-Anchor" href="#2-jenkins安装包"></a> 2、Jenkins安装包：</h3><p>​Jenkins for windows ：<a href="https://jenkins.io/download/thank-you-downloading-windows-installer-stable/">Jenkins-for-windows-installer</a></p><h2 id="二-安装jdk配置环境变量"><a class="markdownIt-Anchor" href="#二-安装jdk配置环境变量"></a> 二、安装Jdk，配置环境变量</h2><h3 id="1-安装jdk"><a class="markdownIt-Anchor" href="#1-安装jdk"></a> 1、安装jdk</h3><p>  上面准备好的Jdk安装包，选择自己电脑系统适合的进行下载，一直默认安装就可以，也可以更改安装路径，最好jdk和jre路径一起改。</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-db7f6970fb9acef0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更改jdk安装路径" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-db7f6970fb9acef0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-1984703cb48a757d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更改jre安装路径" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-1984703cb48a757d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><h3 id="2-配置环境变量"><a class="markdownIt-Anchor" href="#2-配置环境变量"></a> 2、配置环境变量</h3><p>  安装好jdk之后，我们进行环境变量的配置：</p><ul><li><p>在「计算机」右键，选择「属性」，在弹出页面，选择「高级系统设置」，「环境变量」</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-6cfccfab63a4a90d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="环境变量" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-6cfccfab63a4a90d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li><li><p>在环境变量弹出窗中点击「系统变量」下方的新建按钮，新建JAVA_HOME变量，值为刚安装的JDK路径，如我的JDK路径为：D:\Program Files\Java\jdk1.8.0_162</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-5437a7a3f31db6c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建JAVA_HOME变量" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-5437a7a3f31db6c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li><li><p>找到 Path 变量，没有的话就新建一个，不过一般都会有的 ，点击编辑，在path变量的最前面添加Jdk的路径为“ %JAVA_HOME%\bin; ”</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3236417-6ddc36e5eb577b3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在Path变量中添加jdk路径" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-6ddc36e5eb577b3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><ul><li>找到classpath变量，没有的话，新建，增加classpath变量：%JAVA_HOME%\lib;</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3236417-61a46da5f0f875be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="增加classpath变量" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-61a46da5f0f875be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><ul><li>环境变量这就配置完成了，我们打开命令窗口，输入命令来验证是否配置合适：<br />命令为：<br />java -version  //查看java版本号<br />或<br />javac</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3236417-2c3136f894087003.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="java -version命令" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-2c3136f894087003.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-a2fdb8a4daa46a4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="javac命令" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-a2fdb8a4daa46a4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><h2 id="三-安装jenkins"><a class="markdownIt-Anchor" href="#三-安装jenkins"></a> 三、安装Jenkins</h2><ol><li><p>windows双击下载的Jenkins安装包 Jenkins.msi ，进入安装模式，选择默认配置，安装完成之后，就会默认打开浏览器 <a href="http://localhost:8080">http://localhost:8080</a>,显示   Jenkins正在启动，请稍后…<br />这个过程需要一段时间，耐心等待启动完成<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-5fe56e9319f817d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Jenkins正在启动，请稍后..." / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-5fe56e9319f817d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li><li><p>在安装过程中对自动生成密码，存储在Jenkins安装位置下的一个文件里，启动完成之后会到登录界面<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-9a297bb432fedacc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="登录界面" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-9a297bb432fedacc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li><li><p>在界面所示路径下，打开文件，复制密码，在管理员密码框输入密码，点击继续，等待系统初始化，出现自定义Jenkins界面，可以选择安装推荐的插件，括者选择需要的插件来安装，也可以不选择安装，直接点击右上角的X号关闭界面，以后可以通过插件管理器安装插件<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-e755cf9025abd857.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自定义Jenkins" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-e755cf9025abd857.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li></ol><p>4.这里选择插件来安装，选择之后点击下一步，进入如下安装界面，等待安装完成<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-1399f05cba30a59a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插件安装" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-1399f05cba30a59a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><ol start="5"><li><p>插件安装完成之后，进入创建第一个管理员用户界面，输入信息，点击保存并完成，添加第一个管理员<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-4a30cc9995b264d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建第一个管理员用户" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-4a30cc9995b264d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li><li><p>安装完成 ，点击开始使用Jenkins<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-1ab7417f03dcf1da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-1ab7417f03dcf1da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li><li><p>在Jenkins主界面点击系统管理，进入系统设置页面，选择全局工具配置<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-240bbecf4396d1d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="系统设置页面" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-240bbecf4396d1d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li><li><p>配置本地JDK全局环境，若有Git，Gradle，Ant ，Maven环境都可以在此配置，目前只配置JDK环境和Git环境如下：<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-dfbdc3fb144d4f88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置JDK环境和Git环境" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-dfbdc3fb144d4f88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li><li><p>我们可以看到，目前Jenkins的访问路径还是http://localhost:8080/，如果想要更改Jenkins访问端口号，在Jenkins安装目录下打开jenkins.xml文件，更改端口号，然后再电脑的服务中找到Jenkins服务，进行重启，然后就可以使用新的端口访问Jenkins了<br /><img src="https://upload-images.jianshu.io/upload_images/3236417-57d18681d7919394.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更改Jenkins访问端口" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-57d18681d7919394.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3236417-89f460d6ff7e33ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重启Jenkins服务" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://upload-images.jianshu.io/upload_images/3236417-89f460d6ff7e33ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>至此，Jenkins安装完成，若要使用Jenkins进行项目构建，请参考下面文章</p><p>下一篇：<a href="https://www.jianshu.com/p/f3cf39738788">自动化构建Android项目 ---- Jenkins自动化部署学习笔记（二）</a></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> 自动化部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最全IDEA快捷键总结，大幅度提高工作效率</title>
      <link href="20180506/devtools/zui-quan-idea-kuai-jie-jian-zong-jie-da-fu-du-ti-gao-gong-zuo-xiao-lu/"/>
      <url>20180506/devtools/zui-quan-idea-kuai-jie-jian-zong-jie-da-fu-du-ti-gao-gong-zuo-xiao-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="最全idea快捷键总结大幅度提高工作效率"><a class="markdownIt-Anchor" href="#最全idea快捷键总结大幅度提高工作效率"></a> 最全IDEA快捷键总结，大幅度提高工作效率</h1><h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><h5 id="刚开始使用-idea-的同学可能不熟悉-idea-的快捷键方式觉得没有eclipse的好用但是不建议把-idea-的keymap改成eclipse因为-idea-的快捷键设计有它独到的一面刚开始使用不习惯但是用多了就会觉得这些快捷键非常好用大幅度提高工作效率听说大神们合理使用idea快捷键可以实现全键盘操作呢-so不要固步自封尝试新事物吧你会发现一片新的天空海阔天空~刚开始使用-idea-的同学可能不熟悉idea的快捷键方式觉得没有eclipse的好用但是不建议把-idea-的keymap改成eclipse因为-idea-的快捷键设计有它独到的一面刚开始使用不习惯但是用多了就会觉得这些快捷键非常好用大幅度提高工作效率听说大神们合理使用idea快捷键可以实现全键盘操作呢-so不要固步自封尝试新事物吧你会发现一片新的天空海阔天空~"><a class="markdownIt-Anchor" href="#刚开始使用-idea-的同学可能不熟悉-idea-的快捷键方式觉得没有eclipse的好用但是不建议把-idea-的keymap改成eclipse因为-idea-的快捷键设计有它独到的一面刚开始使用不习惯但是用多了就会觉得这些快捷键非常好用大幅度提高工作效率听说大神们合理使用idea快捷键可以实现全键盘操作呢-so不要固步自封尝试新事物吧你会发现一片新的天空海阔天空~刚开始使用-idea-的同学可能不熟悉idea的快捷键方式觉得没有eclipse的好用但是不建议把-idea-的keymap改成eclipse因为-idea-的快捷键设计有它独到的一面刚开始使用不习惯但是用多了就会觉得这些快捷键非常好用大幅度提高工作效率听说大神们合理使用idea快捷键可以实现全键盘操作呢-so不要固步自封尝试新事物吧你会发现一片新的天空海阔天空~"></a> [](#刚开始使用 IDEA 的同学可能不熟悉 IDEA 的快捷键方式觉得没有eclipse的好用但是不建议把 IDEA 的keymap改成eclipse因为 IDEA 的快捷键设计有它独到的一面刚开始使用不习惯但是用多了就会觉得这些快捷键非常好用大幅度提高工作效率听说大神们合理使用IDEA快捷键可以实现全键盘操作呢-so不要固步自封尝试新事物吧你会发现一片新的天空海阔天空~)刚开始使用 IDEA 的同学可能不熟悉idea的快捷键方式，觉得没有eclipse的好用，但是不建议把 IDEA 的keymap改成eclipse，因为 IDEA 的快捷键设计有它独到的一面，刚开始使用不习惯，但是用多了就会觉得这些快捷键非常好用，大幅度提高工作效率，听说大神们合理使用IDEA快捷键可以实现全键盘操作呢。so，不要固步自封，尝试新事物吧，你会发现一片新的天空（海阔天空）~</h5><h3 id=""><a class="markdownIt-Anchor" href="#"></a> <a href="#%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE"></a>系统默认的快捷键</h3><h4 id="-2"><a class="markdownIt-Anchor" href="#-2"></a> <a href="#1-%E4%BB%A3%E7%A0%81%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE"></a>1. 代码操作相关的快捷键</h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+Y</td><td>删除一行</td></tr><tr><td>Ctrl+W</td><td>选择光标所在行或者代码片（光标在大括号上），连续按会有其他效果</td></tr><tr><td>Ctrl+Z</td><td>撤销操作</td></tr><tr><td>Ctrl+Shift+Z</td><td>恢复Ctrl+Z撤销的操作</td></tr><tr><td>Alt+Enter</td><td>引入类或提供给你选择的处理方法</td></tr><tr><td>Alt+Shift+上下</td><td>代码向上/下移动一行</td></tr><tr><td>Alt+/</td><td>复制上一个单词</td></tr><tr><td>Ctrl+Shift+Enter</td><td>自动补全分号</td></tr><tr><td>Ctrl+Shift+V</td><td>粘贴板历史</td></tr><tr><td>Ctrl+Alt+M</td><td>将代码片段提取成为一个方法</td></tr><tr><td>Ctrl+G</td><td>按行号和列号来查找</td></tr><tr><td>Ctrl+Alt+L</td><td>格式化代码(和QQ快捷键冲突)</td></tr><tr><td>Ctrl+Shift+Space</td><td>自动补全代码</td></tr><tr><td>Ctrl+空格</td><td>代码提示</td></tr><tr><td>Ctrl+Alt+Space</td><td>类名或接口名提示</td></tr></tbody></table><h4 id="-3"><a class="markdownIt-Anchor" href="#-3"></a> <a href="#2-%E6%9F%A5%E6%89%BE%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE"></a>2. 查找相关的快捷键</h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+F</td><td>在本文件查找，可通过方向键移动选择，按Esc消失</td></tr><tr><td>Ctrl+R</td><td>在本文件内查找/替换 ，可选择 replace 和 replaceAll，按Esc消失</td></tr><tr><td>Ctrl+Shift+F</td><td>在制定路径/模块/工程内查找(全局查找)</td></tr><tr><td>Ctrl+N</td><td>在本工程类查询某个类</td></tr><tr><td>Ctrl+Shift+N</td><td>查询某个类(不限本工程)看源码很实用，比如我想看看jdk里面TreeMap这个类的代码，就可以用这个功能</td></tr></tbody></table><h4 id="-4"><a class="markdownIt-Anchor" href="#-4"></a> <a href="#3%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81%E7%9B%B8%E5%85%B3%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE"></a>3.查看代码相关的快捷键</h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+H</td><td>查看一个类的继承关系</td></tr><tr><td>Ctrl+B</td><td>查看一个类或者变量的申明</td></tr><tr><td>Alt+F7</td><td>查找一个属性或方法被谁调用</td></tr><tr><td>Alt+上下</td><td>跳到上/下一个方法(或属性)</td></tr><tr><td>Ctrl+上下</td><td>上下滑屏但是不移动光标</td></tr><tr><td>Alt+左右</td><td>同时打开多个文件时切换代码视图，切换到另一个文件视图</td></tr><tr><td>Ctrl+Alt+ 左右</td><td>返回至上次浏览的位置 非常实用，在多个文件代码中遨游的时候能够快速回到想去的位置</td></tr><tr><td>Ctrl+HOME/END</td><td>光标跳转到第一行或最后一行</td></tr><tr><td>ALT+SHIFT+C</td><td>最近修改的代码</td></tr></tbody></table><h4 id="-5"><a class="markdownIt-Anchor" href="#-5"></a> <a href="#4%E6%8F%90%E7%A4%BA%E7%B1%BB%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE"></a>4.提示类的快捷键</h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+Q</td><td>显示注释文档</td></tr><tr><td>Ctrl+P</td><td>查看函数参数（光标在方法参数的括号内）</td></tr><tr><td>Ctrl+J</td><td>代码模板</td></tr></tbody></table><h4 id="-6"><a class="markdownIt-Anchor" href="#-6"></a> <a href="#5%E9%87%8D%E6%9E%84%E7%B1%BB%E5%BF%AB%E6%8D%B7%E9%94%AE"></a>5.重构类快捷键</h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Alt+Delete</td><td>安全删除字段或方法</td></tr><tr><td>Ctrl+Alt+N</td><td>去除一些多余的赋值过程或者函数 下面会单独演示</td></tr><tr><td>Shift+F6</td><td>重命名类或者变量</td></tr></tbody></table><h4 id="-7"><a class="markdownIt-Anchor" href="#-7"></a> <a href="#6%E7%BC%96%E8%AF%91%E5%99%A8%E7%9B%B8%E5%85%B3%E5%BF%AB%E6%8D%B7%E9%94%AE"></a>6.编译器相关快捷键</h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Alt+F12</td><td>打开命令行终端</td></tr><tr><td>Alt+1</td><td>打开工程结构</td></tr><tr><td>Alt+7</td><td>打开类结构</td></tr><tr><td>Alt+9</td><td>打开change</td></tr></tbody></table><h4 id="-8"><a class="markdownIt-Anchor" href="#-8"></a> <a href="#7debug%E5%BF%AB%E6%8D%B7%E9%94%AE"></a>7.debug快捷键</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>F7</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td>F8</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td>F9</td><td>在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td></tr><tr><td>Alt + F8</td><td>在 Debug的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td></tr><tr><td>Ctrl + F8</td><td>在 Debug模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td></tr><tr><td>Shift + F7</td><td>在 Debug模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td></tr><tr><td>Shift + F8</td><td>在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</td></tr><tr><td>Ctrl + Shift + F8</td><td>在 Debug 模式下，指定断点进入条件</td></tr><tr><td>Alt + Shift + F7</td><td>在Debug模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td></tr></tbody></table><h4 id="-9"><a class="markdownIt-Anchor" href="#-9"></a> <a href="#8%E5%90%AF%E5%8A%A8%E7%9B%B8%E5%85%B3"></a>8.启动相关</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + F9</td><td>Build Project build整个项目</td></tr><tr><td>Shift + F9</td><td>项目以Debug模式进行启动当前项目</td></tr><tr><td>Shift + F10</td><td>项目以Run模式进行启动当前项目</td></tr><tr><td>Alt + Shift + F10</td><td>以Run模式进行启动某个项目 ，项目可选</td></tr><tr><td>Alt + Shift + F10</td><td>以Run模式进行启动某个项目 ，项目可选</td></tr><tr><td>Ctrl + F2</td><td>停止当前运行的项目</td></tr><tr><td>Ctrl + Shift + F2</td><td>停止后台进程</td></tr></tbody></table><h4 id="-10"><a class="markdownIt-Anchor" href="#-10"></a> <a href="#9%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%93%8D%E4%BD%9C%E7%9B%B8%E5%85%B3"></a>9.版本控制操作相关</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + ALT + A</td><td>添加文件到版本控制</td></tr><tr><td>Ctrl + T</td><td>update当前项目</td></tr><tr><td>Ctrl + K</td><td>提交当前项目的文件改动</td></tr><tr><td>Ctrl + Shift + K</td><td>将已经提交的版本push到远程服务器</td></tr><tr><td>Ctrl + ALT + Z</td><td>撤销本地更改</td></tr><tr><td>Ctrl + ALT + Shift + D</td><td>查看本地文件更改内容</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> DevTools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevTools </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Android studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+域名搭建个人主页（个人博客）</title>
      <link href="20171020/h5/github-yu-ming-da-jian-ge-ren-zhu-ye-ge-ren-bo-ke/"/>
      <url>20171020/h5/github-yu-ming-da-jian-ge-ren-zhu-ye-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h3 id="一-工作准备"><a class="markdownIt-Anchor" href="#一-工作准备"></a> 一、工作准备</h3><p>搭建个人主页需要做的准备工作有两个：</p><h5 id="1-注册github账号注册github账号是免费的"><a class="markdownIt-Anchor" href="#1-注册github账号注册github账号是免费的"></a> 1）、注册Github账号，注册Github账号是免费的，</h5><p>Github网站地址：<a href="https://github.com/github">https://github.com/github</a><br /><br><br />点击Sign up进入注册页面，总共有三步，按照步骤填入相应的信息即可。<br /><br>第一步：<br /><img src="http://upload-images.jianshu.io/upload_images/3236417-0efc8ff977c96d71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注册" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-0efc8ff977c96d71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br /><br>第二步：<br /><img src="http://upload-images.jianshu.io/upload_images/3236417-6f1d826de301fdcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注册" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-6f1d826de301fdcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br /><br>第三步：<br /><img src="http://upload-images.jianshu.io/upload_images/3236417-cc70c3ce9933a435.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" 注册" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-cc70c3ce9933a435.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br /><br>注册步骤完成之后点击邮箱验证后，就注册成功了。</p><h5 id="2-注册购买域名"><a class="markdownIt-Anchor" href="#2-注册购买域名"></a> 2）、注册（购买）域名</h5><h3 id="二-创建个人主页的项目"><a class="markdownIt-Anchor" href="#二-创建个人主页的项目"></a> 二、创建个人主页的项目</h3><p>登录 GitHub 之后，在页面右上角点击 + 加号按钮，点击 New repository。<br /><br><br />由于是个人网站的项目，那么项目名就要按照规定来写<br /><br><br />规则是：</p><p>**<a href="http://YOUR-GITHUB-USERNAME.github.io">YOUR-GITHUB-USERNAME.github.io</a> **</p><p>比如我的Github用户名为onestravel1，那么项目名则应该是：<a href="http://onestravel1.github.io">onestravel1.github.io</a><br /><img src="http://upload-images.jianshu.io/upload_images/3236417-11a0c5cd18e1c871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建个人主页项目" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-11a0c5cd18e1c871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br /><br>点击create Repository 就可以成功创建个人主页项目了。<br /><br><br />(<a href="http://upload-images.jianshu.io/upload_images/3236417-7249a4d0fabda949.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240">http://upload-images.jianshu.io/upload_images/3236417-7249a4d0fabda949.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240</a>)<br /><br><br />点击Settings进入项目设置界面<br /><br><br /><img src="http://upload-images.jianshu.io/upload_images/3236417-07eb28c43cdbab6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建个人主页项目" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-07eb28c43cdbab6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br /><br><br />然后再 GitHub Pages 选项中点击 choose a theme 按钮，选择一个初始的个人主页样式<br /><br><br /><img src="http://upload-images.jianshu.io/upload_images/3236417-35278ad15f24efaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" 创建个人主页项目" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-35278ad15f24efaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br /><br><br />选择一个样式的主页模板<br /><br><br /><img src="http://upload-images.jianshu.io/upload_images/3236417-bf64cc91bafb2517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建个人主页项目" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-bf64cc91bafb2517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br /><br><br />点击 select theme 按钮之后，就会自动生成初始化的页面主题，进入代码提交界面，填入提交日志，点击commit changes 提交代码。<br /><br>提交完成之后，就可以通过刚才创建时的项目名称进行访问了</p><p><strong>例如：<a href="https://onestravel1.github.io">https://onestravel1.github.io</a></strong></p><p>到此，利用Github创建个人主页的第一步就完成了。后面可以通过git工具把该项目clone到本地，然后进行页面的更改和优化后，提交到该仓库中。则编写的代码会立即生效。</p><h3 id="三-将域名映射到个人主页项目"><a class="markdownIt-Anchor" href="#三-将域名映射到个人主页项目"></a> 三、将域名映射到个人主页项目</h3><p>先在阿里云上进行域名的申请，域名申请过程就不在这里详述了。比如，我申请的域名为:onestravel.win，打开阿里云官网，找到控制台-&gt;域名管理<br /><br><br /><img src="http://upload-images.jianshu.io/upload_images/3236417-1842db787f82bb4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-1842db787f82bb4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>在域名管理页面，可以看到域名列表，刚申请的域名，要记得进行实名认证，因为我申请的是.win的域名，这两天不能进行实名认证，所以显示未实名认证。在右侧可以看到 【续费|解析|管理】 的按钮，点击 解析 按钮，看到下面的界面<br /><br><br /><img src="http://upload-images.jianshu.io/upload_images/3236417-a4b29367ff0a0853.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-a4b29367ff0a0853.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br />点击添加解析<br /><br><br /><img src="http://upload-images.jianshu.io/upload_images/3236417-d80c28665be262ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-d80c28665be262ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>可以看到，这里添加解析需要填写的信息，</p><h6 id="记录类型默认选择-a"><a class="markdownIt-Anchor" href="#记录类型默认选择-a"></a> 记录类型：默认选择 A</h6><h6 id="主机记录主机记录需要添加两个分两次添加解析分别为-www-和-不分先后这次填-www"><a class="markdownIt-Anchor" href="#主机记录主机记录需要添加两个分两次添加解析分别为-www-和-不分先后这次填-www"></a> 主机记录：主机记录需要添加两个，分两次添加解析，分别为 www 和 @ ，不分先后，这次填 www</h6><h6 id="解析线路选择-默认"><a class="markdownIt-Anchor" href="#解析线路选择-默认"></a> 解析线路：选择 默认</h6><h6 id="ttl值默认-10分钟不需要改动"><a class="markdownIt-Anchor" href="#ttl值默认-10分钟不需要改动"></a> TTL值：默认 10分钟，不需要改动</h6><h6 id="记录值这里需要个人主页项目的ip那么问题来了怎么拿到个人主页项目的ip呢其实很简单打开电脑终端mac或者命令行windows在命令行中输入命令-ping-个人主页项目原域名比如"><a class="markdownIt-Anchor" href="#记录值这里需要个人主页项目的ip那么问题来了怎么拿到个人主页项目的ip呢其实很简单打开电脑终端mac或者命令行windows在命令行中输入命令-ping-个人主页项目原域名比如"></a> 记录值：这里需要个人主页项目的IP，那么问题来了，怎么拿到个人主页项目的IP呢，其实很简单，打开电脑终端（Mac）或者命令行（Windows），在命令行中输入命令 ping [个人主页项目原域名]，比如：</h6><p>ping <a href="http://onestravel1.github.io">onestravel1.github.io</a><br /><br>即可得到该项目对应的IP地址<br /><br><br /><img src="http://upload-images.jianshu.io/upload_images/3236417-69f4e960c72236e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-69f4e960c72236e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>将得到的IP地址填入到记录值中<br /><br><br /><img src="http://upload-images.jianshu.io/upload_images/3236417-a4460d4e6adf6f93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-a4460d4e6adf6f93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><p>然后点击确定，再添加一个解析，主机记录值填写 @ ，其他值都和上面一样，点击添加，即可得到两条解析记录如下：<br /><br><br /><img src="http://upload-images.jianshu.io/upload_images/3236417-2141fe6c863f7790.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-2141fe6c863f7790.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"><br />然后再个人主页项目中创建名为CNAME的文件，在文件中写入你申请的域名，点击保存到你的github的个人主页项目中，就可以通过域名来访问你的个人主页了！<br /><img src="http://upload-images.jianshu.io/upload_images/3236417-04dd08057a056e1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="http://upload-images.jianshu.io/upload_images/3236417-04dd08057a056e1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" class="lozad post-image"></p><h6 id="注域名映射需要一定的时间请等待10分钟左右的时间后在访问你的个人主页"><a class="markdownIt-Anchor" href="#注域名映射需要一定的时间请等待10分钟左右的时间后在访问你的个人主页"></a> 注：域名映射需要一定的时间，请等待10分钟左右的时间后，在访问你的个人主页！</h6>]]></content>
      
      
      <categories>
          
          <category> 前端H5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（源码）解决Android的WebView加载失败（404，500），显示的自定义视图</title>
      <link href="20170328/android-ndk/yuan-ma-jie-jue-android-de-webview-jia-zai-shi-bai-404-500-xian-shi-de-zi-ding-yi-shi-tu/"/>
      <url>20170328/android-ndk/yuan-ma-jie-jue-android-de-webview-jia-zai-shi-bai-404-500-xian-shi-de-zi-ding-yi-shi-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="源码解决android的webview加载失败404500显示的自定义视图"><a class="markdownIt-Anchor" href="#源码解决android的webview加载失败404500显示的自定义视图"></a> （源码）解决Android的WebView加载失败（404，500），显示的自定义视图</h1><p>好多朋友会在Android开发过程中遇到使用WebView加载html页面出现404,500等错误页面，也有好多人想自定义这个错误页面，但是在6.0之前，大家觉得自定义错误页面就不好处理了；<br />之前一直使用在WebView加载时，根据onReceivedError() 判断网页是否加载成功，然后做相应的操作，但是最后发现，在一些情况下，html页面加载失败了，onReceivedError()方法却并没有执行。<br />最后进过努力，想出了一个比较笨，但是我又觉得比较有效的方法。下面来给大家简单说一说：<br />不知道大家发现没有，在所有的加载错误的html页面中，html的标题title可能都会包含错误信息，比如说“error”，这样的话我们就可以在这个html的标题title上做文章了。<br />#1.先给大家说说怎么获取这个html的标题title<br />###(1).Android应用开发的时候使用WebView这个组件的过程中可能会接触到WebViewClient与WebChromeClient，那么这两个类到底有什么不同呢<br />WebViewClient主要帮助WebView处理各种通知、请求事件的，比如：</p><pre><code>    onLoadResource    onPageStart    onPageFinish    onReceiveError    onReceivedHttpAuthRequestWebChromeClient主要辅助WebView处理Javascript的对话框、网站图标、网站title、加载进度等比如    onCloseWindow(关闭WebView)    onCreateWindow()    onJsAlert (WebView上alert无效，需要定制WebChromeClient处理弹出)    onJsPrompt    onJsConfirm    onProgressChanged    onReceivedIcon    onReceivedTitle</code></pre><p>看上去他们有很多不同，实际使用的话，如果你的WebView只是用来处理一些html的页面内容，只用WebViewClient就行了，如果需要更丰富的处理效果，<br />比如JS、进度条等，就要用到WebChromeClient。<br />###(2).我们可以看到在 WebChromeClient 中有一个方法 onReceivedTitle() ，这个方法就是用来获取html页面的标题title的回调。<br />#2.我们在 WebChromeClient 中的 onReceivedTitle() 方法里判断html页面的标题中是否含有 “error” ，如果有，则证明html加载失败，设置加载失败的标记，让在 WebViewClient 的完成是回<br />调的 onPageFinish() 方法里显示自定义的加载失败的页面**</p><p>代码如下：</p>   <pre class="line-numbers language-none"><code class="language-none">WebSettings webSettings &#x3D; webView.getSettings();    &#x2F;&#x2F;设置WebView属性，能够执行Javascript脚本    webSettings.setJavaScriptEnabled(true);    &#x2F;&#x2F;设置可以访问文件    webSettings.setAllowFileAccess(true);    webSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);    webView.setWebViewClient(new WebViewClient() &#123;        @Override        public boolean shouldOverrideUrlLoading(WebView view, String url) &#123;            view.loadUrl(url);            return true;        &#125;        &#x2F;**         * 网页页面开始加载的时候，执行的回调方法         * @param view         * @param url         * @param favicon         *&#x2F;        @Override        public void onPageStarted(WebView view, String url, Bitmap favicon) &#123;&#x2F;&#x2F;网页页面开始加载的时候            emptyView.setEmptyView(EmptyView.EMPTY_LOADING);&#x2F;&#x2F;初始化一个显示正在加载的视图            rl_detail.setVisibility(View.VISIBLE);            rl_detail.removeAllViews();            rl_detail.addView(emptyView);&#x2F;&#x2F;在加载页面开始的时候显示一个正在加载的视图，            webView.setEnabled(false);&#x2F;&#x2F; 当加载网页的时候将网页进行隐藏            ll_container_btn.setVisibility(View.GONE);            btn_collect.setVisibility(View.GONE);            super.onPageStarted(view, url, favicon);        &#125;        &#x2F;**         * 网页加载结束的时候执行的回调方法         * @param view         * @param url         *&#x2F;        @Override        public void onPageFinished(WebView view, String url) &#123;&#x2F;&#x2F;网页加载结束的时候            if (!loadError) &#123;&#x2F;&#x2F;当网页加载成功的时候判断是否加载成功                rl_detail.setVisibility(View.GONE);&#x2F;&#x2F;加载成功的话，则隐藏掉显示正在加载的视图，显示加载了网页内容的WebView                webView.setEnabled(true);                ll_container_btn.setVisibility(View.VISIBLE);                btn_collect.setVisibility(View.VISIBLE);            &#125; else &#123; &#x2F;&#x2F;加载失败的话，初始化页面加载失败的图，然后替换正在加载的视图页面                rl_detail.removeAllViews();                emptyView.setEmptyView(EmptyView.EMPTY_EMPTY, &quot;您找的页面暂时走丢了...&quot;);                rl_detail.addView(emptyView);            &#125;        &#125;        &#x2F;**         * 页面加载错误时执行的方法，但是在6.0以下，有时候会不执行这个方法         * @param view         * @param errorCode         * @param description         * @param failingUrl         *&#x2F;        @Override        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) &#123;            super.onReceivedError(view, errorCode, description, failingUrl);            loadError &#x3D; true;        &#125;    &#125;);    webView.setWebChromeClient(new WebChromeClient()&#123;        &#x2F;**         * 当WebView加载之后，返回 HTML 页面的标题 Title         * @param view         * @param title         *&#x2F;        @Override        public void onReceivedTitle(WebView view, String title) &#123;            &#x2F;&#x2F;判断标题 title 中是否包含有“error”字段，如果包含“error”字段，则设置加载失败，显示加载失败的视图          if(!TextUtils.isEmpty(title)&amp;&amp;title.toLowerCase().contains(&quot;error&quot;))&#123;              loadError &#x3D; true;          &#125;        &#125;    &#125;);    webView.loadUrl(url);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源码下载  <a href="https://github.com/onestravel/WebView404Example">源码下载</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> WebView </tag>
            
            <tag> 404 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的简单使用方法</title>
      <link href="20170328/devtools/git-de-shi-yong-fang-fa/"/>
      <url>20170328/devtools/git-de-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="git的使用"><a class="markdownIt-Anchor" href="#git的使用"></a> Git的使用</h1><h2 id="一-认识-git"><a class="markdownIt-Anchor" href="#一-认识-git"></a> 一、认识 Git</h2><h3 id="1-git-和替他版本控制系统的差异"><a class="markdownIt-Anchor" href="#1-git-和替他版本控制系统的差异"></a> 1. Git 和替他版本控制系统的差异</h3><p>a. <strong>直接记录快照，非差异比较</strong></p><ul><li>git 和其他版本控制系统主要差别在于对 Git 对待数据的方法。其他版本控制系统（CVS、Subversion等等）大部分都是一文件变更列表的方式存储信息，将保存信息看做一组基本文件和每个文件跟随时间逐步积累的差异。</li></ul>  <img src="../../images/git/image-20201019193124074.png" alt="image-20201019193124074" style="zoom:67%;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="../../images/git/image-20201019193124074.png" class="lozad post-image"><ul><li>Git 对待数据更像是快照流： 将数据看做是对小型文件的一组快照。每次提交之后/保存项目状态时，对当时的全部文件制作一个快照，并保存这个快照的索引。如果文件没有修改，Git 就不再重新存储，只保留一个链接指向之前存的文件（更高效）。</li></ul>  <img src="../../images/git/image-20201019193646321.png" alt="image-20201019193646321" style="zoom:67%;" / srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="../../images/git/image-20201019193646321.png" class="lozad post-image"><p>b. <strong>本地执行，更安全，更便捷</strong></p><ul><li>Git 在克隆代码时，会将项目的完整历史保存在本地磁盘，与服务器形成分布式系统，增加项目的安全性。</li><li>Git 在本地磁盘有完整的历史，则Git绝大多数操作都只需要访问本地文件和资源，不会需要网络上的项目信息，使用起来更加便捷（如在离线环境可以进行除了向远程提交修改的操作外的其他操作，等有网络后，在推送到远程服务器）。</li></ul><p>c.  <strong>保证完整性</strong></p><p>Git 中所有数据在存储前都计算检验和（SHA-1散列机制，由40个十六进制字符组成的字符串），然后以检验和来引用，这意味着 Git 对更改文件任何内容或目录都可知。保证文件不会在不知情情况下损坏或丢失信息。</p><p>d. <strong>Git 一般只添加数据</strong></p><p>Git 操作几乎只往数据库中增加数据。很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据（未提交的本地修改可能会丢失或弄乱修改内容）。</p><h3 id="2-git-的工作区"><a class="markdownIt-Anchor" href="#2-git-的工作区"></a> 2.  Git 的工作区</h3><p>Git有三种状态： 已提交（committed）,已修改（modified）,和已暂存（staged）。已提交表示数据已安全保存在本地数据库中。已修改表示修改了文件，但还没保存到数据库中。已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。<br />由此可引入 Git 的三个工作区域:</p><ol><li>Git 仓库： Git 用来保存项目的元数据和对象数据库的地方。</li><li>工作目录： 对项目的某个版本独立提起出来的内容。在磁盘上公使用或修改。</li><li>暂存区域： 是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中，也被称作“索引”。</li></ol><p><strong>Git 在三个区域的工作流程如下：</strong></p><ul><li>在工作目录中修改文件</li><li>暂存文件，将文件的快照放入暂存区域</li><li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li></ul><h2 id="二-git的配置"><a class="markdownIt-Anchor" href="#二-git的配置"></a> 二、Git的配置</h2><h3 id="1-git-的下载安装"><a class="markdownIt-Anchor" href="#1-git-的下载安装"></a> 1. Git 的下载安装</h3><p>Git下载地址：<a href="https://git-scm.com/download">https://git-scm.com/download</a></p><p>选择自己合适的版本进行下载</p><p>下载之后选择路径，默认安装就好。</p><h3 id="2-初次运行-git-前的配置"><a class="markdownIt-Anchor" href="#2-初次运行-git-前的配置"></a> 2. 初次运行 Git 前的配置</h3><p>Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量，这些变量存储在三个不同的位置：</p><ul><li><p><code>/etc/gitconfig</code>文件：包含系统上每一个用户及他们仓库的通用配置。如果使用带有<code>--system</code>选项的 git config 时，它会从此文件读写配置变量。</p></li><li><p><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只针对当前用户。可以传递 <code>--global</code> 选项让 Git 读写此文件。</p></li><li><p>当前使用仓库的 Git 目录中的 config 文件（``.git/config）：针对该仓库</p></li></ul><p>每一个级别覆盖上一个级别的配置，所以 <code>./git/config</code> 的配置变量会覆盖 <code>/etc/gitconfig</code> 中的配置变量</p><h3 id="3-用户信息配置"><a class="markdownIt-Anchor" href="#3-用户信息配置"></a> 3. 用户信息配置</h3><p>安装完 Git 需要设置用户名和右键地址。这些信息会写入到后面的每一次提交中，不可更改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.name <span class="token string">"Your UserName"</span>$ <span class="token function">git</span> config --global user.email <span class="token string">"Your Email Address"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果使用了 <code>--global</code> 选项，改命令只需要运行一次，之后在改系统上进行任何 Git 操作，都会使用这些信息。如果想针对特定项目使用不同的用户名和邮箱信息，则可以在那个项目目录下运行没有 <code>--global</code> 选项的命令来配置。</p></blockquote><h3 id="4-检查配置信息"><a class="markdownIt-Anchor" href="#4-检查配置信息"></a> 4. 检查配置信息</h3><p>可以使用 <code>git config --list</code> 命令来列出所有 Git 当前能找到的配置。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config --listcolor.status<span class="token operator">=</span>autocolor.branch<span class="token operator">=</span>autocolor.interactive<span class="token operator">=</span>autocolor.diff<span class="token operator">=</span>auto<span class="token punctuation">..</span>.user.name<span class="token operator">=</span>Your UserNameuser.email<span class="token operator">=</span>Your Email Address<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过 <code>git config &lt;key&gt;</code> 来检查 Git 的某一项配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config user.nameYour UserName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="三-git的使用"><a class="markdownIt-Anchor" href="#三-git的使用"></a> 三、Git的使用</h2><h3 id="1-获取-git-仓库"><a class="markdownIt-Anchor" href="#1-获取-git-仓库"></a> 1、获取 Git 仓库</h3><h4 id="11-从服务器克隆一个现有的-git-仓库"><a class="markdownIt-Anchor" href="#11-从服务器克隆一个现有的-git-仓库"></a> 1.1 从服务器克隆一个现有的 Git 仓库</h4><p>​如果已经在服务器存在了 Git 仓库，则使用 <code>git clone</code> 命令。这里和其他 VCS 系统不同的时 Git 克隆是将菜 Git 仓库服务器上的几乎所有数据复制到本地磁盘，而不是仅仅复制完成工作所需的文件。可以使用任何一个克隆下来的用户端来重建服务器上的仓库。</p><p>Git 支持多种传输协议：<code>https://</code>协议， <code>git://</code> 协议，SSH 传输协议（如：user@server:path/to/repo.git）。</p><p>**克隆仓库的命令格式是<code>git clonr [url]</code> **:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/libgit2/libgit2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>这会在当前目录下创建一个名为&quot;libgit2&quot; 的目录，并在这个目录下初始化一个 ``.git`` 文件夹，从远程仓库拉取的所有数据都会放入 ``.git`` 文件夹，然后从中读取最新版本的文件拷贝。进入这个新建的 “libgit2” 文件夹，会看到所有的项目文件已经在里面了，可以开始后续的开发和使用。</code></pre><p>如果想在克隆仓库的时候自定义本地仓库的名字，可以使用如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/libgit2/libgit2 mylibgit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个上一个命令执行相同的操作，只是在本地创建的文件夹名字变为“mylibgit”</p><h4 id="12-在现有目录中初始化仓库"><a class="markdownIt-Anchor" href="#12-在现有目录中初始化仓库"></a> 1.2 在现有目录中初始化仓库</h4><p>如果打算在新的目录中使用 Git 进行项目管理，可有在改牡蛎下进行初始化仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令将创建一个名为 <code>.git</code> 的文件夹，这个文件夹含有初始化的 Git 仓库中所有的必须文件。</p><p>如果在一个已经存在的文件夹中初始化 Git 仓库，则应该跟踪这些文件并提交。</p><p>Git 通过 <code>git add</code> 命令来实现对指定文件的跟踪，通过执行 <code>git commit</code> 命令来提交文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> test.txt$ <span class="token function">git</span> commit -m <span class="token string">"init project"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-仓库更新相关"><a class="markdownIt-Anchor" href="#2-仓库更新相关"></a> 2. 仓库更新相关</h3><p>仓库文件在修改后，有两种状态：已跟踪（被纳入版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区）或未跟踪（除已跟踪文件外的所有文件，既不存在于上次快照记录中，也没放入暂存区）。</p><h4 id="21-检测当前文件状态"><a class="markdownIt-Anchor" href="#21-检测当前文件状态"></a> 2.1 检测当前文件状态</h4><p>使用 <code>git status</code> 命令来查看文件处于什么状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">'My Project'</span> <span class="token operator">></span> README$ <span class="token function">git</span> statusOn branch masterUntracked files:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>    READMEnothing added to commit but untracked files present <span class="token punctuation">(</span>use <span class="token string">"git add"</span> totrack<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到当前分支处于 master 分支，在当前仓库中发现一个未跟踪文件 “README”</p><h4 id="22-跟踪新文件"><a class="markdownIt-Anchor" href="#22-跟踪新文件"></a> 2.2 跟踪新文件</h4><p>使用<code>git add</code> 命令跟踪一个文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> README <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时在运行 <code>git status</code> 命令，可以看到 README 文件一杯跟踪，并处于暂存状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> to unstage<span class="token punctuation">)</span>    new file: README<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要在 Changes to be committed 这行下面的，就说明是已暂存状态。</p><blockquote><p><code>git add</code> 命令使用文件或目录的路径作为参数，如果参数是目录路径，则改命令将递归跟踪改目录下所有文件。</p></blockquote><h4 id="23-暂存已修改文件"><a class="markdownIt-Anchor" href="#23-暂存已修改文件"></a> 2.3 暂存已修改文件</h4><p>修改一个已经被跟踪的文件，如 test.txt ，然后运行<code>git status</code> 命令，会看到一下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> to unstage<span class="token punctuation">)</span>new file:   READMEChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file>..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>modified:   test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件 test.txt 出现在 <code>Changes not staged for commit</code> 下面，说明已跟踪文件发生变化，但还没有放到暂存区，要暂存这次更新，需要运行<code>git add</code>命令。</p><blockquote><p><code>git add</code>是个多功能命令，可以用它开始跟踪文件；或者把已跟踪的文件放到暂存区；还能用于合并时将有冲突的文件标记位已解决状态等。</p></blockquote><p>接下来运行 <code>git add</code> 命令将 test.txt 文件放到暂存区，然后在看看 <code>git status</code> 的输出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> test.txt$ <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> to unstage<span class="token punctuation">)</span>new file:   READMEmodified:   test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次修改 test.txt 文件，然后运行 <code>git status</code> 命令查看文件状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> to unstage<span class="token punctuation">)</span>new file:   READMEmodified:   test.txtChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file>..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>modified:   test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 test.txt 文件同时出现在了暂存区和非暂存区。如果此时进行提交，test.txt 文件的版本是最后一次运行<code>git add</code> 命令时的那个版本，而不是运行<code>git commit</code>时，工作目录中的版本。所以在运行了<code>git add</code> 之后有做了修订的文件，需要重新运行<code>git add</code>把最新版本重新 暂存起来。</p><h4 id="24-文件状态预览"><a class="markdownIt-Anchor" href="#24-文件状态预览"></a> 2.4 文件状态预览</h4><p><code>git status</code> 命令输出非常详细，如果使用<code>git status -s</code>命令或<code>git status --short</code> 命令，将得到一种更为紧凑的格式输出。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> status -s           A  READMEMM test.txtA  version?? LICENSE.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新添加的未跟踪文件前有 <code>??</code>标记</li><li>新添加到暂存区中的问价前有 <code>A</code>标记</li><li>修改或的文件前面有 <code>M</code>标记</li><li>出现在右边的 <code>M</code> 表示该问家被修改了但还没有放入暂存区</li><li>出现在左边的 <code>M</code> 表示改文件被修改了并放入了暂存区。</li></ul><h4 id="24-忽略文件"><a class="markdownIt-Anchor" href="#24-忽略文件"></a> 2.4 忽略文件</h4><p>我们总会有写文件无需纳入 Git 管理，也不希望它们总出现在未跟踪文件列表，通常都是些自动生成的文件，比如日志文件，或者在编译过程中创建的临时文件等。这种情况下，我们可以创建一个名为<code>.gitignore</code>的文件，列出要忽略的文件模式。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> .gitignore *.iml*.log*.tmp/build/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一,二，三行告诉 Git 忽略所有以 <code>.iml</code>，以<code>.log</code>,以<code>.tmp</code>结尾的文件</li><li>第四行告诉Git 忽略<code>build</code>文件夹中的所有文件</li></ul><p><strong>文件<code>.gitignore</code>的格式规范如下：</strong></p><ol><li>所有空行或者以#开头的行都会被 Git 忽略</li><li>可以使用标准的 glob 模式匹配</li><li>匹配模式可以以 <code>/</code> 开头房子递归</li><li>匹配模式可以以 <code>/</code> 结尾指定目录</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上 <code>!</code> 取反。</li></ol><blockquote><p>所谓 glob 模式是指 shell 所使用的简化了的正则表达式。</p><ul><li><code>*</code> 匹配零个或多个任意字符</li><li><code>[abc]</code> 匹配任何一个列在方括号中的字符（要么匹配一个a，要么匹配一个 b,要么匹配一个 c）</li><li><code>[0-9]</code> 在方括号中使用短划线分隔两个字符，表示在这两个字符范围内的都可以匹配。</li><li><code>?</code> 只匹配一个任意字符</li><li><code>a/**/z</code> 使用两个 型号表示匹配任意中间目录</li></ul></blockquote><h4 id="25-查看已暂存和未暂存的修改"><a class="markdownIt-Anchor" href="#25-查看已暂存和未暂存的修改"></a> 2.5 查看已暂存和未暂存的修改</h4><p>如果<code>git status</code>命令输出过于模糊，想知道具体修改了深地方，可以用<code>git diff</code> 命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span><span class="token function">diff</span> --git a/test.txt b/test.txtindex 9c9852f<span class="token punctuation">..</span>bb08ffe <span class="token number">100644</span>--- a/test.txt+++ b/test.txt@@ -1,3 +1,6 @@ This is <span class="token builtin class-name">test</span> <span class="token function">file</span>  modified+++modefied  two<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此命令比较的是工作目录中当前暂存文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</p><p>若要查看已暂存的将要添加到下移提交的内容里，可以用<code>git diff --cached</code>命令。（Git 1.6.1及更高版本允许使用<code>git diff --staged</code>,效果相同。）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">diff</span> --staged<span class="token function">diff</span> --git a/README b/READMEnew <span class="token function">file</span> mode <span class="token number">100644</span>index 0000000<span class="token punctuation">..</span>cd19876--- /dev/null+++ b/README@@ -0,0 +1 @@+My Project-<span class="token function">diff</span> --git a/test.txt b/test.txtindex 9915fa7<span class="token punctuation">..</span>9c9852f <span class="token number">100644</span>--- a/test.txt+++ b/test.txt@@ -1 +1,3 @@-This is <span class="token builtin class-name">test</span> file-+This is <span class="token builtin class-name">test</span> <span class="token function">file</span>++modified<span class="token function">diff</span> --git a/version b/versionnew <span class="token function">file</span> mode <span class="token number">100644</span>index 0000000<span class="token punctuation">..</span>6029d7f--- /dev/null+++ b/version@@ -0,0 +1,2 @@+version: <span class="token number">1.0</span>.0+code: <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="26-提交更新"><a class="markdownIt-Anchor" href="#26-提交更新"></a> 2.6 提交更新</h4><p>在提交更新之前，需要确认一下是否还有什么修改过的文件或者新建的文件没有<code>git add</code> 过，否则提交的时候不会记录这些没暂存起来的变化。这些修改过的文件只保留在本地磁盘。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方式会启动文本编辑器以便输入本次提交的说明。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Please enter the commit message for your changes. Lines starting</span><span class="token comment"># with '#' will be ignored, and an empty message aborts the commit.</span><span class="token comment">#</span><span class="token comment"># On branch master</span><span class="token comment"># Changes to be committed:</span><span class="token comment">#       new file:   README</span><span class="token comment">#       modified:   test.txt</span><span class="token comment">#       new file:   version</span><span class="token comment">#</span><span class="token comment"># Changes not staged for commit:</span><span class="token comment">#       modified:   test.txt</span><span class="token comment">#</span><span class="token comment"># Untracked files:</span><span class="token comment">#       .gitignore</span><span class="token comment">#       LICENSE.txt</span><span class="token comment">#</span>~<span class="token string">".git/COMMIT_EDITMSG"</span> 17L, 358C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，默认的提交消息包含最后一次运行<code>git status</code> 的输出，放在注释行里。另外开头还有一空行，用于输入提交说明。退出编辑器时，Git 会丢掉注释行，用输入的提交福袋信息生成一次提交。</p><p>也可以在 <code>commit</code> 命令后添加 <code>-m</code>选项，将提交信息语命令放在同一行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit -m<span class="token string">"update text.txt; add README,version File"</span><span class="token punctuation">[</span>master ba93592<span class="token punctuation">]</span> update text.txt<span class="token punctuation">;</span> <span class="token function">add</span> README,version File <span class="token number">3</span> files changed, <span class="token number">6</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span> create mode <span class="token number">100644</span> README create mode <span class="token number">100644</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在提交的信息中会告诉当前是在哪个分支（master）提交的，本次提交的完整 SHA-1校验和（ba93592），以及本次提交中，有多少文件修订过，多少行添加和删改过。</p><blockquote><p>提交时记录的是放在暂存区域的快照。任何还未暂存的文件仍然保持已修改状态，可以在下次提交时纳入版本管理。每一次运行提交操作，都是对项目做一次快照，以后可以回到这个状态，或者进行比较。</p></blockquote><h4 id="27-跳过使用暂存区域"><a class="markdownIt-Anchor" href="#27-跳过使用暂存区域"></a> 2.7 跳过使用暂存区域</h4><p>尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git提供了一个跳过使用暂存区域的方式，只要在提交的时候，给<code>git commit</code> 加上 <code>-a</code> 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过<code>git add</code> 步骤：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$  <span class="token function">git</span> commit -a -m <span class="token string">'added .gitignore'</span>    <span class="token punctuation">[</span>master 57e60ca<span class="token punctuation">]</span> added .gitignore <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">3</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="28-移除文件"><a class="markdownIt-Anchor" href="#28-移除文件"></a> 2.8 移除文件</h4><p>要从 Git 中移除某个文件，就必须要从已跟踪的文件清单中移除（从暂存区域移除），然后提交。可以用<code>git rm</code>命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p><p>如果只是简单的从工作目录中手工删除文件，运行<code>git status</code>时就会在“Changes not staged for</p><p>commit” （未暂存清单）部分看到</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> test.txt $ <span class="token function">git</span> statusOn branch masterChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add/rm &lt;file>..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file>..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>deleted:    test.txtUntracked files:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>.gitignoreLICENSE.txtno changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在运行<code>git rm</code> 记录此次移除文件的操作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">rm</span> test.txt$ <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> to unstage<span class="token punctuation">)</span>deleted:    test.txtUntracked files:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>.gitignoreLICENSE.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一次提交时，改文件就不再纳入版本管理了。如果删除之前修改过并切已经放到暂存区域的话，则必须要用强制删除选项 <code>-f</code>(force 首字母)。用于防止巫山还没有添加到快照的数据，这样的数据不能被 Git 恢复。</p><p>另外一种情况是：我们想把文件从 Git 仓库中删除（亦从暂存区玉移除），但仍然希望保留在当前工作目录中。换句话说，你想让文件保留在磁盘，但是不想让 Git 继续跟踪。当你忘记添加 <code>.gitignore</code> 文件，不小心把一个很大的日志文件或一堆编译生成的文件添加到暂存区时，可以使用这一做法。使用<code>--cached</code> 选项。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">rm</span> --cached test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git rm 命令后面可以列出文件或者目录的名字，也可以使用 glob 模式。比方说：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">rm</span> log/<span class="token punctuation">\</span>*.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意到星号 * 之前的反斜杠 \，因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 shell 来帮忙展开。</p><p>此命令删除 log/ 目录下扩展名为 .log 的所有文件。</p><h4 id="29-移动文件"><a class="markdownIt-Anchor" href="#29-移动文件"></a> 2.9 移动文件</h4><p>Git 并不显示跟踪文件移动操作。如果在 Git 中重名了了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。</p><p>要在 Git 中对文件改名，可以这么做：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">mv</span> file_from file_to<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时查看状态信息，也可以看到重命名操作的说明</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">mv</span> README README.md$ <span class="token function">git</span> statusOn branch masterChanges to be committed:  <span class="token punctuation">(</span>use <span class="token string">"git reset HEAD &lt;file>..."</span> to unstage<span class="token punctuation">)</span>renamed:    README -<span class="token operator">></span> README.mddeleted:    test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实，运行<code>git mv</code> 就相当于运行了下面三条命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mv</span> README README.md$ <span class="token function">git</span> <span class="token function">rm</span> README$ <span class="token function">git</span> <span class="token function">add</span> README.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-查看提交历史"><a class="markdownIt-Anchor" href="#3-查看提交历史"></a> 3. 查看提交历史</h3><p><code>git log</code>命令可以在提交了若干更新或者克隆了某个项目之后，回顾提交历史。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> logcommit f974236b7551a860b5c31c184cff66a66970603d <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span>Author: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Thu Oct <span class="token number">22</span> <span class="token number">19</span>:50:29 <span class="token number">2020</span> +0800    <span class="token function">add</span> .gitignore LICENSE.txtcommit 29fb9b4a159899da5675c132b64f1bcf0170c7a5Author: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Thu Oct <span class="token number">22</span> <span class="token number">19</span>:17:14 <span class="token number">2020</span> +0800    added .gitignorecommit ba935920d4afc2121b674f933bada9d1c9791fa0Author: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Thu Oct <span class="token number">22</span> <span class="token number">17</span>:56:01 <span class="token number">2020</span> +0800    update text.txt<span class="token punctuation">;</span> <span class="token function">add</span> README,version Filecommit 4ee1d4d20421d9276bc80808276207940695bbffAuthor: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Thu Oct <span class="token number">22</span> <span class="token number">10</span>:51:17 <span class="token number">2020</span> +0800    init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认不用任何参数的话，<code>git log</code> 会按照提交时间列出所有的更新，最近的更新排在最上面。这个命令会列出每个提交的 SHA-1校验和、作者的名字和电子邮件地址、提交时间以及提交说明。</p><p><code>git log</code> 有许多选项可以用来搜寻索要找的提交，下面列出一下最常用的：</p><p><strong><code>-p</code> 用来显示每次提交的内容差异，也可以加上 <code>-2</code>来仅显示最近两次提交</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log -p -2commit f974236b7551a860b5c31c184cff66a66970603d <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span>Author: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Thu Oct <span class="token number">22</span> <span class="token number">19</span>:50:29 <span class="token number">2020</span> +0800    <span class="token function">add</span> .gitignore LICENSE.txt<span class="token function">diff</span> --git a/.gitignore b/.gitignorenew <span class="token function">file</span> mode <span class="token number">100644</span>index 0000000<span class="token punctuation">..</span>40c74dc--- /dev/null+++ b/.gitignore@@ -0,0 +1,5 @@+*.iml+*.log+*~+*.tmp+<span class="token function">diff</span> --git a/LICENSE.txt b/LICENSE.txtnew <span class="token function">file</span> mode <span class="token number">100644</span>index 0000000<span class="token punctuation">..</span>6b1d0bf--- /dev/null+++ b/LICENSE.txt@@ -0,0 +1 @@+LICENSE<span class="token function">diff</span> --git a/README b/README.mdsimilarity index <span class="token number">100</span>%<span class="token function">rename</span> from README<span class="token function">rename</span> to README.md<span class="token function">diff</span> --git a/test.txt b/test.txtdeleted <span class="token function">file</span> mode <span class="token number">100644</span>index bb08ffe<span class="token punctuation">..</span>0000000--- a/test.txt+++ /dev/null@@ -1,6 +0,0 @@-This is <span class="token builtin class-name">test</span> <span class="token function">file</span>--modified---modefied  twocommit 29fb9b4a159899da5675c132b64f1bcf0170c7a5Author: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Thu Oct <span class="token number">22</span> <span class="token number">19</span>:17:14 <span class="token number">2020</span> +0800    added .gitignore<span class="token function">diff</span> --git a/test.txt b/test.txtindex 9c9852f<span class="token punctuation">..</span>bb08ffe <span class="token number">100644</span>--- a/test.txt+++ b/test.txt@@ -1,3 +1,6 @@ This is <span class="token builtin class-name">test</span> <span class="token function">file</span>  modified+++modefied  two<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果想看到每次提交的简略的统计信息，可以使用<code>--stat</code>选项</strong></p><p><code>--stat</code> 选项在每次提交的下面列出额所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log --statcommit f974236b7551a860b5c31c184cff66a66970603d <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span>Author: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Thu Oct <span class="token number">22</span> <span class="token number">19</span>:50:29 <span class="token number">2020</span> +0800    <span class="token function">add</span> .gitignore LICENSE.txt .gitignore          <span class="token operator">|</span> <span class="token number">5</span> +++++ LICENSE.txt         <span class="token operator">|</span> <span class="token number">1</span> + README <span class="token operator">=</span><span class="token operator">></span> README.md <span class="token operator">|</span> <span class="token number">0</span> test.txt            <span class="token operator">|</span> <span class="token number">6</span> ------ <span class="token number">4</span> files changed, <span class="token number">6</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">6</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span>commit 29fb9b4a159899da5675c132b64f1bcf0170c7a5Author: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Thu Oct <span class="token number">22</span> <span class="token number">19</span>:17:14 <span class="token number">2020</span> +0800    added .gitignore test.txt <span class="token operator">|</span> <span class="token number">3</span> +++ <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">3</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>commit ba935920d4afc2121b674f933bada9d1c9791fa0Author: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Thu Oct <span class="token number">22</span> <span class="token number">17</span>:56:01 <span class="token number">2020</span> +0800    update text.txt<span class="token punctuation">;</span> <span class="token function">add</span> README,version File README   <span class="token operator">|</span> <span class="token number">1</span> + test.txt <span class="token operator">|</span> <span class="token number">4</span> +++- version  <span class="token operator">|</span> <span class="token number">2</span> ++ <span class="token number">3</span> files changed, <span class="token number">6</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">1</span> deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span>commit 4ee1d4d20421d9276bc80808276207940695bbffAuthor: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Thu Oct <span class="token number">22</span> <span class="token number">10</span>:51:17 <span class="token number">2020</span> +0800    init test.txt <span class="token operator">|</span> <span class="token number">1</span> + <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>--pretty</code> 选项可以指定使用不同语默认格式的方式展示提交历史。</strong></p><p>这个选项还有一些内建子选项可以使用，比如 <code>oneline</code>  将每个提交放在一行显示，查看的提交数很大时非常有用，另外还有 <code>short</code>，<code>full</code> 和<code>fuller</code> ，展示的信息或多或少有些不同。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log --pretty<span class="token operator">=</span>onelinef974236b7551a860b5c31c184cff66a66970603d <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span> <span class="token function">add</span> .gitignore LICENSE.txt29fb9b4a159899da5675c132b64f1bcf0170c7a5 added .gitignoreba935920d4afc2121b674f933bada9d1c9791fa0 update text.txt<span class="token punctuation">;</span> <span class="token function">add</span> README,version File4ee1d4d20421d9276bc80808276207940695bbff init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>format</code> 可以定制要显示的记录格式。这样的输出对后期提取分析格外有用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log --pretty<span class="token operator">=</span>formate:<span class="token string">"%h - %an, %ar : %s"</span>formate:f974236 - TestUserName, <span class="token number">19</span> hours ago <span class="token builtin class-name">:</span> <span class="token function">add</span> .gitignore LICENSE.txtformate:29fb9b4 - TestUserName, <span class="token number">20</span> hours ago <span class="token builtin class-name">:</span> added .gitignoreformate:ba93592 - TestUserName, <span class="token number">21</span> hours ago <span class="token builtin class-name">:</span> update text.txt<span class="token punctuation">;</span> <span class="token function">add</span> README,version Fileformate:4ee1d4d - TestUserName, <span class="token number">28</span> hours ago <span class="token builtin class-name">:</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git log --pretty=format</code> 常用的选项 列出了常用的格式占位符写法及其代表的意义。</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>%H</td><td>提交对象（commit）的完整哈哈希字符串</td></tr><tr><td>%h</td><td>提交对象的剪短哈希字符串</td></tr><tr><td>%T</td><td>树对象（tree）的完整哈希字符串</td></tr><tr><td>%t</td><td>树对象的简短哈希字符串</td></tr><tr><td>%P</td><td>父对象（parent）的完整哈希字符串</td></tr><tr><td>%p</td><td>父对象的简短哈希字符串</td></tr><tr><td>%an</td><td>作者（author）的名字</td></tr><tr><td>%ae</td><td>作者的电子邮件</td></tr><tr><td>%ad</td><td>作者修订日期，可以用–date=选项定制格式,``–date=(relative</td></tr><tr><td>%ar</td><td>作者修订日期，按多久以前的方式显示</td></tr><tr><td>%cn</td><td>提交者（committer）的名字</td></tr><tr><td>%ce</td><td>提交者的电子邮件地址</td></tr><tr><td>%cd</td><td>提交日期</td></tr><tr><td>%cr</td><td>提交日期，按多久以前的方式显示</td></tr><tr><td>%s</td><td>提交说明</td></tr></tbody></table><blockquote><p>作者指的是实际做出修改的人</p><p>提交者指的是最后将次工作成功提交到仓库的人</p><p>当某个项目发布不定，然后某个人核心成员将你的补丁并入项目时，你就是作者，而那个核心成员就是提交者。</p></blockquote><p>当<code>oneline</code> 或 <code>format</code> 与另一个<code>log</code> 选项 <code>--graph</code> 结合使用时尤其有用。这个选项添加了一些ASCII字符串来形象地展示你的分支、合并历史：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log --pretty<span class="token operator">=</span>format:<span class="token string">"%h %s"</span> --graph<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>git log</code>常用选项</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-p</td><td>按补丁格式显示每个更新之间的差异</td></tr><tr><td>–stat</td><td>显示每次更新的文件系统修改统计信息</td></tr><tr><td>–shortstat</td><td>只显示–stat中最后的行数修改添加移除统计</td></tr><tr><td>–name-only</td><td>仅在提交信息后显示已修改的文件清单</td></tr><tr><td>–name-status</td><td>显示新增、修改、删除的文件清单</td></tr><tr><td>–abbrev-commit</td><td>仅显示 SHA-1 的前几个字符，而非所有的40个字符</td></tr><tr><td>–relative-date</td><td>使用较短的相对时间显示（比如：“2 weeks ago”）</td></tr><tr><td>–graph</td><td>显示 ASCII 图形表示的分支合并历史</td></tr><tr><td>–pretty</td><td>使用其他格式显示历史提交信息。可以的选项包括 online,short,full，fuller和 format</td></tr></tbody></table><p><strong>限制输出长度</strong></p><p>除了定制输出格式的选项之外，<code>git log</code> 还有许多非常使用的限制输出长度的选项，也就是只输出部分提交信息。前面提到的 -2（<code>-&lt;n&gt;</code>） ，初次之外还有按照时间做闲职的选项，比如<code>--since</code> 和 <code>--until</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log --since<span class="token operator">=</span><span class="token number">2</span>.weeks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令可以在多种格式下工作，比如具体某一天&quot;2008-08-08&quot;，或者相对多久以前&quot;1 years 2day 3 minutes ago&quot;</p><p>另一个非常有用的筛选选项是 -S，可以列出那些添加或者移除了某些字符的提交。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log -S function_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>git log [文件路径]</code> 可以查看选择文件或目录的历史提交</strong></p><p><strong>git log 常用输出限制选项</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-(n)</td><td>仅显示最近的n 条提交 ，如 -2.</td></tr><tr><td>–since,–after</td><td>仅显示指定时间之后的提交</td></tr><tr><td>–until,–before</td><td>仅显示指定时间之前的提交</td></tr><tr><td>–author</td><td>仅显示指定作者相关的提交</td></tr><tr><td>–committer</td><td>仅显示指定提交者相关的提交</td></tr><tr><td>-grep</td><td>仅显示包含知道关键字的提交</td></tr><tr><td>-S</td><td>仅显示添加或移除了某个关键字的提交</td></tr></tbody></table><h3 id="4-撤销操作"><a class="markdownIt-Anchor" href="#4-撤销操作"></a> 4. 撤销操作</h3><h4 id="41-重新提交"><a class="markdownIt-Anchor" href="#41-重新提交"></a> 4.1 重新提交</h4><p>在某些情况下，发现漏了几个文件没有提交，或者是提交信息写错了，此时 ，可以运行带有 <code>--amend</code> 选项的命令尝试重新提交</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令会将暂存区中的文件提交。如果自上次提交依赖还未做任何改变，快照会保持不变，所修改的只是提交信息。最终只会有一个提交（第二次提交会代替第一次提交的结果）。</p><h4 id="42修改倒数第n次commit"><a class="markdownIt-Anchor" href="#42修改倒数第n次commit"></a> 4.2修改倒数第n次commit</h4><p>git rebase -i HEAD~[倒数第n次commit]</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> rebase -i HEAD~2//修改倒数第二次 commit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行该命令，会出现编辑窗口，在命令界面编辑倒数第n次提交的commit 前的 pick 为 <code>e</code> 表示编辑</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pick eae306bcae change:commit msg<span class="token comment"># Rebase 60e669d341..eae306bcae onto 60e669d341 (1 command)</span><span class="token comment">#</span><span class="token comment"># Commands:</span><span class="token comment"># p, pick &lt;commit> = use commit</span><span class="token comment"># r, reword &lt;commit> = use commit, but edit the commit message</span><span class="token comment"># e, edit &lt;commit> = use commit, but stop for amending</span><span class="token comment"># s, squash &lt;commit> = use commit, but meld into previous commit</span><span class="token comment"># f, fixup &lt;commit> = like "squash", but discard this commit's log message</span><span class="token comment"># x, exec &lt;command> = run command (the rest of the line) using shell</span><span class="token comment"># b, break = stop here (continue rebase later with 'git rebase --continue')</span><span class="token comment"># d, drop &lt;commit> = remove commit</span><span class="token comment"># l, label &lt;label> = label current HEAD with a name</span><span class="token comment"># t, reset &lt;label> = reset HEAD to a label</span><span class="token comment"># m, merge [-C &lt;commit> | -c &lt;commit>] &lt;label> [# &lt;oneline>]</span><span class="token comment"># .       create a merge commit using the original merge commit's</span><span class="token comment"># .       message (or the oneline, if no original merge commit was</span><span class="token comment"># .       specified). Use -c &lt;commit> to reword the commit message.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">e eae306bcae change:commit msg<span class="token comment"># Rebase 60e669d341..eae306bcae onto 60e669d341 (1 command)</span><span class="token comment">#</span><span class="token comment"># Commands:</span><span class="token comment"># p, pick &lt;commit> = use commit</span><span class="token comment"># r, reword &lt;commit> = use commit, but edit the commit message</span><span class="token comment"># e, edit &lt;commit> = use commit, but stop for amending</span><span class="token comment"># s, squash &lt;commit> = use commit, but meld into previous commit</span><span class="token comment"># f, fixup &lt;commit> = like "squash", but discard this commit's log message</span><span class="token comment"># x, exec &lt;command> = run command (the rest of the line) using shell</span><span class="token comment"># b, break = stop here (continue rebase later with 'git rebase --continue')</span><span class="token comment"># d, drop &lt;commit> = remove commit</span><span class="token comment"># l, label &lt;label> = label current HEAD with a name</span><span class="token comment"># t, reset &lt;label> = reset HEAD to a label</span><span class="token comment"># m, merge [-C &lt;commit> | -c &lt;commit>] &lt;label> [# &lt;oneline>]</span><span class="token comment"># .       create a merge commit using the original merge commit's</span><span class="token comment"># .       message (or the oneline, if no original merge commit was</span><span class="token comment"># .       specified). Use -c &lt;commit> to reword the commit message.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后点击 <code>Esc</code> 键，退出编辑模式，使用<code>:wq</code> 命令保存本次编辑。</p><p>然后可以对此次提交的文件进行修改 ，该操作会使本地git创建一个临时修改分支，再修改完成后，使用命令回到刚才的分支，并合并修改到刚才分支</p><p>修改完成后，使用 git add 命令，添加修改文件索引</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> A.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用一下命令将本次修改追加到此次修改的commit 中,也可以再该命令后修改 commit msg ，然后使用 <code>:wq</code> 命令保存修改的 commit msg</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用以下命令回到刚才的分支，并合并修改到刚才分支</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> rebase --continue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用git push 命令将修改推送到远程</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> push origin develop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="43-取消暂存的文件"><a class="markdownIt-Anchor" href="#43-取消暂存的文件"></a> 4.3 取消暂存的文件</h4><p>如果需要将已经添加到暂存区的文件取消暂存，可以使用<code>git reset</code> 命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> reset HEAD test.txtUnstaged changes after reset:Mtest.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在调用时加上<code>--hard</code> 选项可以令<code>git reset</code> 成为一个危险的命令，会将该项目中的修改丢失。</p><h4 id="44-撤销对文件的修改"><a class="markdownIt-Anchor" href="#44-撤销对文件的修改"></a> 4.4 撤销对文件的修改</h4><p>如果在修改了一段代码后，没有解决问题，所以不想保留该文件的修改是，可以使用<code>git checkout -- &lt;file&gt;</code> 命令来将文件还原成上次提交时的样子。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> statusOn branch masterChanges not staged <span class="token keyword">for</span> commit:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to update what will be committed<span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git checkout -- &lt;file>..."</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>modified:   README.mdno changes added to commit <span class="token punctuation">(</span>use <span class="token string">"git add"</span> and/or <span class="token string">"git commit -a"</span><span class="token punctuation">)</span>$ <span class="token function">git</span> checkout -- README.md$ <span class="token function">git</span> statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-隐藏本地修改"><a class="markdownIt-Anchor" href="#5-隐藏本地修改"></a> 5、隐藏本地修改</h3><p>如果当前修改没修改完，紧急修复一个 bug时，需要先将当前修改内容隐藏，修改完 bug 后，回来继续修改，则可以使用<code>git stash</code> 命令来进行隐藏修改操作</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> stash save <span class="token string">"隐藏说明信息"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改命令会将当前修改的已跟踪文件进行隐藏，保存到隐藏栈中。将项目恢复到上次提交时的状态。</p><p>查看本地隐藏栈</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> stash list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据隐藏栈中的对象id将隐藏栈中的一项恢复，继续上次的修改。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> stash pop stash@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-仓库的使用"><a class="markdownIt-Anchor" href="#6-仓库的使用"></a> 6. 仓库的使用</h3><h4 id="61-查看远程仓库"><a class="markdownIt-Anchor" href="#61-查看远程仓库"></a> 6.1 查看远程仓库</h4><p>可以运行<code>git remote</code> 命令来查看已经配置的远程仓库服务器。它会列出知道的每一个远程服务器的简写。如果已经克隆了自己的仓库，至少能看到 origin - 这是克隆的仓库服务器的默认名字。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/onestravel/test.git Cloning into <span class="token string">'test'</span><span class="token punctuation">..</span>.remote: Enumerating objects: <span class="token number">21</span>, done.remote: Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">21</span>/21<span class="token punctuation">)</span>, done.remote: Compressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">9</span>/9<span class="token punctuation">)</span>, done.remote: Total <span class="token number">21</span> <span class="token punctuation">(</span>delta <span class="token number">2</span><span class="token punctuation">)</span>, reused <span class="token number">21</span> <span class="token punctuation">(</span>delta <span class="token number">2</span><span class="token punctuation">)</span>, pack-reused <span class="token number">0</span>Unpacking objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">21</span>/21<span class="token punctuation">)</span>, done.$ <span class="token builtin class-name">cd</span> <span class="token builtin class-name">test</span> $ <span class="token function">git</span> remoteorigin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以指定选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote -voriginhttps://github.com/onestravel/test.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>originhttps://github.com/onestravel/test.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果想要查看某一个远程仓库的更多信息，可以使用 <code>git remote show [remote-name]</code>命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote show origin* remote origin  Fetch URL: https://github.com/onestravel/test.git  Push  URL: https://github.com/onestravel/test.git  HEAD branch: master  Remote branch:    master tracked  Local branch configured <span class="token keyword">for</span> <span class="token string">'git pull'</span><span class="token builtin class-name">:</span>    master merges with remote master  Local ref configured <span class="token keyword">for</span> <span class="token string">'git push'</span><span class="token builtin class-name">:</span>    master pushes to master <span class="token punctuation">(</span>up to <span class="token function">date</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个命令会列出在特定分支上 pull 或 push 对自动的操作远程仓库中的哪一个分支。也列出了那些远程分支不再本地，那些远程分支已经从服务器上移除了。</p><h4 id="62-添加远程仓库"><a class="markdownIt-Anchor" href="#62-添加远程仓库"></a> 6.2 添加远程仓库</h4><p>可以使用<code>git remote add &lt;shortname&gt; &lt;url&gt;</code> 来添加一个新的远程 Git 仓库，同时知道一个可以轻松引用的简写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token function">add</span> pb https://github.com/onestravel/test.git$ <span class="token function">git</span> remote -voriginhttps://github.com/onestravel/test.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>originhttps://github.com/onestravel/test.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>pbhttps://github.com/onestravel/test.git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>pbhttps://github.com/onestravel/test.git <span class="token punctuation">(</span>push<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时如果想拉取 pb 对应的仓库服务器上的信息，可以运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> fetch pbFrom https://github.com/onestravel/test * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      master     -<span class="token operator">></span> pb/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="63-从远程仓库中抓取与拉取"><a class="markdownIt-Anchor" href="#63-从远程仓库中抓取与拉取"></a> 6.3 从远程仓库中抓取与拉取</h4><p>从远程仓库中获得数据，可以执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> fetch <span class="token punctuation">[</span>remote_name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令会访问远程仓库，从中拉取所有你还没有的数据。执行完成后，你将会用于那个远程仓库中所有分支的引用，可以随时合并或查看。</p><p><code>git fetch</code> 命令会将数据拉取到本地仓库，但是他不会自动合并或修改当前的工作。当准备好时必须手动将其合并。</p><p><code>git pull</code> 命令会自动的抓取并合并远程分支到当前分支，默认情况下，<code>git clone</code> 会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支。运行 git pull 通常会从最初克隆的服务器上抓取 bong 自动尝试合并到当前所在分支</p><h4 id="64-推送到远程仓库"><a class="markdownIt-Anchor" href="#64-推送到远程仓库"></a> 6.4 推送到远程仓库</h4><p><code>git push [remote-name] [branch-name]</code> 命令可以将本地仓库中 当前分支（master）上的为推送到远程仓库的提交，全部推送到远程仓库服务器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin masterEnumerating objects: <span class="token number">21</span>, done.Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">21</span>/21<span class="token punctuation">)</span>, done.Delta compression using up to <span class="token number">4</span> threadsCompressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">11</span>/11<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">21</span>/21<span class="token punctuation">)</span>, <span class="token number">1.76</span> KiB <span class="token operator">|</span> <span class="token number">1.76</span> MiB/s, done.Total <span class="token number">21</span> <span class="token punctuation">(</span>delta <span class="token number">2</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span>, done.To https://github.com/onestravel/test.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      master -<span class="token operator">></span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有当有远程服务器的写入权限时，改命令才会生效。</p><p>如果在此次推送之前有其他人推送过时，需要先进行 pull ,将他们的推送拉取到本地并将其合并如本地仓库后才能推送。</p><h4 id="65-远程仓库的移除与重命名"><a class="markdownIt-Anchor" href="#65-远程仓库的移除与重命名"></a> 6.5 远程仓库的移除与重命名</h4><p>想要重命名引用名称，可以使用<code>git remote rename [old name] [new name]</code> ，</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token function">rename</span> pb pt$ <span class="token function">git</span> remoteorigin pt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种操作会修改远程分支的名字，比如过去引用<code>pb/master</code> 会变成 <code>pt/master</code> 。</p><p>如果想要移除一个远程仓库，可以使用<code>git remote rm</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token function">rm</span> pt$ <span class="token function">git</span> remoteorigin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-标签的使用"><a class="markdownIt-Anchor" href="#7-标签的使用"></a> 7. 标签的使用</h3><p>Git  和其他版本控制系统一样，可以给历史中的某一个提交打算标签，以示重要。比如发布结点。</p><h4 id="71-列出标签"><a class="markdownIt-Anchor" href="#71-列出标签"></a> 7.1 列出标签</h4><p>在 Git 中可以使用<code>git tag</code> 很直观的列出已有的标签</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tagv1.0v1.1v2.0v2.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用特定模式查找标签</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tag -l <span class="token string">'v2.*'</span>v2.0v2.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="72-创建标签"><a class="markdownIt-Anchor" href="#72-创建标签"></a> 7.2 创建标签</h4><p>Git 使用两种主要类型的标签：轻量标签（lightweight）与 附注标签（annotated）。</p><p>一个轻量标签很像一个不会改变的分支，他只是一个特定提交的引用。</p><p>附注标签是存储在 Git 数据库中的一个完整对象。它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间，还有一个标签信息。并且可以使用 GNU Privacy Guard（GPG）签名与验证。</p><p><strong>附注标签</strong></p><p>在 Git 中创建一个附注标签时很简单的，最简单的方法是在运行<code>git tag</code> 命令时指定 <code>-a</code> 选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tag -a v2.5 -m <span class="token string">'version 2.5'</span>$ <span class="token function">git</span> tagv1.0v1.1v2.0v2.3v2.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-m 选项指定了一条将会存储在标签中的信息。如果没有为附注标签指定一条信息，Git 会运行编辑器要求你输入信息。</p><p>通过使用 git show 命令可以看到标签信息与对应的提交信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> show v2.5tag v2.5Tagger: wanghu <span class="token operator">&lt;</span>wanghu@do-global.com<span class="token operator">></span>Date:   Mon Oct <span class="token number">26</span> <span class="token number">20</span>:09:19 <span class="token number">2020</span> +0800version <span class="token number">2.5</span>commit bf1c84c9273b827f28c06b26a176a44795b38ef0 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master, tag: v2.5, pbhttps/master, origin/master, origin/HEAD<span class="token punctuation">)</span>Author: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Fri Oct <span class="token number">23</span> <span class="token number">16</span>:09:46 <span class="token number">2020</span> +0800    create test.txt<span class="token function">diff</span> --git a/test.txt b/test.txtnew <span class="token function">file</span> mode <span class="token number">100644</span>index 0000000<span class="token punctuation">..</span>46fdabe--- /dev/null+++ b/test.txt@@ -0,0 +1 @@+test code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出显示了打标签者的信息、打标签的日期时间、附注信息，然后显示具体的提交信息。</p><p><strong>轻量标签</strong></p><p>创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> tag v2.5-1$ <span class="token function">git</span> tagv1.0v1.1v2.0v2.3v2.5v2.5-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 git show，你不会看到额外的标签信息。命令只会显示出提交信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> show v2.5-1commit bf1c84c9273b827f28c06b26a176a44795b38ef0 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master, tag: v2.5-1, tag: v2.5, pbhttps/master, origin/master, origin/HEAD<span class="token punctuation">)</span>Author: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Fri Oct <span class="token number">23</span> <span class="token number">16</span>:09:46 <span class="token number">2020</span> +0800    create test.txt<span class="token function">diff</span> --git a/test.txt b/test.txtnew <span class="token function">file</span> mode <span class="token number">100644</span>index 0000000<span class="token punctuation">..</span>46fdabe--- /dev/null+++ b/test.txt@@ -0,0 +1 @@+test code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="73-后期打标签"><a class="markdownIt-Anchor" href="#73-后期打标签"></a> 7.3 后期打标签</h4><p>如果相对过去的提交打标签，需要在命令末尾知道提交的校验和（或部分校验和）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> log --pretty<span class="token operator">=</span>onelinebf1c84c9273b827f28c06b26a176a44795b38ef0 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master, tag: v2.5-1, tag: v2.5, pbhttps/master, origin/master, origin/HEAD<span class="token punctuation">)</span> create test.txt7236b53506f041de847f43eab3fedaa97d45a789 update README.mdf974236b7551a860b5c31c184cff66a66970603d <span class="token function">add</span> .gitignore LICENSE.txt29fb9b4a159899da5675c132b64f1bcf0170c7a5 added .gitignoreba935920d4afc2121b674f933bada9d1c9791fa0 update text.txt<span class="token punctuation">;</span> <span class="token function">add</span> README,version File4ee1d4d20421d9276bc80808276207940695bbff init$ <span class="token function">git</span> tag -a v1.2 7236b53$ <span class="token function">git</span> show v1.2tag v1.2Tagger: wanghu <span class="token operator">&lt;</span>wanghu@do-global.com<span class="token operator">></span>Date:   Mon Oct <span class="token number">26</span> <span class="token number">20</span>:16:54 <span class="token number">2020</span> +0800version <span class="token number">1.2</span>scommit 7236b53506f041de847f43eab3fedaa97d45a789 <span class="token punctuation">(</span>tag: v1.2<span class="token punctuation">)</span>Author: TestUserName <span class="token operator">&lt;</span>test@example.com<span class="token operator">></span>Date:   Fri Oct <span class="token number">23</span> <span class="token number">16</span>:00:21 <span class="token number">2020</span> +0800    update README.md<span class="token function">diff</span> --git a/README.md b/README.mdindex cd19876<span class="token punctuation">..</span>9fafd26 <span class="token number">100644</span>--- a/README.md+++ b/README.md@@ -1 +1,6 @@ My Project-++++update on dev branch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="74-共享标签"><a class="markdownIt-Anchor" href="#74-共享标签"></a> 7.4 共享标签</h4><p>默认情况下，git push 命令并不会传送标签到远程仓库服务器上。在创建完标签后你必须显式地推送标签到共享服务器上。这个过程就像共享远程分支一样 - 你可以运行 git push origin [tagname]。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin v2.5Enumerating objects: <span class="token number">1</span>, done.Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span>, <span class="token number">158</span> bytes <span class="token operator">|</span> <span class="token number">158.00</span> KiB/s, done.Total <span class="token number">1</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To https://github.com/onestravel/test.git * <span class="token punctuation">[</span>new tag<span class="token punctuation">]</span>         v2.5 -<span class="token operator">></span> v2.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要一次性推送很多标签，也可以使用带有 --tags 选项的 git push 命令。这将会把所有不在远程仓库服务器上的标签全部传送到远程仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin --tagsEnumerating objects: <span class="token number">1</span>, done.Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span>, <span class="token number">160</span> bytes <span class="token operator">|</span> <span class="token number">160.00</span> KiB/s, done.Total <span class="token number">1</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>To https://github.com/onestravel/test.git * <span class="token punctuation">[</span>new tag<span class="token punctuation">]</span>         v1.2 -<span class="token operator">></span> v1.2 * <span class="token punctuation">[</span>new tag<span class="token punctuation">]</span>         v2.5-1 -<span class="token operator">></span> v2.5-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="75-检出标签"><a class="markdownIt-Anchor" href="#75-检出标签"></a> 7.5 检出标签</h4><p>如果想要本地工作目录与仓库中知道的标签版本完全一样，可以使用<code>git checkout -b [branch-name] [tag-name]</code> 在特定标签上创建一个新分支：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout -b version2.5 v2.5Switched to a new branch <span class="token string">'version2.5'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果在这之后又进行了一次提交，version2.5 分支会因为改动向前移动了，那么 version2.5 分支就会和v2.5 标签稍微有些不同。</p><h2 id="四-git-分支"><a class="markdownIt-Anchor" href="#四-git-分支"></a> 四、Git  分支</h2><p>Git 的分支，本质上紧急时指向提交对象的可变指针。Git 的默认分支名字是 <code>master</code> 。在多次提交操作之后，已经有一个指向最后那个提交对象的<code>master</code> 分支。它会在每次的提交操作中自动向前移动。</p><blockquote><p>Git 的 master 分支，并不是一个特殊的分支，和其他分支没有任何区别。只是在<code>git init</code> 命令的时候默认创建的。</p></blockquote><h3 id="1-创建分支"><a class="markdownIt-Anchor" href="#1-创建分支"></a> 1. 创建分支</h3><p>Git 使用<code>git branch &lt;branch-name&gt;</code> 命令来新建分支（创建一个可以移动的新的指针）。使用<code>git branch &lt;branch-name&gt;</code> 会在当前所在对象上创建一个指针。</p><p>Git 是怎么知道当前是在哪一个分支上呢？其实，Git 有一个名为<code>HEAD</code> 的特殊指针。它和其他版本控制系统里的 <code>HEAD</code> 概念完全不同。在 Git 中，它是一个指针，指向当前所在的本地分支。</p><p><code>git branch</code> 命令仅仅创建一个新分支，并不会自动切换到新分支中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch testing$ <span class="token function">git</span> branch* master  testing  version2.5$ <span class="token function">git</span> log --oneline --decoratebf1c84c <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master, tag: v2.5-1, tag: v2.5, pbhttps/master, origin/master, origin/HEAD, version2.5, testing<span class="token punctuation">)</span> create test.txt7236b53 <span class="token punctuation">(</span>tag: v1.2<span class="token punctuation">)</span> update README.mdf974236 <span class="token function">add</span> .gitignore LICENSE.txt29fb9b4 added .gitignoreba93592 update text.txt<span class="token punctuation">;</span> <span class="token function">add</span> README,version File4ee1d4d init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 <code>master</code> 和 <code>testing</code> 分支均指向校验和以 bf1c84c 开头的提交对象。</p><h3 id="2-分支切换"><a class="markdownIt-Anchor" href="#2-分支切换"></a> 2. 分支切换</h3><p>要切换到另一个已经存在的命令，可以使用<code>git checkout</code> 命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout testing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完改命令后， <code>HEAD</code> 就会指向 <code>testing</code> 分支了。</p><p>切换分支时，这么命令做了两件事。一是使<code>HEAD</code> 指向指定的分支。二是将工作目录恢复成指定分支所执行的快照内容。</p><blockquote><p>分支切换会改变工作目录中的文件。</p><p>如果不能保证在切换分支时可以干净利落的完成这个任务，那么则切换分支失败。</p></blockquote><h3 id="3-分支代码合并"><a class="markdownIt-Anchor" href="#3-分支代码合并"></a> 3. 分支代码合并</h3><p>假设，现在在<code>master</code> 分支上进行新的开发工作，但是现在线上版本（version 2.5）出现了一个 bug，需要紧急修复，则需要将当前分支修改的代码暂存，切换到 version2.5 版本，新建 version2.5.1 分支，用于修复 bug。修复之后，进行发版，并将修复bug 的修改合并到 master 分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout version2.5                       Switched to branch <span class="token string">'version2.5'</span>$ <span class="token function">git</span> checkout -b version2.5.1Switched to a new branch <span class="token string">'version2.5.1'</span>$ <span class="token function">vim</span> test.txt $ <span class="token function">vim</span> version$ <span class="token function">git</span> <span class="token function">add</span> test.txt$ <span class="token function">git</span> <span class="token function">add</span> version$ <span class="token function">git</span> commit -m<span class="token string">"fix bug on version2.5"</span><span class="token punctuation">[</span>version2.5.1 2b1d2e0<span class="token punctuation">]</span> fix bug on version2.5 <span class="token number">2</span> files changed, <span class="token number">5</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">2</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span> <span class="token function">git</span> push origin version2.5.1Enumerating objects: <span class="token number">7</span>, done.Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">7</span>/7<span class="token punctuation">)</span>, done.Delta compression using up to <span class="token number">4</span> threadsCompressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">4</span>/4<span class="token punctuation">)</span>, <span class="token number">367</span> bytes <span class="token operator">|</span> <span class="token number">367.00</span> KiB/s, done.Total <span class="token number">4</span> <span class="token punctuation">(</span>delta <span class="token number">1</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span>, completed with <span class="token number">1</span> <span class="token builtin class-name">local</span> object.remote: remote: Create a pull request <span class="token keyword">for</span> <span class="token string">'version2.5.1'</span> on GitHub by visiting:remote:      https://github.com/onestravel/test/pull/new/version2.5.1remote: To https://github.com/onestravel/test.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      version2.5.1 -<span class="token operator">></span> version2.5.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在已经修复完 bug，并生成了新的分支 version 2.5.1，接下来需要将 version2.5.1 分支上的修改合并到 master 分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout masterSwitched to branch <span class="token string">'master'</span>Your branch is up to <span class="token function">date</span> with <span class="token string">'origin/master'</span><span class="token builtin class-name">.</span>$ <span class="token function">git</span> merge version2.5.1Auto-merging versionCONFLICT <span class="token punctuation">(</span>content<span class="token punctuation">)</span>: Merge conflict <span class="token keyword">in</span> versionAutomatic merge failed<span class="token punctuation">;</span> fix conflicts and <span class="token keyword">then</span> commit the result.$ <span class="token function">git</span> statusOn branch masterYour branch is ahead of <span class="token string">'origin/master'</span> by <span class="token number">1</span> commit.  <span class="token punctuation">(</span>use <span class="token string">"git push"</span> to publish your <span class="token builtin class-name">local</span> commits<span class="token punctuation">)</span>You have unmerged paths.  <span class="token punctuation">(</span>fix conflicts and run <span class="token string">"git commit"</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span>use <span class="token string">"git merge --abort"</span> to abort the merge<span class="token punctuation">)</span>Changes to be committed:modified:   test.txtUnmerged paths:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to mark resolution<span class="token punctuation">)</span>both modified:   version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在合并 version 2.5.1 的时候有了冲突（在 master 分支和 version2.5.1 分支都对 version 文件的相同部分做了不同的修改），则需要解决冲突，名进行提交（commit）。</p><blockquote><p>如果在合并的两个版本之间没有修改同一个文件的同一个部分，则不会产生冲突，就可以干净的合并他们。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑冲突文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span> HEADversion: <span class="token number">3.0</span>.0code: <span class="token number">300</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>version: <span class="token number">2.5</span>.1code: <span class="token number">251</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span> version2.5.1~                    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为这个是版本改变，在 master 分支应该是新的版本 3.0.0 ,所以，删掉冲突中的 version2.5.1 中的代码，进行解决。并且将<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; , ======= , &gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>这些行完全删除。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token number">3.0</span>.0code: <span class="token number">300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>也可以尝试使用<code>git mergetool</code>命令来解决冲突。改命令会启动一个合适的可视化合并工具。</p></blockquote><p>保存对改文件的修改，然后进行文件的提交</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> version $ <span class="token function">git</span> commit <span class="token punctuation">[</span>master 0639659<span class="token punctuation">]</span> Merge branch <span class="token string">'version2.5.1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此处使用<code>git commit</code> 命令继续提交，会出现编辑提交日志的窗口，会显示以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Merge branch <span class="token string">'version2.5.1'</span><span class="token comment"># Please enter the commit message for your changes. Lines starting</span><span class="token comment"># with '#' will be ignored, and an empty message aborts the commit.</span><span class="token comment">#</span><span class="token comment"># Date:      Wed Oct 28 16:38:53 2020 +0800</span><span class="token comment">#</span><span class="token comment"># On branch master</span><span class="token comment"># Your branch is ahead of 'origin/master' by 3 commits.</span><span class="token comment">#   (use "git push" to publish your local commits)</span><span class="token comment">#</span><span class="token comment"># Changes to be committed:</span><span class="token comment">#       modified:   test.txt</span><span class="token comment">#       modified:   version</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接保存改日志的编辑，则提交成功。接下来可以选择推送至远程仓库服务器，或者继续进行新功能的开发，后续推送至远程仓库服务器。</p><h3 id="4-分支管理"><a class="markdownIt-Anchor" href="#4-分支管理"></a> 4. 分支管理</h3><p><code>git branch</code> 命令不只是可以创建或删除分支。如果不加参数运行这个命令，会得到当前所有分支的一个列表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch* master  testing  version2.5  version2.5.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>master</code> 分支前的 * 字符代表现在检出的哪一个分支，也就是说，当前 <code>HEAD</code> 指针所指向的分支。</p><p>如果需要查看每一个分支的最后一次提交，可以运行<code>git branch -v</code>命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch -v* master       02c3021 <span class="token punctuation">[</span>ahead <span class="token number">3</span><span class="token punctuation">]</span> Merge branch <span class="token string">'version2.5.1'</span>  testing      bf1c84c create test.txt  version2.5   bf1c84c create test.txt  version2.5.1 4b30818 change version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>--merged</code> 与 <code>--no-merged</code> 者两个选项可以过滤这个俩表中已经合并或者尚未合并到当前分支的分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout testing$ <span class="token function">vim</span> test.txt$ <span class="token function">git</span> <span class="token function">add</span> test.txt$ <span class="token function">git</span> commit -m<span class="token string">"update test"</span><span class="token punctuation">[</span>testing b00d0ae<span class="token punctuation">]</span> update <span class="token builtin class-name">test</span> <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">3</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>$ <span class="token function">git</span> checkout masterSwitched to branch <span class="token string">'master'</span>$ <span class="token function">git</span> branch --merged* master  version2.5version2.5.1$ <span class="token function">git</span> branch --no-merged  testing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-远程分支"><a class="markdownIt-Anchor" href="#5-远程分支"></a> 5. 远程分支</h3><h4 id="51-远程分支"><a class="markdownIt-Anchor" href="#51-远程分支"></a> 5.1 远程分支</h4><p>远程引用是对远程仓库的引用（指针），包括分支，标签等等。可以通过<code>git ls-remote</code> 来显示的获得远程引用的完整列表，或者通过<code>git remote show (remote)</code> 获得远程分支的更多信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> ls-remote   From https://github.com/onestravel/test.gitbf1c84c9273b827f28c06b26a176a44795b38ef0HEADbf1c84c9273b827f28c06b26a176a44795b38ef0refs/heads/mastere5b97a2fb0ad902b2a6069d07964bc09ab102f0frefs/heads/version2.5.1853cf5e3d043663e823565c6f8b7b4eb713e8d2crefs/tags/v1.27236b53506f041de847f43eab3fedaa97d45a789refs/tags/v1.2^<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>e5fb21c6d785132c26100f6f951feebce8aa2a40refs/tags/v2.5bf1c84c9273b827f28c06b26a176a44795b38ef0refs/tags/v2.5^<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>bf1c84c9273b827f28c06b26a176a44795b38ef0refs/tags/v2.5-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>远程跟踪分支是远程分支状态的引用。它们是不能移动的本地引用，当做任何网络通信操作时，它们会自动移动。</p><p>远程分支以（remote）/（branch）形式命名，如果响应查看最后一次与远程仓库 origin 通信时 master 分支的状态，可以查看<code>origin/master</code> 分支。</p><p>可以运行<code>git fetch teamone</code> 来抓取远程仓库 <code>teamone</code> 有而本地没有的数据。因为那台服务器上现有的数据是 origin 服务器上的一个子集，所以 Git 并不会抓取数据而是会设置远程跟踪分支 teamone/master 指向 teamone 的 master 分支。</p><h4 id="52-推送"><a class="markdownIt-Anchor" href="#52-推送"></a> 5.2 推送</h4><p>当想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。本地分支并不会自动与远程仓库同步，必须显示的推送想要分享的分支。</p><p>将本地分支 testing 推送到远程仓库上：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin testingEnumerating objects: <span class="token number">5</span>, done.Counting objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">5</span>/5<span class="token punctuation">)</span>, done.Delta compression using up to <span class="token number">4</span> threadsCompressing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">2</span>/2<span class="token punctuation">)</span>, done.Writing objects: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">3</span>/3<span class="token punctuation">)</span>, <span class="token number">291</span> bytes <span class="token operator">|</span> <span class="token number">291.00</span> KiB/s, done.Total <span class="token number">3</span> <span class="token punctuation">(</span>delta <span class="token number">1</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: Resolving deltas: <span class="token number">100</span>% <span class="token punctuation">(</span><span class="token number">1</span>/1<span class="token punctuation">)</span>, completed with <span class="token number">1</span> <span class="token builtin class-name">local</span> object.remote: remote: Create a pull request <span class="token keyword">for</span> <span class="token string">'testing'</span> on GitHub by visiting:remote:      https://github.com/onestravel/test/pull/new/testingremote: To https://github.com/onestravel/test.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      testing -<span class="token operator">></span> testing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不想让远程仓库上的分支叫做 <code>testing</code> 可以运行<code>git push origin testing:otherbranch</code> 来将本地的 <code>testing</code> 分支推送到远程仓库上的 <code>otherbranch</code> 分支。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin testing:otherbranchTotal <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>, reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>remote: remote: Create a pull request <span class="token keyword">for</span> <span class="token string">'otherbranch'</span> on GitHub by visiting:remote:      https://github.com/onestravel/test/pull/new/otherbranchremote: To https://github.com/onestravel/test.git * <span class="token punctuation">[</span>new branch<span class="token punctuation">]</span>      testing -<span class="token operator">></span> otherbranch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果使用 HTTPS URL 来推送，Git 服务器会询问用户名和密码，默认情况下它会在中断中提示服务器是否允许你进行推送。</p></blockquote><p><code>git merge origin/otherbranch</code> 会将这些工作合并到当前所在的分支。</p><p>如果想要在远程分支<code>origin/otherbranch</code> 上创建 dev 分支进行一些工作时，可以如下操作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> checkout -b dev origin/otherbranchBranch <span class="token string">'dev'</span> <span class="token builtin class-name">set</span> up to track remote branch <span class="token string">'otherbranch'</span> from <span class="token string">'origin'</span><span class="token builtin class-name">.</span>Switched to a new branch <span class="token string">'dev'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这会在本地创建一个 用于工作的 dev 分支，并且起点位于 <code>origin/otherbranch</code>。</p><h4 id="53-跟踪分支"><a class="markdownIt-Anchor" href="#53-跟踪分支"></a> 5.3 跟踪分支</h4><p>从一个远程分支检出一个本地分支会自动创建一个叫做“跟踪分支”（也叫“上游分支”）。跟踪分支是与远程分支有直接关系的本地分支。如果在一个跟踪分支上输入 <code>git pull</code> ,Git 能自动滴识别去那个服务器上抓取、合并到哪个分支。</p><p>如果想要设置本地分支跟踪其他远程仓库上的跟踪分支，可以运行<code>git checkout -b [branch] [remote-name]/[branch]</code> 命令，这个命令 Git 提供了快捷方式 <code>git checkout --track [remote-name]/[branch]</code> 。</p><p>设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch -u origin/testingBranch <span class="token string">'dev'</span> <span class="token builtin class-name">set</span> up to track remote branch <span class="token string">'testing'</span> from <span class="token string">'origin'</span><span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果想要查看设置的所有跟踪分支，可以使用 git branch 的 -vv 选项。这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch -vv* dev          b00d0ae <span class="token punctuation">[</span>origin/testing<span class="token punctuation">]</span> update <span class="token builtin class-name">test</span>  master       65682fc <span class="token punctuation">[</span>origin/master: ahead <span class="token number">5</span><span class="token punctuation">]</span> Merge branch <span class="token string">'version2.5.1'</span>  testing      b00d0ae update <span class="token builtin class-name">test</span>  version2.5   bf1c84c create test.txt  version2.5.1 4b30818 change version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到本地分支 dev 正在跟踪 <code>origin/testing</code> ；<code>master</code> 分支正在跟踪<code>origin/master</code> ，并且“ahead” 是5，表示本地 master 分支还有 5 个提交没有推送到服务器。</p><p>想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> fetch --all<span class="token punctuation">;</span> <span class="token function">git</span> branch -vv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="54-拉取"><a class="markdownIt-Anchor" href="#54-拉取"></a> 5.4  拉取</h4><p>当<code>git fetch</code> 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。它只会获取数据然后让你自己合并。</p><p><code>git pull</code> 会查找当前分支所跟踪的服务器与分支，从服务器上抓取数据然后尝试合并如那个远程分支。大多数情况下，它可以看着是一个<code>git fetch</code> 紧接着一个<code>git merge</code> 命令。</p><h4 id="55-删除远程分支"><a class="markdownIt-Anchor" href="#55-删除远程分支"></a> 5.5 删除远程分支</h4><p>如果临时创建了一个分支，并且这个分支的职责已经完成了，不需要了，想将这个分支从远程服务器删除。可以运行带有<code>--delete</code> 选项的<code>git push</code> 命令来删除一个远程分支。比如需要从远程服务器上删除<code>testing</code> 分支，运行下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin --delete testingTo https://github.com/onestravel/test.git - <span class="token punctuation">[</span>deleted<span class="token punctuation">]</span>         testing$ <span class="token function">git</span> branch -vv* dev          b00d0ae <span class="token punctuation">[</span>origin/testing: gone<span class="token punctuation">]</span> update <span class="token builtin class-name">test</span>  master       65682fc <span class="token punctuation">[</span>origin/master: ahead <span class="token number">5</span><span class="token punctuation">]</span> Merge branch <span class="token string">'version2.5.1'</span>  testing      b00d0ae update <span class="token builtin class-name">test</span>  version2.5   bf1c84c create test.txt  version2.5.1 4b30818 change version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个命令做的只是从服务器上移除这个指针，Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以是不小心删除了，通常比较容易恢复。使用<code>git branch -vv</code>查看分支跟踪状态，可以看到 <code>dev</code> 分支跟踪的远程分支<code>origin/testing</code> 后面是一个 <code>gone</code> 的状态。</p><h3 id="6-变基"><a class="markdownIt-Anchor" href="#6-变基"></a> 6. 变基</h3><p>在 Git 中整合来自不同分支的修改主要有两种方法：<code>merge</code> 和 <code>rebase</code> 。</p><p>使用 <code>rebase</code> 命令将提交到某一分支上的所有修改都移动至另外一个分支上。必然在 C4 提交中引入的补丁和修改，然后在 C3 提交的基础上再应用一次。就叫变基。</p>]]></content>
      
      
      <categories>
          
          <category> DevTools </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevTools </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5利用AppCache和LocalStorage实现缓存h5页面数据</title>
      <link href="20161009/h5/html5-li-yong-appcache-he-localstorage-shi-xian-huan-cun-h5-ye-mian-shu-ju/"/>
      <url>20161009/h5/html5-li-yong-appcache-he-localstorage-shi-xian-huan-cun-h5-ye-mian-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="html5利用appcache和localstorage实现缓存h5页面数据"><a class="markdownIt-Anchor" href="#html5利用appcache和localstorage实现缓存h5页面数据"></a> Html5利用AppCache和LocalStorage实现缓存h5页面数据</h1><hr /><p>最近在开发的过程中遇到了一个问题，就是在Android上通过WebView加载Html5页面时发现页面加载速度慢，再加上网络速度慢，每次请求需要5s左右的时间，严重影响用户体验，所以查询资料，最终找到一个可以解决加载缓慢的方法，现在介绍给大家：1、使用AppCache机制实现缓存html，css，js文件和一些本地图片，这种缓存方法使用manifest文件进行缓存数据，一般manifest文件默认后缀名为 .appcache，在设置缓存以后，第一次加载页面时会根据manifest文件中列出的缓存文件路径，将文件进行缓存到浏览器，在再次打开的时候，不会再次从服务器请求，而是加载缓存数据。但是如果manifest文件没有发生改变，那么服务器上的相关页面发生改动，加载时也是只会加载缓存的数据，不会进行更新；如果需要更新，必须改动manifest文件，哪怕只是一个空格或者换行。开启缓存机制需要两步:</p><p>(1). 需要在服务器端做AppCache缓存处理：在每个需要缓存的html页面增加manifest属性，设置AppCache文件，进行缓存。</p><p>创建manifest文件**manifest文件（manifest.appcache）</p><blockquote><p>CACHE MANIFEST#VERSION 2016-09-28 14:44</p><p># 直接缓存的文件</p><p>CACHE:<br />…/index.html</p><p>…/css/index.css</p><p>…/js/jquery-2.2.4.min.js<br />…/js/index.js</p><p>…/images/loading.gif<br />…/images/index_one.jpg<br />…/images/index_one_icon.png<br />…/images/index_two.jpg<br />…/images/index_two_icon.png<br />…/images/index_three.jpg<br />…/images/index_three_icon.png<br />…/images/index_four.jpg<br />…/images/index_four_icon.png</p><p>#需要在线请求的文件路径，*代表除CACHE以外的文件都进行在线请求<br />NETWORK:<br />*</p><p># 替代方案 ，当请求失败时需要跳转的页面<br />FALLBACK:<br />…/error.html</p></blockquote><p><strong>manifest文件分为三个部分：CACHE，NETWORK 和 FALLBACK；</strong></p><p><strong>CACHE</strong>：是所需要缓存文件的路径可以是绝对路径或者相对路径，一般相对路径比较好。<strong>NETWORK</strong> ：是需要即时从服务器请求的文件，一般默认*号，表示除CACHE所列所见以外的文件都是需要即时请求更新的。<br /><strong>FALLBACK</strong>：这个页面时当缓存请求失败时所需展示的页面，一般默认一个错误页面。</p><p><strong>VERSION</strong>：版本号，这是一个附加属性，可有可无，加这个是为了在页面改动时，可以进行改动此版本号，使得manifest文件发生改动，从而浏览器再次请求html页面时，发现页面manifest文件进行改动，浏览器会从服务器重新拉取更新的内容。</p><p>manifest文件有了，现在所需做的就是把manifest文件和Html文件进行关联，这个非常简单：在Html标签中标签有一个属性manifest，就是用来关联manifest文件的，所以只需要在缓存的html文件中的html标签上声明manifest属性，就可以进行AppCache缓存。</p><blockquote><html manifest="manifest/manifest.appcache"></html></blockquote><p>（2）这样服务器端的缓存就处理好了，可以在浏览器上进行测试，是完全可以缓存的，但是用在Android上使用WebView加载H5页面时，则需要在Android端进行设置：</p><blockquote><p>WebSettings webseting = webview.getSettings();</p><p>webseting.setDomStorageEnabled(true);<br />webseting.setAppCacheMaxSize(1024<em>1024</em>8);//设置缓冲大小，我设的是8M<br />String appCacheDir = this.getApplicationContext().getDir(“cache”, Context.MODE_PRIVATE).getPath();<br />webseting.setAppCachePath(appCacheDir);<br />webseting.setAllowFileAccess(true);<br />webseting.setAppCacheEnabled(true);<br />webseting.setCacheMode(WebSettings.LOAD_DEFAULT);//可以在加载前对网络进行判断，如果有网络，则设置缓存模式为  WebSettings.LOAD_DEFAULT，从服务器请求数据， 如果没有网络测设置缓存模式为WebSettings.LOAD_CACHE_ELSE_NETWORK</p></blockquote><p><strong>缓存模式(5种)</strong></p><p><strong>LOAD_CACHE_ONLY:</strong>  不使用网络，只读取本地缓存数据<br /><strong>LOAD_DEFAULT:</strong>  根据cache-control决定是否从网络上取数据。<br />**LOAD_CACHE_NORMAL:**API level 17中已经废弃, 从API level 11开始作用同LOAD_DEFAULT模式<br />**LOAD_NO_CACHE:**不使用缓存，只从网络获取数据.<br /><strong>LOAD_CACHE_ELSE_NETWORK:</strong> 只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。</p><p>如：www.taobao.com的cache-control为no-cache，在模式LOAD_DEFAULT下，无论如何都会从网络上取数据，如果没有网络，就会出现错误页面；在LOAD_CACHE_ELSE_NETWORK模式下，无论是否有网络，只要本地有缓存，都使用缓存。本地没有缓存时才从网络上获取。www.360.com.cn的cache-control为max-age=60，在两种模式下都使用本地缓存数据。</p><p>a、缓存构成根据setAppCachePath(String appCachePath)提供的路径，在H5使用缓存过程中生成的缓存文件。</p><p>b、缓存模式无模式选择，通过setAppCacheEnabled(boolean flag)设置是否打开。默认关闭，即，H5的缓存无法使用。</p><p>c、清除缓存找到调用setAppCachePath(String appCachePath)设置缓存的路径，把它下面的文件全部删除就OK了。clearCache(boolean)CacheManager.clear高版本中需要调用隐藏API。</p><p>d、控制大小通过setAppCacheMaxSize(long appCacheMaxSize)设置缓存最大容量，默认为Max Integer。同时，可能通过覆盖WebChromeClient.onReachedMaxAppCacheSize(long requiredStorage, long quota, WebStorage.QuotaUpdater quotaUpdater)来设置缓存超过先前设置的最大容量时的策略。</p><p>这样一来，通过设置服务器端的缓存，与Android前端的缓存，就可以有效解决Html5的加载缓慢问题，该方法虽然解决了缓存问题，但是会发现只是在第二次打开是速度会明显提升，但是在首次进行加载时，页面加载还是非常缓慢的，目前还没想到方案进行解决，后面如果找到方法，则会继续更新！-</p><hr /><p>发表博客是为了做个笔记，并且和各位读者进行交流，互相学习，如果哪位读者有更好地解决方案，请麻烦留言告知，万分谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 前端H5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> AppCache </tag>
            
            <tag> LocalStorage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 用户、用户组添加修改删除(ubuntu、centos)</title>
      <link href="20161009/linux/linux-yong-hu-yong-hu-zu-tian-jia-xiu-gai-shan-chu-ubuntu-centos/"/>
      <url>20161009/linux/linux-yong-hu-yong-hu-zu-tian-jia-xiu-gai-shan-chu-ubuntu-centos/</url>
      
        <content type="html"><![CDATA[<h1 id="linux-用户-用户组添加修改删除ubuntu-centos"><a class="markdownIt-Anchor" href="#linux-用户-用户组添加修改删除ubuntu-centos"></a> Linux 用户、用户组添加修改删除(ubuntu、centos)</h1><h4 id="一-linuxubuntucentos用户添加删除修改"><a class="markdownIt-Anchor" href="#一-linuxubuntucentos用户添加删除修改"></a> 一、LINUX(UBUNTU/CENTOS)用户添加删除修改</h4><h5 id=""><a class="markdownIt-Anchor" href="#"></a> <a href="#1-%E5%BB%BA%E7%94%A8%E6%88%B7"></a>1、建用户：</h5><pre class="line-numbers language-none"><code class="language-none">adduser web                             #新建web用户useradd web#添加web 用户passwd web                               #给web用户设置密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">useradd web -g admin -n -m  #新建web用户并指定用户组为 admin用户组,并自动建立登录目录passwd web                  #给web 用户设置密码useradd(选项)(参数)                #创建admin用户，并指定属组为admin 用户id为10000useradd -r -m -s  &#x2F;bin&#x2F;bash -g admin -u 10000 admin <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">-c&lt;备注&gt;：加上备注文字。备注文字会保存在passwd的备注栏位中； -d&lt;登入目录&gt;：指定用户登入时的启始目录； -D：变更预设值； -e&lt;有效期限&gt;：指定帐号的有效期限； -f&lt;缓冲天数&gt;：指定在密码过期后多少天即关闭该帐号； -g&lt;群组&gt;：指定用户所属的群组； -G&lt;群组&gt;：指定用户所属的附加群组； -m：自动建立用户的登入目录； -M：不要自动建立用户的登入目录； -n：取消建立以用户名称为名的群组； -r：建立系统帐号； -s：指定用户登入后所使用的shell； -u：指定用户id。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="-2"><a class="markdownIt-Anchor" href="#-2"></a> <a href="#2-%E7%BB%99%E5%B7%B2%E6%9C%89%E7%9A%84%E7%94%A8%E6%88%B7%E5%A2%9E%E5%8A%A0%E5%B7%A5%E4%BD%9C%E7%BB%84"></a>2、给已有的用户增加工作组</h5><pre class="line-numbers language-none"><code class="language-none">usermod -G admin web#给web用户设置admin附属用户组#给用户设置添加多个用户组usermod -g web -G admin,www web #给web用户设置主用户组web组，admin,www附属用户组gpasswd -a web admin#给web用户设置admin用户组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="-3"><a class="markdownIt-Anchor" href="#-3"></a> <a href="#3-%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7%E5%90%8C%E6%97%B6%E5%A2%9E%E5%8A%A0%E5%B7%A5%E4%BD%9C%E7%BB%84"></a>3、新建用户同时增加工作组</h5><pre class="line-numbers language-none"><code class="language-none">useradd -g admin web                      #新建web用户并增加到admin工作组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：<br />-g 所属组<br />-d 家目录<br />-s 所用的SHELL</p><h5 id="-4"><a class="markdownIt-Anchor" href="#-4"></a> <a href="#4-%E4%B8%B4%E6%97%B6%E5%85%B3%E9%97%AD"></a>4、临时关闭</h5><p>方法一 /etc/shadow文件中属于该用户的行的第二个字段（密码）前面加上 <em>就可以了。想恢复该用户，去掉</em>即可。 方法二 使用命令关闭用户账号：</p><pre class="line-numbers language-none"><code class="language-none">passwd web –l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新释放：</p><pre class="line-numbers language-none"><code class="language-none">passwd web –u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="-5"><a class="markdownIt-Anchor" href="#-5"></a> <a href="#5-%E6%B0%B8%E4%B9%85%E6%80%A7%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7%E8%B4%A6%E5%8F%B7"></a>5、永久性删除用户账号</h5><pre class="line-numbers language-none"><code class="language-none">userdel webgroupdel webusermod –G web web   #（强制删除该用户的主目录和主目录下的所有文件和子目录）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="-6"><a class="markdownIt-Anchor" href="#-6"></a> <a href="#6-%E4%BB%8E%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7"></a>6、从组中删除用户</h5><p>编辑/etc/group 找到用户组admin那一行，删除用户名web 或者用命令</p><pre class="line-numbers language-none"><code class="language-none">gpasswd -d A web<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="-7"><a class="markdownIt-Anchor" href="#-7"></a> <a href="#7-%E6%98%BE%E7%A4%BA%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF"></a>7、显示用户信息</h5><pre class="line-numbers language-none"><code class="language-none">id usercat &#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="-8"><a class="markdownIt-Anchor" href="#-8"></a> <a href="#%E4%BA%8C-%E7%94%A8%E6%88%B7%E7%BB%84-linuxubuntucentos-%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E4%BF%AE%E6%94%B9"></a>二、用户组 LINUX(UBUNTU/CENTOS) 添加删除修改</h3><h5 id="-9"><a class="markdownIt-Anchor" href="#-9"></a> <a href="#1-%E5%BB%BA%E5%B7%A5%E4%BD%9C%E7%BB%84"></a>1、建工作组</h5><pre class="line-numbers language-none"><code class="language-none">groupadd admin                          #新建admin工作组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="-10"><a class="markdownIt-Anchor" href="#-10"></a> <a href="#2-%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E7%BB%84"></a>2、修改用户组</h5><pre class="line-numbers language-none"><code class="language-none">groupmod -n newadmin admin#修改admin用户组名称改为newadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="-11"><a class="markdownIt-Anchor" href="#-11"></a> <a href="#3-%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7%E7%BB%84"></a>3、删除用户组</h5><pre class="line-numbers language-none"><code class="language-none">groupdel admin#删除admin用户组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="-12"><a class="markdownIt-Anchor" href="#-12"></a> <a href="#4%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7%E7%9A%84%E7%94%A8%E6%88%B7%E7%BB%84%E4%BF%A1%E6%81%AF"></a>4.查看用户的用户组信息</h5><pre class="line-numbers language-none"><code class="language-none">groups web#&#x3D;&#x3D;查看web所有用户组&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
