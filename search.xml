<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Glide-4.11.0 浅析</title>
      <link href="/20200403/android-ndk/glide-4.11.0-qian-xi/"/>
      <url>/20200403/android-ndk/glide-4.11.0-qian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Glide-4-11-0-浅析"><a href="#Glide-4-11-0-浅析" class="headerlink" title="Glide-4.11.0 浅析"></a>Glide-4.11.0 浅析</h1><p>Glide 是Google推荐使用的图片加载框架，在开发过程中我们也会经常使用到，使用起来也比较简单，一般一行代码就可以完成图片加载；如：</p><pre class=" language-java"><code class="language-java">Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>mThumbIv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span>mThumbIv<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>今天我们来阅读一下Glide的源码，了解一下Glide 加载图标的原理，我们今天阅读的Glide源码是Glide:4.11.0版本的，是当前最新版本。源码获取地址为 <code>https://github.com/bumptech/glide/releases/tag/v4.11.0</code>。</p><p>源码的阅读，是比较枯燥的；但是掌握了阅读代码的方法之后，一个人，一杯茶，一个电脑，也是一种特别的享受。</p><p>开始阅读代码</p><p>上面说了Glide加载的方法，一般使用时，在load之前，我们还会有其他的一些设置想，但是总体来说Glide加载图片就可以分为三步，第一步：<code>with</code>,第二步：<code>load</code>,第三步：<code>into</code>，接下来我们就从这三步来阅读代码</p><h3 id="1-with"><a href="#1-with" class="headerlink" title="1. with"></a>1. with</h3><p><code>Glide.with(context)</code> ;<code>with</code>是Glide类的静态方法，在 Glide类中有多个<code>with</code>方法的重载，代码如下：</p><pre class=" language-Java"><code class="language-Java">@NonNullpublic static RequestManager with(@NonNull Context context) {  return getRetriever(context).get(context);}@NonNullpublic static RequestManager with(@NonNull Activity activity) {  return getRetriever(activity).get(activity);}@NonNullpublic static RequestManager with(@NonNull FragmentActivity activity) {  return getRetriever(activity).get(activity);}@NonNullpublic static RequestManager with(@NonNull androidx.fragment.app.Fragment fragment) {  return getRetriever(fragment.getContext()).get(fragment);}@SuppressWarnings("deprecation")@Deprecated@NonNullpublic static RequestManager with(@NonNull android.app.Fragment fragment) {  return getRetriever(fragment.getActivity()).get(fragment);}@NonNullpublic static RequestManager with(@NonNull View view) {  return getRetriever(view.getContext()).get(view);}</code></pre><p>从上面代码中，我们可以看到，在调用<code>Glide.with</code>方法时，我们可以传入的参数有Context,Activity,FragmentActivity,androidx包下的Fragment和android包下的Fragment,View,无论传入什么参数，最终都调用了<code>getRetriever().get()</code>方法来返回了<code>RequestManager</code>对象;</p><p>我们来看一下 <code>getRetriever()</code>方法的源码，</p><pre class=" language-Java"><code class="language-Java">@NonNullprivate static RequestManagerRetriever getRetriever(@Nullable Context context) {  // Context could be null for other reasons (ie the user passes in null), but in practice it will  // only occur due to errors with the Fragment lifecycle.  Preconditions.checkNotNull(      context,      "You cannot start a load on a not yet attached View or a Fragment where getActivity() "          + "returns null (which usually occurs when getActivity() is called before the Fragment "          + "is attached or after the Fragment is destroyed).");  return Glide.get(context).getRequestManagerRetriever();}</code></pre><p><code>getRetriever()</code>方法时通过调用Glide 类的get()方法来获取Glide的单例对象。然后通过初始化之后的Glide对象，获取<code>RequestManagerRetriever</code>对象；所以<code>getRetriever()</code>方法最终返回了一个<code>RequestManagerRetriever</code>对象。</p><p><code>with</code> 方法中，在调用<code>getRetriever()</code>方法，拿到<code>RequestManagerRetriever</code>对象之后，调用了他的get()方法。传入了with方法传入的参数。我们来看一下<code>RequestManagerRetriever</code>对象中的get方法：</p><pre class=" language-Java"><code class="language-Java">public RequestManagerRetriever(@Nullable RequestManagerFactory factory) {    this.factory = factory != null ? factory : DEFAULT_FACTORY;    handler = new Handler(Looper.getMainLooper(), this /* Callback */);  }  @NonNull  private RequestManager getApplicationManager(@NonNull Context context) {    // Either an application context or we're on a background thread.    if (applicationManager == null) {      synchronized (this) {        if (applicationManager == null) {          // Normally pause/resume is taken care of by the fragment we add to the fragment or          // activity. However, in this case since the manager attached to the application will not          // receive lifecycle events, we must force the manager to start resumed using          // ApplicationLifecycle.          // TODO(b/27524013): Factor out this Glide.get() call.          Glide glide = Glide.get(context.getApplicationContext());          applicationManager =              factory.build(                  glide,                  new ApplicationLifecycle(),                  new EmptyRequestManagerTreeNode(),                  context.getApplicationContext());        }      }    }    return applicationManager;  }  @NonNull  public RequestManager get(@NonNull Context context) {    if (context == null) {      throw new IllegalArgumentException("You cannot start a load on a null Context");    } else if (Util.isOnMainThread() && !(context instanceof Application)) {      if (context instanceof FragmentActivity) {        return get((FragmentActivity) context);      } else if (context instanceof Activity) {        return get((Activity) context);      } else if (context instanceof ContextWrapper          // Only unwrap a ContextWrapper if the baseContext has a non-null application context.          // Context#createPackageContext may return a Context without an Application instance,          // in which case a ContextWrapper may be used to attach one.          && ((ContextWrapper) context).getBaseContext().getApplicationContext() != null) {        return get(((ContextWrapper) context).getBaseContext());      }    }    return getApplicationManager(context);  }  @NonNull  public RequestManager get(@NonNull FragmentActivity activity) {    if (Util.isOnBackgroundThread()) {      return get(activity.getApplicationContext());    } else {      assertNotDestroyed(activity);      FragmentManager fm = activity.getSupportFragmentManager();      return supportFragmentGet(activity, fm, /*parentHint=*/ null, isActivityVisible(activity));    }  }  @NonNull  public RequestManager get(@NonNull Fragment fragment) {    Preconditions.checkNotNull(        fragment.getContext(),        "You cannot start a load on a fragment before it is attached or after it is destroyed");    if (Util.isOnBackgroundThread()) {      return get(fragment.getContext().getApplicationContext());    } else {      FragmentManager fm = fragment.getChildFragmentManager();      return supportFragmentGet(fragment.getContext(), fm, fragment, fragment.isVisible());    }  }  @SuppressWarnings("deprecation")  @NonNull  public RequestManager get(@NonNull Activity activity) {    if (Util.isOnBackgroundThread()) {      return get(activity.getApplicationContext());    } else {      assertNotDestroyed(activity);      android.app.FragmentManager fm = activity.getFragmentManager();      return fragmentGet(activity, fm, /*parentHint=*/ null, isActivityVisible(activity));    }  }  @SuppressWarnings("deprecation")  @NonNull  public RequestManager get(@NonNull View view) {    if (Util.isOnBackgroundThread()) {      return get(view.getContext().getApplicationContext());    }    Preconditions.checkNotNull(view);    Preconditions.checkNotNull(        view.getContext(), "Unable to obtain a request manager for a view without a Context");    Activity activity = findActivity(view.getContext());    // The view might be somewhere else, like a service.    if (activity == null) {      return get(view.getContext().getApplicationContext());    }    if (activity instanceof FragmentActivity) {      Fragment fragment = findSupportFragment(view, (FragmentActivity) activity);      return fragment != null ? get(fragment) : get((FragmentActivity) activity);    }    // Standard Fragments.    android.app.Fragment fragment = findFragment(view, activity);    if (fragment == null) {      return get(activity);    }    return get(fragment);  }  private static void findAllSupportFragmentsWithViews(      @Nullable Collection<Fragment> topLevelFragments, @NonNull Map<View, Fragment> result) {    if (topLevelFragments == null) {      return;    }    for (Fragment fragment : topLevelFragments) {      // getFragment()s in the support FragmentManager may contain null values, see #1991.      if (fragment == null || fragment.getView() == null) {        continue;      }      result.put(fragment.getView(), fragment);      findAllSupportFragmentsWithViews(fragment.getChildFragmentManager().getFragments(), result);    }  }  @Nullable  private Fragment findSupportFragment(@NonNull View target, @NonNull FragmentActivity activity) {    tempViewToSupportFragment.clear();    findAllSupportFragmentsWithViews(        activity.getSupportFragmentManager().getFragments(), tempViewToSupportFragment);    Fragment result = null;    View activityRoot = activity.findViewById(android.R.id.content);    View current = target;    while (!current.equals(activityRoot)) {      result = tempViewToSupportFragment.get(current);      if (result != null) {        break;      }      if (current.getParent() instanceof View) {        current = (View) current.getParent();      } else {        break;      }    }    tempViewToSupportFragment.clear();    return result;  }  @SuppressWarnings({"deprecation", "DeprecatedIsStillUsed"})  @Deprecated  @Nullable  private android.app.Fragment findFragment(@NonNull View target, @NonNull Activity activity) {    tempViewToFragment.clear();    findAllFragmentsWithViews(activity.getFragmentManager(), tempViewToFragment);    android.app.Fragment result = null;    View activityRoot = activity.findViewById(android.R.id.content);    View current = target;    while (!current.equals(activityRoot)) {      result = tempViewToFragment.get(current);      if (result != null) {        break;      }      if (current.getParent() instanceof View) {        current = (View) current.getParent();      } else {        break;      }    }    tempViewToFragment.clear();    return result;  }  // TODO: Consider using an accessor class in the support library package to more directly retrieve  // non-support Fragments.  @SuppressWarnings("deprecation")  @Deprecated  @TargetApi(Build.VERSION_CODES.O)  private void findAllFragmentsWithViews(      @NonNull android.app.FragmentManager fragmentManager,      @NonNull ArrayMap<View, android.app.Fragment> result) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {      for (android.app.Fragment fragment : fragmentManager.getFragments()) {        if (fragment.getView() != null) {          result.put(fragment.getView(), fragment);          findAllFragmentsWithViews(fragment.getChildFragmentManager(), result);        }      }    } else {      findAllFragmentsWithViewsPreO(fragmentManager, result);    }  }  @SuppressWarnings("deprecation")  @Deprecated  private void findAllFragmentsWithViewsPreO(      @NonNull android.app.FragmentManager fragmentManager,      @NonNull ArrayMap<View, android.app.Fragment> result) {    int index = 0;    while (true) {      tempBundle.putInt(FRAGMENT_INDEX_KEY, index++);      android.app.Fragment fragment = null;      try {        fragment = fragmentManager.getFragment(tempBundle, FRAGMENT_INDEX_KEY);      } catch (Exception e) {        // This generates log spam from FragmentManager anyway.      }      if (fragment == null) {        break;      }      if (fragment.getView() != null) {        result.put(fragment.getView(), fragment);        if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN_MR1) {          findAllFragmentsWithViews(fragment.getChildFragmentManager(), result);        }      }    }  }  @Nullable  private static Activity findActivity(@NonNull Context context) {    if (context instanceof Activity) {      return (Activity) context;    } else if (context instanceof ContextWrapper) {      return findActivity(((ContextWrapper) context).getBaseContext());    } else {      return null;    }  }  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)  private static void assertNotDestroyed(@NonNull Activity activity) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1 && activity.isDestroyed()) {      throw new IllegalArgumentException("You cannot start a load for a destroyed activity");    }  }  @SuppressWarnings("deprecation")  @Deprecated  @NonNull  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)  public RequestManager get(@NonNull android.app.Fragment fragment) {    if (fragment.getActivity() == null) {      throw new IllegalArgumentException(          "You cannot start a load on a fragment before it is attached");    }    if (Util.isOnBackgroundThread() || Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {      return get(fragment.getActivity().getApplicationContext());    } else {      android.app.FragmentManager fm = fragment.getChildFragmentManager();      return fragmentGet(fragment.getActivity(), fm, fragment, fragment.isVisible());    }  }  @SuppressWarnings("deprecation")  @Deprecated  @NonNull  RequestManagerFragment getRequestManagerFragment(Activity activity) {    return getRequestManagerFragment(        activity.getFragmentManager(), /*parentHint=*/ null, isActivityVisible(activity));  }  @SuppressWarnings("deprecation")  @NonNull  private RequestManagerFragment getRequestManagerFragment(      @NonNull final android.app.FragmentManager fm,      @Nullable android.app.Fragment parentHint,      boolean isParentVisible) {    RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);    if (current == null) {      current = pendingRequestManagerFragments.get(fm);      if (current == null) {        current = new RequestManagerFragment();        current.setParentFragmentHint(parentHint);        if (isParentVisible) {          current.getGlideLifecycle().onStart();        }        pendingRequestManagerFragments.put(fm, current);        fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();        handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();      }    }    return current;  }  @SuppressWarnings({"deprecation", "DeprecatedIsStillUsed"})  @Deprecated  @NonNull  private RequestManager fragmentGet(      @NonNull Context context,      @NonNull android.app.FragmentManager fm,      @Nullable android.app.Fragment parentHint,      boolean isParentVisible) {    RequestManagerFragment current = getRequestManagerFragment(fm, parentHint, isParentVisible);    RequestManager requestManager = current.getRequestManager();    if (requestManager == null) {      // TODO(b/27524013): Factor out this Glide.get() call.      Glide glide = Glide.get(context);      requestManager =          factory.build(              glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);      current.setRequestManager(requestManager);    }    return requestManager;  }  @NonNull  SupportRequestManagerFragment getSupportRequestManagerFragment(      Context context, FragmentManager fragmentManager) {    return getSupportRequestManagerFragment(        fragmentManager, /*parentHint=*/ null, isActivityVisible(context));  }  private static boolean isActivityVisible(Context context) {    // This is a poor heuristic, but it's about all we have. We'd rather err on the side of visible    // and start requests than on the side of invisible and ignore valid requests.    Activity activity = findActivity(context);    return activity == null || !activity.isFinishing();  }  @NonNull  private SupportRequestManagerFragment getSupportRequestManagerFragment(      @NonNull final FragmentManager fm, @Nullable Fragment parentHint, boolean isParentVisible) {    SupportRequestManagerFragment current =        (SupportRequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);    if (current == null) {      current = pendingSupportRequestManagerFragments.get(fm);      if (current == null) {        current = new SupportRequestManagerFragment();        current.setParentFragmentHint(parentHint);        if (isParentVisible) {          current.getGlideLifecycle().onStart();        }        pendingSupportRequestManagerFragments.put(fm, current);        fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();        handler.obtainMessage(ID_REMOVE_SUPPORT_FRAGMENT_MANAGER, fm).sendToTarget();      }    }    return current;  }  @NonNull  private RequestManager supportFragmentGet(      @NonNull Context context,      @NonNull FragmentManager fm,      @Nullable Fragment parentHint,      boolean isParentVisible) {    SupportRequestManagerFragment current =        getSupportRequestManagerFragment(fm, parentHint, isParentVisible);    RequestManager requestManager = current.getRequestManager();    if (requestManager == null) {      // TODO(b/27524013): Factor out this Glide.get() call.      Glide glide = Glide.get(context);      requestManager =          factory.build(              glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);      current.setRequestManager(requestManager);    }    return requestManager;  }  @Override  public boolean handleMessage(Message message) {    boolean handled = true;    Object removed = null;    Object key = null;    switch (message.what) {      case ID_REMOVE_FRAGMENT_MANAGER:        android.app.FragmentManager fm = (android.app.FragmentManager) message.obj;        key = fm;        removed = pendingRequestManagerFragments.remove(fm);        break;      case ID_REMOVE_SUPPORT_FRAGMENT_MANAGER:        FragmentManager supportFm = (FragmentManager) message.obj;        key = supportFm;        removed = pendingSupportRequestManagerFragments.remove(supportFm);        break;      default:        handled = false;        break;    }    if (handled && removed == null && Log.isLoggable(TAG, Log.WARN)) {      Log.w(TAG, "Failed to remove expected request manager fragment, manager: " + key);    }    return handled;  }  /** Used internally to create {@link RequestManager}s. */  public interface RequestManagerFactory {    @NonNull    RequestManager build(        @NonNull Glide glide,        @NonNull Lifecycle lifecycle,        @NonNull RequestManagerTreeNode requestManagerTreeNode,        @NonNull Context context);  }  private static final RequestManagerFactory DEFAULT_FACTORY =      new RequestManagerFactory() {        @NonNull        @Override        public RequestManager build(            @NonNull Glide glide,            @NonNull Lifecycle lifecycle,            @NonNull RequestManagerTreeNode requestManagerTreeNode,            @NonNull Context context) {          return new RequestManager(glide, lifecycle, requestManagerTreeNode, context);        }      };}</code></pre><p>从第33行，我们可以看到，在该<code>get()</code>方法中，根据<code>Context</code>类型，整体分为两类，一类是非<code>Application</code>的Context，一类是<code>Application</code>的Context，<code>Application</code>的Context，直接执行第7行<code>getApplicationManager(context)</code>方法，来创建和<code>Application</code>同生命周期的<code>RequestManager</code>对象；当应用关闭后，Glide也就停止加载；</p><p>传入非<code>Application</code>的Context，无论实Activity,Fragment,最终都是根据是否是<code>FragmentActivity</code>的子类或者<code>Activity</code>的子类来创建一个隐藏的<code>SupportRequestManagerFragment</code>  或 <code>RequestManagerFragment</code>对象（第302行和第356行），该对象继承自Fragment；来实现对应的Activity的生命周期的控制；当该Activity销毁时，对应的Glide也停止加载。</p><p>总体来说：<code>with</code>方法就是创建一个<code>RequestManager</code> 对象，然后根据传入的context来控制图片加载的生命周期</p><h3 id="2-load"><a href="#2-load" class="headerlink" title="2. load"></a>2. load</h3><p>接下来我们来看<code>load</code>方法，在上一步中，我们通过<code>with</code>方法，获取到了<code>RequestManager</code> 对象；那么<code>load</code>方法，就在<code>RequestManager</code>类中，我们来看一下<code>RequestManager</code>类</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>Bitmap<span class="token operator">></span> <span class="token function">asBitmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">as</span><span class="token punctuation">(</span>Bitmap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>DECODE_TYPE_BITMAP<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>GifDrawable<span class="token operator">></span> <span class="token function">asGif</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">as</span><span class="token punctuation">(</span>GifDrawable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>DECODE_TYPE_GIF<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>Drawable<span class="token operator">></span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">as</span><span class="token punctuation">(</span>Drawable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>Drawable<span class="token operator">></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Bitmap bitmap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>Drawable<span class="token operator">></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Drawable drawable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>Drawable<span class="token operator">></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>Drawable<span class="token operator">></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Uri uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>Drawable<span class="token operator">></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> File file<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>Drawable<span class="token operator">></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RawRes</span> <span class="token annotation punctuation">@DrawableRes</span> <span class="token annotation punctuation">@Nullable</span> Integer resourceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resourceId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token annotation punctuation">@Override</span>  <span class="token annotation punctuation">@Deprecated</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>Drawable<span class="token operator">></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> URL url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>Drawable<span class="token operator">></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>Drawable<span class="token operator">></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">asDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token function">downloadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">as</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>DOWNLOAD_ONLY_OPTIONS<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object model<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">downloadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token keyword">public</span> RequestBuilder<span class="token operator">&lt;</span>File<span class="token operator">></span> <span class="token function">asFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">as</span><span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">skipMemoryCacheOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@NonNull</span>  <span class="token annotation punctuation">@CheckResult</span>  <span class="token keyword">public</span> <span class="token operator">&lt;</span>ResourceType<span class="token operator">></span> RequestBuilder<span class="token operator">&lt;</span>ResourceType<span class="token operator">></span> <span class="token function">as</span><span class="token punctuation">(</span>      <span class="token annotation punctuation">@NonNull</span> Class<span class="token operator">&lt;</span>ResourceType<span class="token operator">></span> resourceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RequestBuilder</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>glide<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> resourceClass<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>在<code>RequestManager</code>类中，我们可以看到有很多<code>load</code>方法的重载方法，可以传入不同的图片资源来加载图片资源；在<code>load</code>方法中我们可以看到都是调用了<code>asDrawable()</code>方法返回一个<code>RequestBuilder&lt;Drawable&gt;</code>对象，再调用<code>RequestBuilder&lt;Drawable&gt;</code>对象中的<code>load</code>方法，传入对应的图片资源或地址，进行加载图片；我们来看一下<code>asDrawable()</code> 方法,在第15行，看到<code>asDrawable()</code> 方法中调用了<code>as()</code>方法（第111行）生成了<code>RequestBuilder&lt;Drawable&gt;</code>对象  ，传入了glide对象，当前的   <code>RequestManager</code> 对象，泛型的具体类，和context；  除了<code>asDrawable()</code> 方法，还有三个方法<code>asGif()</code>，<code>asBitmap()</code>和<code>asFile()</code>也调用了<code>as()</code>方法生成了对应类型的<code>RequestBuilder</code>对象。</p><p>可以看到，最终是将图片资源传入到了<code>RequestBuilder&lt;TranscodeType&gt;</code>类中的<code>load</code>方法中，接下来我们看一下<code>RequestBuilder&lt;TranscodeType&gt;</code>类中的<code>load</code>方法:</p><pre class=" language-Java"><code class="language-Java"> public RequestBuilder<TranscodeType> load(@Nullable Bitmap bitmap) {    return loadGeneric(bitmap).apply(diskCacheStrategyOf(DiskCacheStrategy.NONE));  }  public RequestBuilder<TranscodeType> load(@Nullable Drawable drawable) {    return loadGeneric(drawable).apply(diskCacheStrategyOf(DiskCacheStrategy.NONE));  }  public RequestBuilder<TranscodeType> load(@Nullable String string) {    return loadGeneric(string);  }  public RequestBuilder<TranscodeType> load(@Nullable Uri uri) {    return loadGeneric(uri);  }  public RequestBuilder<TranscodeType> load(@Nullable File file) {    return loadGeneric(file);  }  public RequestBuilder<TranscodeType> load(@RawRes @DrawableRes @Nullable Integer resourceId) {    return loadGeneric(resourceId).apply(signatureOf(AndroidResourceSignature.obtain(context)));  }  public RequestBuilder<TranscodeType> load(@Nullable URL url) {    return loadGeneric(url);  }  public RequestBuilder<TranscodeType> load(@Nullable byte[] model) {    RequestBuilder<TranscodeType> result = loadGeneric(model);    if (!result.isDiskCacheStrategySet()) {      result = result.apply(diskCacheStrategyOf(DiskCacheStrategy.NONE));    }    if (!result.isSkipMemoryCacheSet()) {      result = result.apply(skipMemoryCacheOf(true /*skipMemoryCache*/));    }    return result;  }public RequestBuilder<TranscodeType> load(@Nullable Object model) {  return loadGeneric(model);}@NonNullprivate RequestBuilder<TranscodeType> loadGeneric(@Nullable Object model) {  this.model = model;  isModelSet = true;  return this;}</code></pre><p>可以看到在<code>load</code>方法中都调用了该类中的<code>loadGeneric</code>方法，传入了<code>Object</code>类型的<code>model</code>参数，这个<code>model</code>参数就是我吗传入的图片资源或者图片地址；看到这里，我们是不是有点疑惑，在<code>load</code>方法中调用了<code>loadGeneric</code>方法赋值后，返回<code>RequestBuilder&lt;TranscodeType&gt;</code>对象，Glide的<code>load</code>方法到这里就结束了他的工作。</p><h3 id="3-into"><a href="#3-into" class="headerlink" title="3. into"></a>3. into</h3><p>在上面的<code>with</code>和<code>load</code>方法中，我们还没有看到真正的图片加载和显示的代码，所以，可以想到，图片的加载和显示，都是通过<code>into</code>方法来调用执行的，所以，<code>into</code>方法是相对比较难分析的一个方法；接下来我们就一起看一下<code>into</code>方法所承担的重要职责。</p><p>执行完<code>load</code>方法，我们获得了<code>RequestBuilder&lt;TranscodeType&gt;</code>对象，所以，into方法，就在<code>RequestBuilder&lt;TranscodeType&gt;</code>类中，我们一起看一张这个类：</p><pre class=" language-Java"><code class="language-Java">public class RequestBuilder<TranscodeType> extends BaseRequestOptions<RequestBuilder<TranscodeType>>    implements Cloneable, ModelTypes<RequestBuilder<TranscodeType>> {@NonNullpublic <Y extends Target<TranscodeType>> Y into(@NonNull Y target) {  return into(target, /*targetListener=*/ null, Executors.mainThreadExecutor());}@NonNull@Synthetic<Y extends Target<TranscodeType>> Y into(    @NonNull Y target,    @Nullable RequestListener<TranscodeType> targetListener,    Executor callbackExecutor) {  return into(target, targetListener, /*options=*/ this, callbackExecutor);}private <Y extends Target<TranscodeType>> Y into(    @NonNull Y target,    @Nullable RequestListener<TranscodeType> targetListener,    BaseRequestOptions<?> options,    Executor callbackExecutor) {  Preconditions.checkNotNull(target);  if (!isModelSet) {    throw new IllegalArgumentException("You must call #load() before calling #into()");  }  Request request = buildRequest(target, targetListener, options, callbackExecutor);  Request previous = target.getRequest();  if (request.isEquivalentTo(previous)      && !isSkipMemoryCacheWithCompletePreviousRequest(options, previous)) {    if (!Preconditions.checkNotNull(previous).isRunning()) {      previous.begin();    }    return target;  }  requestManager.clear(target);  target.setRequest(request);  requestManager.track(target, request);  return target;}private boolean isSkipMemoryCacheWithCompletePreviousRequest(    BaseRequestOptions<?> options, Request previous) {  return !options.isMemoryCacheable() && previous.isComplete();}@NonNullpublic ViewTarget<ImageView, TranscodeType> into(@NonNull ImageView view) {  Util.assertMainThread();  Preconditions.checkNotNull(view);  BaseRequestOptions<?> requestOptions = this;  if (!requestOptions.isTransformationSet()      && requestOptions.isTransformationAllowed()      && view.getScaleType() != null) {    switch (view.getScaleType()) {      case CENTER_CROP:        requestOptions = requestOptions.clone().optionalCenterCrop();        break;      case CENTER_INSIDE:        requestOptions = requestOptions.clone().optionalCenterInside();        break;      case FIT_CENTER:      case FIT_START:      case FIT_END:        requestOptions = requestOptions.clone().optionalFitCenter();        break;      case FIT_XY:        requestOptions = requestOptions.clone().optionalCenterInside();        break;      case CENTER:      case MATRIX:      default:        // Do nothing.    }  }  return into(      glideContext.buildImageViewTarget(view, transcodeClass),      /*targetListener=*/ null,      requestOptions,      Executors.mainThreadExecutor());}@Deprecatedpublic FutureTarget<TranscodeType> into(int width, int height) {  return submit(width, height);}@NonNullpublic FutureTarget<TranscodeType> submit() {  return submit(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);}@NonNullpublic FutureTarget<TranscodeType> submit(int width, int height) {  final RequestFutureTarget<TranscodeType> target = new RequestFutureTarget<>(width, height);  return into(target, target, Executors.directExecutor());}@NonNullpublic Target<TranscodeType> preload(int width, int height) {  final PreloadTarget<TranscodeType> target = PreloadTarget.obtain(requestManager, width, height);  return into(target);}@NonNullpublic Target<TranscodeType> preload() {  return preload(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL);}}</code></pre><p>可以看到，我们调用的<code>into</code>方法，是第53行参数为ImageView的方法，在这个方法中根据<code>apply</code>方法中传的<code>RequestOptions</code>对象和图片显示类型<code>scaleType</code>来设置<code>RequestOptions</code>对象（当前对象，RequestBuilder 继承自BaseRequestOptions）的Transform类型。并且通过<code>glideContext.buildImageViewTarget(view, transcodeClass)</code>来创建了一个<code>ViewTarget&lt;ImageView, X&gt;</code>对象（<code>BitmapImageViewTarget(view)</code>或<code>DrawableImageViewTarget(view)</code>）,然后将<code>ViewTarget&lt;ImageView, X&gt;</code>对象，<code>RequestOptions</code>对象和<code>Executors.mainThreadExecutor()</code>（主线程的一个线程执行器，内部有一个主线程的handler对象用了执行runnable对象）传入到第18行的into方法，接下来我们看一下，在这个<code>into</code>方法中做了什么操作。</p><p>在第28行可以看到通过<code>buildRequest(target, targetListener, options, callbackExecutor)</code>方法得到了一个<code>Request</code>对象 <code>request</code>,稍后来看这个方法。继续往下看，第30行，通过传入的<code>target.getRequest()</code>方法也获得了一个<code>Request</code>对象 <code>previous</code>然后判断这两个<code>Request</code>对象是否是同一个请求（判断请求的参数和资源地址），如果是同一个请求，并且未跳过内存缓存完成请求，则<code>target</code>的<code>Request</code>对象开始请求<code>previous.begin();</code></p><p>如果两个<code>Request</code>对象不满足上面的条件，则将该<code>request</code>对象设置给<code>target</code>的<code>Request</code>对象，并且将该<code>request</code>对象通过<code>RequestManager</code>对象的<code>track(target, request)</code>方法，将该<code>request</code>对象添加到请求追踪器<code>RequestTracker</code>对象中进行请求（<code>runRequest(Request request)</code>）；粘一下代码</p><blockquote><p><code>RequestManager</code>对象的<code>track(target, request)</code>方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Target<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> target<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>  targetTracker<span class="token punctuation">.</span><span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  requestTracker<span class="token punctuation">.</span><span class="token function">runRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p><code>RequestTracker</code>对象中的<code>runRequest(Request request)</code>方法</p></blockquote><pre class=" language-Java"><code class="language-Java">public void runRequest(@NonNull Request request) {  requests.add(request);  if (!isPaused) {    request.begin();  } else {    request.clear();    if (Log.isLoggable(TAG, Log.VERBOSE)) {      Log.v(TAG, "Paused, delaying request");    }    pendingRequests.add(request);  }}</code></pre><p>可以看到在<code>runRequest(Request request)</code>方法中，先将该请求添加到请求的集合中，并且判断当前是否处于暂停加载的状态，如果不处于暂停加载状态，则执行请求对象的<code>begin()</code>方法开始请求图片，如果处于暂停加载状态，则清除加载列表，并将该请求加入等待请求的队列，待下次重新开始请求时进行请求。</p><p>接下来我们来了解一下<code>buildRequest</code>方法的内容</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Request <span class="token function">buildRequest</span><span class="token punctuation">(</span>    Target<span class="token operator">&lt;</span>TranscodeType<span class="token operator">></span> target<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> RequestListener<span class="token operator">&lt;</span>TranscodeType<span class="token operator">></span> targetListener<span class="token punctuation">,</span>    BaseRequestOptions<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> requestOptions<span class="token punctuation">,</span>    Executor callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">buildRequestRecursive</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">/*requestLock=*/</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      target<span class="token punctuation">,</span>      targetListener<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*parentCoordinator=*/</span> null<span class="token punctuation">,</span>      transitionOptions<span class="token punctuation">,</span>      requestOptions<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      requestOptions<span class="token punctuation">.</span><span class="token function">getOverrideWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      requestOptions<span class="token punctuation">.</span><span class="token function">getOverrideHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      requestOptions<span class="token punctuation">,</span>      callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> Request <span class="token function">buildRequestRecursive</span><span class="token punctuation">(</span>    Object requestLock<span class="token punctuation">,</span>    Target<span class="token operator">&lt;</span>TranscodeType<span class="token operator">></span> target<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> RequestListener<span class="token operator">&lt;</span>TranscodeType<span class="token operator">></span> targetListener<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> RequestCoordinator parentCoordinator<span class="token punctuation">,</span>    TransitionOptions<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> TranscodeType<span class="token operator">></span> transitionOptions<span class="token punctuation">,</span>    Priority priority<span class="token punctuation">,</span>    <span class="token keyword">int</span> overrideWidth<span class="token punctuation">,</span>    <span class="token keyword">int</span> overrideHeight<span class="token punctuation">,</span>    BaseRequestOptions<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> requestOptions<span class="token punctuation">,</span>    Executor callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Build the ErrorRequestCoordinator first if necessary so we can update parentCoordinator.</span>  ErrorRequestCoordinator errorRequestCoordinator <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>errorBuilder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    errorRequestCoordinator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorRequestCoordinator</span><span class="token punctuation">(</span>requestLock<span class="token punctuation">,</span> parentCoordinator<span class="token punctuation">)</span><span class="token punctuation">;</span>    parentCoordinator <span class="token operator">=</span> errorRequestCoordinator<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Request mainRequest <span class="token operator">=</span>      <span class="token function">buildThumbnailRequestRecursive</span><span class="token punctuation">(</span>          requestLock<span class="token punctuation">,</span>          target<span class="token punctuation">,</span>          targetListener<span class="token punctuation">,</span>          parentCoordinator<span class="token punctuation">,</span>          transitionOptions<span class="token punctuation">,</span>          priority<span class="token punctuation">,</span>          overrideWidth<span class="token punctuation">,</span>          overrideHeight<span class="token punctuation">,</span>          requestOptions<span class="token punctuation">,</span>          callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>errorRequestCoordinator <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> mainRequest<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> errorOverrideWidth <span class="token operator">=</span> errorBuilder<span class="token punctuation">.</span><span class="token function">getOverrideWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> errorOverrideHeight <span class="token operator">=</span> errorBuilder<span class="token punctuation">.</span><span class="token function">getOverrideHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Util<span class="token punctuation">.</span><span class="token function">isValidDimensions</span><span class="token punctuation">(</span>overrideWidth<span class="token punctuation">,</span> overrideHeight<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>errorBuilder<span class="token punctuation">.</span><span class="token function">isValidOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    errorOverrideWidth <span class="token operator">=</span> requestOptions<span class="token punctuation">.</span><span class="token function">getOverrideWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    errorOverrideHeight <span class="token operator">=</span> requestOptions<span class="token punctuation">.</span><span class="token function">getOverrideHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Request errorRequest <span class="token operator">=</span>      errorBuilder<span class="token punctuation">.</span><span class="token function">buildRequestRecursive</span><span class="token punctuation">(</span>          requestLock<span class="token punctuation">,</span>          target<span class="token punctuation">,</span>          targetListener<span class="token punctuation">,</span>          errorRequestCoordinator<span class="token punctuation">,</span>          errorBuilder<span class="token punctuation">.</span>transitionOptions<span class="token punctuation">,</span>          errorBuilder<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          errorOverrideWidth<span class="token punctuation">,</span>          errorOverrideHeight<span class="token punctuation">,</span>          errorBuilder<span class="token punctuation">,</span>          callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>  errorRequestCoordinator<span class="token punctuation">.</span><span class="token function">setRequests</span><span class="token punctuation">(</span>mainRequest<span class="token punctuation">,</span> errorRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> errorRequestCoordinator<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> Request <span class="token function">buildThumbnailRequestRecursive</span><span class="token punctuation">(</span>    Object requestLock<span class="token punctuation">,</span>    Target<span class="token operator">&lt;</span>TranscodeType<span class="token operator">></span> target<span class="token punctuation">,</span>    RequestListener<span class="token operator">&lt;</span>TranscodeType<span class="token operator">></span> targetListener<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> RequestCoordinator parentCoordinator<span class="token punctuation">,</span>    TransitionOptions<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> TranscodeType<span class="token operator">></span> transitionOptions<span class="token punctuation">,</span>    Priority priority<span class="token punctuation">,</span>    <span class="token keyword">int</span> overrideWidth<span class="token punctuation">,</span>    <span class="token keyword">int</span> overrideHeight<span class="token punctuation">,</span>    BaseRequestOptions<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> requestOptions<span class="token punctuation">,</span>    Executor callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>thumbnailBuilder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Recursive case: contains a potentially recursive thumbnail request builder.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isThumbnailBuilt<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>          <span class="token string">"You cannot use a request as both the main request and a "</span>              <span class="token operator">+</span> <span class="token string">"thumbnail, consider using clone() on the request(s) passed to thumbnail()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TransitionOptions<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> TranscodeType<span class="token operator">></span> thumbTransitionOptions <span class="token operator">=</span>        thumbnailBuilder<span class="token punctuation">.</span>transitionOptions<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Apply our transition by default to thumbnail requests but avoid overriding custom options</span>    <span class="token comment" spellcheck="true">// that may have been applied on the thumbnail request explicitly.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thumbnailBuilder<span class="token punctuation">.</span>isDefaultTransitionOptionsSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>      thumbTransitionOptions <span class="token operator">=</span> transitionOptions<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Priority thumbPriority <span class="token operator">=</span>        thumbnailBuilder<span class="token punctuation">.</span><span class="token function">isPrioritySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">?</span> thumbnailBuilder<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">:</span> <span class="token function">getThumbnailPriority</span><span class="token punctuation">(</span>priority<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> thumbOverrideWidth <span class="token operator">=</span> thumbnailBuilder<span class="token punctuation">.</span><span class="token function">getOverrideWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> thumbOverrideHeight <span class="token operator">=</span> thumbnailBuilder<span class="token punctuation">.</span><span class="token function">getOverrideHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Util<span class="token punctuation">.</span><span class="token function">isValidDimensions</span><span class="token punctuation">(</span>overrideWidth<span class="token punctuation">,</span> overrideHeight<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>thumbnailBuilder<span class="token punctuation">.</span><span class="token function">isValidOverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      thumbOverrideWidth <span class="token operator">=</span> requestOptions<span class="token punctuation">.</span><span class="token function">getOverrideWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      thumbOverrideHeight <span class="token operator">=</span> requestOptions<span class="token punctuation">.</span><span class="token function">getOverrideHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ThumbnailRequestCoordinator coordinator <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ThumbnailRequestCoordinator</span><span class="token punctuation">(</span>requestLock<span class="token punctuation">,</span> parentCoordinator<span class="token punctuation">)</span><span class="token punctuation">;</span>    Request fullRequest <span class="token operator">=</span>        <span class="token function">obtainRequest</span><span class="token punctuation">(</span>            requestLock<span class="token punctuation">,</span>            target<span class="token punctuation">,</span>            targetListener<span class="token punctuation">,</span>            requestOptions<span class="token punctuation">,</span>            coordinator<span class="token punctuation">,</span>            transitionOptions<span class="token punctuation">,</span>            priority<span class="token punctuation">,</span>            overrideWidth<span class="token punctuation">,</span>            overrideHeight<span class="token punctuation">,</span>            callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    isThumbnailBuilt <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Recursively generate thumbnail requests.</span>    Request thumbRequest <span class="token operator">=</span>        thumbnailBuilder<span class="token punctuation">.</span><span class="token function">buildRequestRecursive</span><span class="token punctuation">(</span>            requestLock<span class="token punctuation">,</span>            target<span class="token punctuation">,</span>            targetListener<span class="token punctuation">,</span>            coordinator<span class="token punctuation">,</span>            thumbTransitionOptions<span class="token punctuation">,</span>            thumbPriority<span class="token punctuation">,</span>            thumbOverrideWidth<span class="token punctuation">,</span>            thumbOverrideHeight<span class="token punctuation">,</span>            thumbnailBuilder<span class="token punctuation">,</span>            callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    isThumbnailBuilt <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    coordinator<span class="token punctuation">.</span><span class="token function">setRequests</span><span class="token punctuation">(</span>fullRequest<span class="token punctuation">,</span> thumbRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> coordinator<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>thumbSizeMultiplier <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Base case: thumbnail multiplier generates a thumbnail request, but cannot recurse.</span>    ThumbnailRequestCoordinator coordinator <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ThumbnailRequestCoordinator</span><span class="token punctuation">(</span>requestLock<span class="token punctuation">,</span> parentCoordinator<span class="token punctuation">)</span><span class="token punctuation">;</span>    Request fullRequest <span class="token operator">=</span>        <span class="token function">obtainRequest</span><span class="token punctuation">(</span>            requestLock<span class="token punctuation">,</span>            target<span class="token punctuation">,</span>            targetListener<span class="token punctuation">,</span>            requestOptions<span class="token punctuation">,</span>            coordinator<span class="token punctuation">,</span>            transitionOptions<span class="token punctuation">,</span>            priority<span class="token punctuation">,</span>            overrideWidth<span class="token punctuation">,</span>            overrideHeight<span class="token punctuation">,</span>            callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    BaseRequestOptions<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> thumbnailOptions <span class="token operator">=</span>        requestOptions<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sizeMultiplier</span><span class="token punctuation">(</span>thumbSizeMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>    Request thumbnailRequest <span class="token operator">=</span>        <span class="token function">obtainRequest</span><span class="token punctuation">(</span>            requestLock<span class="token punctuation">,</span>            target<span class="token punctuation">,</span>            targetListener<span class="token punctuation">,</span>            thumbnailOptions<span class="token punctuation">,</span>            coordinator<span class="token punctuation">,</span>            transitionOptions<span class="token punctuation">,</span>            <span class="token function">getThumbnailPriority</span><span class="token punctuation">(</span>priority<span class="token punctuation">)</span><span class="token punctuation">,</span>            overrideWidth<span class="token punctuation">,</span>            overrideHeight<span class="token punctuation">,</span>            callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    coordinator<span class="token punctuation">.</span><span class="token function">setRequests</span><span class="token punctuation">(</span>fullRequest<span class="token punctuation">,</span> thumbnailRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> coordinator<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Base case: no thumbnail.</span>    <span class="token keyword">return</span> <span class="token function">obtainRequest</span><span class="token punctuation">(</span>        requestLock<span class="token punctuation">,</span>        target<span class="token punctuation">,</span>        targetListener<span class="token punctuation">,</span>        requestOptions<span class="token punctuation">,</span>        parentCoordinator<span class="token punctuation">,</span>        transitionOptions<span class="token punctuation">,</span>        priority<span class="token punctuation">,</span>        overrideWidth<span class="token punctuation">,</span>        overrideHeight<span class="token punctuation">,</span>        callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> Request <span class="token function">obtainRequest</span><span class="token punctuation">(</span>    Object requestLock<span class="token punctuation">,</span>    Target<span class="token operator">&lt;</span>TranscodeType<span class="token operator">></span> target<span class="token punctuation">,</span>    RequestListener<span class="token operator">&lt;</span>TranscodeType<span class="token operator">></span> targetListener<span class="token punctuation">,</span>    BaseRequestOptions<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> requestOptions<span class="token punctuation">,</span>    RequestCoordinator requestCoordinator<span class="token punctuation">,</span>    TransitionOptions<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> TranscodeType<span class="token operator">></span> transitionOptions<span class="token punctuation">,</span>    Priority priority<span class="token punctuation">,</span>    <span class="token keyword">int</span> overrideWidth<span class="token punctuation">,</span>    <span class="token keyword">int</span> overrideHeight<span class="token punctuation">,</span>    Executor callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> SingleRequest<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>      context<span class="token punctuation">,</span>      glideContext<span class="token punctuation">,</span>      requestLock<span class="token punctuation">,</span>      model<span class="token punctuation">,</span>      transcodeClass<span class="token punctuation">,</span>      requestOptions<span class="token punctuation">,</span>      overrideWidth<span class="token punctuation">,</span>      overrideHeight<span class="token punctuation">,</span>      priority<span class="token punctuation">,</span>      target<span class="token punctuation">,</span>      targetListener<span class="token punctuation">,</span>      requestListeners<span class="token punctuation">,</span>      requestCoordinator<span class="token punctuation">,</span>      glideContext<span class="token punctuation">.</span><span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      transitionOptions<span class="token punctuation">.</span><span class="token function">getTransitionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到在第1行<code>buildRequest()</code>方法中调用了<code>buildRequestRecursive</code>方法（第19行），在该方法中，根据在<code>RequestBuilder</code>类对象中设置的<code>errorBuilder</code>（类型为RequestBuilder<TranscodeType>）来创建不同的<code>Request</code>对象，<code>buildThumbnailRequestRecursive</code>方法中判断是否存在缩略图来创建不同的<code>Request</code>对象（创建一个拥有请求原图的<code>Request</code>对象和请求缩略图的<code>Request</code>对象的<code>ThumbnailRequestCoordinator</code>对象，或者只有单个请求的<code>SingleRequest</code>对象），最终都是执行了<code>Request</code>对象的<code>begin()</code>方法取请求图片资源；在上面的方法中可以看到，多次执行之后，最终大部分都<code>Request</code>对象中包含了<code>SingleRequest</code>对象，其中的<code>begin()</code>方法也是调用了<code>SingleRequest</code>对象中的<code>begin()</code>方法，接下来我们来看一下<code>SingleRequest</code>对象中的<code>begin()</code>方法；分析到现在为止，我们还没有看到请求图片资源的代码，所以猜想<code>SingleRequest</code>对象中的<code>begin()</code>方法接下来应该就是调起网络请求的方法。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>requestLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertNotCallingCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stateVerifier<span class="token punctuation">.</span><span class="token function">throwIfRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    startTime <span class="token operator">=</span> LogTime<span class="token punctuation">.</span><span class="token function">getLogTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>model <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Util<span class="token punctuation">.</span><span class="token function">isValidDimensions</span><span class="token punctuation">(</span>overrideWidth<span class="token punctuation">,</span> overrideHeight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        width <span class="token operator">=</span> overrideWidth<span class="token punctuation">;</span>        height <span class="token operator">=</span> overrideHeight<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">int</span> logLevel <span class="token operator">=</span> <span class="token function">getFallbackDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> Log<span class="token punctuation">.</span>WARN <span class="token operator">:</span> Log<span class="token punctuation">.</span>DEBUG<span class="token punctuation">;</span>      <span class="token function">onLoadFailed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GlideException</span><span class="token punctuation">(</span><span class="token string">"Received null model"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> Status<span class="token punctuation">.</span>RUNNING<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cannot restart a running request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> Status<span class="token punctuation">.</span>COMPLETE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">onResourceReady</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> DataSource<span class="token punctuation">.</span>MEMORY_CACHE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    status <span class="token operator">=</span> Status<span class="token punctuation">.</span>WAITING_FOR_SIZE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Util<span class="token punctuation">.</span><span class="token function">isValidDimensions</span><span class="token punctuation">(</span>overrideWidth<span class="token punctuation">,</span> overrideHeight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">onSizeReady</span><span class="token punctuation">(</span>overrideWidth<span class="token punctuation">,</span> overrideHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      target<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>status <span class="token operator">==</span> Status<span class="token punctuation">.</span>RUNNING <span class="token operator">||</span> status <span class="token operator">==</span> Status<span class="token punctuation">.</span>WAITING_FOR_SIZE<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">canNotifyStatusChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      target<span class="token punctuation">.</span><span class="token function">onLoadStarted</span><span class="token punctuation">(</span><span class="token function">getPlaceholderDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_VERBOSE_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">logV</span><span class="token punctuation">(</span><span class="token string">"finished run method in "</span> <span class="token operator">+</span> LogTime<span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onLoadFailed</span><span class="token punctuation">(</span>GlideException e<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLogLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stateVerifier<span class="token punctuation">.</span><span class="token function">throwIfRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>requestLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">setOrigin</span><span class="token punctuation">(</span>requestOrigin<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> logLevel <span class="token operator">=</span> glideContext<span class="token punctuation">.</span><span class="token function">getLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">&lt;=</span> maxLogLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>            GLIDE_TAG<span class="token punctuation">,</span> <span class="token string">"Load failed for "</span> <span class="token operator">+</span> model <span class="token operator">+</span> <span class="token string">" with size ["</span> <span class="token operator">+</span> width <span class="token operator">+</span> <span class="token string">"x"</span> <span class="token operator">+</span> height <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logLevel <span class="token operator">&lt;=</span> Log<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">logRootCauses</span><span class="token punctuation">(</span>GLIDE_TAG<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      loadStatus <span class="token operator">=</span> null<span class="token punctuation">;</span>      status <span class="token operator">=</span> Status<span class="token punctuation">.</span>FAILED<span class="token punctuation">;</span>      isCallingCallbacks <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: what if this is a thumbnail request?</span>        <span class="token keyword">boolean</span> anyListenerHandledUpdatingTarget <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestListeners <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span>RequestListener<span class="token operator">&lt;</span>R<span class="token operator">></span> listener <span class="token operator">:</span> requestListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>            anyListenerHandledUpdatingTarget <span class="token operator">|=</span>                listener<span class="token punctuation">.</span><span class="token function">onLoadFailed</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> model<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token function">isFirstReadyResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        anyListenerHandledUpdatingTarget <span class="token operator">|=</span>            targetListener <span class="token operator">!=</span> null                <span class="token operator">&amp;&amp;</span> targetListener<span class="token punctuation">.</span><span class="token function">onLoadFailed</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> model<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token function">isFirstReadyResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>anyListenerHandledUpdatingTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">setErrorPlaceholder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        isCallingCallbacks <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">notifyLoadFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setErrorPlaceholder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canNotifyStatusChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Drawable error <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>model <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      error <span class="token operator">=</span> <span class="token function">getFallbackDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Either the model isn't null, or there was no fallback drawable set.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      error <span class="token operator">=</span> <span class="token function">getErrorDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// The model isn't null, no fallback drawable was set or no error drawable was set.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      error <span class="token operator">=</span> <span class="token function">getPlaceholderDrawable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    target<span class="token punctuation">.</span><span class="token function">onLoadFailed</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>可以看到在这个方法里，<code>stateVerifier.throwIfRecycled()</code>,中判断了生命周期，如果没销毁，则抛出异常。</p><p>然后判断了<code>model == null</code>，这里的model就是我们之前传入的图片资源（图片地址），为空的时候，则不需要加载，直接执行<code>onLoadFailed</code>方法，在<code>onLoadFailed</code>方法中则是判断加载的监听器是否处理了<code>onLoadFailed</code>事件，如果没有处理，则设置加载错误的占位图片（第73行），最终则执行target的<code>target.onLoadFailed(error);</code>回调方法将错误占位图显示出来</p><p>当model不为空，继续向下执行，判断了当前状态是否在运行中(第17行)，如果是，抛出异常，如果不是，继续判读状态是否已完成，如果已完成，则执行<code>onResourceReady</code>回调方法（第22行），这个方法我们稍后在看，如果状态不是已完成状态，则继续向下执行，判断宽度和高度是否有效（&gt;0或者为自适应），如果有效执行<code>onSizeReady</code>方法，如果无效，则执行<code>target.getSize(this);</code>方法，重新获取宽度和高度，<code>target.getSize(this)</code>是ViewTarget中的方法，在该方法中获取了当前target的宽度和高度，获取有效宽度和高度之后，回调继续执行<code>onSizeReady</code>方法。这里的cb就是在<code>target.getSize(this);</code>方法中传递过来的this，也就是<code>SingleRequest</code>类对象</p><blockquote><p><code>target.getSize(this)</code> 方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> SizeReadyCallback cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> currentWidth <span class="token operator">=</span> <span class="token function">getTargetWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> currentHeight <span class="token operator">=</span> <span class="token function">getTargetHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isViewStateAndSizeValid</span><span class="token punctuation">(</span>currentWidth<span class="token punctuation">,</span> currentHeight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cb<span class="token punctuation">.</span><span class="token function">onSizeReady</span><span class="token punctuation">(</span>currentWidth<span class="token punctuation">,</span> currentHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// We want to notify callbacks in the order they were added and we only expect one or two</span>  <span class="token comment" spellcheck="true">// callbacks to be added a time, so a List is a reasonable choice.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cbs<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cbs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutListener <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ViewTreeObserver observer <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    layoutListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SizeDeterminerLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    observer<span class="token punctuation">.</span><span class="token function">addOnPreDrawListener</span><span class="token punctuation">(</span>layoutListener<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到<code>target.getSize(this)</code>最终还是执行了<code>onSizeReady</code>方法，接下来我们看一下在<code>onSizeReady</code>方法中做了什么</p><blockquote><p><code>SingleRequest</code>类对象中的<code>onSizeReady</code>方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSizeReady</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>  stateVerifier<span class="token punctuation">.</span><span class="token function">throwIfRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>requestLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_VERBOSE_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">logV</span><span class="token punctuation">(</span><span class="token string">"Got onSizeReady in "</span> <span class="token operator">+</span> LogTime<span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> Status<span class="token punctuation">.</span>WAITING_FOR_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    status <span class="token operator">=</span> Status<span class="token punctuation">.</span>RUNNING<span class="token punctuation">;</span>    <span class="token keyword">float</span> sizeMultiplier <span class="token operator">=</span> requestOptions<span class="token punctuation">.</span><span class="token function">getSizeMultiplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token function">maybeApplySizeMultiplier</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> sizeMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token function">maybeApplySizeMultiplier</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> sizeMultiplier<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_VERBOSE_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">logV</span><span class="token punctuation">(</span><span class="token string">"finished setup for calling load in "</span> <span class="token operator">+</span> LogTime<span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    loadStatus <span class="token operator">=</span>        engine<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>            glideContext<span class="token punctuation">,</span>            model<span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getResourceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transcodeClass<span class="token punctuation">,</span>            priority<span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getDiskCacheStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getTransformations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">isTransformationRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">isScaleOnlyOrNoTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">isMemoryCacheable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getUseUnlimitedSourceGeneratorsPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getUseAnimationPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            requestOptions<span class="token punctuation">.</span><span class="token function">getOnlyRetrieveFromCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">,</span>            callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// This is a hack that's only useful for testing right now where loads complete synchronously</span>    <span class="token comment" spellcheck="true">// even though under any executor running on any thread but the main thread, the load would</span>    <span class="token comment" spellcheck="true">// have completed asynchronously.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> Status<span class="token punctuation">.</span>RUNNING<span class="token punctuation">)</span> <span class="token punctuation">{</span>      loadStatus <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>IS_VERBOSE_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">logV</span><span class="token punctuation">(</span><span class="token string">"finished onSizeReady in "</span> <span class="token operator">+</span> LogTime<span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，在第20行，调用了<code>engine.load</code>方法，传入了很多的参数，大部分都是根图片相关的倒数第二款参数this，可前面一样，也是<code>ResourceCallback</code>类型的，用于回调；接下来进入到<code>engine.load</code>方法看一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>R<span class="token operator">></span> LoadStatus <span class="token function">load</span><span class="token punctuation">(</span>    GlideContext glideContext<span class="token punctuation">,</span>    Object model<span class="token punctuation">,</span>    Key signature<span class="token punctuation">,</span>    <span class="token keyword">int</span> width<span class="token punctuation">,</span>    <span class="token keyword">int</span> height<span class="token punctuation">,</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resourceClass<span class="token punctuation">,</span>    Class<span class="token operator">&lt;</span>R<span class="token operator">></span> transcodeClass<span class="token punctuation">,</span>    Priority priority<span class="token punctuation">,</span>    DiskCacheStrategy diskCacheStrategy<span class="token punctuation">,</span>    Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Transformation<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> transformations<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> isTransformationRequired<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> isScaleOnlyOrNoTransform<span class="token punctuation">,</span>    Options options<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> isMemoryCacheable<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> useUnlimitedSourceExecutorPool<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> useAnimationPool<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> onlyRetrieveFromCache<span class="token punctuation">,</span>    ResourceCallback cb<span class="token punctuation">,</span>    Executor callbackExecutor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">long</span> startTime <span class="token operator">=</span> VERBOSE_IS_LOGGABLE <span class="token operator">?</span> LogTime<span class="token punctuation">.</span><span class="token function">getLogTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  EngineKey key <span class="token operator">=</span>      keyFactory<span class="token punctuation">.</span><span class="token function">buildKey</span><span class="token punctuation">(</span>          model<span class="token punctuation">,</span>          signature<span class="token punctuation">,</span>          width<span class="token punctuation">,</span>          height<span class="token punctuation">,</span>          transformations<span class="token punctuation">,</span>          resourceClass<span class="token punctuation">,</span>          transcodeClass<span class="token punctuation">,</span>          options<span class="token punctuation">)</span><span class="token punctuation">;</span>  EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> memoryResource<span class="token punctuation">;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    memoryResource <span class="token operator">=</span> <span class="token function">loadFromMemory</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> isMemoryCacheable<span class="token punctuation">,</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>memoryResource <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">waitForExistingOrStartNewJob</span><span class="token punctuation">(</span>          glideContext<span class="token punctuation">,</span>          model<span class="token punctuation">,</span>          signature<span class="token punctuation">,</span>          width<span class="token punctuation">,</span>          height<span class="token punctuation">,</span>          resourceClass<span class="token punctuation">,</span>          transcodeClass<span class="token punctuation">,</span>          priority<span class="token punctuation">,</span>          diskCacheStrategy<span class="token punctuation">,</span>          transformations<span class="token punctuation">,</span>          isTransformationRequired<span class="token punctuation">,</span>          isScaleOnlyOrNoTransform<span class="token punctuation">,</span>          options<span class="token punctuation">,</span>          isMemoryCacheable<span class="token punctuation">,</span>          useUnlimitedSourceExecutorPool<span class="token punctuation">,</span>          useAnimationPool<span class="token punctuation">,</span>          onlyRetrieveFromCache<span class="token punctuation">,</span>          cb<span class="token punctuation">,</span>          callbackExecutor<span class="token punctuation">,</span>          key<span class="token punctuation">,</span>          startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Avoid calling back while holding the engine lock, doing so makes it easier for callers to</span>  <span class="token comment" spellcheck="true">// deadlock.</span>  cb<span class="token punctuation">.</span><span class="token function">onResourceReady</span><span class="token punctuation">(</span>memoryResource<span class="token punctuation">,</span> DataSource<span class="token punctuation">.</span>MEMORY_CACHE<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadFromMemory</span><span class="token punctuation">(</span>      EngineKey key<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isMemoryCacheable<span class="token punctuation">,</span> <span class="token keyword">long</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isMemoryCacheable<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> active <span class="token operator">=</span> <span class="token function">loadFromActiveResources</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>active <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE_IS_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">logWithTimeAndKey</span><span class="token punctuation">(</span><span class="token string">"Loaded resource from active resources"</span><span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> active<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cached <span class="token operator">=</span> <span class="token function">loadFromCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE_IS_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">logWithTimeAndKey</span><span class="token punctuation">(</span><span class="token string">"Loaded resource from cache"</span><span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> cached<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">logWithTimeAndKey</span><span class="token punctuation">(</span>String log<span class="token punctuation">,</span> <span class="token keyword">long</span> startTime<span class="token punctuation">,</span> Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> log <span class="token operator">+</span> <span class="token string">" in "</span> <span class="token operator">+</span> LogTime<span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms, key: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Nullable</span>  <span class="token keyword">private</span> EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadFromActiveResources</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> active <span class="token operator">=</span> activeResources<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>active <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      active<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> active<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">loadFromCache</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cached <span class="token operator">=</span> <span class="token function">getEngineResourceFromCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      cached<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      activeResources<span class="token punctuation">.</span><span class="token function">activate</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> cached<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cached<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">private</span> EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getEngineResourceFromCache</span><span class="token punctuation">(</span>Key key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Resource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cached <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token keyword">instanceof</span> <span class="token class-name">EngineResource</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Save an object allocation if we've cached an EngineResource (the typical case).</span>      result <span class="token operator">=</span> <span class="token punctuation">(</span>EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> cached<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span>          <span class="token keyword">new</span> <span class="token class-name">EngineResource</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>              cached<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/*isMemoryCacheable=*/</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/*isRecyclable=*/</span> <span class="token boolean">true</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/*listener=*/</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>在<code>engine.load</code>方法中，可以看到，第23行，根据传入的请求地址，宽度和高度，签名等其他请求参数，生成了一个<code>EngineKey</code>对象key，这个对象就是用了标识每一个请求，不难想到，如果参数全部相同，则生成的key对象也相同；在第36行中，看到执行了<code>loadFromMemory</code>方法，在该方法中先是通过<code>loadFromActiveResources</code>方法，从内存中查找是否有对象key 的缓存资源，如果有返回；如果没有，则通过<code>loadFromCache</code>方法从缓存中查找是否有对象key的缓存资源，在<code>getEngineResourceFromCache</code>方法中，通过<code>cache.remove(key)</code>方法来获取到一个缓存对象，这里的<code>cahce</code>对象就是<code>LruResourceCache</code>的类对象，是通过<code>LruResourceCache</code>的类对象来缓存资源。</p><p>看完了获取缓存的方法之后，我们回过头来继续看加载的方法，第38行，当获取的缓存为空时，返回了<code>waitForExistingOrStartNewJob</code>方法的结果，我们来看一下<code>waitForExistingOrStartNewJob</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token operator">&lt;</span>R<span class="token operator">></span> LoadStatus <span class="token function">waitForExistingOrStartNewJob</span><span class="token punctuation">(</span>    GlideContext glideContext<span class="token punctuation">,</span>    Object model<span class="token punctuation">,</span>    Key signature<span class="token punctuation">,</span>    <span class="token keyword">int</span> width<span class="token punctuation">,</span>    <span class="token keyword">int</span> height<span class="token punctuation">,</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resourceClass<span class="token punctuation">,</span>    Class<span class="token operator">&lt;</span>R<span class="token operator">></span> transcodeClass<span class="token punctuation">,</span>    Priority priority<span class="token punctuation">,</span>    DiskCacheStrategy diskCacheStrategy<span class="token punctuation">,</span>    Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Transformation<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> transformations<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> isTransformationRequired<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> isScaleOnlyOrNoTransform<span class="token punctuation">,</span>    Options options<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> isMemoryCacheable<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> useUnlimitedSourceExecutorPool<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> useAnimationPool<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> onlyRetrieveFromCache<span class="token punctuation">,</span>    ResourceCallback cb<span class="token punctuation">,</span>    Executor callbackExecutor<span class="token punctuation">,</span>    EngineKey key<span class="token punctuation">,</span>    <span class="token keyword">long</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>  EngineJob<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> current <span class="token operator">=</span> jobs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> onlyRetrieveFromCache<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    current<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE_IS_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">logWithTimeAndKey</span><span class="token punctuation">(</span><span class="token string">"Added to existing load"</span><span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadStatus</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  EngineJob<span class="token operator">&lt;</span>R<span class="token operator">></span> engineJob <span class="token operator">=</span>      engineJobFactory<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>          key<span class="token punctuation">,</span>          isMemoryCacheable<span class="token punctuation">,</span>          useUnlimitedSourceExecutorPool<span class="token punctuation">,</span>          useAnimationPool<span class="token punctuation">,</span>          onlyRetrieveFromCache<span class="token punctuation">)</span><span class="token punctuation">;</span>  DecodeJob<span class="token operator">&lt;</span>R<span class="token operator">></span> decodeJob <span class="token operator">=</span>      decodeJobFactory<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>          glideContext<span class="token punctuation">,</span>          model<span class="token punctuation">,</span>          key<span class="token punctuation">,</span>          signature<span class="token punctuation">,</span>          width<span class="token punctuation">,</span>          height<span class="token punctuation">,</span>          resourceClass<span class="token punctuation">,</span>          transcodeClass<span class="token punctuation">,</span>          priority<span class="token punctuation">,</span>          diskCacheStrategy<span class="token punctuation">,</span>          transformations<span class="token punctuation">,</span>          isTransformationRequired<span class="token punctuation">,</span>          isScaleOnlyOrNoTransform<span class="token punctuation">,</span>          onlyRetrieveFromCache<span class="token punctuation">,</span>          options<span class="token punctuation">,</span>          engineJob<span class="token punctuation">)</span><span class="token punctuation">;</span>  jobs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> engineJob<span class="token punctuation">)</span><span class="token punctuation">;</span>  engineJob<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> callbackExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>  engineJob<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>decodeJob<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>VERBOSE_IS_LOGGABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">logWithTimeAndKey</span><span class="token punctuation">(</span><span class="token string">"Started new load"</span><span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadStatus</span><span class="token punctuation">(</span>cb<span class="token punctuation">,</span> engineJob<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>前面看了<code>load</code>方法中，已经从缓存中取了资源，没有取到，在执行该方法，可想而知，真正的网络请求，则是在该方法中执行的；看到在第24行中，通过jobs对象获取了<code>EngineJob</code>对象current，如果有取到，则说明有正在请求的对象，将回调加入到当前对象中，返回当前请求状态；如果没有取到，则创建一个<code>engineJob</code>对象和一个<code>decodeJob</code>对象；然后为该请求对象添加回调接口对象，并且传入<code>decodeJob</code>进行启动加载（第63行）；看下<code>engineJob.start</code>方法.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span>DecodeJob<span class="token operator">&lt;</span>R<span class="token operator">></span> decodeJob<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>decodeJob <span class="token operator">=</span> decodeJob<span class="token punctuation">;</span>  GlideExecutor executor <span class="token operator">=</span>      decodeJob<span class="token punctuation">.</span><span class="token function">willDecodeFromCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> diskCacheExecutor <span class="token operator">:</span> <span class="token function">getActiveSourceExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>decodeJob<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在该方法中根据<code>decodeJob.willDecodeFromCache()</code>获取到了一个<code>GlideExecutor</code>对象，该对象实现了<code>ExecutorService</code>接口类，是一个用了处理请求任务的线程池，在看一下<code>executor.execute(decodeJob)</code>方法需要传入一个<code>Runnable</code>对象，然后我吗回去看<code>DecodeJob</code>类是实现了<code>Runnable</code>接口，所以可以想到上面的<code>engineJob</code>对象是一个处理线程的线程池对象，真正的请求工作是在<code>decodeJob</code>对象的<code>run</code>方法中执行。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  GlideTrace<span class="token punctuation">.</span><span class="token function">beginSectionFormat</span><span class="token punctuation">(</span><span class="token string">"DecodeJob#run(model=%s)"</span><span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">;</span>  DataFetcher<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> localFetcher <span class="token operator">=</span> currentFetcher<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isCancelled<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">notifyFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">runWrapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CallbackException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Log<span class="token punctuation">.</span><span class="token function">isLoggable</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> Log<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>          TAG<span class="token punctuation">,</span>          <span class="token string">"DecodeJob threw unexpectedly"</span> <span class="token operator">+</span> <span class="token string">", isCancelled: "</span> <span class="token operator">+</span> isCancelled <span class="token operator">+</span> <span class="token string">", stage: "</span> <span class="token operator">+</span> stage<span class="token punctuation">,</span>          t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stage <span class="token operator">!=</span> Stage<span class="token punctuation">.</span>ENCODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      throwables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">notifyFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isCancelled<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> t<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localFetcher <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      localFetcher<span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    GlideTrace<span class="token punctuation">.</span><span class="token function">endSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">runWrapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>runReason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> INITIALIZE<span class="token operator">:</span>      stage <span class="token operator">=</span> <span class="token function">getNextStage</span><span class="token punctuation">(</span>Stage<span class="token punctuation">.</span>INITIALIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>      currentGenerator <span class="token operator">=</span> <span class="token function">getNextGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">runGenerators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> SWITCH_TO_SOURCE_SERVICE<span class="token operator">:</span>      <span class="token function">runGenerators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> DECODE_DATA<span class="token operator">:</span>      <span class="token function">decodeFromRetrievedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unrecognized run reason: "</span> <span class="token operator">+</span> runReason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> DataFetcherGenerator <span class="token function">getNextGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>stage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> RESOURCE_CACHE<span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResourceCacheGenerator</span><span class="token punctuation">(</span>decodeHelper<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> DATA_CACHE<span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataCacheGenerator</span><span class="token punctuation">(</span>decodeHelper<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> SOURCE<span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SourceGenerator</span><span class="token punctuation">(</span>decodeHelper<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FINISHED<span class="token operator">:</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unrecognized stage: "</span> <span class="token operator">+</span> stage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">runGenerators</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  currentThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  startFetchTime <span class="token operator">=</span> LogTime<span class="token punctuation">.</span><span class="token function">getLogTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> isStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>isCancelled      <span class="token operator">&amp;&amp;</span> currentGenerator <span class="token operator">!=</span> null      <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>isStarted <span class="token operator">=</span> currentGenerator<span class="token punctuation">.</span><span class="token function">startNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    stage <span class="token operator">=</span> <span class="token function">getNextStage</span><span class="token punctuation">(</span>stage<span class="token punctuation">)</span><span class="token punctuation">;</span>    currentGenerator <span class="token operator">=</span> <span class="token function">getNextGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stage <span class="token operator">==</span> Stage<span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">reschedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stage <span class="token operator">==</span> Stage<span class="token punctuation">.</span>FINISHED <span class="token operator">||</span> isCancelled<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isStarted<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">notifyFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，在<code>run</code>方法中，除了一些判断和释放资源的操作，主要是执行了<code>runWrapped()</code>方法；在<code>runWrapped()</code>方法中，根据不同的<code>runReason</code>,执行了<code>getNextGenerator()</code>和<code>runGenerators()</code>方法，<code>getNextGenerator()</code>方法根据不同的stage生成不同的<code>DataFetcherGenerator</code>对象赋值给<code>currentGenerator</code>；在<code>runGenerators()</code>方法中，循环调用了http请求，来请求图片数据，调用方法为<code>currentGenerator.startNext()</code>，在<code>startNext</code>方法中可以看到<code>loadData.fetcher.loadData()</code>方法来获取图片数据</p><blockquote><p>ResourceCacheGenerator类下的startNext()；第61行</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>Key<span class="token operator">></span> sourceIds <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getCacheKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceIds<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> resourceClasses <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getRegisteredResourceClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceClasses<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>File<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getTranscodeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>        <span class="token string">"Failed to find any load path from "</span>            <span class="token operator">+</span> helper<span class="token punctuation">.</span><span class="token function">getModelClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token string">" to "</span>            <span class="token operator">+</span> helper<span class="token punctuation">.</span><span class="token function">getTranscodeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>modelLoaders <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">hasNextModelLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    resourceClassIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceClassIndex <span class="token operator">>=</span> resourceClasses<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      sourceIdIndex<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceIdIndex <span class="token operator">>=</span> sourceIds<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      resourceClassIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Key sourceId <span class="token operator">=</span> sourceIds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sourceIdIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resourceClass <span class="token operator">=</span> resourceClasses<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resourceClassIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    Transformation<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> transformation <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getTransformation</span><span class="token punctuation">(</span>resourceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// PMD.AvoidInstantiatingObjectsInLoops Each iteration is comparatively expensive anyway,</span>    <span class="token comment" spellcheck="true">// we only run until the first one succeeds, the loop runs for only a limited</span>    <span class="token comment" spellcheck="true">// number of iterations on the order of 10-20 in the worst case.</span>    currentKey <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ResourceCacheKey</span><span class="token punctuation">(</span> <span class="token comment" spellcheck="true">// NOPMD AvoidInstantiatingObjectsInLoops</span>            helper<span class="token punctuation">.</span><span class="token function">getArrayPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            sourceId<span class="token punctuation">,</span>            helper<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            helper<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            helper<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            transformation<span class="token punctuation">,</span>            resourceClass<span class="token punctuation">,</span>            helper<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cacheFile <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getDiskCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheFile <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      sourceKey <span class="token operator">=</span> sourceId<span class="token punctuation">;</span>      modelLoaders <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getModelLoaders</span><span class="token punctuation">(</span>cacheFile<span class="token punctuation">)</span><span class="token punctuation">;</span>      modelLoaderIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  loadData <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>started <span class="token operator">&amp;&amp;</span> <span class="token function">hasNextModelLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ModelLoader<span class="token operator">&lt;</span>File<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> modelLoader <span class="token operator">=</span> modelLoaders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>modelLoaderIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loadData <span class="token operator">=</span>        modelLoader<span class="token punctuation">.</span><span class="token function">buildLoadData</span><span class="token punctuation">(</span>            cacheFile<span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadData <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> helper<span class="token punctuation">.</span><span class="token function">hasLoadPath</span><span class="token punctuation">(</span>loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">getDataClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> started<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>DataCacheGenerator类下的startNext()；第31行</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>modelLoaders <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">hasNextModelLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sourceIdIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceIdIndex <span class="token operator">>=</span> cacheKeys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Key sourceId <span class="token operator">=</span> cacheKeys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sourceIdIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// PMD.AvoidInstantiatingObjectsInLoops The loop iterates a limited number of times</span>    <span class="token comment" spellcheck="true">// and the actions it performs are much more expensive than a single allocation.</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"PMD.AvoidInstantiatingObjectsInLoops"</span><span class="token punctuation">)</span>    Key originalKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataCacheKey</span><span class="token punctuation">(</span>sourceId<span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cacheFile <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getDiskCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>originalKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheFile <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>sourceKey <span class="token operator">=</span> sourceId<span class="token punctuation">;</span>      modelLoaders <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getModelLoaders</span><span class="token punctuation">(</span>cacheFile<span class="token punctuation">)</span><span class="token punctuation">;</span>      modelLoaderIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  loadData <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>started <span class="token operator">&amp;&amp;</span> <span class="token function">hasNextModelLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ModelLoader<span class="token operator">&lt;</span>File<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> modelLoader <span class="token operator">=</span> modelLoaders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>modelLoaderIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    loadData <span class="token operator">=</span>        modelLoader<span class="token punctuation">.</span><span class="token function">buildLoadData</span><span class="token punctuation">(</span>            cacheFile<span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadData <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> helper<span class="token punctuation">.</span><span class="token function">hasLoadPath</span><span class="token punctuation">(</span>loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">getDataClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> started<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>SourceGenerator类下的startNext()；第29行</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>dataToCache <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object data <span class="token operator">=</span> dataToCache<span class="token punctuation">;</span>    dataToCache <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token function">cacheData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceCacheGenerator <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> sourceCacheGenerator<span class="token punctuation">.</span><span class="token function">startNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  sourceCacheGenerator <span class="token operator">=</span> null<span class="token punctuation">;</span>  loadData <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>started <span class="token operator">&amp;&amp;</span> <span class="token function">hasNextModelLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    loadData <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>loadDataListIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadData <span class="token operator">!=</span> null        <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getDiskCacheStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDataCacheable</span><span class="token punctuation">(</span>loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">||</span> helper<span class="token punctuation">.</span><span class="token function">hasLoadPath</span><span class="token punctuation">(</span>loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">getDataClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token function">startNextLoad</span><span class="token punctuation">(</span>loadData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> started<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startNextLoad</span><span class="token punctuation">(</span><span class="token keyword">final</span> LoadData<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> toStart<span class="token punctuation">)</span> <span class="token punctuation">{</span>  loadData<span class="token punctuation">.</span>fetcher<span class="token punctuation">.</span><span class="token function">loadData</span><span class="token punctuation">(</span>      helper<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token keyword">new</span> <span class="token class-name">DataCallback</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDataReady</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCurrentRequest</span><span class="token punctuation">(</span>toStart<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onDataReadyInternal</span><span class="token punctuation">(</span>toStart<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadFailed</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCurrentRequest</span><span class="token punctuation">(</span>toStart<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onLoadFailedInternal</span><span class="token punctuation">(</span>toStart<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>loadData.fetcher.loadData()</code>方法中就是用了请求图片数据的，有很多实现类，下面取<code>HttpUrlFetcher</code>类的<code>loadData()</code>方法粘下代码看一下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadData</span><span class="token punctuation">(</span>    <span class="token annotation punctuation">@NonNull</span> Priority priority<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> DataCallback<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> InputStream<span class="token operator">></span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">long</span> startTime <span class="token operator">=</span> LogTime<span class="token punctuation">.</span><span class="token function">getLogTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    InputStream result <span class="token operator">=</span> <span class="token function">loadDataWithRedirects</span><span class="token punctuation">(</span>glideUrl<span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> glideUrl<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    callback<span class="token punctuation">.</span><span class="token function">onDataReady</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Log<span class="token punctuation">.</span><span class="token function">isLoggable</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> Log<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to load data for url"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    callback<span class="token punctuation">.</span><span class="token function">onLoadFailed</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Log<span class="token punctuation">.</span><span class="token function">isLoggable</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> Log<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Finished http url fetcher fetch in "</span> <span class="token operator">+</span> LogTime<span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> InputStream <span class="token function">loadDataWithRedirects</span><span class="token punctuation">(</span>    URL url<span class="token punctuation">,</span> <span class="token keyword">int</span> redirects<span class="token punctuation">,</span> URL lastUrl<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headers<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>redirects <span class="token operator">>=</span> MAXIMUM_REDIRECTS<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span><span class="token string">"Too many (> "</span> <span class="token operator">+</span> MAXIMUM_REDIRECTS <span class="token operator">+</span> <span class="token string">") redirects!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Comparing the URLs using .equals performs additional network I/O and is generally broken.</span>    <span class="token comment" spellcheck="true">// See http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html.</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>lastUrl <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lastUrl<span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span><span class="token string">"In re-direct loop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">URISyntaxException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Do nothing, this is best effort.</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  urlConnection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headerEntry <span class="token operator">:</span> headers<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    urlConnection<span class="token punctuation">.</span><span class="token function">addRequestProperty</span><span class="token punctuation">(</span>headerEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headerEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  urlConnection<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  urlConnection<span class="token punctuation">.</span><span class="token function">setReadTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  urlConnection<span class="token punctuation">.</span><span class="token function">setUseCaches</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  urlConnection<span class="token punctuation">.</span><span class="token function">setDoInput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Stop the urlConnection instance of HttpUrlConnection from following redirects so that</span>  <span class="token comment" spellcheck="true">// redirects will be handled by recursive calls to this method, loadDataWithRedirects.</span>  urlConnection<span class="token punctuation">.</span><span class="token function">setInstanceFollowRedirects</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Connect explicitly to avoid errors in decoders if connection fails.</span>  urlConnection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Set the stream so that it's closed in cleanup to avoid resource leaks. See #2352.</span>  stream <span class="token operator">=</span> urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isCancelled<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> statusCode <span class="token operator">=</span> urlConnection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isHttpOk</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getStreamForSuccessfulRequest</span><span class="token punctuation">(</span>urlConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isHttpRedirect</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String redirectUrlString <span class="token operator">=</span> urlConnection<span class="token punctuation">.</span><span class="token function">getHeaderField</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TextUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>redirectUrlString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span><span class="token string">"Received empty or null redirect url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    URL redirectUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> redirectUrlString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Closing the stream specifically is required to avoid leaking ResponseBodys in addition</span>    <span class="token comment" spellcheck="true">// to disconnecting the url connection below. See #2352.</span>    <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">loadDataWithRedirects</span><span class="token punctuation">(</span>redirectUrl<span class="token punctuation">,</span> redirects <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>statusCode <span class="token operator">==</span> INVALID_STATUS_CODE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HttpException</span><span class="token punctuation">(</span>urlConnection<span class="token punctuation">.</span><span class="token function">getResponseMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在<code>loadDataWithRedirects</code>方法中可以看到网络请求的操作，之后返回请求的数据流；到这里就拿到请求的数据了，然后应该回显到target上</p><p>可以看到在请求的回调方法<code>onDataReady</code>中，调用回调函数<code>cb.onDataFetcherReady()</code>回调到<code>DecodeJob</code>对象中</p><blockquote><p><code>DecodeJob</code>对象中的 <code>onDataFetcherReady()</code>方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDataFetcherReady</span><span class="token punctuation">(</span>    Key sourceKey<span class="token punctuation">,</span> Object data<span class="token punctuation">,</span> DataFetcher<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> fetcher<span class="token punctuation">,</span> DataSource dataSource<span class="token punctuation">,</span> Key attemptedKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentSourceKey <span class="token operator">=</span> sourceKey<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentData <span class="token operator">=</span> data<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentFetcher <span class="token operator">=</span> fetcher<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentDataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currentAttemptingKey <span class="token operator">=</span> attemptedKey<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> currentThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>    runReason <span class="token operator">=</span> RunReason<span class="token punctuation">.</span>DECODE_DATA<span class="token punctuation">;</span>    callback<span class="token punctuation">.</span><span class="token function">reschedule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    GlideTrace<span class="token punctuation">.</span><span class="token function">beginSection</span><span class="token punctuation">(</span><span class="token string">"DecodeJob.decodeFromRetrievedData"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token function">decodeFromRetrievedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      GlideTrace<span class="token punctuation">.</span><span class="token function">endSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDataFetcherFailed</span><span class="token punctuation">(</span>    Key attemptedKey<span class="token punctuation">,</span> Exception e<span class="token punctuation">,</span> DataFetcher<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> fetcher<span class="token punctuation">,</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>  fetcher<span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  GlideException exception <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlideException</span><span class="token punctuation">(</span><span class="token string">"Fetching data failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  exception<span class="token punctuation">.</span><span class="token function">setLoggingDetails</span><span class="token punctuation">(</span>attemptedKey<span class="token punctuation">,</span> dataSource<span class="token punctuation">,</span> fetcher<span class="token punctuation">.</span><span class="token function">getDataClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  throwables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> currentThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>    runReason <span class="token operator">=</span> RunReason<span class="token punctuation">.</span>SWITCH_TO_SOURCE_SERVICE<span class="token punctuation">;</span>    callback<span class="token punctuation">.</span><span class="token function">reschedule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">runGenerators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">decodeFromRetrievedData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Log<span class="token punctuation">.</span><span class="token function">isLoggable</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> Log<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">logWithTimeAndKey</span><span class="token punctuation">(</span>        <span class="token string">"Retrieved data"</span><span class="token punctuation">,</span>        startFetchTime<span class="token punctuation">,</span>        <span class="token string">"data: "</span>            <span class="token operator">+</span> currentData            <span class="token operator">+</span> <span class="token string">", cache key: "</span>            <span class="token operator">+</span> currentSourceKey            <span class="token operator">+</span> <span class="token string">", fetcher: "</span>            <span class="token operator">+</span> currentFetcher<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Resource<span class="token operator">&lt;</span>R<span class="token operator">></span> resource <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    resource <span class="token operator">=</span> <span class="token function">decodeFromData</span><span class="token punctuation">(</span>currentFetcher<span class="token punctuation">,</span> currentData<span class="token punctuation">,</span> currentDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">GlideException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">setLoggingDetails</span><span class="token punctuation">(</span>currentAttemptingKey<span class="token punctuation">,</span> currentDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    throwables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">notifyEncodeAndRelease</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> currentDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">runGenerators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notifyEncodeAndRelease</span><span class="token punctuation">(</span>Resource<span class="token operator">&lt;</span>R<span class="token operator">></span> resource<span class="token punctuation">,</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token keyword">instanceof</span> <span class="token class-name">Initializable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>Initializable<span class="token punctuation">)</span> resource<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Resource<span class="token operator">&lt;</span>R<span class="token operator">></span> result <span class="token operator">=</span> resource<span class="token punctuation">;</span>  LockedResource<span class="token operator">&lt;</span>R<span class="token operator">></span> lockedResource <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>deferredEncodeManager<span class="token punctuation">.</span><span class="token function">hasResourceToEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lockedResource <span class="token operator">=</span> LockedResource<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> lockedResource<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">notifyComplete</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  stage <span class="token operator">=</span> Stage<span class="token punctuation">.</span>ENCODE<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>deferredEncodeManager<span class="token punctuation">.</span><span class="token function">hasResourceToEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      deferredEncodeManager<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>diskCacheProvider<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lockedResource <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      lockedResource<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Call onEncodeComplete outside the finally block so that it's not called if the encode process</span>  <span class="token comment" spellcheck="true">// throws.</span>  <span class="token function">onEncodeComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">notifyComplete</span><span class="token punctuation">(</span>Resource<span class="token operator">&lt;</span>R<span class="token operator">></span> resource<span class="token punctuation">,</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setNotifiedOrThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    callback<span class="token punctuation">.</span><span class="token function">onResourceReady</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>在<code>onDataFetcherReady</code>方法中调用<code>decodeFromRetrievedData();</code>方法进行解码图片数据，成功拿到解码后的图片资源数据之后，调用<code>notifyEncodeAndRelease</code>方法将<code>Resource&lt;R&gt;</code>对象封装成<code>LockedResource</code>对象，并调用<code>notifyComplete(result, dataSource);</code>方法，在<code>notifyComplete(result, dataSource);</code>方法中通过<code>callback.onResourceReady(resource, dataSource)</code>将资源数据回调到<code>EngineJob&lt;R&gt;</code>对象中的<code>onResourceReady</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span>Resource<span class="token operator">&lt;</span>R<span class="token operator">></span> resource<span class="token punctuation">,</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">=</span> resource<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">notifyCallbacksOfResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadFailed</span><span class="token punctuation">(</span>GlideException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>exception <span class="token operator">=</span> e<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">notifyCallbacksOfException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">notifyCallbacksOfResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ResourceCallbacksAndExecutors copy<span class="token punctuation">;</span>    Key localKey<span class="token punctuation">;</span>    EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> localResource<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stateVerifier<span class="token punctuation">.</span><span class="token function">throwIfRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isCancelled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        resource<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cbs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Received a resource without any callbacks to notify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hasResource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Already have resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      engineResource <span class="token operator">=</span> engineResourceFactory<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> isCacheable<span class="token punctuation">,</span> key<span class="token punctuation">,</span> resourceListener<span class="token punctuation">)</span><span class="token punctuation">;</span>      hasResource <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      copy <span class="token operator">=</span> cbs<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">incrementPendingCallbacks</span><span class="token punctuation">(</span>copy<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      localKey <span class="token operator">=</span> key<span class="token punctuation">;</span>      localResource <span class="token operator">=</span> engineResource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    engineJobListener<span class="token punctuation">.</span><span class="token function">onEngineJobComplete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> localKey<span class="token punctuation">,</span> localResource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> ResourceCallbackAndExecutor entry <span class="token operator">:</span> copy<span class="token punctuation">)</span> <span class="token punctuation">{</span>      entry<span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CallResourceReady</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">decrementPendingCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"WeakerAccess"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Synthetic</span>  <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">incrementPendingCallbacks</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Preconditions<span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Not yet complete!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingCallbacks<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> engineResource <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      engineResource<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"WeakerAccess"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Synthetic</span>  <span class="token keyword">void</span> <span class="token function">decrementPendingCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    EngineResource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> toRelease <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stateVerifier<span class="token punctuation">.</span><span class="token function">throwIfRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Preconditions<span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Not yet complete!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> decremented <span class="token operator">=</span> pendingCallbacks<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Preconditions<span class="token punctuation">.</span><span class="token function">checkArgument</span><span class="token punctuation">(</span>decremented <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Can't decrement below 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>decremented <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        toRelease <span class="token operator">=</span> engineResource<span class="token punctuation">;</span>        <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>toRelease <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      toRelease<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>在<code>EngineJob&lt;R&gt;</code>对象中的<code>onResourceReady</code>方法中通过第45行执行<code>CallResourceReady</code>这个<code>Runnable</code>的实现类，</p><p><code>CallResourceReady</code>实现类如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">CallResourceReady</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> ResourceCallback cb<span class="token punctuation">;</span>  <span class="token function">CallResourceReady</span><span class="token punctuation">(</span>ResourceCallback cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Make sure we always acquire the request lock, then the EngineJob lock to avoid deadlock</span>    <span class="token comment" spellcheck="true">// (b/136032534).</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>EngineJob<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cbs<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Acquire for this particular callback.</span>          engineResource<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">callCallbackOnResourceReady</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">removeCallback</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">decrementPendingCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个实现类中的run方法里，调用了<code>EngineJob&lt;R&gt;</code>对象的<code>callCallbackOnResourceReady</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"WeakerAccess"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Synthetic</span><span class="token annotation punctuation">@GuardedBy</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">callCallbackOnResourceReady</span><span class="token punctuation">(</span>ResourceCallback cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// This is overly broad, some Glide code is actually called here, but it's much</span>    <span class="token comment" spellcheck="true">// simpler to encapsulate here than to do so at the actual call point in the</span>    <span class="token comment" spellcheck="true">// Request implementation.</span>    cb<span class="token punctuation">.</span><span class="token function">onResourceReady</span><span class="token punctuation">(</span>engineResource<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CallbackException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个方法中通过<code>ResourceCallback</code>回调接口类的<code>onResourceReady</code>回调到<code>SingleRequest</code>对象中</p><p>再贴一下<code>SingleRequest</code>对象中的代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span>Resource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resource<span class="token punctuation">,</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>  stateVerifier<span class="token punctuation">.</span><span class="token function">throwIfRecycled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Resource<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> toRelease <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>requestLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>      loadStatus <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GlideException exception <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">GlideException</span><span class="token punctuation">(</span>                <span class="token string">"Expected to receive a Resource&lt;R> with an "</span>                    <span class="token operator">+</span> <span class="token string">"object of "</span>                    <span class="token operator">+</span> transcodeClass                    <span class="token operator">+</span> <span class="token string">" inside, but instead got null."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onLoadFailed</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Object received <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>received <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>transcodeClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>received<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        toRelease <span class="token operator">=</span> resource<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">=</span> null<span class="token punctuation">;</span>        GlideException exception <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">GlideException</span><span class="token punctuation">(</span>                <span class="token string">"Expected to receive an object of "</span>                    <span class="token operator">+</span> transcodeClass                    <span class="token operator">+</span> <span class="token string">" but instead"</span>                    <span class="token operator">+</span> <span class="token string">" got "</span>                    <span class="token operator">+</span> <span class="token punctuation">(</span>received <span class="token operator">!=</span> null <span class="token operator">?</span> received<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">"{"</span>                    <span class="token operator">+</span> received                    <span class="token operator">+</span> <span class="token string">"} inside"</span>                    <span class="token operator">+</span> <span class="token string">" "</span>                    <span class="token operator">+</span> <span class="token string">"Resource{"</span>                    <span class="token operator">+</span> resource                    <span class="token operator">+</span> <span class="token string">"}."</span>                    <span class="token operator">+</span> <span class="token punctuation">(</span>received <span class="token operator">!=</span> null                        <span class="token operator">?</span> <span class="token string">""</span>                        <span class="token operator">:</span> <span class="token string">" "</span>                            <span class="token operator">+</span> <span class="token string">"To indicate failure return a null Resource "</span>                            <span class="token operator">+</span> <span class="token string">"object, rather than a Resource object containing null data."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">onLoadFailed</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canSetResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        toRelease <span class="token operator">=</span> resource<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// We can't put the status to complete before asking canSetResource().</span>        status <span class="token operator">=</span> Status<span class="token punctuation">.</span>COMPLETE<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">onResourceReady</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Resource<span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">)</span> resource<span class="token punctuation">,</span> <span class="token punctuation">(</span>R<span class="token punctuation">)</span> received<span class="token punctuation">,</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>toRelease <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      engine<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>toRelease<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Internal {@link #onResourceReady(Resource, DataSource)} where arguments are known to be safe. * * @param resource original {@link Resource}, never &lt;code>null&lt;/code> * @param result object returned by {@link Resource#get()}, checked for type and never &lt;code>null *     &lt;/code> */</span><span class="token annotation punctuation">@GuardedBy</span><span class="token punctuation">(</span><span class="token string">"requestLock"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span>Resource<span class="token operator">&lt;</span>R<span class="token operator">></span> resource<span class="token punctuation">,</span> R result<span class="token punctuation">,</span> DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// We must call isFirstReadyResource before setting status.</span>  <span class="token keyword">boolean</span> isFirstResource <span class="token operator">=</span> <span class="token function">isFirstReadyResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  status <span class="token operator">=</span> Status<span class="token punctuation">.</span>COMPLETE<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>resource <span class="token operator">=</span> resource<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>glideContext<span class="token punctuation">.</span><span class="token function">getLogLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Log<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>        GLIDE_TAG<span class="token punctuation">,</span>        <span class="token string">"Finished loading "</span>            <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token string">" from "</span>            <span class="token operator">+</span> dataSource            <span class="token operator">+</span> <span class="token string">" for "</span>            <span class="token operator">+</span> model            <span class="token operator">+</span> <span class="token string">" with size ["</span>            <span class="token operator">+</span> width            <span class="token operator">+</span> <span class="token string">"x"</span>            <span class="token operator">+</span> height            <span class="token operator">+</span> <span class="token string">"] in "</span>            <span class="token operator">+</span> LogTime<span class="token punctuation">.</span><span class="token function">getElapsedMillis</span><span class="token punctuation">(</span>startTime<span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  isCallingCallbacks <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> anyListenerHandledUpdatingTarget <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestListeners <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>RequestListener<span class="token operator">&lt;</span>R<span class="token operator">></span> listener <span class="token operator">:</span> requestListeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>        anyListenerHandledUpdatingTarget <span class="token operator">|=</span>            listener<span class="token punctuation">.</span><span class="token function">onResourceReady</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> model<span class="token punctuation">,</span> target<span class="token punctuation">,</span> dataSource<span class="token punctuation">,</span> isFirstResource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    anyListenerHandledUpdatingTarget <span class="token operator">|=</span>        targetListener <span class="token operator">!=</span> null            <span class="token operator">&amp;&amp;</span> targetListener<span class="token punctuation">.</span><span class="token function">onResourceReady</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> model<span class="token punctuation">,</span> target<span class="token punctuation">,</span> dataSource<span class="token punctuation">,</span> isFirstResource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>anyListenerHandledUpdatingTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Transition<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token operator">></span> animation <span class="token operator">=</span> animationFactory<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> isFirstResource<span class="token punctuation">)</span><span class="token punctuation">;</span>      target<span class="token punctuation">.</span><span class="token function">onResourceReady</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> animation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    isCallingCallbacks <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">notifyLoadSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** A callback method that should never be invoked directly. */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLoadFailed</span><span class="token punctuation">(</span>GlideException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">onLoadFailed</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> Log<span class="token punctuation">.</span>WARN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这里方法里通过<code>target.onResourceReady</code>回调方法，将请求到数图片数据显示到目标view上。</p><p>至此，Glide加载的原理浅析就完成了，望共勉！</p>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> glide </tag>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OneActionBar 通用标题头</title>
      <link href="/20190825/android-ndk/oneactionbar-shi-xian-tong-yong-actionbar/"/>
      <url>/20190825/android-ndk/oneactionbar-shi-xian-tong-yong-actionbar/</url>
      
        <content type="html"><![CDATA[<h1 id="OneActionBar-使用说明"><a href="#OneActionBar-使用说明" class="headerlink" title="OneActionBar 使用说明"></a><a href="https://github.com/onestravel/OneActionBar" target="_blank" rel="noopener">OneActionBar</a> 使用说明</h1><p><a href="/en/Android+NDK/OneActionBar%20实现通用ActionBar_en">English Document</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>自定义ActionBar，支持属性，java代码方式配置，可实现标题，标题带返回键，搜索，搜索带返回键的ActionBar；配置简单，方便使用，可适应大多数场景。</strong></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="images/20190825/image-20190915194738463.png" alt="效果图"></p><ol><li>标准标题头，背景透明 <code>style=&quot;@style/OneActionBar.Normal&quot;</code></li><li>标准标题头，蓝色背景 <code>style=&quot;@style/OneActionBar.Normal.Blue&quot;</code></li><li>带返回键标题头，透明背景 <code>style=&quot;@style/OneActionBar.Back&quot;</code></li><li>带返回键标题头，蓝色背景 <code>style=&quot;@style/OneActionBar.Back.Blue&quot;</code></li><li>带搜索框标题头，透明背景 <code>style=&quot;@style/OneActionBar.Search&quot;</code></li><li>带搜索框标题头，蓝色背景 ``style=”@style/OneActionBar.Search.Blue”</li><li>搜索框带返回键标题头，透明背景 <code>style=&quot;@style/OneActionBar.Back.Search&quot;</code></li><li>搜索框带返回键标题头，蓝色背景 <code>style=&quot;@style/OneActionBar.Back.Search.Blue&quot;</code></li></ol><h2 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h2><p>TAG:     <a href="https://jitpack.io/#onestravel/OneActionBar" target="_blank" rel="noopener"><img src="https://jitpack.io/v/onestravel/OneActionBar.svg" alt=""></a></p><h4 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h4><ul><li>在项目中的根目录下的 build.gradle (与model同级的) 中增加如下配置</li></ul><pre><code>    allprojects {        repositories {            ...            maven { url &#39;https://jitpack.io&#39; }        }    }</code></pre><ul><li>在model 中的build.gradle 中增加依赖</li></ul><pre><code>dependencies {    implementation &#39;com.github.onestravel:OneActionBar:TAG&#39;}</code></pre><h2 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h2><table><thead><tr><th>属性名</th><th>字段说明</th><th>示例</th></tr></thead><tbody><tr><td>app:barBackColor</td><td>ActionBar 返回键颜色，图标和字体的颜色</td><td>app:barBackColor=”#000000”</td></tr><tr><td>app:barBackIconWidth</td><td>ActionBar 返回键图标的宽度</td><td>app:barBackIconWidth=”25dp”</td></tr><tr><td>app:barBackIconHeight</td><td>ActionBar 返回键图标的高度</td><td>app:barBackIconHeight=”25dp”</td></tr><tr><td>app:barBackText</td><td>ActionBar 返回键文字</td><td>app:barBackText=”返回”</td></tr><tr><td>app:barBackTextSize</td><td>ActionBar 返回键文字大小</td><td>app:barBackTextSize=”13sp”</td></tr><tr><td>app:barTitle</td><td>ActionBar 标题文字</td><td>app:barTitle=”首页”</td></tr><tr><td>app:barTitleColor</td><td>ActionBar 标题文字颜色</td><td>app:barTitleColor=”#000000”</td></tr><tr><td>app:barTitleSize</td><td>ActionBar 标题文字大小</td><td>app:barTitleSize=”22sp”</td></tr><tr><td>app:barType</td><td>ActionBar 样式，总共有四种样式：TYPE_NORMAL(普通样式)、TYPE_BACK(普通带返回键样式)、TYPE_SEARCH(搜索样式)、TYPE_BACK_SEARCH(带返回键搜索样式)、</td><td>app:barType=”TYPE_NORMAL”</td></tr><tr><td>app:barActionBtnColor</td><td>ActionBar 标题右侧操作按钮图标/文字颜色</td><td>app:barActionBtnColor=”#FF0000”</td></tr><tr><td>app:barActionBtnText</td><td>ActionBar 标题右侧操作按钮文字</td><td>app:barActionBtnText=”下一步”</td></tr><tr><td>app:barActionBtnTextSize</td><td>ActionBar 标题右侧操作按钮文字大小</td><td>app:barActionBtnTextSize=”15sp”</td></tr><tr><td>app:barBottomLineWidth</td><td>ActionBar 底部分割线的宽度</td><td>app:barBottomLineWidth=”1dp”</td></tr><tr><td>app:barBottomLineColor</td><td>ActionBar 底部分割线的颜色</td><td>app:barBottomLineColor=”#1a1a1a”</td></tr><tr><td>app:barActionBtnIcon</td><td>ActionBar 标题右侧操作按钮icon</td><td>app:barActionBtnIcon=”@drawable/icon_next”</td></tr><tr><td>app:barActionBtnIconWidth</td><td>ActionBar 标题右侧操作按钮宽度</td><td>app:barActionBtnIconWidth=”25dp”</td></tr><tr><td>app:barActionBtnIconHeight</td><td>ActionBar 标题右侧操作按钮高度</td><td>app:barActionBtnIconHeight=”25dp”</td></tr><tr><td>app:barSearchBackground</td><td>ActionBar 搜索样式背景</td><td>app:barSearchBackground=”#FFFFFF”</td></tr><tr><td>app:barSearchHint</td><td>ActionBar 搜索样式搜索框提示文字</td><td>app:barSearchHint=”请输入搜索内容”</td></tr><tr><td>app:barSearchText</td><td>ActionBar 搜索样式搜索框文字</td><td>app:barSearchText=”今日新闻”</td></tr><tr><td>app:barSearchHintColor</td><td>ActionBar 搜索样式搜索框提示文字颜色</td><td>app:barSearchHintColor=”#E1E1E1”</td></tr><tr><td>app:barSearchTextColor</td><td>ActionBar 搜索样式搜索框文字颜色</td><td>app:barSearchTextColor=”#000000”</td></tr><tr><td>app:barSearchTextSize</td><td>ActionBar 搜索样式搜索框文字大小</td><td>app:barSearchTextSize=”20sp”</td></tr><tr><td>android:background</td><td>ActionBar 背景颜色</td><td>android:background=”#FFFFFF”</td></tr></tbody></table><h2 id="样式说明"><a href="#样式说明" class="headerlink" title="样式说明"></a>样式说明</h2><p>根据图片效果，先自定义样式说明如下</p><p>注：标号对应图片效果数字号码</p><ol><li>标准标题头，背景透明 <code>style=&quot;@style/OneActionBar.Normal&quot;</code></li><li>标准标题头，蓝色背景 <code>style=&quot;@style/OneActionBar.Normal.Blue&quot;</code></li><li>带返回键标题头，透明背景 <code>style=&quot;@style/OneActionBar.Back&quot;</code></li><li>带返回键标题头，蓝色背景 <code>style=&quot;@style/OneActionBar.Back.Blue&quot;</code></li><li>带搜索框标题头，透明背景 <code>style=&quot;@style/OneActionBar.Search&quot;</code></li><li>带搜索框标题头，蓝色背景 ``style=”@style/OneActionBar.Search.Blue”</li><li>搜索框带返回键标题头，透明背景 <code>style=&quot;@style/OneActionBar.Back.Search&quot;</code></li><li>搜索框带返回键标题头，蓝色背景 <code>style=&quot;@style/OneActionBar.Back.Search.Blue&quot;</code></li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>1、布局xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cn.onestravel.one.actionbar.OneActionBar</span><span class="token style-attr language-css"><span class="token attr-name">        <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">@style/OneActionBar<span class="token number">.</span>Back<span class="token number">.</span>Blue</span><span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>barActionBtnText</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>下一步<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">app:</span>barTitle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>调查问卷<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>2、样式</p><pre class=" language-Xml"><code class="language-Xml"><style name="OneActionBar.Back">              <item name="barTitleSize">22sp</item>        <item name="barActionBtnTextSize">16sp</item>        <item name="barType">TYPE_BACK</item>        <item name="barBackTextSize">14sp</item>        <item name="barBackText">返回</item></style><style name="OneActionBar.Back.Blue" parent="OneActionBar.Back">    <item name="android:background">#0080ff</item>    <item name="barBackColor">@android:color/white</item>    <item name="barTitleColor">@android:color/white</item>    <item name="barActionBtnColor">@android:color/white</item></style></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> one-extend-lib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【FFmpeg】(二) 视频解码、像素格式转换与Native原生绘制</title>
      <link href="/20190401/android-ndk/ffmpeg-er-shi-pin-jie-ma-xiang-su-ge-shi-zhuan-huan-yu-native-yuan-sheng-hui-zhi/"/>
      <url>/20190401/android-ndk/ffmpeg-er-shi-pin-jie-ma-xiang-su-ge-shi-zhuan-huan-yu-native-yuan-sheng-hui-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="视频解码、像素格式转换与Native原生绘制"><a href="#视频解码、像素格式转换与Native原生绘制" class="headerlink" title="视频解码、像素格式转换与Native原生绘制"></a>视频解码、像素格式转换与Native原生绘制</h1><h2 id="一、视频解码"><a href="#一、视频解码" class="headerlink" title="一、视频解码"></a>一、视频解码</h2><h3 id="1、FFmpeg-库简介"><a href="#1、FFmpeg-库简介" class="headerlink" title="1、FFmpeg 库简介"></a>1、FFmpeg 库简介</h3><p><strong>FFmpeg 一共包含8个库</strong></p><ul><li><strong>avcodec</strong>：编解码（最重要的库）</li><li><strong>avformat</strong>：封装格式处理</li><li><strong>avfilter</strong>：滤镜特效处理</li><li><strong>avdevice</strong>：各自设备的输入输出</li><li><strong>avutil</strong>：工具库（大部分库都需要这个库的支持）</li><li><strong>postproc</strong>：后加工</li><li><strong>swresample</strong>：音频采样数据格式转换</li><li><strong>swscale</strong>：视频像素数据格式转换</li></ul><h3 id="2、FFmpeg-解码的流程图"><a href="#2、FFmpeg-解码的流程图" class="headerlink" title="2、FFmpeg 解码的流程图"></a>2、FFmpeg 解码的流程图</h3><p>/<img src="/images/20190401/ffmpeg_decode.png" alt="FFmpeg 解码的流程图"></p><h3 id="3、FFmpeg-数据格式简介"><a href="#3、FFmpeg-数据格式简介" class="headerlink" title="3、FFmpeg 数据格式简介"></a>3、FFmpeg 数据格式简介</h3><ul><li><strong>AVFormatContext</strong>：封装格式上下文结构体，也是统领全局的结构体，保存了视频文件封装格式相关信息</li><li><strong>AVInputFormat</strong>：每种封装格式（例如FLV、MKV、MP4、AVI）对应一个该结构体。</li><li><strong>AVStream</strong>：视频文件中每个视频（音频）流对应一个该结构体</li><li><strong>AVCodeContext</strong>：编解码器上下文结构体，保存了视频（音频）编解码相关信息。</li><li><strong>AVCodec</strong>：每种视频（音频）编解码器（例如H.264解码器）对应一个该结构体</li><li><strong>AVPacket</strong>：存储一帧压缩编码数据</li><li><strong>AVFrame</strong>：存储一帧解码后的像素（采样）数据</li></ul><h2 id="二、像素格式转换"><a href="#二、像素格式转换" class="headerlink" title="二、像素格式转换"></a>二、像素格式转换</h2><p><strong>像素格式转换就是将yuv420p 的转成ARGB,可以使用 C/C++ 库 libyuv 来进行转换</strong></p><h3 id="I420ToARGB"><a href="#I420ToARGB" class="headerlink" title="I420ToARGB"></a>I420ToARGB</h3><p><strong>参数按顺序如下：</strong><br>参数 | 类型　| 说明<br>— | — | —<br>src_y|  uint8_t*  | 来源的frame的 y 帧数据 yuv_frame-&gt;data<br>src_stride_y|  int  | 来源的frame的y大小数据 yuv_frame-&gt;linesize<br>src_u|  uint8_t*  | 来源的frame的 u 帧数据yuv_frame-&gt;data<br>src_stride_u|  int  | 来源的frame的u大小数据 yuv_frame-&gt;linesize<br>src_v|  uint8_t*  | 来源的frame的 v 帧数据yuv_frame-&gt;data<br>src_stride_v|  int | 来源的frame的v大小数据 yuv_frame-&gt;linesize<br>dst_argb|  uint8_t*  | 转换后的 rgb 的frame数据<br>dst_stride_argb|  int  | 转换后的 rgb 的frame的大小数据<br>width|  int  | 像素数据宽度<br>height|  int  | 像素数据高度</p><h2 id="三、Native-原生绘制"><a href="#三、Native-原生绘制" class="headerlink" title="三、Native 原生绘制"></a>三、Native 原生绘制</h2><p><strong>Native 原生绘制是使用ANativeWindow 将surface 和 缓冲区buffer绑定，进而去更新缓冲区的数据，并刷新到 surface 就可以实现原生绘制</strong></p><h3 id="1、获取ANativeWindow指针-定义缓冲区"><a href="#1、获取ANativeWindow指针-定义缓冲区" class="headerlink" title="1、获取ANativeWindow指针,定义缓冲区"></a>1、获取ANativeWindow指针,定义缓冲区</h3><pre><code>    //Native 绘制    ANativeWindow *nativeWindow = ANativeWindow_fromSurface(env, surface);    //缓冲区buffer    ANativeWindow_Buffer windowBuffer;</code></pre><h3 id="2、设置缓冲区参数"><a href="#2、设置缓冲区参数" class="headerlink" title="2、设置缓冲区参数"></a>2、设置缓冲区参数</h3><pre><code>//设置缓冲区参数ANativeWindow_setBuffersGeometry(nativeWindow, avCodecContext-&gt;width,                                             avCodecContext-&gt;height, WINDOW_FORMAT_RGBA_8888);</code></pre><h3 id="3、刷新数据到缓冲区"><a href="#3、刷新数据到缓冲区" class="headerlink" title="3、刷新数据到缓冲区"></a>3、刷新数据到缓冲区</h3><ul><li>对缓冲区进行加锁</li><li>刷新转换后的数据到缓冲区</li><li>对缓冲区数据进行解锁</li></ul><pre><code>//LOCKANativeWindow_lock(nativeWindo&amp;windowBuffer, NULLavpicture_fill((AVPicture rgba_frame, windowBuffer.bitPIX_FMT_RGBA,            avCodecContext-&gt;width,            avCodecContext-&gt;height//fix bufferI420ToARGB(        yuv_frame-&gt;data[0yuv_frame-&gt;linesize[0],        yuv_frame-&gt;data[2yuv_frame-&gt;linesize[2],        yuv_frame-&gt;data[1yuv_frame-&gt;linesize[1],        rgba_frame-&gt;data[0rgba_frame-&gt;linesize[0],        avCodecContext-&gt;widtavCodecContext-&gt;height//UNLOCKANativeWindow_unlockAndPost(natiindow);</code></pre><h3 id="4、释放nativeWindow"><a href="#4、释放nativeWindow" class="headerlink" title="4、释放nativeWindow"></a>4、释放nativeWindow</h3><pre><code>ANativeWindow_release(nativeWindow);</code></pre><h2 id="四、使用FFmpeg实现native原生绘制，显示视频图像"><a href="#四、使用FFmpeg实现native原生绘制，显示视频图像" class="headerlink" title="四、使用FFmpeg实现native原生绘制，显示视频图像"></a>四、使用FFmpeg实现native原生绘制，显示视频图像</h2><p><strong>之前说明了Android Studio 使用 CMake 来配置FFmpeg 的方法，这里就省略项目配置与Java代码部分，主要来实现C/C++代码部分,将像素数据会知道 Surface 上</strong></p><pre><code>#include &quot;cn_onestravel_ndk_ffmpeg_render_VideoPlayer.h&quot;#include &lt;android/log.h&gt;#include &lt;unistd.h&gt;//编码#include &quot;include/libavcodec/avcodec.h&quot;//封装格式处理#include &quot;include/libavformat/avformat.h&quot;//像素处理#include &quot;include/libswscale/swscale.h&quot;#include &quot;include/libavutil/avutil.h&quot;#include &quot;include/libavutil/frame.h&quot;#include &lt;android/native_window.h&gt;#include &lt;android/native_window_jni.h&gt;#include &lt;libyuv.h&gt;#include &lt;pthread.h&gt;#define LOGI(FORMAT, ...) __android_log_print(ANDROID_LOG_INFO,&quot;FFMPEG&quot;,FORMAT,##__VA_ARGS__);#define LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,&quot;FFMPEG&quot;,FORMAT,##__VA_ARGS__);/* * Class:     cn_onestravel_ndk_ffmpeg_render_VideoPlayer * Method:    render * Signature: (Ljava/lang/String;Landroid/view/Surface;)V */JNIEXPORT void JNICALL Java_cn_onestravel_ndk_ffmpeg_render_VideoPlayer_render        (JNIEnv *env, jclass jcls, jstring jstr_input, jobject surface) {    const char *cstr_input = (*env)-&gt;GetStringUTFChars(env, jstr_input, NULL);    //注册ffmpeg 所有组件    av_register_all();    //封装格式上下文    AVFormatContext *formatContext = avformat_alloc_context();    //打开输入视频文件    if (avformat_open_input(&amp;formatContext, cstr_input, NULL, NULL) != 0) {        LOGE(&quot;无法打开视频文件&quot;);        return;    }    //获取视频文件信息    if (avformat_find_stream_info(formatContext, NULL) &lt; 0) {        LOGE(&quot;获取视频文件信息失败&quot;);        return;    }    //获取视频流的索引位置    //遍历所有类型的流（音频流，视频流、字幕流）    int i = 0;    int v_stream_index = -1;    for (; i &lt; formatContext-&gt;nb_streams; i++) {        if (formatContext-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO) {            v_stream_index = i;            break;        }    }    if (v_stream_index &lt; 0) {        LOGE(&quot;%s&quot;, &quot;找不到视频流\n&quot;);        return;    }    //获取视频流中的编解码的上下文    AVCodecContext *avCodecContext = formatContext-&gt;streams[v_stream_index]-&gt;codec;    //根据视频编解码上下文的id得到对应的编解码器    AVCodec *avCodec = avcodec_find_decoder(avCodecContext-&gt;codec_id);    if (avCodec == NULL) {        LOGE(&quot;未找到解码器&quot;);        return;    }    //打开解码器    if (avcodec_open2(avCodecContext, avCodec, NULL) &lt; 0) {        LOGE(&quot;打开解码器失败&quot;);        return;    }    //输出视频信息    LOGI(&quot;视频文件格式：%s&quot;, formatContext-&gt;iformat-&gt;name);    //formatContext-&gt;duration单位为微妙    LOGI(&quot;视频时长：%lld&quot;, (formatContext-&gt;duration) / 1000000);    LOGI(&quot;视频的宽度和高度 W：%d ,H：%d&quot;, avCodecContext-&gt;width, avCodecContext-&gt;height);    LOGI(&quot;视频解码器名称：%s&quot;, avCodec-&gt;name);    //准备读取    //AVPacket用于存储一帧一帧的压缩数据（H264）    //缓冲区，开辟空间    AVPacket *packet = (AVPacket *) av_malloc(sizeof(AVPacket));    AVFrame *yuv_frame = av_frame_alloc();    AVFrame *yuv_scale_frame = av_frame_alloc();    AVFrame *rgba_frame = av_frame_alloc();    //Native 绘制    ANativeWindow *nativeWindow = ANativeWindow_fromSurface(env, surface);    //缓冲区buffer    ANativeWindow_Buffer windowBuffer;    int len, got_frame, frame_count = 0;    while (av_read_frame(formatContext, packet) &gt;= 0) {        len = avcodec_decode_video2(avCodecContext, yuv_frame, &amp;got_frame, packet);        //不为0,正在解码        if (got_frame) {            int i = frame_count++;            LOGI(&quot;解码%d帧&quot;, i);            ANativeWindow_setBuffersGeometry(nativeWindow, avCodecContext-&gt;width,                                             avCodecContext-&gt;height, WINDOW_FORMAT_RGBA_8888);            //LOCK            ANativeWindow_lock(nativeWindow, &amp;windowBuffer, NULL);            avpicture_fill((AVPicture *) rgba_frame, windowBuffer.bits, PIX_FMT_RGBA,                           avCodecContext-&gt;width,                           avCodecContext-&gt;height);            //fix buffer            I420ToARGB(                    yuv_frame-&gt;data[0], yuv_frame-&gt;linesize[0],                    yuv_frame-&gt;data[2], yuv_frame-&gt;linesize[2],                    yuv_frame-&gt;data[1], yuv_frame-&gt;linesize[1],                    rgba_frame-&gt;data[0], rgba_frame-&gt;linesize[0],                    avCodecContext-&gt;width, avCodecContext-&gt;height);            //UNLOCK            ANativeWindow_unlockAndPost(nativeWindow);//            ANativeWindow_release(nativeWindow);            usleep(16 * 1000);        }        av_free_packet(packet);    }    ANativeWindow_release(nativeWindow);    av_frame_free(yuv_frame);    av_frame_free(rgba_frame);    avcodec_close(avCodec);    avcodec_free_context(avCodecContext);    avformat_free_context(formatContext);    (*env)-&gt;ReleaseStringUTFChars(env, jstr_input, cstr_input);}</code></pre><p><strong>自定义 VideoView 继承自 SurfaceView</strong></p><pre><code>public class VideoView extends SurfaceView {    public VideoView(Context context) {        super(context);        init();    }    public VideoView(Context context, AttributeSet attrs) {        super(context, attrs);        init();    }    public VideoView(Context context, AttributeSet attrs, int defStyleAttr) {        super(context, attrs, defStyleAttr);        init();    }    public void init(){        //初始化SurfaceView的像素格式        SurfaceHolder holder = getHolder();        holder.setFormat(PixelFormat.RGBA_8888);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【FFmpeg】(一) 音视频相关基础知识以及FFmpeg介绍</title>
      <link href="/20190325/android-ndk/ffmpeg-yi-yin-shi-pin-xiang-guan-ji-chu-zhi-shi-yi-ji-ffmpeg-jie-shao-yu-bian-yi/"/>
      <url>/20190325/android-ndk/ffmpeg-yi-yin-shi-pin-xiang-guan-ji-chu-zhi-shi-yi-ji-ffmpeg-jie-shao-yu-bian-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="【FFmpeg】-一-音视频相关基础知识以及FFmpeg介绍"><a href="#【FFmpeg】-一-音视频相关基础知识以及FFmpeg介绍" class="headerlink" title="【FFmpeg】(一) 音视频相关基础知识以及FFmpeg介绍"></a>【FFmpeg】(一) 音视频相关基础知识以及FFmpeg介绍</h1><h2 id="一、音视频相关基础知识"><a href="#一、音视频相关基础知识" class="headerlink" title="一、音视频相关基础知识"></a>一、音视频相关基础知识</h2><h3 id="1、视频播放器原理"><a href="#1、视频播放器原理" class="headerlink" title="1、视频播放器原理"></a>1、视频播放器原理</h3><p><strong>视频播放器就是将一个封装的格式数据进行解封装，得到对应的音频压缩数据和视频压缩数据，再进行相应的音视频解码，得到音频采样数据和视频采样数据，最后将音频采样数据和视频采样数据同时播放，达到音视频同步。</strong></p><ul><li><strong>封装格式数据通常有FLV、MKV、MP4、AVI、RMVB 等等</strong></li><li><strong>录音、录像的实质就是一个压缩采集到的图像或者音频数据的过程，这个过程又称为编码</strong></li><li><strong>播放视频或者音频文件，实质上是一个解压缩的过程，这个过程又称为解码</strong></li></ul><p><img src="/images/20190325/shipinyuanli.png" alt="视频播放器原理"></p><h4 id="1-1-解封装"><a href="#1-1-解封装" class="headerlink" title="1.1 解封装"></a>1.1 解封装</h4><p><strong>将封装格式的数据，分离成为音频流压缩编码数据和视频流压缩编码数据。封装格式种类很多，例如MP4，MKV，RMVB，TS，FLV，AVI等等，它的作用就是将已经压缩编码的视频数据和音频数据按照一定的格式放到一起，输出特定编码格式的视频码流和A音频码流。</strong></p><h4 id="1-2-解码"><a href="#1-2-解码" class="headerlink" title="1.2 解码"></a>1.2 解码</h4><h5 id="1-2-1-音频压缩数据解码"><a href="#1-2-1-音频压缩数据解码" class="headerlink" title="1.2.1 音频压缩数据解码"></a>1.2.1 音频压缩数据解码</h5><p><strong>一般我们常见的音频压缩编码标准包含AAC，MP3，AC-3，WMA 等等；通过解码将压缩编码的音频数据输出成为非压缩的音频采样数据，例如PCM数据</strong></p><ul><li><strong>AAC</strong>：数据由大小不固定的ADTS构成</li><li><strong>PCM</strong>：单声道的情况下按照顺序存储每个采样点的数据；双声道的情况下按照 “左右、左右”的顺序存储每个采样点两个声道的数据</li></ul><p><strong>采样率</strong>：也称为采样速度或者采样率，定义了每秒从连续信号中提取并组成离散信号的采样个数，它用赫兹（Hz）来表示。采样频率的倒数是采样周期或者叫作采样时间，它是采样之间的时间间隔。通俗的讲采样频率是指计算机每秒钟采集多少个信号样本。</p><h5 id="1-2-2-视频压缩数据解码"><a href="#1-2-2-视频压缩数据解码" class="headerlink" title="1.2.2 视频压缩数据解码"></a>1.2.2 视频压缩数据解码</h5><p><strong>一般我们常见的视频的压缩编码标准则包含H.264，MPEG2，VC-1等等；压缩编码的视频数据输出成为视频像素数据（非压缩的颜色数据），例如YUV(YUV420P,YUV422P,YUV444P;最常见为YUV420P)，RGB(RGB24,RGB32)等等。Y：亮度，U：色度，V：浓度</strong></p><ul><li><strong>H.264</strong>：数据由大学不固定的NALU构成，最常见情况下，1个NALU存储了1帧画面的压缩编码后的数据</li></ul><h4 id="1-3-音视频同步"><a href="#1-3-音视频同步" class="headerlink" title="1.3 音视频同步"></a>1.3 音视频同步</h4><p><strong>根据解封装模块过程中获取到的参数信息，同步解码得到的音频和视频数据，并将音频和视频数据送至系统的声卡和显卡播放出来。</strong></p><h2 id="二、FFmpeg-介绍"><a href="#二、FFmpeg-介绍" class="headerlink" title="二、FFmpeg 介绍"></a>二、FFmpeg 介绍</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p><strong>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。</strong></p><h3 id="2、FFmpeg-命令"><a href="#2、FFmpeg-命令" class="headerlink" title="2、FFmpeg 命令"></a>2、FFmpeg 命令</h3><h4 id="2-1-视频格式转换命令"><a href="#2-1-视频格式转换命令" class="headerlink" title="2.1 视频格式转换命令"></a>2.1 视频格式转换命令</h4><table><thead><tr><th>命令参数</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>源文件</td></tr><tr><td>-o</td><td>输出文件</td></tr><tr><td>```</td><td></td></tr><tr><td>//进入到FFmpeg 的 bin 目录下执行以下命令</td><td></td></tr><tr><td>ffmpeg -i d:\input.mp4 -o d:\output.avi</td><td></td></tr><tr><td>```</td><td></td></tr></tbody></table><h4 id="2-2-视频转-Gif-命令"><a href="#2-2-视频转-Gif-命令" class="headerlink" title="2.2 视频转 Gif 命令"></a>2.2 视频转 Gif 命令</h4><table><thead><tr><th>命令参数</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>源文件</td></tr><tr><td>-ss</td><td>从多少秒开始</td></tr><tr><td>-t</td><td>到多少秒介绍</td></tr><tr><td>-s</td><td>图像的尺寸大小</td></tr><tr><td>-b:v</td><td>码率</td></tr></tbody></table><pre><code>//进入到FFmpeg 的 bin 目录下执行以下命令ffmpeg -ss 5 -t 15 -i d:\\input.mp4 -s 300x200 -b:v 1500K D:\\video_gif.gif</code></pre><h2 id="三、使用-visual-studio-编译-FFmpeg"><a href="#三、使用-visual-studio-编译-FFmpeg" class="headerlink" title="三、使用 visual studio 编译 FFmpeg"></a>三、使用 visual studio 编译 FFmpeg</h2><p>*注：项目根目录即创建cpp源文件所在目录</p><p><strong>步骤</strong>：</p><ol><li>在<a href="http://ffmpeg.org/" target="_blank" rel="noopener">【FFmpeg官网】</a>下载 FFmpeg 在windows 下的开发(dev)版本 <a href="https://ffmpeg.zeranoe.com/builds/" target="_blank" rel="noopener">ffmpeg-XXX-win64-dev</a></li><li>在 visual studio上创建一个C++的空项目</li><li>将下载好的 FFmpeg 包解压后，复制 include 和 lib 文件夹到刚刚创建好的项目根路径下</li><li>下载 FFmpeg 在windows 下的 Shared 版本<a href="https://ffmpeg.zeranoe.com/builds/" target="_blank" rel="noopener">ffmpeg-XXX-win64-shared</a>,解压后赋值 bin 目录下的动态库(.dll)文件到项目根目录下</li><li>修改项目的配置管理器中的活动姐姐方案平台为X64(根据自己操作系统位数更改)</li><li>在 visual studio 中项目右键，点击【属性（ALT+Enter）】,选中【C++目录】，右侧的【包含目录】，点击编辑，增加刚刚复制到根目录下的 include 目录</li></ol><p><img src="/images/20190325/c++_include.png" alt="包含目录"></p><ol start="7"><li>点击【属性】中的【链接器】，在右侧选中【附加库目录】，点击编辑，增加刚刚复制到根目录下的 lib 目录</li></ol><p><img src="/images/20190325/lianjie_lib.png" alt="附加库目录"></p><ol start="8"><li>点击【属性】中的【链接器】下的【输入】，在右侧选中【附加依赖库】，点击编辑，增加刚刚复制到根目录下的 lib 目录下所有的 .lib 文件</li></ol><pre><code>avcodec.libavdevice.libavfilter.libavformat.libavutil.libpostproc.libswresample.libswscale.lib</code></pre><p><img src="/images/20190325/fujiayilai_lib.png" alt="附加库目录"></p><ol start="9"><li>在项目中添加一个.cpp的源文件，如：my_ffmpeg.cpp</li></ol><pre><code>#include &lt;stdlib.h&gt;#include &lt;stdio.h&gt;//C和C++混编，指示编译器按照C语言进行编译extern &quot;C&quot;{//引入ffmpeg的头文件#include &quot;libavcodec/avcodec.h&quot;};void main() {    //输出 ffmpeg 的配置    printf(&quot;%s\n&quot;,avcodec_configuration());    getchar();}</code></pre><h2 id="四、使用-Linux主机-编译-FFmpeg"><a href="#四、使用-Linux主机-编译-FFmpeg" class="headerlink" title="四、使用 Linux主机 编译 FFmpeg"></a>四、使用 Linux主机 编译 FFmpeg</h2><h3 id="1、编译前准备"><a href="#1、编译前准备" class="headerlink" title="1、编译前准备"></a>1、编译前准备</h3><ul><li>阿里云主机(Ubuntu/centos)</li><li>客户端主机安装XShell，Xftp</li></ul><h3 id="2、编译"><a href="#2、编译" class="headerlink" title="2、编译"></a>2、编译</h3><ul><li>使用Xftp将NDK、FFmpeg 上传到阿里云主机</li><li>安装vim 编辑器</li></ul><pre><code>$ apt-get update$ sudo apt-get install vim-gtk</code></pre><ul><li>NDK 安装，配置环境变量</li></ul><pre><code>//给文件授权可执行$ chmod 777 -R android-ndk-r10e-linux-x86_64.bin//执行文件$ ./android-ndk-r10e-linux-x86_64.bin//配置环境变量$ vim ~/.bashrc//增加环境变量export NDKROOT=/home/study/ndk/android-ndk-r10eexport PATH=$NDKROOT:$PATH$ source ~/.bashrc//查看ndk版本号$ ndk-build -v</code></pre><ul><li>解压 FFmpeg </li></ul><pre><code>$ tar -xzvf ffmpeg-4.1.2.tar.gz </code></pre><ul><li>编译 FFmpeg ,实现 Shell 脚本文件android_build.sh</li></ul><pre><code>#!/bin/bashmake cleanexport NDK=/home/study/ndk/android-ndk-r10eexport SYSROOT=$NDK/platforms/android-9/arch-arm/export TOOLCHAIN=$NDK/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86_64export CPU=armexport PREFIX=$(pwd)/android/$CPUexport ADDI_CFLAGS=&quot;-marm&quot;./configure --target-os=linux \--prefix=$PREFIX --arch=arm \--disable-doc \--enable-shared \--disable-static \--disable-yasm \--disable-symver \--enable-gpl \--disable-ffmpeg \--disable-ffplay \--disable-ffprobe \--disable-ffserver \--disable-doc \--disable-symver \--cross-prefix=$TOOLCHAIN/bin/arm-linux-androideabi- \--enable-cross-compile \--sysroot=$SYSROOT \--extra-cflags=&quot;-Os -fpic $ADDI_CFLAGS&quot; \--extra-ldflags=&quot;$ADDI_LDFLAGS&quot; \$ADDITIONAL_CONFIGURE_FLAGmake cleanmakemake install</code></pre><p>执行脚本文件</p><pre><code>./android_build.sh</code></pre><h2 id="五、使用编译后形成的include和lib目录实现Android-NDK-解码功能"><a href="#五、使用编译后形成的include和lib目录实现Android-NDK-解码功能" class="headerlink" title="五、使用编译后形成的include和lib目录实现Android NDK 解码功能"></a>五、使用编译后形成的include和lib目录实现Android NDK 解码功能</h2><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>在Android studio上创建一个支持C++的Android项目</li><li>将生成的 include 和 lib 复制到 cpp 目录下，更改CMakeLists.txt文件</li></ol><pre><code>cmake_minimum_required(VERSION 3.4.1)set(DISTRIBUTION_DIR ${CMAKE_SOURCE_DIR}/../jniLibs/)add_library( # Sets the name of the library.        ffmpeg-video        SHARED        ffmpeg_video.c)# 编解码(最重要的库)add_library(        avcodec        SHARED        IMPORTED)#指定编码库的位置set_target_properties(        avcodec        PROPERTIES IMPORTED_LOCATION        ${DISTRIBUTION_DIR}/${ANDROID_ABI}/libavcodec-56.so)#设备信息add_library(        avdevice        SHARED        IMPORTED)#指定设备信息的位置set_target_properties(        avdevice        PROPERTIES IMPORTED_LOCATION        ${DISTRIBUTION_DIR}/${ANDROID_ABI}/libavdevice-56.so)#滤镜特效处理库add_library(        avfilter        SHARED        IMPORTED)#指定滤镜库位置set_target_properties(        avfilter        PROPERTIES IMPORTED_LOCATION        ${DISTRIBUTION_DIR}/${ANDROID_ABI}/libavfilter-5.so)#封装格式处理库add_library(        avformat        SHARED        IMPORTED)#指定格式库路径set_target_properties(        avformat        PROPERTIES IMPORTED_LOCATION        ${DISTRIBUTION_DIR}/${ANDROID_ABI}/libavformat-56.so)#工具库(大部分库都需要这个库的支持)add_library(        avutil        SHARED        IMPORTED)#指定工具库路径set_target_properties(        avutil        PROPERTIES IMPORTED_LOCATION        ${DISTRIBUTION_DIR}/${ANDROID_ABI}/libavutil-54.so)#后期处理add_library(        postproc        SHARED        IMPORTED)#指定后期处理库路径set_target_properties(        postproc        PROPERTIES IMPORTED_LOCATION        ${DISTRIBUTION_DIR}/${ANDROID_ABI}/libpostproc-53.so)#数据格式转换库add_library(        swresample        SHARED        IMPORTED)#指定库位置set_target_properties(        swresample        PROPERTIES IMPORTED_LOCATION        ${DISTRIBUTION_DIR}/${ANDROID_ABI}/libswresample-1.so)#视频像素数据格式转换add_library(        swscale        SHARED        IMPORTED)#视频像素格式转换库位置set_target_properties(        swscale        PROPERTIES IMPORTED_LOCATION        ${DISTRIBUTION_DIR}/${ANDROID_ABI}/libswscale-3.so)find_library(        android-lib        android)find_library(        log-lib        log)find_library(        jnigraphics-lib        jnigraphics)# 将预构建库与本地库相连target_link_libraries(        ffmpeg-video        avcodec        avdevice        avfilter        avformat        avutil        postproc        swresample        swscale        ${android-lib}        ${jnigraphics-lib}        ${log-lib})</code></pre><ol start="3"><li>编写本地 native 方法，编译生成.h头文件</li></ol><pre><code>package cn.onestravel.ndk.ffmpegdecodedemo;public class VideoUtils {    static {        System.loadLibrary(&quot;avutil-54&quot;);        System.loadLibrary(&quot;avcodec-56&quot;);        System.loadLibrary(&quot;avdevice-56&quot;);        System.loadLibrary(&quot;avfilter-5&quot;);        System.loadLibrary(&quot;avformat-56&quot;);        System.loadLibrary(&quot;postproc-53&quot;);        System.loadLibrary(&quot;swresample-1&quot;);        System.loadLibrary(&quot;swscale-3&quot;);        System.loadLibrary(&quot;ffmpeg-video&quot;);    }    public native static void decode(String input,String output);}</code></pre><ol start="5"><li>对编译生成.h头文件进行实现，创建ffmpeg_video.c</li></ol><pre><code>//// Created by Administrator on 2019/3/27.////// Created by Administrator on 2019/3/26.//#include &lt;android/log.h&gt;#include &quot;cn_onestravel_ndk_ffmpegdecodedemo_VideoUtils.h&quot;//编码#include &quot;include/libavcodec/avcodec.h&quot;//封装格式处理#include &quot;include/libavformat/avformat.h&quot;//像素处理#include &quot;include/libswscale/swscale.h&quot;#include &quot;include/libavutil/avutil.h&quot;#include &quot;include/libavutil/frame.h&quot;#define LOGI(FORMAT,...) __android_log_print(ANDROID_LOG_INFO,&quot;FFMPEG&quot;,FORMAT,##__VA_ARGS__);#define LOGE(FORMAT,...) __android_log_print(ANDROID_LOG_ERROR,&quot;FFMPEG&quot;,FORMAT,##__VA_ARGS__);/* * Class:     cn_onestravel_ndk_ffmpegdecode_VoideUtils * Method:    decode * Signature: (Ljava/lang/String;Ljava/lang/String;)V */JNIEXPORT void JNICALL Java_cn_onestravel_ndk_ffmpegdecodedemo_VideoUtils_decode  (JNIEnv * env, jclass jcls, jstring input_jstr, jstring output_jstr){      //需要转码的视频文件(输入的视频文件)      const char* input_cstr = (*env)-&gt;GetStringUTFChars(env,input_jstr,NULL);      const char* output_cstr = (*env)-&gt;GetStringUTFChars(env,output_jstr,NULL);      //1.注册所有组件      av_register_all();      //封装格式上下文，统领全局的结构体，保存了视频文件封装格式的相关信息      AVFormatContext *pFormatCtx = avformat_alloc_context();      //2.打开输入视频文件      if (avformat_open_input(&amp;pFormatCtx, input_cstr, NULL, NULL) != 0)      {          LOGE(&quot;%s&quot;,&quot;无法打开输入视频文件&quot;);          return;      }      //3.获取视频文件信息      if (avformat_find_stream_info(pFormatCtx,NULL) &lt; 0)      {          LOGE(&quot;%s&quot;,&quot;无法获取视频文件信息&quot;);          return;      }      //获取视频流的索引位置      //遍历所有类型的流（音频流、视频流、字幕流），找到视频流      int v_stream_idx = -1;      int i = 0;      //number of streams      for (; i &lt; pFormatCtx-&gt;nb_streams; i++)      {          //流的类型          if (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO)          {              v_stream_idx = i;              break;          }      }      if (v_stream_idx == -1)      {          LOGE(&quot;%s&quot;,&quot;找不到视频流\n&quot;);          return;      }      //只有知道视频的编码方式，才能够根据编码方式去找到解码器      //获取视频流中的编解码上下文      AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[v_stream_idx]-&gt;codec;      //4.根据编解码上下文中的编码id查找对应的解码      AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);      //（迅雷看看，找不到解码器，临时下载一个解码器）      if (pCodec == NULL)      {          LOGE(&quot;%s&quot;,&quot;找不到解码器\n&quot;);          return;      }      //5.打开解码器      if (avcodec_open2(pCodecCtx,pCodec,NULL)&lt;0)      {          LOGE(&quot;%s&quot;,&quot;解码器无法打开\n&quot;);          return;      }      //输出视频信息      LOGI(&quot;视频的文件格式：%s&quot;,pFormatCtx-&gt;iformat-&gt;name);      LOGI(&quot;视频时长：%ld&quot;, (pFormatCtx-&gt;duration)/1000000);      LOGI(&quot;视频的宽高：%d,%d&quot;,pCodecCtx-&gt;width,pCodecCtx-&gt;height);      LOGI(&quot;解码器的名称：%s&quot;,pCodec-&gt;name);      //准备读取      //AVPacket用于存储一帧一帧的压缩数据（H264）      //缓冲区，开辟空间      AVPacket *packet = (AVPacket*)av_malloc(sizeof(AVPacket));      //AVFrame用于存储解码后的像素数据(YUV)      //内存分配      AVFrame *pFrame = av_frame_alloc();      //YUV420      AVFrame *pFrameYUV = av_frame_alloc();      //只有指定了AVFrame的像素格式、画面大小才能真正分配内存      //缓冲区分配内存      uint8_t *out_buffer = (uint8_t *)av_malloc(avpicture_get_size(AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, pCodecCtx-&gt;height));      //初始化缓冲区      avpicture_fill((AVPicture *)pFrameYUV, out_buffer, AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, pCodecCtx-&gt;height);      //用于转码（缩放）的参数，转之前的宽高，转之后的宽高，格式等      struct SwsContext *sws_ctx = sws_getContext(pCodecCtx-&gt;width,pCodecCtx-&gt;height,pCodecCtx-&gt;pix_fmt,          pCodecCtx-&gt;width, pCodecCtx-&gt;height, AV_PIX_FMT_YUV420P,          SWS_BICUBIC, NULL, NULL, NULL);      int got_picture, ret;      FILE *fp_yuv = fopen(output_cstr, &quot;wb+&quot;);      int frame_count = 0;      //6.一帧一帧的读取压缩数据      while (av_read_frame(pFormatCtx, packet) &gt;= 0)      {          //只要视频压缩数据（根据流的索引位置判断）          if (packet-&gt;stream_index == v_stream_idx)          {              //7.解码一帧视频压缩数据，得到视频像素数据              ret = avcodec_decode_video2(pCodecCtx, pFrame, &amp;got_picture, packet);              if (ret &lt; 0)              {                  LOGE(&quot;%s&quot;,&quot;解码错误&quot;);                  return;              }              //为0说明解码完成，非0正在解码              if (got_picture)              {                  //AVFrame转为像素格式YUV420，宽高                  //2 6输入、输出数据                  //3 7输入、输出画面一行的数据的大小 AVFrame 转换是一行一行转换的                  //4 输入数据第一列要转码的位置 从0开始                  //5 输入画面的高度                  sws_scale(sws_ctx, pFrame-&gt;data, pFrame-&gt;linesize, 0, pCodecCtx-&gt;height,                      pFrameYUV-&gt;data, pFrameYUV-&gt;linesize);                  //输出到YUV文件                  //AVFrame像素帧写入文件                  //data解码后的图像像素数据（音频采样数据）                  //Y 亮度 UV 色度（压缩了） 人对亮度更加敏感                  //U V 个数是Y的1/4                  int y_size = pCodecCtx-&gt;width * pCodecCtx-&gt;height;                  fwrite(pFrameYUV-&gt;data[0], 1, y_size, fp_yuv);                  fwrite(pFrameYUV-&gt;data[1], 1, y_size / 4, fp_yuv);                  fwrite(pFrameYUV-&gt;data[2], 1, y_size / 4, fp_yuv);                  frame_count++;                  LOGI(&quot;解码第%d帧&quot;,frame_count);              }          }          //释放资源          av_free_packet(packet);      }      fclose(fp_yuv);      (*env)-&gt;ReleaseStringUTFChars(env,input_jstr,input_cstr);      (*env)-&gt;ReleaseStringUTFChars(env,output_jstr,output_cstr);      av_frame_free(&amp;pFrame);      avcodec_close(pCodecCtx);      avformat_free_context(pFormatCtx);  }</code></pre><ol start="5"><li>Activity 实现</li></ol><pre><code>public class MainActivity extends AppCompatActivity {    private boolean permission;    private VideoThread videoThread;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        requestPermission();        videoThread = new VideoThread();    }    /**     * 获取权限     */    private void requestPermission() {        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {            String[] perms = {&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;};            if (checkSelfPermission(perms[0]) == PackageManager.PERMISSION_DENIED) {                permission = false;                requestPermissions(perms, 200);            } else {                permission = true;            }        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode == 200) {            if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {                permission = true;            }        }    }    public void decode(View view) {        if (!permission) {            Toast.makeText(this, &quot;请允许存储权限&quot;, Toast.LENGTH_SHORT).show();            requestPermission();            return;        }        if (videoThread == null) {            videoThread = new VideoThread();        }        try {            if(!videoThread.isAlive()) {                videoThread.start();            }        }catch (Exception e){            e.printStackTrace();        }    }    @Override    protected void onDestroy() {        videoThread = null;        super.onDestroy();    }    public static class VideoThread extends Thread {        @Override        public void run() {            super.run();            String input = Environment.getExternalStorageDirectory().getAbsolutePath() + &quot;/input.mp4&quot;;            String output = Environment.getExternalStorageDirectory().getAbsolutePath() + &quot;/out.yuv&quot;;            VideoUtils.decode(input, output);            Log.i(&quot;Activity&quot;,&quot;编码完成&quot;);        }    }}</code></pre><ol start="6"><li>运行程序，安装到手机，进行解码成 yuv</li></ol>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio下集成Fmod，实现仿QQ变声效果（二）</title>
      <link href="/20190318/android-ndk/androidstudio-xia-ji-cheng-fmod-shi-xian-fang-qq-bian-sheng-xiao-guo-er/"/>
      <url>/20190318/android-ndk/androidstudio-xia-ji-cheng-fmod-shi-xian-fang-qq-bian-sheng-xiao-guo-er/</url>
      
        <content type="html"><![CDATA[<h1 id="AndroidStudio下集成Fmod，实现仿QQ变声效果（二）"><a href="#AndroidStudio下集成Fmod，实现仿QQ变声效果（二）" class="headerlink" title="AndroidStudio下集成Fmod，实现仿QQ变声效果（二）"></a>AndroidStudio下集成Fmod，实现仿QQ变声效果（二）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>前一篇博客，我们简单了解了一下 fmod 音频引擎，实现了使用 fmod 来进行音频播放，今天我们在上一个项目的基础上来实现仿QQ变声的效果</strong></p><h2 id="一、Android-布局及点击事件实现"><a href="#一、Android-布局及点击事件实现" class="headerlink" title="一、Android 布局及点击事件实现"></a>一、Android 布局及点击事件实现</h2><h3 id="1、页面布局"><a href="#1、页面布局" class="headerlink" title="1、页面布局"></a>1、页面布局</h3><p><strong>简单的进行页面布局，有两个布局，一个是录音界面，长按按钮录音，显示录音时长；另一个是录音完成之后，对声音进行音效处理的界面，包含原声、萝莉、大叔、搞怪、空灵、惊悚六个按钮，并添加了一个返回重新录音的按钮。界面效果如下：</strong></p><p><img src="/images/20190318/record.png" alt="录音"></p><p><img src="/images/20190318/effect.png" alt="音效处理"></p><h3 id="2、长按录音事件"><a href="#2、长按录音事件" class="headerlink" title="2、长按录音事件"></a>2、长按录音事件</h3><p><strong>在这里，我使用了一个录音的工具类，然后处理录音按钮的触摸事件，判断按下和松开的事件，来进行录音，需要录音和存储权限（注意6.0以上动态检查权限，7.0的文件读取权限）</strong></p><p><strong>在使用录音文件播放的时候，第一次是录音生成amr文件，是压缩后的文件，导致在使用 fmod 处理音效以及播放时失败，不能播放出声音，最后换成mav文件，在可以进行音效处理。</strong></p><h4 id="2-1-权限判断"><a href="#2-1-权限判断" class="headerlink" title="2.1 权限判断"></a>2.1 权限判断</h4><p>判断是否获取了录音权限和文件存储权限</p><pre><code>    /**     * 获取权限     */    private void requestPermission() {        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {            String[] perms = {&quot;android.permission.RECORD_AUDIO&quot;, &quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;};            if (checkSelfPermission(perms[0]) == PackageManager.PERMISSION_DENIED ||                    checkSelfPermission(perms[1]) == PackageManager.PERMISSION_DENIED) {                permission = false;                requestPermissions(perms, 200);            } else {                permission = true;            }        }    }</code></pre><h4 id="2-2-处理长按录音效果"><a href="#2-2-处理长按录音效果" class="headerlink" title="2.2 处理长按录音效果"></a>2.2 处理长按录音效果</h4><pre><code>    public class MyHandler extends Handler {        @Override        public void handleMessage(Message msg) {            super.handleMessage(msg);            switch (msg.what) {                case RECORD_START:                    try {                        audioRecordUtils.startRecordAndFile();                        recording = true;                    } catch (Exception e) {                        e.printStackTrace();                        recording = false;                        requestPermission();                    }                    break;                case RECORD_FINISH:                    recording = false;                    audioRecordUtils.stopRecordAndFile();                    break;                case RECORD_CANCEL:                    audioRecordUtils.stopRecordAndFile();                    recording = false;                    break;            }        }    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        org.fmod.FMOD.init(this);        audioRecordUtils = AudioRecordUtils.getInstance();        audioRecordUtils.setOnAudioStatusUpdateListener(this);        recordBtn = findViewById(R.id.recordBtn);        recordLl = findViewById(R.id.recordLl);        recordTimeTv = findViewById(R.id.recordTimeTv);        recordBtn.setOnTouchListener(this);        effectUtils = new EffectUtils();        requestPermission();    }    @Override    public boolean onTouch(View view, MotionEvent motionEvent) {        switch (motionEvent.getAction()) {            case MotionEvent.ACTION_DOWN:                if (permission) {                    handler.sendEmptyMessage(RECORD_START);                } else {                    Toast.makeText(this, &quot;请先同意录音和存储功能权限后使用&quot;, Toast.LENGTH_SHORT).show();                    requestPermission();                }                break;            case MotionEvent.ACTION_UP:                if (recording) {                    if (mTime &lt; 1000) {                        handler.sendEmptyMessage(RECORD_CANCEL);                    }                    handler.sendEmptyMessage(RECORD_FINISH);                } else {                    super.onTouchEvent(motionEvent);                }                break;        }        return true;    }    /**     * 录音中     */     @Override    public void onUpdate(double db, AudioRecordUtils.RecordTimes times) {        this.mTime = times.getTime();        recordTimeTv.setText(&quot;... &quot; + times.getFormatTime(&quot;mm:ss&quot;) + &quot; ...&quot;);    }    /**     * 录音完成     */    @Override    public void onFinish(float seconds, String filePath) {        recordFilePath = filePath;        recordLl.setVisibility(View.GONE);    }</code></pre><h2 id="二、NDK实现音效"><a href="#二、NDK实现音效" class="headerlink" title="二、NDK实现音效"></a>二、NDK实现音效</h2><h3 id="1、native-方法声明"><a href="#1、native-方法声明" class="headerlink" title="1、native 方法声明"></a>1、native 方法声明</h3><p><strong>创建 org.fmod.core.EffectUtils.java 文件，声明音效变换的 native 方法，并且定义音效类型常量</strong></p><pre><code>    public static final int MODE_NORMAL = 0;    public static final int MODE_LUOLI = 1;    public static final int MODE_DASHU = 2;    public static final int MODE_GAOGUAI = 3;    public static final int MODE_KONGLING = 4;    public static final int MODE_JINGSONG = 5;     /**     * 音效处理 native 方法     * @param path 音频源文件路径     * @param mode 特效模式     */    public native void effect(String path,int mode);</code></pre><h3 id="2、生成头文件-处理Android页面的点击事件"><a href="#2、生成头文件-处理Android页面的点击事件" class="headerlink" title="2、生成头文件,处理Android页面的点击事件"></a>2、生成头文件,处理Android页面的点击事件</h3><p><strong>进入app/src/main/java目录下使用javah命令将创建好的org.fmod.core.EffectUtils.java 编译生成.h 头文件;并将该头文件移动到 cpp 目录下</strong></p><pre><code>javah -encoding utf-8 org.fmod.core.EffectUtils</code></pre><p>Android 页面点击事件</p><pre><code>    /**     * 按钮点击事件     * @param view     */    public void onClick(View view) {        switch (view.getId()) {            case R.id.reRecordTv:                recordTimeTv.setText(&quot;长按开始录音&quot;);                recordLl.setVisibility(View.VISIBLE);                break;            case R.id.normalLL:            effectUtils.effect(recordFilePath,EffectUtils.MODE_NORMAL);                break;            case R.id.luoliLL:                effectUtils.effect(recordFilePath,EffectUtils.MODE_LUOLI);                break;            case R.id.dashuLL:                effectUtils.effect(recordFilePath,EffectUtils.MODE_DASHU);                break;            case R.id.gaoguaiLL:                effectUtils.effect(recordFilePath,EffectUtils.MODE_GAOGUAI);                break;            case R.id.konglingLL:                effectUtils.effect(recordFilePath,EffectUtils.MODE_KONGLING);                break;            case R.id.jingsongLL:                effectUtils.effect(recordFilePath,EffectUtils.MODE_JINGSONG);                break;        }    }</code></pre><h3 id="3、native-实现"><a href="#3、native-实现" class="headerlink" title="3、native 实现"></a>3、native 实现</h3><p><strong>在 cpp 目录下创建 effect.cpp 文件，来实现 native 方法，并将 CMakeLists.txt 中的配置稍作修改</strong></p><p>CMakeLists.txt</p><pre><code>cmake_minimum_required(VERSION 3.4.1)set(distribution_DIR ${PROJECT_SOURCE_DIR}../../jniLibs)include_directories(src/main/cpp/inc)add_library( effect        SHARED        effect.cpp)add_library( fmod        SHARED        IMPORTED )set_target_properties( fmod        PROPERTIES IMPORTED_LOCATION        ${distribution_DIR}/${ANDROID_ABI}/libfmod.so)add_library( fmodL        SHARED        IMPORTED )set_target_properties( fmodL        PROPERTIES IMPORTED_LOCATION        ${distribution_DIR}/${ANDROID_ABI}/libfmodL.so )find_library(         log-lib        log)target_link_libraries( effect        fmod        fmodL        ${log-lib} )</code></pre><p>effect.cpp </p><pre><code>#include &quot;org_fmod_core_EffectUtils.h&quot;#include &quot;inc/fmod.h&quot;#include &quot;inc/fmod.hpp&quot;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;android/log.h&gt;#define LOGI(FORMAT, ...) __android_log_print(ANDROID_LOG_INFO,&quot;FILE_PATCH&quot;,FORMAT,__VA_ARGS__);#define LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,&quot;FILE_PATCH&quot;,FORMAT,__VA_ARGS__);JNIEXPORT void JNICALL Java_org_fmod_core_EffectUtils_effect        (JNIEnv *env, jobject jobj, jstring j_file_path, jint j_mode) {    //路径转换    const char *file_path = env-&gt;GetStringUTFChars(j_file_path, NULL);    bool playing = true;    //加载音频文件    FMOD::System *system;    FMOD::Sound *sound;    FMOD::Channel *channel;    FMOD::DSP *dsp;    float frequency;    try {        //初始化        System_Create(&amp;system);        system-&gt;init(32, FMOD_INIT_NORMAL, NULL);        LOGI(&quot;%s&quot;, file_path);        //加载录音文件到 sound        system-&gt;createSound(file_path, FMOD_DEFAULT,NULL, &amp;sound);        //播放音频文件        system-&gt;playSound(sound, 0, false, &amp;channel);        //播放过程中实现不同的音效配置        //在fmod中，处理音效就是更改channel（音轨）        switch (j_mode) {            case org_fmod_core_EffectUtils_MODE_NORMAL:                //无需处理                LOGI(&quot;%s&quot;, &quot;正常播放&quot;);                break;            case org_fmod_core_EffectUtils_MODE_LUOLI:                //女声为高声，需要将声音提高                //DSP 中定义了一些对声音处理的特效，                system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT, &amp;dsp);                dsp-&gt;setParameterFloat(FMOD_DSP_PITCHSHIFT_PITCH, 2.5);                channel-&gt;addDSP(0, dsp);                LOGI(&quot;%s&quot;, &quot;萝莉&quot;)                break;            case org_fmod_core_EffectUtils_MODE_DASHU:                //大神为高声，需要将声音音效降低                //DSP 中定义了一些对声音处理的特效，                system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT, &amp;dsp);                dsp-&gt;setParameterFloat(FMOD_DSP_PITCHSHIFT_PITCH, 0.6);                channel-&gt;addDSP(0, dsp);                LOGI(&quot;%s&quot;, &quot;大叔&quot;)                break;            case org_fmod_core_EffectUtils_MODE_GAOGUAI:                //搞怪                //提高说话的速度                channel-&gt;getFrequency(&amp;frequency);                frequency = frequency * 1.6;                channel-&gt;setFrequency(frequency);                LOGI(&quot;%s&quot;, &quot;搞怪&quot;)                break;            case org_fmod_core_EffectUtils_MODE_KONGLING:                //空灵就是产生回声，外加一点低音                system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT, &amp;dsp);                dsp-&gt;setParameterFloat(FMOD_DSP_PITCHSHIFT_PITCH, 0.9);                channel-&gt;addDSP(0, dsp);                system-&gt;createDSPByType(FMOD_DSP_TYPE_ECHO, &amp;dsp);                dsp-&gt;setParameterFloat(FMOD_DSP_ECHO_DELAY, 350);                dsp-&gt;setParameterFloat(FMOD_DSP_ECHO_FEEDBACK, 15);                channel-&gt;addDSP(1, dsp);                LOGI(&quot;%s&quot;, &quot;空灵&quot;)                break;            case org_fmod_core_EffectUtils_MODE_JINGSONG:                //惊悚                system-&gt;createDSPByType(FMOD_DSP_TYPE_TREMOLO, &amp;dsp);                dsp-&gt;setParameterFloat(FMOD_DSP_TREMOLO_DEPTH, 0.5);                channel-&gt;addDSP(0,dsp);                LOGI(&quot;%s&quot;, &quot;惊悚&quot;)                break;            default:                break;        }    } catch (...) {        LOGE(&quot;%s&quot;, &quot;effect error&quot;);        goto end;    }    //更新状态    system-&gt;update();    //判断是否在播放    while (playing) {        LOGI(&quot;%s,%d&quot;, &quot;playing&quot;,playing)        channel-&gt;isPlaying(&amp;playing);        usleep(1 * 1000 * 1000);        LOGI(&quot;%s,%d&quot;, &quot;playing&quot;,playing)    }    goto end;    //结束，释放资源    end:    env-&gt;ReleaseStringUTFChars(j_file_path, file_path);    sound-&gt;release();    system-&gt;close();    system-&gt;release();}</code></pre><h3 id="4、附表"><a href="#4、附表" class="headerlink" title="4、附表"></a>4、附表</h3><h4 id="4-1-DSP-TYPE-类型说明"><a href="#4-1-DSP-TYPE-类型说明" class="headerlink" title="4.1 DSP_TYPE 类型说明"></a>4.1 DSP_TYPE 类型说明</h4><p><strong>在创建DSP时，system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT, &amp;dsp);  需要传递FMOD_DSP_TYPE,下面介绍一下DSP_TYPE 类型</strong><br>类型名称 | 说明<br>— | —<br>FMOD_DSP_TYPE_UNKNOWN | 此单元是通过非FMOD插件创建的，因此具有未知目的。<br>FMOD_DSP_TYPE_MIXER | 此单元除了接收输入并将它们混合在一起然后将结果提供给声卡单元之外什么都不做。<br>FMOD_DSP_TYPE_OSCILLATOR | 此单元生成正弦/方波/锯/三角形或噪声音。<br>FMOD_DSP_TYPE_LOWPASS | 此单元使用高质量的谐振低通滤波器算法过滤声音，但消耗更多的CPU时间。已弃用，将在以后的版本中删除（有关替代版本，请参阅FMOD_DSP_LOWPASS备注）。<br>FMOD_DSP_TYPE_ITLOWPASS | 此单元使用脉冲跟踪器中使用的谐振低通滤波器算法过滤声音，但截止范围有限（0到8060hz）。<br>FMOD_DSP_TYPE_HIGHPASS | 此单元使用谐振高通滤波器算法过滤声音。已弃用，将在以后的版本中删除（有关替代版本，请参阅FMOD_DSP_HIGHPASS备注）。<br>FMOD_DSP_TYPE_ECHO | 此单元在声音上产生回声并以所需速率淡出。<br>FMOD_DSP_TYPE_FADER | 此单位平移和缩放单位的音量。<br>FMOD_DSP_TYPE_FLANGE | 此单元对声音产生法兰效果。<br>FMOD_DSP_TYPE_DISTORTION | 此单位扭曲声音。<br>FMOD_DSP_TYPE_NORMALIZE | 此单元将声音标准化或放大到一定水平。<br>FMOD_DSP_TYPE_LIMITER | 此单位将声音限制在一定水平。<br>FMOD_DSP_TYPE_PARAMEQ | 此单元衰减或放大选定的频率范围。已弃用，将在以后的版本中删除（有关替代版本，请参阅FMOD_DSP_PARAMEQ备注）。<br>FMOD_DSP_TYPE_PITCHSHIFT | 此单位在不改变播放速度的情况下弯曲声音的音高。<br>FMOD_DSP_TYPE_CHORUS | 此单位对声音产生合唱效果。<br>FMOD_DSP_TYPE_VSTPLUGIN | 此单元允许使用Steinberg VST插件<br>FMOD_DSP_TYPE_WINAMPPLUGIN | 此单元允许使用Nullsoft Winamp插件<br>FMOD_DSP_TYPE_ITECHO | 此单元在声音上产生回声，并以Impulse Tracker中使用的所需速率淡出。<br>FMOD_DSP_TYPE_COMPRESSOR | 此单元实现动态压缩（链接/非链接多声道，宽带）<br>FMOD_DSP_TYPE_SFXREVERB | 此单元实现SFX混响<br>FMOD_DSP_TYPE_LOWPASS_SIMPLE | 此单元使用简单的低通滤波器进行声音滤波，无谐振，但具有灵活的截止频率且速度快。已弃用，将在以后的版本中删除（有关替代版本，请参阅FMOD_DSP_LOWPASS_SIMPLE备注）。<br>FMOD_DSP_TYPE_DELAY | 此单元在声音的各个声道上产生不同的延迟。<br>FMOD_DSP_TYPE_TREMOLO | 此单元对声音产生颤音/斩波效果。<br>FMOD_DSP_TYPE_LADSPAPLUGIN | 不支持/不推荐使用。<br>FMOD_DSP_TYPE_SEND | 该单元将信号的副本发送到DSP树中任何位置的返回DSP。 * /<br>FMOD_DSP_TYPE_RETURN | 本机接收来自多个发送DSP的信号。<br>FMOD_DSP_TYPE_HIGHPASS_SIMPLE | 此单元使用简单的高通滤波器无声共振，但具有灵活的截止频率且速度快。已弃用，将在以后的版本中删除（有关替代版本，请参阅FMOD_DSP_HIGHPASS_SIMPLE备注）。<br>FMOD_DSP_TYPE_PAN | 此单元平移信号，也可能是上混或下混。<br>FMOD_DSP_TYPE_THREE_EQ | 此单元是三频段均衡器。<br>FMOD_DSP_TYPE_FFT | 该单元简单地分析信号并通过getParameter提供频谱信息。 * /<br>FMOD_DSP_TYPE_LOUDNESS_METER | 此单元分析信号的响度和真峰值。<br>FMOD_DSP_TYPE_ENVELOPEFOLLOWER | 此单元跟踪输入/侧链信号的包络。已弃用，将在以后的版本中删除。<br>FMOD_DSP_TYPE_CONVOLUTIONREVERB | 此单元实现卷积混响。<br>FMOD_DSP_TYPE_CHANNELMIX | 此单元提供每信号通道增益和输出通道映射，以允许由多组信号组成的1个多通道信号映射到单个输出信号。<br>FMOD_DSP_TYPE_TRANSCEIVER | 此单元从最多32个不同的插槽中选择“发送”和“接收”。它就像发送/返回，但它使用全局槽而不是返回作为目标。它还有其他功能。多个收发器可以从单个通道接收，或者多个收发器可以发送到单个通道，或两者的组合。<br>FMOD_DSP_TYPE_OBJECTPAN | 此单元将信号发送到3d对象编码器，如Dolby Atmos。支持FMOD_D的子集</p><h4 id="4-2-DSP-的参数类型"><a href="#4-2-DSP-的参数类型" class="headerlink" title="4.2 DSP 的参数类型"></a>4.2 DSP 的参数类型</h4><p><strong>在设置 DSP 的参数类型时，可在 fmod_dsp_effects.h 头文件中查询对应的 DSP类型，即可看到对应的参数类型</strong></p><p>如：FMOD_DSP_TREMOLO,在头文件中查到如下内容</p><pre><code>typedef enum{    FMOD_DSP_TREMOLO_FREQUENCY,     /* (Type:float) - LFO frequency in Hz.  0.1 to 20.  Default = 5. */    FMOD_DSP_TREMOLO_DEPTH,         /* (Type:float) - Tremolo depth.  0 to 1.  Default = 1. */    FMOD_DSP_TREMOLO_SHAPE,         /* (Type:float) - LFO shape morph between triangle and sine.  0 to 1.  Default = 0. */    FMOD_DSP_TREMOLO_SKEW,          /* (Type:float) - Time-skewing of LFO cycle.  -1 to 1.  Default = 0. */    FMOD_DSP_TREMOLO_DUTY,          /* (Type:float) - LFO on-time.  0 to 1.  Default = 0.5. */    FMOD_DSP_TREMOLO_SQUARE,        /* (Type:float) - Flatness of the LFO shape.  0 to 1.  Default = 0. */    FMOD_DSP_TREMOLO_PHASE,         /* (Type:float) - Instantaneous LFO phase.  0 to 1.  Default = 0. */    FMOD_DSP_TREMOLO_SPREAD         /* (Type:float) - Rotation / auto-pan effect.  -1 to 1.  Default = 0. */} FMOD_DSP_TREMOLO;</code></pre><table><thead><tr><th>DSP 参数类型</th><th>说明</th></tr></thead><tbody><tr><td>FMOD_DSP_TREMOLO_FREQUENCY</td><td>（类型：浮点） - 以Hz为单位的LFO频率。 0.1至20.默认= 5.</td></tr><tr><td>FMOD_DSP_TREMOLO_DEPTH</td><td>（类型：浮点） - 颤音深度。 0到1.默认= 1. * /</td></tr><tr><td>FMOD_DSP_TREMOLO_SHAPE</td><td>（类型：浮点） - 三角形和正弦之间的LFO形状变形。 0到1.默认= 0.</td></tr><tr><td>FMOD_DSP_TREMOLO_SKEW</td><td>（类型：浮点） - LFO周期的时间偏移。 -1到1.默认值= 0.</td></tr><tr><td>FMOD_DSP_TREMOLO_DUTY</td><td>（类型：浮点） - LFO开启时间。 0到1.默认值= 0.5。</td></tr><tr><td>FMOD_DSP_TREMOLO_SQUARE</td><td>（类型：浮点） - LFO形状的平坦度。 0到1.默认= 0.</td></tr><tr><td>FMOD_DSP_TREMOLO_PHASE</td><td>（类型：浮点） - 瞬时LFO相位。 0到1.默认= 0. * / FMOD_DSP_TREMOLO_SPREAD</td></tr></tbody></table><h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><p><a href="https://github.com/onestravel/QQVoiceChange" target="_blank" rel="noopener">QQVoiceChange源码</a></p><p><strong>到此，我们以及实现集成 fmod 的模拟QQ变声项目，效果不是完全一样，但也有7分相似，；自己可研究其他效果，来实现模拟更多的声音特效。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> Fmod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio下集成Fmod，实现仿QQ变声效果（一）</title>
      <link href="/20190310/android-ndk/androidstudio-xia-ji-cheng-fmod-shi-xian-fang-qq-bian-sheng-xiao-guo-yi/"/>
      <url>/20190310/android-ndk/androidstudio-xia-ji-cheng-fmod-shi-xian-fang-qq-bian-sheng-xiao-guo-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="AndroidStudio下集成Fmod，实现仿QQ变声效果"><a href="#AndroidStudio下集成Fmod，实现仿QQ变声效果" class="headerlink" title="AndroidStudio下集成Fmod，实现仿QQ变声效果"></a>AndroidStudio下集成Fmod，实现仿QQ变声效果</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>在使用QQ的时候，我们会发现有一个炫酷的功能，那就是变声，效果图如下;其实QQ变声效果就是使用了Fmod声音引擎，通过NDK的开发，来实现对声音的变换。今天我们先进行一下QQ变声效果的前期实现，先引入Fmod库，实现音频文件的播放</strong><br><img src="/images/20190310/qq_voice_change.png" alt="QQ变声"></p><h2 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h2><ul><li><strong><a href="https://www.fmod.com/download" target="_blank" rel="noopener">【Fmod下载】</a></strong>：点击该连接后，进行注册，登录以后再下载,选择版本<br><img src="/images/20190310/fmod_download.png" alt="Fmod下载"></li><li><strong>【Android Studio】</strong>：Android Studio实现NDK支持<br><img src="/images/20190310/ndk_download.png" alt="NDK下载"></li></ul><h2 id="二、实现使用fmod播放assets下的音频"><a href="#二、实现使用fmod播放assets下的音频" class="headerlink" title="二、实现使用fmod播放assets下的音频"></a>二、实现使用fmod播放assets下的音频</h2><h3 id="1、创建一个支持C-的Android项目"><a href="#1、创建一个支持C-的Android项目" class="headerlink" title="1、创建一个支持C++的Android项目"></a>1、创建一个支持C++的Android项目</h3><p><img src="/images/20190310/create_1.png" alt="创建支持C++的Android项目-1"></p><p><img src="/images/20190310/create_2.png" alt="创建支持C++的Android项目-2"></p><p><img src="/images/20190310/create_3.png" alt="创建支持C++的Android项目-3"></p><p><strong>创建好之后会在app/src/main 下面看到cpp文件夹，这就是进行NDK开发的C/C++层的文件夹</strong></p><h3 id="2、配置Android项目"><a href="#2、配置Android项目" class="headerlink" title="2、配置Android项目"></a>2、配置Android项目</h3><ul><li>在 app/src/main 下创建 jniLibs 文件夹</li><li>将下载好的fmod包打开，进入到 api/lowlevel/ 下，可以看到 examples 、inc 、lib 三个文件夹</li><li>将 inc 文件夹整体复制到 src/main/cpp 目录下</li><li>将 lib 文件夹下的 fmod.jar 复制到 libs 目录下，并且右键该jar包，Add As Library </li><li>将 lib 文件夹下的 so 动态库的不同平台的文件夹复制到 刚刚创建好的 jniLibs 目录下</li><li>将 examples 目录下的common.h,common.cpp,common_platform.h,common_platform.cpp,play_sound.cpp 文件复制到src/main/cpp 目录下</li><li>修改common.h中 #include “fmod.h” 为 #include “inc/fmod.h”</li><li>修改common.cpp中 #include “fmod_errors.h” 为 #include “inc/fmod_errors.h”</li><li>修改play_sound.cpp中 #include “fmod.hpp” 为 #include “inc/fmod.hpp”</li><li>将 examples/java 下的org文件夹整个赋值到 src/main/java 目录下，并修改 AndroidManifest.xml 中的启动类为  org.fmod.example.MainActivity</li><li>在app下的build.gradle 中的 defaultConfig 木块中新增 NDK 配置</li></ul><pre><code>    ndk {            abiFilters &quot;armeabi-v7a&quot;, &quot;arm64-v8a&quot;, &quot;x86&quot;, &quot;x86_64&quot;        }</code></pre><ul><li>将引入的so动态库和play_sound.cpp等加入到 CMakeLists.txt 文件中，具体配置如下：</li></ul><pre><code>cmake_minimum_required(VERSION 3.4.1)set(distribution_DIR ${PROJECT_SOURCE_DIR}../../jniLibs)include_directories(src/main/cpp/inc)add_library( sound        SHARED        play_sound.cpp        common.cpp        common_platform.cpp)add_library( fmod        SHARED        IMPORTED )set_target_properties( fmod        PROPERTIES IMPORTED_LOCATION        ${distribution_DIR}/${ANDROID_ABI}/libfmod.so)add_library( fmodL        SHARED        IMPORTED )set_target_properties( fmodL        PROPERTIES IMPORTED_LOCATION        ${distribution_DIR}/${ANDROID_ABI}/libfmodL.so )find_library( # Sets the name of the path variable.        log-lib        log)target_link_libraries( sound        fmod        fmodL        ${log-lib} )</code></pre><ul><li>修改 org.fmod.example.MainActivity 中的static 方法,删除一些未引入的library，更改刚刚在 CMakeLists.txt 文件中定义的library 如下：</li></ul><pre><code> static {        try {            System.loadLibrary(&quot;fmodL&quot;);        } catch (UnsatisfiedLinkError e) {        }        try {            System.loadLibrary(&quot;fmod&quot;);        } catch (UnsatisfiedLinkError e) {        }        System.loadLibrary(&quot;sound&quot;);    }</code></pre><ul><li>将 examples/media 文件夹下的音频资源文件复制到项目的 assets 目录下，具体文件引入可查看 play_sound.cpp 文件42~52行；这里将所有后缀为 .wav 和 .mp3 的文件都复制到 assets 目录下。</li></ul><pre><code>    result = system-&gt;createSound(Common_MediaPath(&quot;drumloop.wav&quot;), FMOD_DEFAULT, 0, &amp;sound1);    ERRCHECK(result);    result = sound1-&gt;setMode(FMOD_LOOP_OFF);    /* drumloop.wav has embedded loop points which automatically makes looping turn on, */    ERRCHECK(result);                           /* so turn it off here.  We could have also just put FMOD_LOOP_OFF in the above CreateSound call. */    result = system-&gt;createSound(Common_MediaPath(&quot;jaguar.wav&quot;), FMOD_DEFAULT, 0, &amp;sound2);    ERRCHECK(result);    result = system-&gt;createSound(Common_MediaPath(&quot;swish.wav&quot;), FMOD_DEFAULT, 0, &amp;sound3);    ERRCHECK(result);</code></pre><ul><li>到这里，我们所有的步骤都已经完成了，可以成功运行项目了，项目运行起来后，我们可以看到界面上加载了三首音频文件，分别对应 A , B , C 三个按钮，我们点击这三个按钮，就可以播放对应的音频文件</li></ul><h2 id="三、项目改造"><a href="#三、项目改造" class="headerlink" title="三、项目改造"></a>三、项目改造</h2><p><strong>第二部的操作是完全使用了 fmod 的示例来完成 assets 目录下的音频文件的播放，我们可以看到这个是使用的 org.fmod.example.MainActivity 进行播放的，我们接下来将播放的 native 方法抽取成一个 utils 类，然后再自己的MainActivity中调用（使用org.fmod.example.MainActivity的布局）；然后再添加点击 D 和 E 按钮时播放音频文件的功能</strong></p><h3 id="1、抽取-FmodUtils-java-工具类，使用自己包路径下的-MainActivity-实现播放"><a href="#1、抽取-FmodUtils-java-工具类，使用自己包路径下的-MainActivity-实现播放" class="headerlink" title="1、抽取 FmodUtils.java 工具类，使用自己包路径下的 MainActivity 实现播放"></a>1、抽取 FmodUtils.java 工具类，使用自己包路径下的 MainActivity 实现播放</h3><h4 id="1-1-FmodUtils-java-类如下，在原有main-方法加了参数，传入Activity实例："><a href="#1-1-FmodUtils-java-类如下，在原有main-方法加了参数，传入Activity实例：" class="headerlink" title="1.1 FmodUtils.java 类如下，在原有main()方法加了参数，传入Activity实例："></a>1.1 FmodUtils.java 类如下，在原有main()方法加了参数，传入Activity实例：</h4><pre><code>package org.fmod.core;import android.app.Activity;/** * @author onestravel * @version 1.0.0 * @name org.fmod.example.FmodUtils * @description //TODO */public class FmodUtils {    private static FmodUtils mInstance;    private FmodUtils() {    }    public static FmodUtils getInstance() {        synchronized (FmodUtils.class) {            if (mInstance == null) {                mInstance = new FmodUtils();            }        }        return mInstance;    }    public native String getButtonLabel(int index);    public native void buttonDown(int index);    public native void buttonUp(int index);    public native void setStateCreate();    public native void setStateStart();    public native void setStateStop();    public native void setStateDestroy();    public native void main(Activity context);    static    {        try {             System.loadLibrary(&quot;fmodL&quot;);        }        catch (UnsatisfiedLinkError e) { }        try {             System.loadLibrary(&quot;fmod&quot;);        }        catch (UnsatisfiedLinkError e) { }        System.loadLibrary(&quot;sound&quot;);    }}</code></pre><h4 id="1-2-更改cpp-文件中的-native-函数"><a href="#1-2-更改cpp-文件中的-native-函数" class="headerlink" title="1.2 更改cpp 文件中的 native 函数"></a>1.2 更改cpp 文件中的 native 函数</h4><p><strong>更改 common_platform.cpp 文件中对应的 native 函数名称(154~200行)</strong></p><pre><code>#include &quot;common.h&quot;#include &lt;string.h&gt;#include &lt;jni.h&gt;#include &lt;unistd.h&gt;#include &lt;string&gt;#include &lt;vector&gt;JNIEnv *gJNIEnv;jobject gMainActivityObject;int gDownButtons;int gLastDownButtons;int gPressedButtons;bool gSuspendState;bool gQuitState;std::string gUIString;std::vector&lt;char *&gt; gPathList;int FMOD_Main(); // Defined in examplevoid Common_Init(void **extraDriverData){    gDownButtons = 0;    gLastDownButtons = 0;    gPressedButtons = 0;    gSuspendState = false;    gQuitState = false;}void Common_Close(){    for (std::vector&lt;char *&gt;::iterator item = gPathList.begin(); item != gPathList.end(); ++item)    {        free(*item);    }    gPathList.clear();}void Common_Update(){    jstring text = gJNIEnv-&gt;NewStringUTF(gUIString.c_str());    jclass mainActivityClass = gJNIEnv-&gt;GetObjectClass(gMainActivityObject);    jmethodID updateScreenMethodID = gJNIEnv-&gt;GetMethodID(mainActivityClass, &quot;updateScreen&quot;, &quot;(Ljava/lang/String;)V&quot;);    gJNIEnv-&gt;CallVoidMethod(gMainActivityObject, updateScreenMethodID, text);    gJNIEnv-&gt;DeleteLocalRef(text);    gJNIEnv-&gt;DeleteLocalRef(mainActivityClass);    gUIString.clear();    gPressedButtons = (gLastDownButtons ^ gDownButtons) &amp; gDownButtons;    gLastDownButtons = gDownButtons;    if (gQuitState)    {        gPressedButtons |= (1 &lt;&lt; BTN_QUIT);    }}void Common_Sleep(unsigned int ms){    usleep(ms * 1000);}void Common_Exit(int returnCode){    exit(returnCode);}void Common_DrawText(const char *text){    char s[256];    snprintf(s, sizeof(s), &quot;%s\n&quot;, text);    gUIString.append(s);}void Common_LoadFileMemory(const char *name, void **buff, int *length){    FILE *file = fopen(name, &quot;rb&quot;);    fseek(file, 0, SEEK_END);    long len = ftell(file);    fseek(file, 0, SEEK_SET);    void *mem = malloc(len);    fread(mem, 1, len, file);    fclose(file);    *buff = mem;    *length = len;}void Common_UnloadFileMemory(void *buff){    free(buff);}bool Common_BtnPress(Common_Button btn){    return ((gPressedButtons &amp; (1 &lt;&lt; btn)) != 0);}bool Common_BtnDown(Common_Button btn){    return ((gDownButtons &amp; (1 &lt;&lt; btn)) != 0);}const char *Common_BtnStr(Common_Button btn){    switch (btn)    {        case BTN_ACTION1: return &quot;A&quot;;        case BTN_ACTION2: return &quot;B&quot;;        case BTN_ACTION3: return &quot;C&quot;;        case BTN_ACTION4: return &quot;D&quot;;        case BTN_UP:      return &quot;Up&quot;;        case BTN_DOWN:    return &quot;Down&quot;;        case BTN_LEFT:    return &quot;Left&quot;;        case BTN_RIGHT:   return &quot;Right&quot;;        case BTN_MORE:    return &quot;E&quot;;        case BTN_QUIT:    return &quot;Back&quot;;        default:          return &quot;Unknown&quot;;    }}const char *Common_MediaPath(const char *fileName){    char *filePath = (char *)calloc(256, sizeof(char));    strcat(filePath, &quot;file:///android_asset/&quot;);    strcat(filePath, fileName);    gPathList.push_back(filePath);    return filePath;}const char *Common_WritePath(const char *fileName){    return Common_MediaPath(fileName);}bool Common_SuspendState(){    return gSuspendState;}extern &quot;C&quot;{jstring Java_org_fmod_core_FmodUtils_getButtonLabel(JNIEnv *env, jobject thiz, jint index){    return env-&gt;NewStringUTF(Common_BtnStr((Common_Button)index));}void Java_org_fmod_core_FmodUtils_buttonDown(JNIEnv *env, jobject thiz, jint index){    gDownButtons |= (1 &lt;&lt; index);}void Java_org_fmod_core_FmodUtils_buttonUp(JNIEnv *env, jobject thiz, jint index){    gDownButtons &amp;= ~(1 &lt;&lt; index);}void Java_org_fmod_core_FmodUtils_setStateCreate(JNIEnv *env, jobject thiz){}void Java_org_fmod_core_FmodUtils_setStateStart(JNIEnv *env, jobject thiz){    gSuspendState = false;}void Java_org_fmod_core_FmodUtils_setStateStop(JNIEnv *env, jobject thiz){    gSuspendState = true;}void Java_org_fmod_core_FmodUtils_setStateDestroy(JNIEnv *env, jobject thiz){    gQuitState = true;}void Java_org_fmod_core_FmodUtils_main(JNIEnv *env, jobject thiz,jobject act){    gJNIEnv = env;    gMainActivityObject = act;    FMOD_Main();}} /* extern &quot;C&quot; */</code></pre><h4 id="1-3-替换MainActivity"><a href="#1-3-替换MainActivity" class="headerlink" title="1.3 替换MainActivity"></a>1.3 替换MainActivity</h4><p><strong>将 org.fmod.example.MainActivity 复制到自己的包路径下 ， 删除文件中 native 方法和 static 方法，新增 mFmodUtils 成员变量，并实例化，将调用 native 方法的地方都改成 mFmodUtils 实例下的方法，注意 main() 方法需要传当前 Activity 进去</strong></p><pre><code>public class MainActivity extends Activity implements OnTouchListener, Runnable {    private TextView mTxtScreen;    private Thread mThread;    private FmodUtils mFmodUtils;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mFmodUtils = FmodUtils.getInstance();        // Create the text area        mTxtScreen = new TextView(this);        mTxtScreen.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10.0f);        mTxtScreen.setTypeface(Typeface.MONOSPACE);        // Create the buttons        Button[] buttons = new Button[9];        for (int i = 0; i &lt; buttons.length; i++) {            buttons[i] = new Button(this);            buttons[i].setText(mFmodUtils.getButtonLabel(i));            buttons[i].setOnTouchListener(this);            buttons[i].setId(i);        }        // Create the button row layouts        LinearLayout llTopRowButtons = new LinearLayout(this);        llTopRowButtons.setOrientation(LinearLayout.HORIZONTAL);        LinearLayout llMiddleRowButtons = new LinearLayout(this);        llMiddleRowButtons.setOrientation(LinearLayout.HORIZONTAL);        LinearLayout llBottomRowButtons = new LinearLayout(this);        llBottomRowButtons.setOrientation(LinearLayout.HORIZONTAL);        // Create the main view layout        LinearLayout llView = new LinearLayout(this);        llView.setOrientation(LinearLayout.VERTICAL);        // Create layout parameters        LayoutParams lpLayout = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1.0f);        // Set up the view hierarchy        llTopRowButtons.addView(buttons[0], lpLayout);        llTopRowButtons.addView(buttons[6], lpLayout);        llTopRowButtons.addView(buttons[1], lpLayout);        llMiddleRowButtons.addView(buttons[4], lpLayout);        llMiddleRowButtons.addView(buttons[8], lpLayout);        llMiddleRowButtons.addView(buttons[5], lpLayout);        llBottomRowButtons.addView(buttons[2], lpLayout);        llBottomRowButtons.addView(buttons[7], lpLayout);        llBottomRowButtons.addView(buttons[3], lpLayout);        llView.addView(mTxtScreen, lpLayout);        llView.addView(llTopRowButtons);        llView.addView(llMiddleRowButtons);        llView.addView(llBottomRowButtons);        setContentView(llView);        // Request necessary permissions        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {            String[] perms = {&quot;android.permission.RECORD_AUDIO&quot;, &quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;};            if (checkSelfPermission(perms[0]) == PackageManager.PERMISSION_DENIED ||                    checkSelfPermission(perms[1]) == PackageManager.PERMISSION_DENIED) {                requestPermissions(perms, 200);            }        }        org.fmod.FMOD.init(this);        mThread = new Thread(this, &quot;Example Main&quot;);        mThread.start();        mFmodUtils.setStateCreate();    }    @Override    protected void onStart() {        super.onStart();        mFmodUtils.setStateStart();    }    @Override    protected void onStop() {        mFmodUtils.setStateStop();        super.onStop();    }    @Override    protected void onDestroy() {        mFmodUtils.setStateDestroy();        try {            mThread.join();        } catch (InterruptedException e) {        }        org.fmod.FMOD.close();        super.onDestroy();    }    @Override    public boolean onTouch(View view, MotionEvent motionEvent) {        if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {            mFmodUtils.buttonDown(view.getId());        } else if (motionEvent.getAction() == MotionEvent.ACTION_UP) {            mFmodUtils.buttonUp(view.getId());        }        return true;    }    @Override    public void run() {        mFmodUtils.main(this);    }    public void updateScreen(final String text) {        runOnUiThread(new Runnable() {            @Override            public void run() {                mTxtScreen.setText(text);            }        });    }}</code></pre><h4 id="1-4-更改AndroidManifest"><a href="#1-4-更改AndroidManifest" class="headerlink" title="1.4 更改AndroidManifest"></a>1.4 更改AndroidManifest</h4><p><strong>更改 AndroidManifest.xml 文件中的启动页的 Activity 为自己包路径下的 MainActivity ，删除fmod 示例的 MainActivity ,就可以运行成功了</strong></p><h3 id="2、实现按钮-D-和-E-播放音频"><a href="#2、实现按钮-D-和-E-播放音频" class="headerlink" title="2、实现按钮 D 和 E 播放音频"></a>2、实现按钮 D 和 E 播放音频</h3><p><strong>我们使用 singing.wav 和 wave.mp3 来实现 D 和 E 按钮播放音频的功能</strong></p><h4 id="2-1-加载音频文件"><a href="#2-1-加载音频文件" class="headerlink" title="2.1 加载音频文件"></a>2.1 加载音频文件</h4><p><strong>在play_sound.cpp 中的 FMOD_Main() 函数中的do…while前，定义 sound4 和 sound5 变量，然后使用这两个变量加载对应的音频文件</strong></p><pre><code>    FMOD::System     *system;    // 新增属性 sound4 和 sound5    FMOD::Sound      *sound1, *sound2, *sound3, *sound4, *sound5;    FMOD::Channel    *channel = 0;    FMOD_RESULT       result;    unsigned int      version;    void             *extradriverdata = 0;    Common_Init(&amp;extradriverdata);    /*        Create a System object and initialize    */    result = FMOD::System_Create(&amp;system);    ERRCHECK(result);    result = system-&gt;getVersion(&amp;version);    ERRCHECK(result);    if (version &lt; FMOD_VERSION)    {        Common_Fatal(&quot;FMOD lib version %08x doesn&#39;t match header version %08x&quot;, version, FMOD_VERSION);    }    result = system-&gt;init(32, FMOD_INIT_NORMAL, extradriverdata);    ERRCHECK(result);    result = system-&gt;createSound(Common_MediaPath(&quot;drumloop.wav&quot;), FMOD_DEFAULT, 0, &amp;sound1);    ERRCHECK(result);    result = sound1-&gt;setMode(FMOD_LOOP_OFF);    /* drumloop.wav has embedded loop points which automatically makes looping turn on, */    ERRCHECK(result);                           /* so turn it off here.  We could have also just put FMOD_LOOP_OFF in the above CreateSound call. */    result = system-&gt;createSound(Common_MediaPath(&quot;jaguar.wav&quot;), FMOD_DEFAULT, 0, &amp;sound2);    ERRCHECK(result);    result = system-&gt;createSound(Common_MediaPath(&quot;swish.wav&quot;), FMOD_DEFAULT, 0, &amp;sound3);    ERRCHECK(result);    //为sound4 加载音频文件singing.wav    result = system-&gt;createSound(Common_MediaPath(&quot;singing.wav&quot;), FMOD_DEFAULT, 0, &amp;sound4);    ERRCHECK(result);    //为sound5 加载音频文件wave.mp3    result = system-&gt;createSound(Common_MediaPath(&quot;wave.mp3&quot;), FMOD_DEFAULT, 0, &amp;sound5);    ERRCHECK(result);</code></pre><h4 id="2-2-将音频播放与按钮事件关联"><a href="#2-2-将音频播放与按钮事件关联" class="headerlink" title="2.2 将音频播放与按钮事件关联"></a>2.2 将音频播放与按钮事件关联</h4><p><strong>在play_sound.cpp 中的 FMOD_Main() 函数中的do…while的{}中，处理 D 和 E 按钮的事件，播放sound4 和 sound 5 , 按钮的事件类型可在 common_platform.cpp 中的 Common_BtnStr 函数中查看</strong></p><p>Common_BtnStr 函数</p><pre><code>const char *Common_BtnStr(Common_Button btn){    switch (btn)    {        case BTN_ACTION1: return &quot;A&quot;;        case BTN_ACTION2: return &quot;B&quot;;        case BTN_ACTION3: return &quot;C&quot;;        case BTN_ACTION4: return &quot;D&quot;;        case BTN_UP:      return &quot;Up&quot;;        case BTN_DOWN:    return &quot;Down&quot;;        case BTN_LEFT:    return &quot;Left&quot;;        case BTN_RIGHT:   return &quot;Right&quot;;        case BTN_MORE:    return &quot;E&quot;;        case BTN_QUIT:    return &quot;Back&quot;;        default:          return &quot;Unknown&quot;;    }}</code></pre><p>处理 D 和 E 按钮的事件，播放音频</p><pre><code>        //处理按钮 D 的事件，播放 sound4        if (Common_BtnPress(BTN_ACTION4))        {            result = system-&gt;playSound(sound4, 0, false, &amp;channel);            ERRCHECK(result);        }        //处理按钮 E 的事件，播放 sound5        if (Common_BtnPress(BTN_MORE))        {            result = system-&gt;playSound(sound5, 0, false, &amp;channel);            ERRCHECK(result);        }</code></pre><h4 id="2-3-释放-sound4-和-sound5"><a href="#2-3-释放-sound4-和-sound5" class="headerlink" title="2.3 释放 sound4 和 sound5"></a>2.3 释放 sound4 和 sound5</h4><p><strong>在do…while 执行之后，释放加载了对应音频文件的属性</strong></p><pre><code>/*        Shut down    */    result = sound1-&gt;release();    ERRCHECK(result);    result = sound2-&gt;release();    ERRCHECK(result);    result = sound3-&gt;release();    ERRCHECK(result);    //释放sound4    result = sound4-&gt;release();    ERRCHECK(result);    //释放sound5    result = sound5-&gt;release();    ERRCHECK(result);    result = system-&gt;close();    ERRCHECK(result);    result = system-&gt;release();    ERRCHECK(result);    Common_Close();</code></pre><h4 id="2-4-play-sound-cpp-完整代码"><a href="#2-4-play-sound-cpp-完整代码" class="headerlink" title="2.4 play_sound.cpp 完整代码"></a>2.4 play_sound.cpp 完整代码</h4><p><strong>更改完成之后，按钮D 和 E 播放音频的功能实现了，点击运行就可以了，下面贴上play_sound.cpp的完整代码</strong></p><pre><code>/*==============================================================================Play Sound ExampleCopyright (c), Firelight Technologies Pty, Ltd 2004-2019.This example shows how to simply load and play multiple sounds, the simplest usage of FMOD. By default FMOD will decode the entire file into memory when itloads. If the sounds are big and possibly take up a lot of RAM it would bebetter to use the FMOD_CREATESTREAM flag, this will stream the file in realtimeas it plays.==============================================================================*/#include &quot;inc/fmod.hpp&quot;#include &quot;common.h&quot;int FMOD_Main(){    FMOD::System     *system;    // 新增属性 sound4 和 sound5    FMOD::Sound      *sound1, *sound2, *sound3, *sound4, *sound5;    FMOD::Channel    *channel = 0;    FMOD_RESULT       result;    unsigned int      version;    void             *extradriverdata = 0;    Common_Init(&amp;extradriverdata);    /*        Create a System object and initialize    */    result = FMOD::System_Create(&amp;system);    ERRCHECK(result);    result = system-&gt;getVersion(&amp;version);    ERRCHECK(result);    if (version &lt; FMOD_VERSION)    {        Common_Fatal(&quot;FMOD lib version %08x doesn&#39;t match header version %08x&quot;, version, FMOD_VERSION);    }    result = system-&gt;init(32, FMOD_INIT_NORMAL, extradriverdata);    ERRCHECK(result);    result = system-&gt;createSound(Common_MediaPath(&quot;drumloop.wav&quot;), FMOD_DEFAULT, 0, &amp;sound1);    ERRCHECK(result);    result = sound1-&gt;setMode(FMOD_LOOP_OFF);    /* drumloop.wav has embedded loop points which automatically makes looping turn on, */    ERRCHECK(result);                           /* so turn it off here.  We could have also just put FMOD_LOOP_OFF in the above CreateSound call. */    result = system-&gt;createSound(Common_MediaPath(&quot;jaguar.wav&quot;), FMOD_DEFAULT, 0, &amp;sound2);    ERRCHECK(result);    result = system-&gt;createSound(Common_MediaPath(&quot;swish.wav&quot;), FMOD_DEFAULT, 0, &amp;sound3);    ERRCHECK(result);    //为sound4 加载音频文件singing.wav    result = system-&gt;createSound(Common_MediaPath(&quot;singing.wav&quot;), FMOD_DEFAULT, 0, &amp;sound4);    ERRCHECK(result);    //为sound5 加载音频文件wave.mp3    result = system-&gt;createSound(Common_MediaPath(&quot;wave.mp3&quot;), FMOD_DEFAULT, 0, &amp;sound5);    ERRCHECK(result);    /*        Main loop    */    do    {        Common_Update();        if (Common_BtnPress(BTN_ACTION1))        {            result = system-&gt;playSound(sound1, 0, false, &amp;channel);            ERRCHECK(result);        }        if (Common_BtnPress(BTN_ACTION2))        {            result = system-&gt;playSound(sound2, 0, false, &amp;channel);            ERRCHECK(result);        }        if (Common_BtnPress(BTN_ACTION3))        {            result = system-&gt;playSound(sound3, 0, false, &amp;channel);            ERRCHECK(result);        }        //处理按钮 D 的事件，播放 sound4        if (Common_BtnPress(BTN_ACTION4))        {            result = system-&gt;playSound(sound4, 0, false, &amp;channel);            ERRCHECK(result);        }        //处理按钮 E 的事件，播放 sound5        if (Common_BtnPress(BTN_MORE))        {            result = system-&gt;playSound(sound5, 0, false, &amp;channel);            ERRCHECK(result);        }        result = system-&gt;update();        ERRCHECK(result);        {            unsigned int ms = 0;            unsigned int lenms = 0;            bool         playing = 0;            bool         paused = 0;            int          channelsplaying = 0;            if (channel)            {                FMOD::Sound *currentsound = 0;                result = channel-&gt;isPlaying(&amp;playing);                if ((result != FMOD_OK) &amp;&amp; (result != FMOD_ERR_INVALID_HANDLE) &amp;&amp; (result != FMOD_ERR_CHANNEL_STOLEN))                {                    ERRCHECK(result);                }                result = channel-&gt;getPaused(&amp;paused);                if ((result != FMOD_OK) &amp;&amp; (result != FMOD_ERR_INVALID_HANDLE) &amp;&amp; (result != FMOD_ERR_CHANNEL_STOLEN))                {                    ERRCHECK(result);                }                result = channel-&gt;getPosition(&amp;ms, FMOD_TIMEUNIT_MS);                if ((result != FMOD_OK) &amp;&amp; (result != FMOD_ERR_INVALID_HANDLE) &amp;&amp; (result != FMOD_ERR_CHANNEL_STOLEN))                {                    ERRCHECK(result);                }                channel-&gt;getCurrentSound(&amp;currentsound);                if (currentsound)                {                    result = currentsound-&gt;getLength(&amp;lenms, FMOD_TIMEUNIT_MS);                    if ((result != FMOD_OK) &amp;&amp; (result != FMOD_ERR_INVALID_HANDLE) &amp;&amp; (result != FMOD_ERR_CHANNEL_STOLEN))                    {                        ERRCHECK(result);                    }                }            }            system-&gt;getChannelsPlaying(&amp;channelsplaying, NULL);            Common_Draw(&quot;==================================================&quot;);            Common_Draw(&quot;Play Sound Example.&quot;);            Common_Draw(&quot;Copyright (c) Firelight Technologies 2004-2019.&quot;);            Common_Draw(&quot;==================================================&quot;);            Common_Draw(&quot;&quot;);            Common_Draw(&quot;Press %s to play a mono sound (drumloop)&quot;, Common_BtnStr(BTN_ACTION1));            Common_Draw(&quot;Press %s to play a mono sound (jaguar)&quot;, Common_BtnStr(BTN_ACTION2));            Common_Draw(&quot;Press %s to play a stereo sound (swish)&quot;, Common_BtnStr(BTN_ACTION3));            Common_Draw(&quot;Press %s to quit&quot;, Common_BtnStr(BTN_QUIT));            Common_Draw(&quot;&quot;);            Common_Draw(&quot;Time %02d:%02d:%02d/%02d:%02d:%02d : %s&quot;, ms / 1000 / 60, ms / 1000 % 60, ms / 10 % 100, lenms / 1000 / 60, lenms / 1000 % 60, lenms / 10 % 100, paused ? &quot;Paused &quot; : playing ? &quot;Playing&quot; : &quot;Stopped&quot;);            Common_Draw(&quot;Channels Playing %d&quot;, channelsplaying);        }        Common_Sleep(50);    } while (!Common_BtnPress(BTN_QUIT));    /*        Shut down    */    result = sound1-&gt;release();    ERRCHECK(result);    result = sound2-&gt;release();    ERRCHECK(result);    result = sound3-&gt;release();    ERRCHECK(result);    //释放sound4    result = sound4-&gt;release();    ERRCHECK(result);    //释放sound5    result = sound5-&gt;release();    ERRCHECK(result);    result = system-&gt;close();    ERRCHECK(result);    result = system-&gt;release();    ERRCHECK(result);    Common_Close();    return 0;}</code></pre><h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><p><a href="https://github.com/onestravel/playSound" target="_blank" rel="noopener">PlaySound源码</a></p><p><strong>到此，我们实现集成 fmod 的音频播放功能已经实现，也实现了其他按钮播放音频文件的功能，这是实现模拟QQ变声项目的前期准备，后面我们会继续实现QQ变声功能。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> Fmod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio下NDK开发流程</title>
      <link href="/20190301/android-ndk/androidstudio-xia-jin-xing-ndk-kai-fa/"/>
      <url>/20190301/android-ndk/androidstudio-xia-jin-xing-ndk-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="AndroidStudio下NDK开发流程"><a href="#AndroidStudio下NDK开发流程" class="headerlink" title="AndroidStudio下NDK开发流程"></a>AndroidStudio下NDK开发流程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>使用Android Studio进行NDK开发时，可在创建Android Studio项目时选择创建C++项目，创建好之后，默认会在src/main/下创建一个cpp的文件夹，C/C++相关的文件就存放在这个文件夹中；在app下面的build.gradle中有NDK的相关配置</strong></p><h2 id="一、NDK开发进行文件加密解密"><a href="#一、NDK开发进行文件加密解密" class="headerlink" title="一、NDK开发进行文件加密解密"></a>一、NDK开发进行文件加密解密</h2><h3 id="1、实现Java层native方法"><a href="#1、实现Java层native方法" class="headerlink" title="1、实现Java层native方法"></a>1、实现Java层native方法</h3><ul><li>创建Android项目</li><li>写一个含有加密和解密按钮的view</li></ul><pre><code>&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:orientation=&quot;vertical&quot;&gt;    &lt;Button        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:text=&quot;加密&quot;        android:onClick=&quot;mCrypt&quot;/&gt;    &lt;Button        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:text=&quot;解密&quot;        android:onClick=&quot;mDecrypt&quot;/&gt;&lt;/LinearLayout&gt;</code></pre><ul><li>编写一个实现对文件加密解密的java类: Crpytor.java</li></ul><pre><code>package com.example.ndk.filecrypt;public class Cryptor {    static {        System.loadLibrary(&quot;cryptor&quot;);    }    /**     * 对文件进行加密     * @param path 需要加密的文件路径     * @return 加密后的文件路径     */    public native static void crypt(String path,String cryptPath);    /**     * 对文件进行解密     * @param cryptPath 加密文件的路径     * @return 解密后的文件路径     */    public native static void decrypt(String cryptPath,String decryptPath);}</code></pre><ul><li>在View对应的java类中实现相应的点击事件</li></ul><pre><code>public class MainActivity extends AppCompatActivity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);    }    /**     * 加密的点击事件     *     * @param view     */    public void mCrypt(View view) {        File sdDir = Environment.getExternalStorageDirectory();        String sdpath = sdDir.getAbsolutePath();        String path = sdpath + &quot;/ndk.jpg&quot;;        String cryptPath = sdpath + &quot;/ndk_crypt.jpg&quot;;        Cryptor.crypt(path, cryptPath);        Toast.makeText(this, &quot;加密完成&quot;, Toast.LENGTH_SHORT).show();    }    /**     * 解密的点击事件     *     * @param view     */    public void mDecrypt(View view) {        File sdDir = Environment.getExternalStorageDirectory();        String sdpath = sdDir.getAbsolutePath();        String cryptPath = sdpath + &quot;/ndk_crypt.jpg&quot;;        String decryptPath = sdpath + &quot;/ndk_decrypt.jpg&quot;;        Cryptor.decrypt(cryptPath, decryptPath);        Toast.makeText(this, &quot;解密完成&quot;, Toast.LENGTH_SHORT).show();    }}</code></pre><h3 id="2、使用-javah-命令生成头文件"><a href="#2、使用-javah-命令生成头文件" class="headerlink" title="2、使用 javah 命令生成头文件"></a>2、使用 javah 命令生成头文件</h3><ul><li>执行javah命令，因为AndroidStudio使用的是UTF-8的编码，所以在执行javah命令时需要指定编码为UTF-8(默认为GBK);</li></ul><pre><code>javah -encoding UTF-8 com.example.ndk.filecrypt.Cryptor</code></pre><ul><li>生成 com_example_ndk_filecrypt_Cryptor.h 文件</li></ul><h3 id="3、创建JNI-CPP目录，添加NDK本地支持"><a href="#3、创建JNI-CPP目录，添加NDK本地支持" class="headerlink" title="3、创建JNI/CPP目录，添加NDK本地支持"></a>3、创建JNI/CPP目录，添加NDK本地支持</h3><ul><li>在src/main目录下创建jni/cpp目录，将刚刚生成的.h文件复制到该目录下</li><li>在项目配置中设置 Android NDK location 目录，需要提前下载 NDK 相关支持 (在Android SDK 下载中选择 SDK Tools 中的 LLDB 、CMake 、NDK 三项进行下载)</li><li>在jni 目录下创建 CMakeLists.txt 文件</li></ul><pre><code># cmake 版本cmake_minimum_required(VERSION 3.4.1)# 添加支持add_library( # 为library设置名称             cryptor             # 设置该library为共享的             SHARED             # 提供C/C++相关文件的相对路径             cryptor.c )find_library( # Sets the name of the path variable.              log-lib              # Specifies the name of the NDK library that              # you want CMake to locate.              log )target_link_libraries( # Specifies the target library.与上面add_library的名称相同                       cryptor                       # Links the target library to the log library                       # included in the NDK.                       ${log-lib} )</code></pre><ul><li>在 app目录下的build.gradle 文件中配置jni 目录，以及NDK支持</li></ul><pre><code>android {    defaultConfig {        // NDK的配置        ndk{             moduleName &quot;cryptor&quot;            abiFilters  &quot;armeabi-v7a&quot;, &quot;x86&quot;        }    }    sourceSets {        //配置jni目录        main {            jni.srcDirs = []        }    }    externalNativeBuild {        //配置cmake文件路径        cmake {            path file(&#39;src/main/jni/CMakeLists.txt&#39;)        }    }}</code></pre><h3 id="4、实现头文件中定义的函数"><a href="#4、实现头文件中定义的函数" class="headerlink" title="4、实现头文件中定义的函数"></a>4、实现头文件中定义的函数</h3><pre><code>#include &quot;com_example_ndk_filecrypt_Cryptor.h&quot;#include &lt;string.h&gt;char password[] = &quot;qazwsxedc&quot;;//加密char *crypt(char normal_path[], char crypt_path[]) {    //打开文件    FILE *normal_fp = fopen(normal_path, &quot;rb&quot;);    FILE *crypt_fp = fopen(crypt_path, &quot;wb&quot;);    //一次读取一个字符    int ch;    int i = 0;    int pwd_len = strlen(password);    while ((ch = fgetc(normal_fp)) != EOF) {//End of FILE        //加密        fputc(ch ^ password[i % pwd_len], crypt_fp);        i++;    }    fclose(normal_fp);    fclose(crypt_fp);}//解密char *decrypt(char crypt_path[], char decrypt_path[]) {    //打开文件    FILE *crypt_fp = fopen(crypt_path, &quot;rb&quot;);    FILE *decrypt_fp = fopen(decrypt_path, &quot;wb&quot;);    //一次读取一个字符    int ch;    int i = 0;    int pwd_len = strlen(password);    while ((ch = fgetc(crypt_fp)) != EOF) {//End of FILE        //加密        fputc(ch ^ password[i % pwd_len], decrypt_fp);        i++;    }    fclose(crypt_fp);    fclose(decrypt_fp);}/** * 加密 * @param env * @param cls * @param jstr * @return */JNIEXPORT void JNICALL Java_com_example_ndk_filecrypt_Cryptor_crypt        (JNIEnv *env, jclass cls, jstring normal_path_str, jstring crypt_path_str) {    char *path = (*env)-&gt;GetStringUTFChars(env, normal_path_str, NULL);    char *crypt_path = (*env)-&gt;GetStringUTFChars(env, crypt_path_str, NULL);    crypt(path, crypt_path);    //对变量的内存进行释放    (*env)-&gt;ReleaseStringChars(env, normal_path_str, path);    (*env)-&gt;ReleaseStringChars(env, crypt_path_str, crypt_path);}/** * 解密 * @param env * @param cls * @param jstr * @return */JNIEXPORT void JNICALL Java_com_example_ndk_filecrypt_Cryptor_decrypt        (JNIEnv *env, jclass cls, jstring crypt_path_str, jstring decrypt_path_str) {    char *crypt_path = (*env)-&gt;GetStringUTFChars(env, crypt_path_str, NULL);    char *decrypt_path = (*env)-&gt;GetStringUTFChars(env, decrypt_path_str, NULL);    decrypt(crypt_path, decrypt_path);    //对变量的内存进行释放    (*env)-&gt;ReleaseStringChars(env, crypt_path_str, crypt_path);    (*env)-&gt;ReleaseStringChars(env, decrypt_path_str, decrypt_path);}</code></pre><h3 id="5、编译生成-so动态库"><a href="#5、编译生成-so动态库" class="headerlink" title="5、编译生成.so动态库"></a>5、编译生成.so动态库</h3><ul><li>点击Build -&gt; Make Module app </li><li>可以在app -&gt; build -&gt; intermediates -&gt; cmake -&gt; debug -&gt; obj 下看到对应的armeabi-v7a 和 x86 的so库</li></ul><h3 id="6、加载-so动态库，运行程序"><a href="#6、加载-so动态库，运行程序" class="headerlink" title="6、加载.so动态库，运行程序"></a>6、加载.so动态库，运行程序</h3><ul><li>在src/main 目录下创建 jniLibs 文件夹</li><li>将上面生成的 armeabi-v7a 和 x86 的so库 复制到该 jniLibs 文件夹内</li><li>运行程序</li></ul><h2 id="二、NDK开发进行文件拆分与合并"><a href="#二、NDK开发进行文件拆分与合并" class="headerlink" title="二、NDK开发进行文件拆分与合并"></a>二、NDK开发进行文件拆分与合并</h2><h3 id="1、实现Java层native方法-1"><a href="#1、实现Java层native方法-1" class="headerlink" title="1、实现Java层native方法"></a>1、实现Java层native方法</h3><ul><li>创建Android项目</li><li>写一个含有加密和解密按钮的view</li></ul><pre><code>&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    android:orientation=&quot;vertical&quot;&gt;    &lt;Button        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:text=&quot;拆分&quot;        android:onClick=&quot;mDiff&quot;/&gt;    &lt;Button        android:layout_width=&quot;match_parent&quot;        android:layout_height=&quot;wrap_content&quot;        android:text=&quot;合并&quot;        android:onClick=&quot;mPatch&quot;/&gt;&lt;/LinearLayout&gt;</code></pre><ul><li>编写一个实现对文件拆分合并的java类: FilePatchUtils.java</li></ul><pre><code>package com.example.ndk.filepatchpublic class FilePatchUtils {    static {        System.loadLibrary(&quot;filepatch-lib&quot;);    }    /**     * 对文件进行拆分     * @param path  文件路径     * @param count 拆分成多少个     */    public native static void diff(String path,String pathPattern,int count);    /**     * 对文件进行合并     * @param pathPattern 需合并文件路径（%d）     * @param count 将多少个文件合并     * @param patchPath 合并后文件路径     */    public native static void patch(String pathPattern,int count,String patchPath);}</code></pre><ul><li><p>在View对应的java类中实现相应的点击事件</p><pre><code>public class FilePatchActivity extends AppCompatActivity {  private String sdpath;  @Override  protected void onCreate(Bundle savedInstanceState) {      super.onCreate(savedInstanceState);      setContentView(R.layout.activity_file_patch);      File sdDir = Environment.getExternalStorageDirectory();      sdpath = sdDir.getAbsolutePath();  }   /**   * 文件拆分   *   * @param view   */  public void mDiff(View view) {      String path = sdpath + File.separatorChar + &quot;ndk.jpg&quot;;      String pathPattern = sdpath + File.separatorChar + &quot;ndk_%d.jpg&quot;;      FilePatchUtils.diff(path, pathPattern, 3);      Toast.makeText(this, &quot;拆分完成&quot;, Toast.LENGTH_SHORT).show();  }  /**   * 文件合并   *   * @param view   */  public void mPatch(View view) {      String patchPath = sdpath + File.separatorChar + &quot;ndk_patch.jpg&quot;;      String pathPattern = sdpath + File.separatorChar + &quot;ndk_%d.jpg&quot;;      FilePatchUtils.patch(pathPattern, 3, patchPath);      Toast.makeText(this, &quot;合并完成&quot;, Toast.LENGTH_SHORT).show();  }}</code></pre></li></ul><pre><code>### 2、使用 javah 命令生成头文件- 执行javah命令，因为AndroidStudio使用的是UTF-8的编码，所以在执行javah命令时需要指定编码为UTF-8(默认为GBK);</code></pre><p>javah -encoding UTF-8 com.example.ndk.filepatch.FilePatchUtils</p><pre><code>- 生成 com_example_ndk_filepatch_FilePatchUtils.h 文件### 3、创建JNI目录，添加NDK本地支持- 在src/main目录下创建jni目录，将刚刚生成的.h文件复制到该目录下- 在项目配置中设置 Android NDK location 目录，需要提前下载 NDK 相关支持 (在Android SDK 下载中选择 SDK Tools 中的 LLDB 、CMake 、NDK 三项进行下载)- 在jni 目录下创建 CMakeLists.txt 文件;同上；- 在 app目录下的build.gradle 文件中配置jni 目录，以及NDK支持；同上；### 4、实现头文件中定义的函数</code></pre><p>#include “com_example_ndk_filepatch_FilePatchUtils.h”</p><p>#include &lt;android/log.h&gt;</p><p>#define LOGI(FORMAT, …) <strong>android_log_print(ANDROID_LOG_INFO,”FILE_PATCH”,FORMAT,</strong>VA_ARGS__);</p><p>#define LOGE(FORMAT, …) <strong>android_log_print(ANDROID_LOG_ERROR,”FILE_PATCH”,##FORMAT,</strong>VA_ARGS__);</p><p>/**</p><ul><li>获取文件大小</li><li>@param path 文件路径</li><li>@return 文件大小</li><li>/<br>long get_file_size(char *path) {<br>  FILE *fp = fopen(path, “r”);<br>  if (fp == NULL) {<pre><code>  return 0;</code></pre>  }<br>  fseek(fp, 0, SEEK_END);<br>  return ftell(fp);<br>}</li></ul><p>/*</p><ul><li><p>Class:     com_example_ndk_filepatch_FilePatchUtils</p></li><li><p>Method:    diff</p></li><li><p>Signature: (Ljava/lang/String;Ljava/lang/String;I)V</p></li><li><p>/<br>JNIEXPORT void JNICALL Java_com_example_ndk_filepatch_FilePatchUtils_diff</p><pre><code>  (JNIEnv *env, jclass cls, jstring file_path_str, jstring pattern_str, jint file_count) {</code></pre><p>  const char <em>path = (</em>env)-&gt;GetStringUTFChars(env, file_path_str, NULL);<br>  const char <em>pattern = (</em>env)-&gt;GetStringUTFChars(env, pattern_str, NULL);</p><p>  //得到分割之后的文件的路径列表<br>  char **filePaths = malloc(sizeof(char *) * file_count);<br>  //读取path对应路径，循环写入子文件<br>  int i = 0;<br>  for (; i &lt; file_count; i++) {</p><pre><code>  //给元素开辟空间  filePaths[i] = malloc(sizeof(char) * 100);  //给元素赋值  sprintf(filePaths[i], pattern, (i + 1));  LOGI(&quot;patch path:%s&quot;, filePaths[i]);</code></pre><p>  }<br>  //分割文件<br>  FILE *fp = fopen(path, “rb”);<br>  int fileSize = get_file_size(path);<br>  if (fileSize % file_count == 0) {</p><pre><code>  //能整除  int part = fileSize / file_count;  //逐一写入分割子文件中  int i = 0;  for (; i &lt; file_count; i++) {      FILE *fwp = fopen(filePaths[i], &quot;wb&quot;);      int j = 0;      for (; j &lt; part; j++) {          fputc(fgetc(fp), fwp);      }      fclose(fwp);  }  fclose(fp);</code></pre><p>  } else {</p><pre><code>  //不能整除  int part = fileSize / (file_count - 1);  //逐一写入分割子文件中  int i = 0;  for (; i &lt; file_count - 1; i++) {      FILE *fwp = fopen(filePaths[i], &quot;wb&quot;);      int j = 0;      for (; j &lt; part; j++) {          fputc(fgetc(fp), fwp);      }      fclose(fwp);  }  part = fileSize % (file_count - 1);  if (part &gt; 0) {      FILE *fwp = fopen(filePaths[file_count - 1], &quot;wb&quot;);      int j = 0;      for (; j &lt; part; j++) {          fputc(fgetc(fp), fwp);      }      fclose(fwp);  }  fclose(fp);</code></pre><p>  }<br>  //释放<br>  i = 0;<br>  for (; i &lt; file_count; i++) {</p><pre><code>  free(filePaths[i]);</code></pre><p>  }<br>  free(filePaths);<br>  //对变量的内存进行释放<br>  (<em>env)-&gt;ReleaseStringChars(env, file_path_str, path);<br>  (</em>env)-&gt;ReleaseStringChars(env, pattern_str, pattern);<br>}</p></li></ul><p>/*</p><ul><li>Class:     com_example_ndk_filepatch_FilePatchUtils</li><li>Method:    patch</li><li>Signature: (Ljava/lang/String;Ljava/lang/String;I)V</li><li>/<br>JNIEXPORT void JNICALL Java_com_example_ndk_filepatch_FilePatchUtils_patch<pre><code>  (JNIEnv *env, jclass cls, jstring pattern_str, jint count, jstring patch_path_str) {</code></pre>  char <em>pattern = (</em>env)-&gt;GetStringUTFChars(env, pattern_str, NULL);<br>  char <em>patch_path = (</em>env)-&gt;GetStringUTFChars(env, patch_path_str, NULL);<br>  FILE *fwp = fopen(patch_path, “wb”);<br>  int i = 0;<br>  for (; i &lt; count; i++) {<pre><code>  //单个文件逐一写入fwp  char *path = malloc(sizeof(char) * 100);  sprintf(path, pattern, (i + 1));  LOGI(&quot;patch path:%s&quot;, path);  FILE *frp = fopen(path, &quot;rb&quot;);  //判断文件是否为NULL  if (frp != NULL) {      //获取单个文件大小      int file_size = get_file_size(path);      int j = 0;      for (; j &lt; file_size; ++j) {          fputc(fgetc(frp), fwp);      }      fclose(frp);  }  //释放分配的内存空间  free(path);</code></pre>  }<br>  fclose(fwp);<br>  //对变量的内存进行释放<br>  (<em>env)-&gt;ReleaseStringChars(env, pattern_str, pattern);<br>  (</em>env)-&gt;ReleaseStringChars(env, patch_path_str, patch_path);<br>}</li></ul><pre><code>### 5、编译生成.so动态库- 点击Build -&gt; Make Module app - 可以在app -&gt; build -&gt; intermediates -&gt; cmake -&gt; debug -&gt; obj 下看到对应的armeabi-v7a 和 x86 的so库### 6、加载.so动态库，运行程序- 在src/main 目录下创建 jniLibs 文件夹- 将上面生成的 armeabi-v7a 和 x86 的so库 复制到该 jniLibs 文件夹内- 运行程序</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BottomNavigationBar 导航菜单</title>
      <link href="/20190130/android-ndk/bottomnavigationbar-ke-yi-tu-qi-de-dao-hang-cai-dan/"/>
      <url>/20190130/android-ndk/bottomnavigationbar-ke-yi-tu-qi-de-dao-hang-cai-dan/</url>
      
        <content type="html"><![CDATA[<h1 id="BottomNavigationBar-使用说明"><a href="#BottomNavigationBar-使用说明" class="headerlink" title="BottomNavigationBar 使用说明"></a><a href="https://github.com/onestravel/BottomNavigationBar" target="_blank" rel="noopener">BottomNavigationBar</a> 使用说明</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><h5 id="BottomNavigationBar-是自定义的一个实现App应用底部导航栏功能的View-可以实现底部-2-5-个导航菜单（一般不会有更多），可以实现某一个菜单凸起的效果，如，有5个菜单，可以选择让第三个菜单凸起（floating），这是很多App都有的功能-可以根据编写的颜色变化的资源文件来更改图标和文字选中时和未选中时的颜色，可以自由控制是否需要选中（checkable）-选择开启时，可变换为选中颜色，选择关闭时，不能更改为选择颜色-可以控制默认选中哪一项；可以设置某一个导航菜单的未读消息数（数字或者小红点）。"><a href="#BottomNavigationBar-是自定义的一个实现App应用底部导航栏功能的View-可以实现底部-2-5-个导航菜单（一般不会有更多），可以实现某一个菜单凸起的效果，如，有5个菜单，可以选择让第三个菜单凸起（floating），这是很多App都有的功能-可以根据编写的颜色变化的资源文件来更改图标和文字选中时和未选中时的颜色，可以自由控制是否需要选中（checkable）-选择开启时，可变换为选中颜色，选择关闭时，不能更改为选择颜色-可以控制默认选中哪一项；可以设置某一个导航菜单的未读消息数（数字或者小红点）。" class="headerlink" title="BottomNavigationBar 是自定义的一个实现App应用底部导航栏功能的View,可以实现底部 2-5 个导航菜单（一般不会有更多），可以实现某一个菜单凸起的效果，如，有5个菜单，可以选择让第三个菜单凸起（floating），这是很多App都有的功能; 可以根据编写的颜色变化的资源文件来更改图标和文字选中时和未选中时的颜色，可以自由控制是否需要选中（checkable）,选择开启时，可变换为选中颜色，选择关闭时，不能更改为选择颜色;可以控制默认选中哪一项；可以设置某一个导航菜单的未读消息数（数字或者小红点）。"></a>BottomNavigationBar 是自定义的一个实现App应用底部导航栏功能的View,可以实现底部 2-5 个导航菜单（一般不会有更多），可以实现某一个菜单凸起的效果，如，有5个菜单，可以选择让第三个菜单凸起（floating），这是很多App都有的功能; 可以根据编写的颜色变化的资源文件来更改图标和文字选中时和未选中时的颜色，可以自由控制是否需要选中（checkable）,选择开启时，可变换为选中颜色，选择关闭时，不能更改为选择颜色;可以控制默认选中哪一项；可以设置某一个导航菜单的未读消息数（数字或者小红点）。</h5><h3 id="先看一组效果图"><a href="#先看一组效果图" class="headerlink" title="先看一组效果图"></a>先看一组效果图</h3><h4 id="五个菜单，没有凸起的，都是可选中的"><a href="#五个菜单，没有凸起的，都是可选中的" class="headerlink" title="五个菜单，没有凸起的，都是可选中的"></a>五个菜单，没有凸起的，都是可选中的</h4><p><img src="/images/gif/SVID_20190130_155132_1.gif" alt="SVID_20190130_155132_1"></p><center>图1</center>#### 中间有凸起，并且中间的不能选中，但点击事件可以响应<p><img src="/images/gif/SVID_20190130_155440_1.gif" alt="SVID_20190130_155440_1"></p><center>图2</center>## 引入方法<p>TAG:     <a href="https://jitpack.io/#onestravel/BottomNavigationBar" target="_blank" rel="noopener"><img src="https://jitpack.io/v/onestravel/BottomNavigationBar.svg" alt=""></a></p><h4 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h4><ul><li>在项目中的根目录下的 build.gradle (与model同级的) 中增加如下配置</li></ul><pre><code>    allprojects {        repositories {            ...            maven { url &#39;https://jitpack.io&#39; }        }    }</code></pre><ul><li>在model 中的build.gradle 中增加依赖</li></ul><pre><code>dependencies {implementation &#39;com.github.onestravel:BottomNavigationBar:TAG&#39;}</code></pre><h4 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h4><ul><li>在pom.xml文件中加入下面配置</li></ul><pre><code>    &lt;repositories&gt;        &lt;repository&gt;            &lt;id&gt;jitpack.io&lt;/id&gt;            &lt;url&gt;https://jitpack.io&lt;/url&gt;        &lt;/repository&gt;    &lt;/repositories&gt;</code></pre><ul><li>添加maven依赖</li></ul><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>        <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>onestravel<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>        <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>BottomNavigationBar<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>        <span class="token operator">&lt;</span>version<span class="token operator">></span>TAG<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="属性说明"><a href="#属性说明" class="headerlink" title="属性说明"></a>属性说明</h2><h3 id="BottomNavigationBar-属性说明"><a href="#BottomNavigationBar-属性说明" class="headerlink" title="BottomNavigationBar 属性说明"></a>BottomNavigationBar 属性说明</h3><table><thead><tr><th>属性</th><th>参考值</th><th>说明</th></tr></thead><tbody><tr><td>app:itemIconTint</td><td>@drawable/tab_selecter</td><td>整体的tab菜单的图片选中和未选中的颜色变化，传入一个资源drawable文件</td></tr><tr><td>app:itemTextColor</td><td>@drawable/tab_selecter</td><td>@drawable/tab_selecter@drawable/tab_selecter整体的tab菜单的图片选中和未选中的颜色变化，传入一个资源drawable文件</td></tr><tr><td>app:floatingEnable</td><td>true/false</td><td>是否开启浮动，默认为false，设置为true是，可以实现中间凸起</td></tr><tr><td>app:floatingUp</td><td>20dp</td><td>设置Tab的上浮尺寸，比如：上浮20dp，上浮尺寸不可超过整个菜单高度的1/2</td></tr><tr><td>app:menu</td><td>@menu/botom_menu</td><td>BottomNavigationBar导航栏的关键，设置导航栏的tab菜单</td></tr><tr><td>app:itemTextSize</td><td>15sp</td><td>设置导航栏文字的大小</td></tr><tr><td>app:itemIconWidth</td><td>30dp</td><td>设置导航栏Icon的宽度</td></tr><tr><td>app:temIconHeight</td><td>30dp</td><td>设置导航栏Icon的高度</td></tr><tr><td>app:itemTextTopMargin</td><td>5dp</td><td>置导航栏文字和Icon的间隔高度</td></tr></tbody></table><h4 id="示例1-不需要浮动（凸起）的菜单，图1效果"><a href="#示例1-不需要浮动（凸起）的菜单，图1效果" class="headerlink" title="示例1:不需要浮动（凸起）的菜单，图1效果"></a>示例1:不需要浮动（凸起）的菜单，图1效果</h4><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span>cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>view<span class="token punctuation">.</span>BottomNavigationBar        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/BottomLayout"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>        android<span class="token operator">:</span>layout_alignParentBottom<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@android:color/white"</span>        android<span class="token operator">:</span>paddingTop<span class="token operator">=</span><span class="token string">"5dp"</span>        android<span class="token operator">:</span>paddingBottom<span class="token operator">=</span><span class="token string">"5dp"</span>        app<span class="token operator">:</span>menu<span class="token operator">=</span><span class="token string">"@menu/navigation_menu"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>view<span class="token punctuation">.</span>BottomNavigationBar<span class="token operator">></span></code></pre><h4 id="示例2-需要浮动（凸起）的菜单，图2效果"><a href="#示例2-需要浮动（凸起）的菜单，图2效果" class="headerlink" title="示例2:需要浮动（凸起）的菜单，图2效果"></a>示例2:需要浮动（凸起）的菜单，图2效果</h4><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>view<span class="token punctuation">.</span>BottomNavigationBar        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/BottomLayout"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"50dp"</span>        android<span class="token operator">:</span>layout_alignParentBottom<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">"@android:color/white"</span>        android<span class="token operator">:</span>paddingTop<span class="token operator">=</span><span class="token string">"5dp"</span>        android<span class="token operator">:</span>paddingBottom<span class="token operator">=</span><span class="token string">"5dp"</span>        app<span class="token operator">:</span>floatingEnable<span class="token operator">=</span><span class="token string">"true"</span>        app<span class="token operator">:</span>floatingUp<span class="token operator">=</span><span class="token string">"25dp"</span>        app<span class="token operator">:</span>menu<span class="token operator">=</span><span class="token string">"@menu/navigation_menu"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>navigation<span class="token punctuation">.</span>view<span class="token punctuation">.</span>BottomNavigationBar<span class="token operator">></span></code></pre><h3 id="menu-菜单属性值说明"><a href="#menu-菜单属性值说明" class="headerlink" title="menu 菜单属性值说明"></a>menu 菜单属性值说明</h3><table><thead><tr><th>属性</th><th>参考值</th><th>说明</th></tr></thead><tbody><tr><td>android:id</td><td>@+id/tab1</td><td>导航菜单 Item 的ID；</td></tr><tr><td>android:icon</td><td>@drawable/bar_news</td><td>导航菜单 Item 的图标，可以是图标选择器（selector），也可以是默认图标，根据BottomNavigationBar的属性 app:itemIconTint 更改选中与不选中的颜色变化，默认为蓝色和灰色；</td></tr><tr><td>android:title</td><td>首页</td><td>导航菜单 Item 的文字，可以默认为空字符串，表示不设置；</td></tr><tr><td>android:checkable</td><td>true/false</td><td>设置导航菜单 Item 是否可以选择，值影响选择与不选中效果，不影响点击事件；</td></tr><tr><td>android:checked</td><td>true/false</td><td>设置导航菜单 Item 是否默认选中,默认为第一个选中，请不要在多个Item上设置改；</td></tr><tr><td>app:floating</td><td>true/false</td><td>设置该导航菜单 Item 是否浮动，与BottomNavigationBar 的app:floatingEnable和 app:floatingUp属性配合使用，默认为false，即不浮动（不凸起）；</td></tr></tbody></table><h4 id="示例1-不需要浮动（凸起）的菜单，图1效果-1"><a href="#示例1-不需要浮动（凸起）的菜单，图1效果-1" class="headerlink" title="示例1:不需要浮动（凸起）的菜单，图1效果"></a>示例1:不需要浮动（凸起）的菜单，图1效果</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>menu xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab1"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_news"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"首页"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab2"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_constact"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"联系人"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab5"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/tab_manage_selected"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"拍照"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab3"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_invite"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"发现"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab4"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_my"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"我的"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>menu<span class="token operator">></span></code></pre><h4 id="示例2-需要浮动（凸起）的菜单，图2效果-1"><a href="#示例2-需要浮动（凸起）的菜单，图2效果-1" class="headerlink" title="示例2:需要浮动（凸起）的菜单，图2效果"></a>示例2:需要浮动（凸起）的菜单，图2效果</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>menu xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab1"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_news"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"首页"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab2"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_constact"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"联系人"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab5"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/tab_manage_selected"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"拍照"</span>        app<span class="token operator">:</span>floating<span class="token operator">=</span><span class="token string">"true"</span>        android<span class="token operator">:</span>checkable<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab3"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_invite"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"发现"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span>    <span class="token operator">&lt;</span>item        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/tab4"</span>        android<span class="token operator">:</span>icon<span class="token operator">=</span><span class="token string">"@drawable/bar_my"</span>        android<span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">"我的"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>item<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>menu<span class="token operator">></span></code></pre><h3 id="设置点击切换监听"><a href="#设置点击切换监听" class="headerlink" title="设置点击切换监听"></a>设置点击切换监听</h3><p><strong>在NavigationBar的Tab进行切换时，会回调改方法，可进行相应处理，如：未读消息数设置</strong></p><pre class=" language-java"><code class="language-java">        bottomView<span class="token punctuation">.</span><span class="token function">setOnItemSelectedListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BottomNavigationBar<span class="token punctuation">.</span>OnItemSelectedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemSelected</span><span class="token punctuation">(</span>BottomNavigationBar<span class="token punctuation">.</span>Item item<span class="token punctuation">,</span> <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>position<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            bottomView<span class="token punctuation">.</span><span class="token function">setFloatingEnable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                            bottomView<span class="token punctuation">.</span><span class="token function">setFloatingEnable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="添加Fragment进行管理，点击自动切换"><a href="#添加Fragment进行管理，点击自动切换" class="headerlink" title="添加Fragment进行管理，点击自动切换"></a>添加Fragment进行管理，点击自动切换</h3><p><strong>需要先设置FragmentManager管理器和加载Fragment的ViewGroup,一般为FrameLayout ,需要设置id;之后调用addFragment，为对应的Tab添加Fragment,</strong></p><pre class=" language-javascript"><code class="language-javascript">        bottomView<span class="token punctuation">.</span><span class="token function">setFragmentManager</span><span class="token punctuation">(</span><span class="token function">getFragmentManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mainFragment<span class="token punctuation">)</span><span class="token punctuation">;</span>        bottomView<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab1<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FirstFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bottomView<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab2<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">SecondFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bottomView<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab3<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ThirdFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bottomView<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab4<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FourFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bottomView<span class="token punctuation">.</span><span class="token function">addFragment</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tab5<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FiveFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="版本更新说明"><a href="#版本更新说明" class="headerlink" title="版本更新说明"></a>版本更新说明</h3><h4 id="1-0-2"><a href="#1-0-2" class="headerlink" title="1.0.2"></a>1.0.2</h4><ul><li>初版实现自定义底部导航栏</li></ul><h4 id="1-0-3"><a href="#1-0-3" class="headerlink" title="1.0.3"></a>1.0.3</h4><ul><li>在原基础上对封装进行优化，支持代码实现导航栏</li></ul><h4 id="1-0-4"><a href="#1-0-4" class="headerlink" title="1.0.4"></a>1.0.4</h4><ul><li>优化选中突出效果，支持选中放大，支持导航栏背景圆角</li></ul><h4 id="1-0-5"><a href="#1-0-5" class="headerlink" title="1.0.5"></a>1.0.5</h4><ul><li>可以自定义导航栏文字大小</li><li>可以自定义图标的宽度和高度</li><li>自定义图标和文字间隔高度</li></ul><h4 id="1-0-6"><a href="#1-0-6" class="headerlink" title="1.0.6"></a>1.0.6</h4><ul><li>可以Java Api 设置导航栏文字大小</li><li>可以Java Api 设置图标的宽度和高度</li><li>Java Api 设置图标和文字间隔高度</li><li>支持管理Fragment ,实现Fragment点击自动切换</li></ul><h1 id="温馨提示："><a href="#温馨提示：" class="headerlink" title="温馨提示："></a>温馨提示：</h1><p><strong>在使用过程中，如遇到任何问题，可发送邮件至<a href="mailto:server@onestravel.cn">server@onestravel.cn</a>说明相关问题，我在看到邮件第一时间，会针对相应问题进行沟通解决，谢谢支持！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> BottomNavigationBar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin语言基于Mvp+Retrofit+RxJava封装的Android项目的基础依赖库</title>
      <link href="/20181225/android-ndk/kotlin-yu-yan-ji-yu-mvp-retrofit-rxjava-feng-zhuang-de-android-xiang-mu-de-ji-chu-yi-lai-ku/"/>
      <url>/20181225/android-ndk/kotlin-yu-yan-ji-yu-mvp-retrofit-rxjava-feng-zhuang-de-android-xiang-mu-de-ji-chu-yi-lai-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin语言基于Mvp-Retrofit-RxJava封装的Android项目的基础依赖库"><a href="#Kotlin语言基于Mvp-Retrofit-RxJava封装的Android项目的基础依赖库" class="headerlink" title="Kotlin语言基于Mvp+Retrofit+RxJava封装的Android项目的基础依赖库"></a>Kotlin语言基于Mvp+Retrofit+RxJava封装的Android项目的基础依赖库</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>该Library是基于Kotlin语言封装的一个库，主要是用来创建一个kotlin项目时，作为项目的简单封装，使用该Library作为依赖引入，即可进行项目开发，省去一些前期准备工作。</p><p>该Library主要进行了一下封装：</p><ol><li>采用普通MVC架构的方式，对Activity，Fragment,Adapter和一些工具类的封装以及自定义View的实现；</li><li>采用Retrofit+RxJava 对http请求进行相应的封装，可设置公共参数，并对RX生命周期进行处理；</li><li>采用MVP架构，对上面封装的Activity，Fragment 进行二次封装；</li><li>该项目使用了org.jetbrains.anko ，可实现对布局文件的自动依赖注入，kotlin文件中的View名称就是对应布局文件中View的 id;</li></ol><p><a href="https://github.com/onestravel/kotlin-base" target="_blank" rel="noopener">项目GitHub地址</a></p><h2 id="一、采用普通方式封装的基础文件介绍"><a href="#一、采用普通方式封装的基础文件介绍" class="headerlink" title="一、采用普通方式封装的基础文件介绍"></a>一、采用普通方式封装的基础文件介绍</h2><h3 id="1、BaseActivity"><a href="#1、BaseActivity" class="headerlink" title="1、BaseActivity"></a>1、BaseActivity</h3><p>package:cn.onestravel.library.kotlin.base.activity</p><p>所有Activity的基类，定义一些子类必须实现的和可实现的方法：</p><pre class=" language-kotlin"><code class="language-kotlin"> <span class="token comment" spellcheck="true">/**     * 获取布局ID,子类必须实现     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token comment" spellcheck="true">/**     * 初始化 View 的相关操作，若有需要可在子类实现     */</span>    <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">initView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化 Listener 事件的相关操作，若有需要可在子类实现     */</span>    <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">initListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 初始化 Data 数据的相关操作，若有需要可在子类实现     */</span>    <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在主线程弹出Toast 提示     * @param msg 需要弹出的提示信息     */</span>    <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">showToast</span><span class="token punctuation">(</span>msg<span class="token operator">:</span>String<span class="token punctuation">)</span><span class="token punctuation">{</span>        runOnUiThread <span class="token punctuation">{</span>            <span class="token function">toast</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在主线程弹出Toast 提示     * @param stringRes 需要弹出的提示信息的string资源ID     */</span>    <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">showToast</span><span class="token punctuation">(</span>stringRes<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token punctuation">{</span>        runOnUiThread <span class="token punctuation">{</span>            <span class="token function">toast</span><span class="token punctuation">(</span><span class="token function">getString</span><span class="token punctuation">(</span>stringRes<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 跳转到另一个Activity，并且finish 掉当前Activity     * 需要跳转的Activity必须继承于BaseActivity 或者     * @param params 可变参数，需要通过intent传递的参数 eg:"key" to "value"     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">:</span> BaseActivity<span class="token operator">></span> <span class="token function">startActivityAndFinish</span><span class="token punctuation">(</span>vararg params<span class="token operator">:</span> Pair<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Any<span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        startActivity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span>params<span class="token punctuation">)</span>        <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h3 id="2、BaseListActivity"><a href="#2、BaseListActivity" class="headerlink" title="2、BaseListActivity"></a>2、BaseListActivity</h3><p>package:cn.onestravel.library.kotlin.base.activity</p><p>继承自BaseActivity，实现针对RecyclerView实现列表数据的一些配置，简化实现只有一个列表布局的Activity，并且实现上拉加载，下拉刷新操作。</p><p>主要方法如下：</p><pre class=" language-kotlin"><code class="language-kotlin"> <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">getRecyclerView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>LoadMoreRecyclerView<span class="token punctuation">{</span>        <span class="token keyword">return</span> mRecyclerView    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取recyclerView的布局管理器，子类可重写该方法，来更改布局管理器     */</span>    <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">getLayoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span><span class="token function">LayoutManager</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> layoutManager<span class="token operator">:</span> LinearLayoutManager <span class="token operator">=</span> <span class="token function">LinearLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//设置为垂直布局，这也是默认的</span>        layoutManager<span class="token punctuation">.</span>orientation <span class="token operator">=</span> OrientationHelper<span class="token punctuation">.</span>VERTICAL        <span class="token keyword">return</span> layoutManager    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置RecyclerView 的Adapter适配器     * @param adapter 设置的Adapter，必须是BaseRecyclerAdapter的子类     */</span>    <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token operator">:</span> BaseRecyclerAdapter<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRecyclerView<span class="token punctuation">.</span>adapter <span class="token operator">=</span> adapter    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置刷新控件的颜色     */</span>    <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">setRefreshColorSchemeColors</span><span class="token punctuation">(</span><span class="token annotation builtin">@ColorInt</span> vararg colors<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRefreshLayout<span class="token punctuation">.</span><span class="token function">setColorSchemeColors</span><span class="token punctuation">(</span><span class="token operator">*</span>colors<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置刷新控件的颜色     */</span>    <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">setColorSchemeResources</span><span class="token punctuation">(</span><span class="token annotation builtin">@ColorRes</span> vararg colorIds<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRefreshLayout<span class="token punctuation">.</span><span class="token function">setColorSchemeResources</span><span class="token punctuation">(</span><span class="token operator">*</span>colorIds<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置刷新控件是否显示     */</span>    <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">isRefresh</span><span class="token punctuation">(</span>isRefresh<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRefreshLayout<span class="token punctuation">.</span>isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 刷新完成     */</span>    <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">refreshComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRefreshLayout<span class="token punctuation">.</span>isRefreshing <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 刷新数据，子类实现该方法，进行数据请求     */</span>    <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">refreshDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 加载更多完成     */</span>    <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">loadMoreComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRecyclerView<span class="token punctuation">.</span><span class="token function">loadMoreComplete</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置是否可以加载更多     */</span>    <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">canLoadMore</span><span class="token punctuation">(</span>canLoadMore<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRecyclerView<span class="token punctuation">.</span>loadMoreEnable <span class="token operator">=</span> canLoadMore    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置是否还有更多的数据     */</span>    <span class="token keyword">protected</span> <span class="token keyword">fun</span> <span class="token function">hasLoadMore</span><span class="token punctuation">(</span>hasLoadMore<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRecyclerView<span class="token punctuation">.</span>hasMore <span class="token operator">=</span> hasLoadMore    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 加载新数据，子类实现该方法，进行数据请求     */</span>    <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">loadMoreDatas</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、BaseRecyclerAdapter"><a href="#3、BaseRecyclerAdapter" class="headerlink" title="3、BaseRecyclerAdapter"></a>3、BaseRecyclerAdapter</h3><p>package:cn.onestravel.library.kotlin.base.adapter</p><p>针对RecyclerView使用的RecyclerView.Adapter进行封装，实现一些基础的布局（不常变化的）设置的方法，定义一些方法，简化子类的实现，更加有利于缩短开发时间；实现adapter中提示Toast的方法，以及添加、设置数据，或者基础View的设置相关内容的方法；对Item点击和长按的监听事件。</p><p>主要方法如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseRecyclerAdapter<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span>Adapter<span class="token operator">&lt;</span>VH<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> View<span class="token punctuation">.</span>OnClickListener<span class="token punctuation">,</span> View<span class="token punctuation">.</span><span class="token function">OnLongClickListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> mDatas<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">lateinit</span> <span class="token keyword">var</span> context<span class="token operator">:</span> Context    <span class="token keyword">private</span> <span class="token keyword">var</span> clickListener<span class="token operator">:</span> OnItemClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> longClickListener<span class="token operator">:</span> OnItemLongClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateViewHolder</span><span class="token punctuation">(</span>parent<span class="token operator">:</span> ViewGroup<span class="token punctuation">,</span> viewType<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> VH <span class="token punctuation">{</span>        context <span class="token operator">=</span> parent<span class="token punctuation">.</span>context        <span class="token keyword">val</span> convertView <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token function">getLayoutId</span><span class="token punctuation">(</span>viewType<span class="token punctuation">)</span><span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        convertView<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        convertView<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">VH</span><span class="token punctuation">(</span>convertView<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置Item 的点击事件     */</span>    <span class="token keyword">fun</span> <span class="token function">setOnItemClick</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> OnItemClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        clickListener <span class="token operator">=</span> listener    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置Item 的点击事件     */</span>    <span class="token keyword">fun</span> <span class="token function">setOnItemClick</span><span class="token punctuation">(</span>onClick<span class="token operator">:</span> <span class="token punctuation">(</span>view<span class="token operator">:</span>View<span class="token punctuation">,</span>position<span class="token operator">:</span>Int<span class="token punctuation">,</span><span class="token keyword">data</span><span class="token operator">:</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        clickListener <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span>  OnItemClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">onClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span>position<span class="token punctuation">,</span><span class="token keyword">data</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置Item 的长按事件     */</span>    <span class="token keyword">fun</span> <span class="token function">setOnItemLongClick</span><span class="token punctuation">(</span>listener<span class="token operator">:</span>OnItemLongClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        longClickListener <span class="token operator">=</span> listener    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置Item 的长按事件     */</span>    <span class="token keyword">fun</span> <span class="token function">setOnItemLongClick</span><span class="token punctuation">(</span>onLongClick<span class="token operator">:</span> <span class="token punctuation">(</span>view<span class="token operator">:</span>View<span class="token punctuation">,</span>position<span class="token operator">:</span>Int<span class="token punctuation">,</span><span class="token keyword">data</span><span class="token operator">:</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        longClickListener <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> OnItemLongClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span>Boolean <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span>position<span class="token punctuation">,</span><span class="token keyword">data</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onClick</span><span class="token punctuation">(</span>p0<span class="token operator">:</span> View<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> position<span class="token operator">:</span>Int <span class="token operator">=</span> p0<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>itemViewPosition<span class="token punctuation">)</span> <span class="token keyword">as</span> Int        <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span>T <span class="token operator">=</span> mDatas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>        clickListener<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">onItemClick</span><span class="token punctuation">(</span>p0<span class="token punctuation">,</span>position<span class="token punctuation">,</span><span class="token keyword">data</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onLongClick</span><span class="token punctuation">(</span>p0<span class="token operator">:</span> View<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>        <span class="token keyword">val</span> position<span class="token operator">:</span>Int <span class="token operator">=</span> p0<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>itemViewPosition<span class="token punctuation">)</span> <span class="token keyword">as</span> Int        <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span>T <span class="token operator">=</span> mDatas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>        <span class="token keyword">return</span> longClickListener<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">onItemLongClick</span><span class="token punctuation">(</span>p0<span class="token punctuation">,</span>position<span class="token punctuation">,</span><span class="token keyword">data</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置数据,并且会清空原数据列表     * @param datas 新的数据列表     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">setDatas</span><span class="token punctuation">(</span>datas<span class="token operator">:</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDatas<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        mDatas<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加新的数据列表到原数据列表末尾     * @param datas 新的数据列表     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">addDatas</span><span class="token punctuation">(</span>datas<span class="token operator">:</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDatas<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加新的数据列表到原数据列表的指定位置     * @param position 需要添加的指定位置     * @param datas 新的数据列表     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">addDatas</span><span class="token punctuation">(</span>position<span class="token operator">:</span> Int<span class="token punctuation">,</span> datas<span class="token operator">:</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> pos <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">></span> mDatas<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mDatas<span class="token punctuation">.</span>size        <span class="token punctuation">}</span> <span class="token keyword">else</span> position        mDatas<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> datas<span class="token punctuation">)</span>        <span class="token function">notifyDataSetChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 更新数据列表指定位置上的数据     * @param position 需要更新数据的位置     * @param data 更新后的数据     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">updateData</span><span class="token punctuation">(</span>position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> mDatas<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mDatas<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>            mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>            <span class="token function">notifyItemChanged</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加新的数据到原数据列表末尾     * @param datas 新的数据     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">addData</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>        <span class="token function">notifyItemInserted</span><span class="token punctuation">(</span>mDatas<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加新的数据到原数据列表的指定位置     * @param position 需要添加的指定位置     * @param data 新的数据     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">addData</span><span class="token punctuation">(</span>position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> pos <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">></span> mDatas<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mDatas<span class="token punctuation">.</span>size        <span class="token punctuation">}</span> <span class="token keyword">else</span> position        mDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token punctuation">)</span>        <span class="token function">notifyItemInserted</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除指定位置上的数据     * @param position 需要添加的指定位置     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">removeDataAt</span><span class="token punctuation">(</span>position<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> mDatas<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mDatas<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>            <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">showToast</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">runOnUiThread</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">toast</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除指定的数据     * @param data 需要移除的数据实体     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">removeData</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mDatas<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> position <span class="token operator">=</span> mDatas<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>            mDatas<span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>            <span class="token function">notifyItemRemoved</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据View的类型获取对应的Item布局的ID     */</span>    <span class="token annotation builtin">@LayoutRes</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">getLayoutId</span><span class="token punctuation">(</span>viewType<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token comment" spellcheck="true">/**     * 绑定ViewHolder 时执行的方法，在此方法里处理对Item的view的操作     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">onBindVH</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> VH<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> datas<span class="token operator">:</span> T<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 返回数据的数量     */</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>        <span class="token keyword">return</span> mDatas<span class="token punctuation">.</span>size    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onBindViewHolder</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> VH<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>itemViewPosition<span class="token punctuation">,</span> position<span class="token punctuation">)</span>        <span class="token function">onBindVH</span><span class="token punctuation">(</span>holder<span class="token punctuation">,</span> position<span class="token punctuation">,</span> mDatas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** *Item 的点击事件 */</span><span class="token keyword">interface</span> OnItemClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** *Item 的长按事件 */</span><span class="token keyword">interface</span> OnItemLongClickListener<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">onItemLongClick</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> position<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">data</span><span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span>Boolean<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 所有的Adapter 使用的ViewHolder */</span><span class="token keyword">class</span> <span class="token function">VH</span><span class="token punctuation">(</span>itemView<span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span><span class="token function">ViewHolder</span><span class="token punctuation">(</span>itemView<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 根据View的id获取对应的View     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> E <span class="token operator">:</span> View<span class="token operator">></span> <span class="token function">getView</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> E <span class="token punctuation">{</span>        <span class="token keyword">return</span> itemView<span class="token punctuation">.</span>find<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对TextView及其子类设置文本内容     * @param viewId 对应的View 的id     * @param value 需要设置的文本内容     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> value<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token keyword">is</span> TextView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> tv<span class="token operator">:</span> TextView <span class="token operator">=</span> view            tv<span class="token punctuation">.</span>text <span class="token operator">=</span> value        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对TextView及其子类设置文本内容     * @param viewId 对应的View 的id     * @param value 需要设置的文本内容     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> value<span class="token operator">:</span> Spannable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token keyword">is</span> TextView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> tv<span class="token operator">:</span> TextView <span class="token operator">=</span> view            tv<span class="token punctuation">.</span>text <span class="token operator">=</span> value        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对TextView及其子类设置文本内容     * @param viewId 对应的View 的id     * @param stringRes 需要设置的文本资源的id     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setText</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token annotation builtin">@StringRes</span> stringRes<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token keyword">is</span> TextView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> tv<span class="token operator">:</span> TextView <span class="token operator">=</span> view            tv<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>stringRes<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对ImageView及其子类设置图片     * @param viewId 对应的View 的id     * @param resId 需要设置的图片资源的id     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setImageResource</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token annotation builtin">@DrawableRes</span> resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token keyword">is</span> ImageView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> iv<span class="token operator">:</span> ImageView <span class="token operator">=</span> view            iv<span class="token punctuation">.</span>imageResource <span class="token operator">=</span> resId        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对ImageView及其子类设置图片     * @param viewId 对应的View 的id     * @param imgUrl 需要设置的网络图片的地址     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setImageUrl</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> imgUrl<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token keyword">is</span> ImageView<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> iv<span class="token operator">:</span> ImageView <span class="token operator">=</span> view            iv<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对View及其子类设置背景图片     * @param viewId 对应的View 的id     * @param resId 需要设置的背景图片的资源地址     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setBackgroundResource</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token annotation builtin">@DrawableRes</span> resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        view<span class="token punctuation">.</span><span class="token function">setBackgroundResource</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对View及其子类设置背景颜色     * @param viewId 对应的View 的id     * @param color 需要设置的背景颜色     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setBackgroundColor</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token annotation builtin">@ColorInt</span> color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        view<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对View及其子类设置点击事件     * @param viewId 对应的View 的id     * @param color 需要设置的背景颜色     */</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">setOnClick</span><span class="token punctuation">(</span><span class="token annotation builtin">@IdRes</span> viewId<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">crossinline</span> onClick<span class="token operator">:</span> <span class="token punctuation">(</span>View<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token function">getView</span><span class="token punctuation">(</span>viewId<span class="token punctuation">)</span>        view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>            onClick<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、ImageViewExtend"><a href="#4、ImageViewExtend" class="headerlink" title="4、ImageViewExtend"></a>4、ImageViewExtend</h3><p>package: cn.onestravel.library.kotlin.base.extend</p><p>改文件是ImageView的扩展方法的文件，主要针对ImageView加载网络图片而新增的一些扩展方法</p><p>具体方法如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> ImageView<span class="token punctuation">.</span><span class="token function">loadImage</span><span class="token punctuation">(</span>imgUrl<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> ImageView <span class="token punctuation">{</span>    ImageUtils<span class="token punctuation">.</span><span class="token function">loadImageUrl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> imgUrl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> ImageView<span class="token punctuation">.</span><span class="token function">loadBitmap</span><span class="token punctuation">(</span>imgUrl<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> ImageView <span class="token punctuation">{</span>    ImageUtils<span class="token punctuation">.</span><span class="token function">loadImageBitmap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> imgUrl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> ImageView<span class="token punctuation">.</span><span class="token function">loadGif</span><span class="token punctuation">(</span>imgUrl<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> ImageView <span class="token punctuation">{</span>    ImageUtils<span class="token punctuation">.</span><span class="token function">loadImageGif</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> imgUrl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> ImageView<span class="token punctuation">.</span><span class="token function">loadImgCallBack</span><span class="token punctuation">(</span>imgUrl<span class="token operator">:</span> String<span class="token punctuation">,</span> requestListener<span class="token operator">:</span> RequestListener<span class="token operator">&lt;</span>Bitmap<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> ImageView <span class="token punctuation">{</span>    ImageUtils<span class="token punctuation">.</span><span class="token function">loadImageCallBack</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">,</span> imgUrl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> requestListener<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">}</span></code></pre><h3 id="5、BaseFragment"><a href="#5、BaseFragment" class="headerlink" title="5、BaseFragment"></a>5、BaseFragment</h3><p>package: cn.onestravel.library.kotlin.base.fragment</p><p>所有Fragment的基类，定义一些子类必须实现的和可实现的方法，具体方法与BaseActivity方法类似。</p><h3 id="6、BaseListFragment"><a href="#6、BaseListFragment" class="headerlink" title="6、BaseListFragment"></a>6、BaseListFragment</h3><p>package: cn.onestravel.library.kotlin.base.fragment</p><p>继承自BaseFragment，实现针对RecyclerView实现列表数据的一些配置，简化实现只有一个列表布局的Fragment，并且实现上拉加载，下拉刷新操作；具体方法与BaseListActivity相同。</p><h3 id="7、DensityUtil"><a href="#7、DensityUtil" class="headerlink" title="7、DensityUtil"></a>7、DensityUtil</h3><p>package: cn.onestravel.library.kotlin.base.utils</p><p>尺寸转换工具类，可以将dip转为px，将px转为dip；获取屏幕宽度和高度。</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token comment" spellcheck="true">/**     * dip转换为px     */</span>    <span class="token keyword">fun</span> <span class="token function">dip2px</span><span class="token punctuation">(</span>dp<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>dp <span class="token operator">*</span> density<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * px转换为dip     */</span>    <span class="token keyword">fun</span> <span class="token function">px2dip</span><span class="token punctuation">(</span>px<span class="token operator">:</span>  Float<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>px <span class="token operator">/</span> density<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取屏幕宽度     */</span>    <span class="token keyword">fun</span> <span class="token function">appWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>        <span class="token keyword">return</span> Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>widthPixels    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取屏幕高度     */</span>    <span class="token keyword">fun</span> <span class="token function">appHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>        <span class="token keyword">return</span> Resources<span class="token punctuation">.</span><span class="token function">getSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDisplayMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>heightPixels    <span class="token punctuation">}</span></code></pre><h3 id="8、CircleTextView"><a href="#8、CircleTextView" class="headerlink" title="8、CircleTextView"></a>8、CircleTextView</h3><p>package：cn.onestravel.library.kotlin.base.view</p><p>自定义圆形TextView，一满足不同需求</p><h3 id="9、EmptyView"><a href="#9、EmptyView" class="headerlink" title="9、EmptyView"></a>9、EmptyView</h3><p>package：cn.onestravel.library.kotlin.base.view</p><p>自定义 数据为空的页面视图，主要有三个功能类型，分别为：数据为空显示页面（TYPE_EMPTY）；加载进度提示页面（TYPE_LOADING）；加载失败可点击重试页面（TYPE_RELOAD）</p><p>重新定义的一下方法如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/**     * 设置页面显示类型     *     * @param type     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyType</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">_setEmptyType</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置页面显示类型     *     * @param type     */</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">_setEmptyType</span><span class="token punctuation">(</span>type<span class="token operator">:</span> Int<span class="token punctuation">,</span> isShow<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>emptyType <span class="token operator">=</span> type        <span class="token keyword">when</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TYPE_EMPTY <span class="token operator">-></span> <span class="token punctuation">{</span>                layoutLoading<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                layoutReload<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                layoutEmpty<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                ivEmptyImg<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE            <span class="token punctuation">}</span>            TYPE_LOADING <span class="token operator">-></span> <span class="token punctuation">{</span>                layoutLoading<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE                layoutEmpty<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                layoutReload<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                <span class="token keyword">if</span> <span class="token punctuation">(</span>tvLoadingMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tvLoadingMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"正在加载..."</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            TYPE_RELOAD <span class="token operator">-></span> <span class="token punctuation">{</span>                layoutLoading<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                layoutEmpty<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE                layoutReload<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE                ivEmptyImg<span class="token operator">!!</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isShow<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置空数据界面的背景色     *     * @param color 背景色     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyBackgroundColor</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        layoutEmpty<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置错误描述     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyText</span><span class="token punctuation">(</span><span class="token annotation builtin">@StringRes</span> resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvEmptyMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvEmptyMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置错误描述     *     * @param text     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyText</span><span class="token punctuation">(</span>text<span class="token operator">:</span> CharSequence<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> text <span class="token operator">=</span> text        <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            text <span class="token operator">=</span> <span class="token string">""</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvEmptyMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvEmptyMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置错误描述字体大小     *     * @param size     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyTextSize</span><span class="token punctuation">(</span>size<span class="token operator">:</span> Float<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvEmptyMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvEmptyMsg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>TypedValue<span class="token punctuation">.</span>COMPLEX_UNIT_PX<span class="token punctuation">,</span> size<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置错误描述颜色     *     * @param color     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyTextColor</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvEmptyMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvEmptyMsg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置错误描述颜色     *     * @param colors     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyTextColor</span><span class="token punctuation">(</span>colors<span class="token operator">:</span> ColorStateList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvEmptyMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvEmptyMsg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置页面图片     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyImgResource</span><span class="token punctuation">(</span><span class="token annotation builtin">@DrawableRes</span> resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>LOLLIPOP<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>noDataImg <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>noDataImg <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ivEmptyImg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ivEmptyImg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置页面图片     *     * @param noDataImg     */</span>    <span class="token keyword">fun</span> <span class="token function">setEmptyImg</span><span class="token punctuation">(</span>noDataImg<span class="token operator">:</span> Drawable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>noDataImg <span class="token operator">=</span> noDataImg        <span class="token keyword">if</span> <span class="token punctuation">(</span>ivEmptyImg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ivEmptyImg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setImageDrawable</span><span class="token punctuation">(</span>noDataImg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取加载按钮文字     */</span>    <span class="token keyword">fun</span> <span class="token function">getReloadBtnText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reloadBtnText    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置重新加载按钮文字     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnText</span><span class="token punctuation">(</span>resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnText <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnText        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置重新加载按钮文字     *     * @param reloadBtnText     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnText</span><span class="token punctuation">(</span>reloadBtnText<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnText <span class="token operator">=</span> reloadBtnText        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnText        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置重新加载按钮文字大小     *     * @param reloadBtnTextSize     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnTextSize</span><span class="token punctuation">(</span>reloadBtnTextSize<span class="token operator">:</span> Float<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnTextSize <span class="token operator">=</span> reloadBtnTextSize        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            btnReload<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>TypedValue<span class="token punctuation">.</span>COMPLEX_UNIT_PX<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnTextSize<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置重新加载按钮文字颜色     *     * @param color     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnTextColor</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnTextColor <span class="token operator">=</span> color        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            btnReload<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnTextColor<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置重新加载按钮文字颜色     *     * @param colors     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnTextColor</span><span class="token punctuation">(</span>colors<span class="token operator">:</span> ColorStateList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            btnReload<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置加载按钮背景     *     * @param reloadBackground     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnBackground</span><span class="token punctuation">(</span>reloadBackground<span class="token operator">:</span> Drawable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground <span class="token operator">=</span> reloadBackground        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>JELLY_BEAN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置加载按钮背景     *     * @param color     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnBackgroundColor</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground <span class="token operator">=</span> <span class="token function">ColorDrawable</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>JELLY_BEAN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置加载按钮背景     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadBtnBackgroundResource</span><span class="token punctuation">(</span>resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>LOLLIPOP<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>btnReload <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>JELLY_BEAN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                btnReload<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reloadBtnBackground<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取加载提示文字     */</span>    <span class="token keyword">fun</span> <span class="token function">getReloadText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String<span class="token operator">?</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> reloadText    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置重新加载提示文字     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadText</span><span class="token punctuation">(</span>resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadText <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvReloadMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvReloadMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadText        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置重新加载提示文字     *     * @param reloadText     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadText</span><span class="token punctuation">(</span>reloadText<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadText <span class="token operator">=</span> reloadText        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvReloadMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvReloadMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadText        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置重新加载提示文字大小     *     * @param reloadTextSize     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadTextSize</span><span class="token punctuation">(</span>reloadTextSize<span class="token operator">:</span> Float<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadTextSize <span class="token operator">=</span> reloadTextSize        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvReloadMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvReloadMsg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>TypedValue<span class="token punctuation">.</span>COMPLEX_UNIT_PX<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reloadTextSize<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置重新加载提示文字颜色     *     * @param color     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadTextColor</span><span class="token punctuation">(</span>color<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadTextColor <span class="token operator">=</span> color        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvReloadMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvReloadMsg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reloadTextColor<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置重新加载提示文字颜色     *     * @param colors     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadTextColor</span><span class="token punctuation">(</span>colors<span class="token operator">:</span> ColorStateList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvReloadMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvReloadMsg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>colors<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置页面图片     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadImgResource</span><span class="token punctuation">(</span><span class="token annotation builtin">@DrawableRes</span> resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>LOLLIPOP<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reloadImage <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reloadImage <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span>resources<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ivReloadImg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ivReloadImg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置页面图片     *     * @param reloadImage     */</span>    <span class="token keyword">fun</span> <span class="token function">setReloadImg</span><span class="token punctuation">(</span>reloadImage<span class="token operator">:</span> Drawable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reloadImage <span class="token operator">=</span> reloadImage        <span class="token keyword">if</span> <span class="token punctuation">(</span>ivReloadImg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ivReloadImg<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setImageDrawable</span><span class="token punctuation">(</span>reloadImage<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置加载提示文字     *     * @param resId     */</span>    <span class="token keyword">fun</span> <span class="token function">setLoadingText</span><span class="token punctuation">(</span>resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadingText <span class="token operator">=</span> mContext<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvLoadingMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvLoadingMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingText        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置加载提示文字     *     * @param loadingText     */</span>    <span class="token keyword">fun</span> <span class="token function">setLoadingText</span><span class="token punctuation">(</span>loadingText<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadingText <span class="token operator">=</span> loadingText        <span class="token keyword">if</span> <span class="token punctuation">(</span>tvLoadingMsg <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvLoadingMsg<span class="token operator">!!</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loadingText        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 显示此视图     */</span>    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>VISIBLE    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 隐藏此视图     */</span>    <span class="token keyword">fun</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>visibility <span class="token operator">=</span> View<span class="token punctuation">.</span>GONE    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置重新加载监听事件     *     * @param listener     */</span>    <span class="token keyword">fun</span> <span class="token function">setOnReloadListener</span><span class="token punctuation">(</span>listener<span class="token operator">:</span> OnReloadListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onReloadListener <span class="token operator">=</span> listener    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> OnReloadListener <span class="token punctuation">{</span>        <span class="token keyword">fun</span> <span class="token function">onReload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> TYPE_EMPTY <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 页面为空，没有数据时展示</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> TYPE_LOADING <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// 正在加载视图</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> TYPE_RELOAD <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// 加载失败，显示重新加载视图</span>    <span class="token punctuation">}</span></code></pre><h3 id="10、ShapeImageView"><a href="#10、ShapeImageView" class="headerlink" title="10、ShapeImageView"></a>10、ShapeImageView</h3><p>package：cn.onestravel.library.kotlin.base.view</p><p>自定义矩形和圆形ImageView，实现带边框的圆角矩形ImageView或圆形ImageVIew</p><p>viewShape的值为：</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>SHAPE_REC</td><td>矩形ImageView</td></tr><tr><td>SHAPE_CIRCLE</td><td>圆形ImageView</td></tr><tr><td>SHAPE_OVAL</td><td>椭圆ImageView</td></tr></tbody></table><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * 设置ImageView的形式，圆角矩形，圆形，或椭圆 **/</span><span class="token keyword">var</span> shape <span class="token operator">=</span> SHAPE_REC<span class="token operator">:</span> Int        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> shape        <span class="token keyword">set</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>shape <span class="token operator">=</span> shape            <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 设置ImageView边框颜色 **/</span> <span class="token keyword">var</span> borderColor<span class="token operator">:</span> Int        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> mBorderColor        <span class="token keyword">set</span><span class="token punctuation">(</span>mBorderColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mBorderColor <span class="token operator">=</span> mBorderColor            mBorderPaint<span class="token punctuation">.</span>color <span class="token operator">=</span> mBorderColor            <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**      * 设置ImageView的圆角      **/</span>    <span class="token keyword">var</span> roundRadius<span class="token operator">:</span> Float        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> mRoundRadius        <span class="token keyword">set</span><span class="token punctuation">(</span>mRoundRadius<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>mRoundRadius <span class="token operator">=</span> mRoundRadius            <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**      * 设置ImageView的边框宽度      **/</span>    <span class="token keyword">fun</span> <span class="token function">setBorderSize</span><span class="token punctuation">(</span>mBorderSize<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>borderSize <span class="token operator">=</span> mBorderSize<span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        mBorderPaint<span class="token punctuation">.</span>strokeWidth <span class="token operator">=</span> mBorderSize<span class="token punctuation">.</span><span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">initRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**      * 设置ImageView的图片资源      **/</span><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">setImageResource</span><span class="token punctuation">(</span>resId<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>resId<span class="token punctuation">)</span>        mBitmap <span class="token operator">=</span> ImageUtils<span class="token punctuation">.</span><span class="token function">getBitmapFromDrawable</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span>        <span class="token function">setupBitmapShader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**      * 设置ImageView的Drawable      **/</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">setImageDrawable</span><span class="token punctuation">(</span>drawable<span class="token operator">:</span> Drawable<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setImageDrawable</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span>        mBitmap <span class="token operator">=</span> ImageUtils<span class="token punctuation">.</span><span class="token function">getBitmapFromDrawable</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span>        <span class="token function">setupBitmapShader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h2 id="二、采用RxJava-Retrofit架构封装的关于Http请求以及生命周期处理的文件介绍"><a href="#二、采用RxJava-Retrofit架构封装的关于Http请求以及生命周期处理的文件介绍" class="headerlink" title="二、采用RxJava+Retrofit架构封装的关于Http请求以及生命周期处理的文件介绍"></a>二、采用RxJava+Retrofit架构封装的关于Http请求以及生命周期处理的文件介绍</h2><h3 id="1、BaseRxActivity"><a href="#1、BaseRxActivity" class="headerlink" title="1、BaseRxActivity"></a>1、BaseRxActivity</h3><p>package：cn.onestravel.library.kotlin.rxrequest.activity</p><p>继承自BaseActivity ，针对RxJava处理了相对应的生命周期，同时拥有BaseActivity的所有特性。</p><p>生命周期处理：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseRxActivity <span class="token operator">:</span> <span class="token function">BaseActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LifecycleProvider<span class="token operator">&lt;</span>ActivityEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> lifecycleSubject<span class="token operator">:</span>BehaviorSubject<span class="token operator">&lt;</span>ActivityEvent<span class="token operator">></span> <span class="token operator">=</span> BehaviorSubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token annotation builtin">@CheckResult</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">lifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>ActivityEvent<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lifecycleSubject<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CheckResult</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">bindUntilEvent</span><span class="token punctuation">(</span>event<span class="token operator">:</span> ActivityEvent<span class="token punctuation">)</span><span class="token operator">:</span> LifecycleTransformer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> RxLifecycle<span class="token punctuation">.</span><span class="token function">bindUntilEvent</span><span class="token punctuation">(</span>lifecycleSubject<span class="token punctuation">,</span> event<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CheckResult</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">bindToLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LifecycleTransformer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> RxLifecycleAndroid<span class="token punctuation">.</span><span class="token function">bindActivity</span><span class="token punctuation">(</span>lifecycleSubject<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ActivityEvent<span class="token punctuation">.</span>CREATE<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ActivityEvent<span class="token punctuation">.</span>START<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ActivityEvent<span class="token punctuation">.</span>RESUME<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ActivityEvent<span class="token punctuation">.</span>PAUSE<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ActivityEvent<span class="token punctuation">.</span>STOP<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>ActivityEvent<span class="token punctuation">.</span>DESTROY<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、BaseRxListActivity"><a href="#2、BaseRxListActivity" class="headerlink" title="2、BaseRxListActivity"></a>2、BaseRxListActivity</h3><p>package：cn.onestravel.library.kotlin.rxrequest.activity</p><p>继承自BaseListActivity ，针对RxJava处理了相对应的生命周期，同时拥有BaseListActivity下拉刷新，上拉加载的所有特性。</p><h3 id="3、BaseRxFragment"><a href="#3、BaseRxFragment" class="headerlink" title="3、BaseRxFragment"></a>3、BaseRxFragment</h3><p>package：cn.onestravel.library.kotlin.rxrequest.fragment</p><p>继承自BaseFragment ，针对RxJava处理了相对应的生命周期，同时拥有BaseFragment的所有特性。</p><p>生命周期处理：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseRxFragment <span class="token operator">:</span> <span class="token function">BaseFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LifecycleProvider<span class="token operator">&lt;</span>FragmentEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> lifecycleSubject<span class="token operator">:</span>BehaviorSubject<span class="token operator">&lt;</span>FragmentEvent<span class="token operator">></span> <span class="token operator">=</span> BehaviorSubject<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">lifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>FragmentEvent<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lifecycleSubject<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CheckResult</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">bindUntilEvent</span><span class="token punctuation">(</span>event<span class="token operator">:</span> FragmentEvent<span class="token punctuation">)</span><span class="token operator">:</span> LifecycleTransformer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> RxLifecycle<span class="token punctuation">.</span><span class="token function">bindUntilEvent</span><span class="token punctuation">(</span>lifecycleSubject<span class="token punctuation">,</span> event<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CheckResult</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">bindToLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LifecycleTransformer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> RxLifecycleAndroid<span class="token punctuation">.</span><span class="token function">bindFragment</span><span class="token punctuation">(</span>lifecycleSubject<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>CREATE<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span>inflater<span class="token operator">:</span> LayoutInflater<span class="token punctuation">,</span> container<span class="token operator">:</span> ViewGroup<span class="token operator">?</span><span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> View<span class="token operator">?</span> <span class="token punctuation">{</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>CREATE_VIEW<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreateView</span><span class="token punctuation">(</span>inflater<span class="token punctuation">,</span> container<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>START<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>RESUME<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>PAUSE<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>STOP<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>DESTROY_VIEW<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@CallSuper</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lifecycleSubject<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>FragmentEvent<span class="token punctuation">.</span>DESTROY<span class="token punctuation">)</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、BaseRxListFragment"><a href="#4、BaseRxListFragment" class="headerlink" title="4、BaseRxListFragment"></a>4、BaseRxListFragment</h3><p>package：cn.onestravel.library.kotlin.rxrequest.fragment</p><p>继承自BaseListFragment ，针对RxJava处理了相对应的生命周期，同时拥有BaseListFragment下拉刷新，上拉加载的所有特性。</p><h3 id="5、BaseObserver-lt-T-ResponseResult-gt"><a href="#5、BaseObserver-lt-T-ResponseResult-gt" class="headerlink" title="5、BaseObserver&lt;T: ResponseResult&gt;"></a>5、BaseObserver&lt;T: ResponseResult&gt;</h3><p>package：cn.onestravel.library.kotlin.rxrequest.common</p><p>RxJava+Retrofit 请求的观察者，返回特定数据结构的数据，并进行相应的处理。</p><p>具体实现如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * @name cn.onestravel.library.kotlin.rxrequest.common.BaseObserver * @description 请求返回结果，返回json数据必须符合 {"code":"0000","msg":""} * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseObserver<span class="token operator">&lt;</span>T <span class="token operator">:</span> ResponseResult<span class="token operator">></span> <span class="token operator">:</span> Observer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 请求开始 处理基本的loading框的显示等     *     * @param d     */</span>    <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Disposable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>            TAG<span class="token punctuation">,</span>            <span class="token string">"===========单个接口请求开始========="</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 此方法必须实现     *     * @param result 请求成功的结果     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>result<span class="token operator">:</span> T<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 请求失败     *     * @param code 错误码     * @param msg  错误提示语     */</span>    <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>code<span class="token operator">:</span> String<span class="token punctuation">,</span> msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>            TAG<span class="token punctuation">,</span>            <span class="token string">"接口请求失败===code = "</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"errorMsg ="</span> <span class="token operator">+</span> msg         <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 请求都完成时之行此方法     */</span>    <span class="token keyword">fun</span> <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Disposable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onStart</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onNext</span><span class="token punctuation">(</span>result<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BaseResponse<span class="token punctuation">.</span>REQUEST_OK <span class="token operator">==</span> result<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onSuccess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"请求成功responseBody===="</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">onFailure</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code<span class="token punctuation">,</span> result<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">var</span> errorCode <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">is</span> HttpException<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> httpException <span class="token operator">=</span> e <span class="token keyword">as</span> HttpException            errorCode <span class="token operator">=</span> httpException<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">404</span> <span class="token operator">==</span> errorCode <span class="token operator">||</span> <span class="token number">500</span> <span class="token operator">==</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                errorMsg <span class="token operator">=</span> <span class="token string">"请求异常，请稍候重试！"</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//todo 设置固定的错误码及错误提示</span>        <span class="token punctuation">}</span>        <span class="token function">onFailure</span><span class="token punctuation">(</span>errorCode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string">"request"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>BaseResponse:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * @name cn.onestravel.library.kotlin.rxrequest.common.BaseResponse * @description 请求返回结果数据基类 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">open</span> <span class="token keyword">class</span> <span class="token function">BaseResponse</span><span class="token punctuation">(</span><span class="token keyword">val</span> code<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"0000"</span><span class="token punctuation">,</span> <span class="token keyword">val</span> msg<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">:</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> REQUEST_OK <span class="token operator">=</span> <span class="token string">"0000"</span>  <span class="token comment" spellcheck="true">//请求成功的code码</span>        <span class="token keyword">val</span> REQUEST_ERROR <span class="token operator">=</span> <span class="token string">"-1"</span> <span class="token comment" spellcheck="true">//请求失败的code码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ResponseResult:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * @name cn.onestravel.library.kotlin.rxrequest.common.ResponseResult * @description 请求返回结果数据 符合 {"code":"0000","msg":"","data":{},"datas":[]} 的基类 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">class</span> ResponseResult <span class="token operator">:</span><span class="token function">BaseResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Serializable</code></pre><h3 id="6、BaseObserver1-lt-DATA-Serializable-gt"><a href="#6、BaseObserver1-lt-DATA-Serializable-gt" class="headerlink" title="6、BaseObserver1&lt;DATA: Serializable&gt;"></a>6、BaseObserver1&lt;DATA: Serializable&gt;</h3><p>package：cn.onestravel.library.kotlin.rxrequest.common</p><p>RxJava+Retrofit 请求的观察者，返回特定数据结构的数据，并进行相应的处理。</p><p>具体实现如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * @name cn.onestravel.library.kotlin.rxrequest.common.BaseObserver * @description 请求返回结果，返回json数据必须符合  {"code":"0000","msg":"","data":{},"datas":[]},data 和 datas 的数据 bean 相同 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseObserver1<span class="token operator">&lt;</span>DATA <span class="token operator">:</span> Serializable<span class="token operator">></span> <span class="token operator">:</span> Observer<span class="token operator">&lt;</span>ResponseResult1<span class="token operator">&lt;</span>DATA<span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 请求开始 处理基本的loading框的显示等     *     * @param d     */</span>    <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Disposable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>            TAG<span class="token punctuation">,</span>            <span class="token string">"===========单个接口请求开始  =========="</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 此方法必须实现     *     * @param result 请求成功的结果     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>result<span class="token operator">:</span> ResponseResult1<span class="token operator">&lt;</span>DATA<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 请求失败     *     * @param code 错误码     * @param msg  错误提示语     */</span>    <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>code<span class="token operator">:</span> String<span class="token punctuation">,</span> msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>            TAG<span class="token punctuation">,</span>            <span class="token string">"接口请求失败============code = "</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"errorMsg ="</span> <span class="token operator">+</span> msg    <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 请求都完成时之行此方法     */</span>    <span class="token keyword">open</span> <span class="token keyword">fun</span> <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Disposable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onStart</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onNext</span><span class="token punctuation">(</span>result<span class="token operator">:</span> ResponseResult1<span class="token operator">&lt;</span>DATA<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BaseResponse<span class="token punctuation">.</span>REQUEST_OK <span class="token operator">==</span> result<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onSuccess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"请求成功responseBody===="</span> <span class="token operator">+</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">onFailure</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code<span class="token punctuation">,</span> result<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">var</span> errorCode <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">is</span> HttpException<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> httpException <span class="token operator">=</span> e <span class="token keyword">as</span> HttpException            errorCode <span class="token operator">=</span> httpException<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">404</span> <span class="token operator">==</span> errorCode <span class="token operator">||</span> <span class="token number">500</span> <span class="token operator">==</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                errorMsg <span class="token operator">=</span> <span class="token string">"请求异常，请稍候重试！"</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//todo 设置固定的错误码及错误提示</span>        <span class="token punctuation">}</span>        <span class="token function">onFailure</span><span class="token punctuation">(</span>errorCode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string">"request"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ResponseResult1:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * @name cn.onestravel.library.kotlin.rxrequest.common.ResponseResult * @description 请求返回结果数据 符合 {"code":"0000","msg":"","data":{},"datas":[]} 的基类 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">class</span> ResponseResult1<span class="token operator">&lt;</span>DATA<span class="token operator">:</span>Serializable<span class="token operator">></span><span class="token punctuation">(</span>    <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> DATA<span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token keyword">val</span> datas<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>DATA<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">BaseResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Serializable</code></pre><h3 id="7、BaseObserver2-lt-DATA-Serializable-ITEM-Serializable-gt"><a href="#7、BaseObserver2-lt-DATA-Serializable-ITEM-Serializable-gt" class="headerlink" title="7、BaseObserver2&lt;DATA : Serializable,ITEM:Serializable&gt;"></a>7、BaseObserver2&lt;DATA : Serializable,ITEM:Serializable&gt;</h3><p>package：cn.onestravel.library.kotlin.rxrequest.common</p><p>RxJava+Retrofit 请求的观察者，返回特定数据结构的数据，并进行相应的处理。</p><p>具体实现如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">package</span> cn<span class="token punctuation">.</span>onestravel<span class="token punctuation">.</span>library<span class="token punctuation">.</span>kotlin<span class="token punctuation">.</span>rxrequest<span class="token punctuation">.</span>common<span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token keyword">import</span> io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>Observer<span class="token keyword">import</span> io<span class="token punctuation">.</span>reactivex<span class="token punctuation">.</span>disposables<span class="token punctuation">.</span>Disposable<span class="token keyword">import</span> retrofit2<span class="token punctuation">.</span>HttpException<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token comment" spellcheck="true">/** * @name cn.onestravel.library.kotlin.rxrequest.common.BaseObserver2 * @description 请求返回结果，返回json数据必须符合 {"code":"0000","msg":"","data":{},"datas":[]},data 和 datas 的数据 bean 可以不相同 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseObserver2<span class="token operator">&lt;</span>DATA <span class="token operator">:</span> Serializable<span class="token punctuation">,</span>ITEM<span class="token operator">:</span>Serializable<span class="token operator">></span> <span class="token operator">:</span> Observer<span class="token operator">&lt;</span>ResponseResult2<span class="token operator">&lt;</span>DATA<span class="token punctuation">,</span>ITEM<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">,</span> ObserverResult<span class="token operator">&lt;</span>ResponseResult2<span class="token operator">&lt;</span>DATA<span class="token punctuation">,</span>ITEM<span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 请求开始 处理基本的loading框的显示等     *     * @param d     */</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Disposable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>             BaseObserver2<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span>            <span class="token string">"===========单个接口请求开始  =========="</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 此方法必须实现     *     * @param result 请求成功的结果     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>result<span class="token operator">:</span> ResponseResult2<span class="token operator">&lt;</span>DATA<span class="token punctuation">,</span> ITEM<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 请求失败     *     * @param code 错误码     * @param msg  错误提示语     */</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>code<span class="token operator">:</span> String<span class="token punctuation">,</span> msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>             BaseObserver2<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span>            <span class="token string">"接口请求失败============code = "</span> <span class="token operator">+</span> code <span class="token operator">+</span> <span class="token string">"errorMsg ="</span> <span class="token operator">+</span> msg    <span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 请求都完成时之行此方法     */</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSubscribe</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Disposable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onStart</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onNext</span><span class="token punctuation">(</span>baseObject<span class="token operator">:</span> ResponseResult2<span class="token operator">&lt;</span>DATA<span class="token punctuation">,</span>ITEM<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//        Log.i("responseBody====",)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BaseResponse<span class="token punctuation">.</span>REQUEST_OK <span class="token operator">==</span> baseObject<span class="token punctuation">.</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onSuccess</span><span class="token punctuation">(</span>baseObject<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">onFailure</span><span class="token punctuation">(</span>baseObject<span class="token punctuation">.</span>code<span class="token punctuation">,</span> baseObject<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *     */</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> errorMsg <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">var</span> errorCode <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">is</span> HttpException<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> httpException <span class="token operator">=</span> e <span class="token keyword">as</span> HttpException            errorCode <span class="token operator">=</span> httpException<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">404</span> <span class="token operator">==</span> errorCode <span class="token operator">||</span> <span class="token number">500</span> <span class="token operator">==</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                errorMsg <span class="token operator">=</span> <span class="token string">"请求异常，请稍候重试！"</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//todo 设置固定的错误码及错误提示</span>        <span class="token punctuation">}</span>        <span class="token function">onFailure</span><span class="token punctuation">(</span>errorCode<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string">"RequestBaseObserver2"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ResponseResult2:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * @name cn.onestravel.library.kotlin.rxrequest.common.ResponseResult * @description 请求返回结果数据 符合 {"code":"0000","msg":"","data":{},"datas":[]} 的基类 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">class</span> ResponseResult2<span class="token operator">&lt;</span>DATA<span class="token operator">:</span>Serializable<span class="token punctuation">,</span>ITEM<span class="token operator">:</span>Serializable<span class="token operator">></span><span class="token punctuation">(</span>    <span class="token keyword">val</span> <span class="token keyword">data</span><span class="token operator">:</span> DATA<span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token keyword">val</span> datas<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>ITEM<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">BaseResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Serializable</code></pre><h3 id="8、BaseLoader"><a href="#8、BaseLoader" class="headerlink" title="8、BaseLoader"></a>8、BaseLoader</h3><p>package：cn.onestravel.library.kotlin.rxrequest.loader</p><p>公共的Loader，处理observe针对请求进行线程切换</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseLoader<span class="token operator">&lt;</span>S <span class="token operator">:</span> BaseService<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">val</span> mServiceManager<span class="token operator">:</span> RetrofitServiceManager <span class="token keyword">by</span> lazy <span class="token punctuation">{</span> RetrofitServiceManager<span class="token punctuation">.</span>INSTANCE <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">val</span> mService<span class="token operator">:</span> S <span class="token keyword">by</span> lazy <span class="token punctuation">{</span> <span class="token function">createService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建 Service 实例     */</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">createService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> S    <span class="token comment" spellcheck="true">/**     * 设置Observable的工作线程     * @param observable     * @param &lt;T>     * @return    &lt;/T> */</span>    <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">observe</span><span class="token punctuation">(</span>observable<span class="token operator">:</span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> Observable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> observable<span class="token punctuation">.</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">unsubscribeOn</span><span class="token punctuation">(</span>Schedulers<span class="token punctuation">.</span><span class="token function">io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">observeOn</span><span class="token punctuation">(</span>AndroidSchedulers<span class="token punctuation">.</span><span class="token function">mainThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="9、BaseService"><a href="#9、BaseService" class="headerlink" title="9、BaseService"></a>9、BaseService</h3><p>package：cn.onestravel.library.kotlin.rxrequest.service</p><p>所有 Retrofit 请求的 Service 的接口基类，目前只用于规范子类，可声明对应公用方法</p><h3 id="10、RetrofitServiceManager"><a href="#10、RetrofitServiceManager" class="headerlink" title="10、RetrofitServiceManager"></a>10、RetrofitServiceManager</h3><p>package：cn.onestravel.library.kotlin.rxrequest.service</p><p>生成接口service实例的管理类，初始化Retrofit 实例，设置请求相关的一些拦截器、超时时间等配置，定义Http请求的公共URL</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * @name cn.onestravel.library.kotlin.rxrequest.service.RetrofitServiceManager * @description 生成接口实例的管理类 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">class</span> RetrofitServiceManager <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> mRetrofit<span class="token operator">:</span> Retrofit    <span class="token keyword">init</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> interceptorBuild <span class="token operator">=</span> HttpCommonInterceptor<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> logging <span class="token operator">=</span> <span class="token function">HttpLoggingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>level <span class="token operator">=</span> HttpLoggingInterceptor<span class="token punctuation">.</span>Level<span class="token punctuation">.</span>BODY        <span class="token keyword">val</span> okHttpClientBuild <span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        okHttpClientBuild<span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span>CONNECTION_TIMEOUT<span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span>READ_TIMEOUT<span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span>WRITE_TIMEOUT<span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptorBuild<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//拦截器添加公共请求参数</span>            <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">RetryInterceptor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//重试三次的拦截</span>                        <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>logging<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//请求日志打印</span>        <span class="token comment" spellcheck="true">//初始化Retrofit</span>        mRetrofit <span class="token operator">=</span> Retrofit<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span>BASE_URL<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addCallAdapterFactory</span><span class="token punctuation">(</span>RxJava2CallAdapterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>okHttpClientBuild<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成对应接口的实例     *     * @param service     * @param &lt;T>     * @return    &lt;/T> */</span>    <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">:</span>BaseService<span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span>service<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>        <span class="token keyword">return</span> mRetrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> INSTANCE <span class="token keyword">by</span> lazy <span class="token punctuation">{</span> <span class="token function">RetrofitServiceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> CONNECTION_TIMEOUT <span class="token operator">=</span> <span class="token number">5</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> READ_TIMEOUT <span class="token operator">=</span> <span class="token number">20</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> WRITE_TIMEOUT <span class="token operator">=</span> <span class="token number">10</span>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> BASE_URL <span class="token operator">=</span> <span class="token string">"http://192.168.1.12:9090/"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、采用Mvp架构封装的文件介绍"><a href="#三、采用Mvp架构封装的文件介绍" class="headerlink" title="三、采用Mvp架构封装的文件介绍"></a>三、采用Mvp架构封装的文件介绍</h2><h3 id="1、BaseMvpActivity-lt-V-BaseMvpView-P-BaseMvpPresenter-gt"><a href="#1、BaseMvpActivity-lt-V-BaseMvpView-P-BaseMvpPresenter-gt" class="headerlink" title="1、BaseMvpActivity&lt;V : BaseMvpView, P : BaseMvpPresenter&gt;"></a>1、BaseMvpActivity&lt;V : BaseMvpView, P : BaseMvpPresenter<V>&gt;</h3><p>package：cn.onestravel.library.kotlin.mvp.activity</p><p>所有Mvp架构的 Activity 的基类,自BaseActivity ，拥有BaseActivity的所有特性,处理了P层的相关生命周期。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * @name  BaseMvpActivity * @description 所有Mvp架构的 Activity 的基类 * @createTime 2018/12/12 17:00 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> BaseMvpActivity<span class="token operator">&lt;</span>V <span class="token operator">:</span> BaseMvpView<span class="token punctuation">,</span> P <span class="token operator">:</span> BaseMvpPresenter<span class="token operator">&lt;</span>V<span class="token operator">></span><span class="token operator">></span> <span class="token operator">:</span> <span class="token function">BaseActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> BaseMvpView <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> presenter <span class="token keyword">by</span> lazy <span class="token punctuation">{</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> mLoadingDialog<span class="token operator">:</span> LoadingDialog<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">createPresenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> P    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>presenter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span>  <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"Presenter is null! Do you return null in createPresenter()?"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        presenter<span class="token punctuation">.</span><span class="token function">onMvpAttachView</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">as</span> V<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        presenter<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>            it<span class="token punctuation">.</span><span class="token function">onMvpStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        presenter<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>            it<span class="token punctuation">.</span><span class="token function">onMvpResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        presenter<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>            it<span class="token punctuation">.</span><span class="token function">onMvpPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        presenter<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>            it<span class="token punctuation">.</span><span class="token function">onMvpStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span>        presenter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>            it<span class="token punctuation">.</span><span class="token function">onMvpSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        presenter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>            it<span class="token punctuation">.</span><span class="token function">onMvpDetachView</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>            it<span class="token punctuation">.</span><span class="token function">onMvpDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        mLoadingDialog<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>            it<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            mLoadingDialog <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">showLoading</span><span class="token punctuation">(</span>content<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mLoadingDialog <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mLoadingDialog <span class="token operator">=</span> LoadingDialog<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>            mLoadingDialog<span class="token operator">!!</span><span class="token punctuation">.</span>title <span class="token operator">=</span> content<span class="token operator">?:</span><span class="token string">"正在加载..."</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mLoadingDialog<span class="token operator">!!</span><span class="token punctuation">.</span>isShowing<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mLoadingDialog<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">hideLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLoadingDialog<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>            mLoadingDialog<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponseError</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        msg<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>            <span class="token function">showToast</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、BaseMvpListActivity-lt-V-BaseMvpView-P-BaseMvpPresenter-gt"><a href="#2、BaseMvpListActivity-lt-V-BaseMvpView-P-BaseMvpPresenter-gt" class="headerlink" title="2、BaseMvpListActivity&lt;V : BaseMvpView, P : BaseMvpPresenter&gt;"></a>2、BaseMvpListActivity&lt;V : BaseMvpView, P : BaseMvpPresenter<V>&gt;</h3><p>package：cn.onestravel.library.kotlin.mvp.activity</p><p>所有Mvp架构的 ListActivity 的基类,自BaseListActivity ，拥有BaseListActivity的所有特性，并且处理了P层的相关生命周期。</p><h3 id="3、BaseRxMvpActivity-lt-V-BaseMvpView-P-BaseMvpPresenter-gt"><a href="#3、BaseRxMvpActivity-lt-V-BaseMvpView-P-BaseMvpPresenter-gt" class="headerlink" title="3、BaseRxMvpActivity&lt;V : BaseMvpView, P : BaseMvpPresenter&gt;"></a>3、BaseRxMvpActivity&lt;V : BaseMvpView, P : BaseMvpPresenter<V>&gt;</h3><p>package：cn.onestravel.library.kotlin.mvp.activity</p><p>所有Mvp架构的 采用RxJava+Retrofit 请求的Activity 的基类，继承自BaseRxActivity ，拥有BaseRxActivity的所有特性，并且处理了P层的相关生命周期。</p><h3 id="4、BaseRxMvpListActivity-lt-V-BaseMvpView-P-BaseMvpPresenter-gt"><a href="#4、BaseRxMvpListActivity-lt-V-BaseMvpView-P-BaseMvpPresenter-gt" class="headerlink" title="4、BaseRxMvpListActivity&lt;V : BaseMvpView, P : BaseMvpPresenter&gt;"></a>4、BaseRxMvpListActivity&lt;V : BaseMvpView, P : BaseMvpPresenter<V>&gt;</h3><p>package：cn.onestravel.library.kotlin.mvp.activity</p><p>所有Mvp架构的 采用RxJava+Retrofit 请求的带有列表的Activity，继承自BaseRxListActivity ，拥有BaseRxListActivity的所有特性，并且处理了P层的相关生命周期。</p><h3 id="5、Fragment-有与前4个Activity功能相同Fragment，就不多做介绍了。"><a href="#5、Fragment-有与前4个Activity功能相同Fragment，就不多做介绍了。" class="headerlink" title="5、Fragment 有与前4个Activity功能相同Fragment，就不多做介绍了。"></a>5、Fragment 有与前4个Activity功能相同Fragment，就不多做介绍了。</h3><p>package：cn.onestravel.library.kotlin.mvp.fragment</p><h3 id="6、BaseMvpModel"><a href="#6、BaseMvpModel" class="headerlink" title="6、BaseMvpModel"></a>6、BaseMvpModel</h3><p>package：cn.onestravel.library.kotlin.mvp.model</p><p>Mvp模式中所有Model层的基类，是一个接口，可以声明共同的方法，交由子类去实现。</p><h3 id="7、BaseMvpPresenter"><a href="#7、BaseMvpPresenter" class="headerlink" title="7、BaseMvpPresenter"></a>7、BaseMvpPresenter</h3><p>package：cn.onestravel.library.kotlin.mvp.presenter</p><p>Mvp模式中所有presenter层的基类，是一个接口，声明了presenter层相关的生命周期方法，由子类去实现。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * @name  BaseMvpPresenterImpl * @description 所有界面presenter的接口类 * @createTime 2018/12/12 16:27 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">interface</span> BaseMvpPresenter<span class="token operator">&lt;</span><span class="token keyword">in</span> V <span class="token operator">:</span> BaseMvpView<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">onMvpAttachView</span><span class="token punctuation">(</span>view<span class="token operator">:</span> V<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpSaveInstanceState</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpDetachView</span><span class="token punctuation">(</span>retainInstance<span class="token operator">:</span> Boolean<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="8、BaseMvpPresenterImpl-lt-V-BaseMvpView-gt"><a href="#8、BaseMvpPresenterImpl-lt-V-BaseMvpView-gt" class="headerlink" title="8、BaseMvpPresenterImpl&lt;V: BaseMvpView&gt;"></a>8、BaseMvpPresenterImpl&lt;V: BaseMvpView&gt;</h3><p>package：cn.onestravel.library.kotlin.mvp.presenter.impl</p><p>Mvp模式中所有presenter层的接口的实现类，对presenter层相关的生命周期方法进行实现；并且实现与View层的绑定，持有View层的引用。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * @name  BaseMvpPresenterImpl * @description 所有界面presenter的接口类 * @createTime 2018/12/12 16:27 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">interface</span> BaseMvpPresenter<span class="token operator">&lt;</span><span class="token keyword">in</span> V <span class="token operator">:</span> BaseMvpView<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">onMvpAttachView</span><span class="token punctuation">(</span>view<span class="token operator">:</span> V<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpSaveInstanceState</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpDetachView</span><span class="token punctuation">(</span>retainInstance<span class="token operator">:</span> Boolean<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="9、BaseMvpView"><a href="#9、BaseMvpView" class="headerlink" title="9、BaseMvpView"></a>9、BaseMvpView</h3><p>package：cn.onestravel.library.kotlin.mvp.view</p><p>Mvp模式中所有View层的接口类，声明了一些View层常用的加载进度显示与隐藏，请求失败提示等公用的方法。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * @name  BaseMvpPresenterImpl * @description 所有界面presenter的接口类 * @createTime 2018/12/12 16:27 * @author onestravel * @version 1.0.0 */</span><span class="token keyword">interface</span> BaseMvpPresenter<span class="token operator">&lt;</span><span class="token keyword">in</span> V <span class="token operator">:</span> BaseMvpView<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">onMvpAttachView</span><span class="token punctuation">(</span>view<span class="token operator">:</span> V<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpSaveInstanceState</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpDetachView</span><span class="token punctuation">(</span>retainInstance<span class="token operator">:</span> Boolean<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">onMvpDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="声明："><a href="#声明：" class="headerlink" title="声明："></a>声明：</h2><p>针对Kotlin项目的一些常用封装，到这里就介绍完了，后面还会增加MVVM模式的一些封装，敬请期待！！</p><p>在封装或者介绍过程中，如有什么不正确或者不明白的地方，期待与您进行交流，共同提高！</p><p>联系邮件：<a href="mailto:server@onestravel.cn">server@onestravel.cn</a></p><p>鸣谢！！！</p>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(七)Kotlin 小案例与展望未来</title>
      <link href="/20181212/kotlin/qi-kotlin-xiao-an-li-yu-zhan-wang-wei-lai/"/>
      <url>/20181212/kotlin/qi-kotlin-xiao-an-li-yu-zhan-wang-wei-lai/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Kotlin-的应用场景"><a href="#一、Kotlin-的应用场景" class="headerlink" title="一、Kotlin 的应用场景"></a>一、Kotlin 的应用场景</h3><h4 id="1、Kotlin-Script"><a href="#1、Kotlin-Script" class="headerlink" title="1、Kotlin Script"></a>1、Kotlin Script</h4><ul><li>Gradle 脚本，Gradle3.0 开始部分支出，尚在完善中</li></ul><h4 id="2、Java-虚拟机应用"><a href="#2、Java-虚拟机应用" class="headerlink" title="2、Java 虚拟机应用"></a>2、Java 虚拟机应用</h4><ul><li>Web 应用，完美支持</li><li>JavaFx,jdk8开始完美支持</li></ul><h4 id="3、前端开发"><a href="#3、前端开发" class="headerlink" title="3、前端开发"></a>3、前端开发</h4><ul><li>1.1 开始正式支持 Kotlin-JavaScript</li></ul><h4 id="4、Android-应用开发"><a href="#4、Android-应用开发" class="headerlink" title="4、Android 应用开发"></a>4、Android 应用开发</h4><ul><li>Kotlin 目前的主要战场</li></ul><h4 id="5、Native-程序"><a href="#5、Native-程序" class="headerlink" title="5、Native 程序"></a>5、Native 程序</h4><ul><li>直接编译 Kotlin 代码为机器码，不依赖Jvm</li><li>支持与 C 代码交互</li><li>技术预览版功能有限，前途无量</li></ul><h3 id="二、Kotlin-Script-实例"><a href="#二、Kotlin-Script-实例" class="headerlink" title="二、Kotlin Script 实例"></a>二、Kotlin Script 实例</h3><h4 id="1、安装-Kotlin-编译库"><a href="#1、安装-Kotlin-编译库" class="headerlink" title="1、安装 Kotlin 编译库"></a>1、安装 Kotlin 编译库</h4><h5 id="Windows下Kotlin命令行开发环境安装"><a href="#Windows下Kotlin命令行开发环境安装" class="headerlink" title="Windows下Kotlin命令行开发环境安装"></a>Windows下Kotlin命令行开发环境安装</h5><ul><li>安装环境准备</li></ul><p>Kotlin编译器：从GitHub下载，截止2017-9-5 最新版本是1.1.4，<br><a href="https://github.com/JetBrains/kotlin" target="_blank" rel="noopener">GitHub主页</a></p><p>Java JDK 8，可以从Oracle官网下载，<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html/" target="_blank" rel="noopener">下载JDK8</a></p><ul><li>安装</li></ul><p>在Windows操作系统完成JDK 8的安装以后，安装Kotlin编译器：</p><p>解压Kotlin安装包：kotlin-compiler-1.1.4.zip，本文解压到D盘kotlin目录下</p><p>将D:\kotlin\kotlinc\bin目录路径，添加到Windows系统环境变量即可</p><p>Windows 10环境变量设置：【控制面板】中直接搜索【环境变量】，然后【编辑系统环境变量】即可；</p><ul><li>验证安装是否成功</li></ul><p>打开windows的命令行窗口<br>输入命令：kotlinc -version，如果提示Kotlin 1.1.4版本号，安装成功</p><h5 id="其它可选的安装平台"><a href="#其它可选的安装平台" class="headerlink" title="其它可选的安装平台"></a>其它可选的安装平台</h5><p>在Windows和Linux、OS X上通用的安装方法：</p><ul><li>Kotlin编译器，从GitHub下载，截止2017-9-5 最新版本是1.1.4，<a href="https://github.com/JetBrains/kotlin" target="_blank" rel="noopener">GitHub  - Kotlin主页</a></li><li>下载Java JDK 环境安装</li></ul><p>Linux，OS X，FreeBSB，Solaris等*Unix系统支持以下方法：</p><pre><code>    // sdkman 包管理工具    $ curl -s https://get.sdkman.io | bash    // 一定要新开终端窗口执行以下命令    $ sdk install kotlin</code></pre><p>Max OS X 还支持以下方式：</p><pre><code>    // homebrew工具安装    $ brew update    $ brew install kotlin</code></pre><h4 id="2、编译执行Kotlin-Script-kts-文件"><a href="#2、编译执行Kotlin-Script-kts-文件" class="headerlink" title="2、编译执行Kotlin Script(.kts) 文件"></a>2、编译执行Kotlin Script(.kts) 文件</h4><pre><code>    // 编译.kts 脚本文件    kotlinc -script *.kts    // 编译源码为可运行的jar包    kotlinc D:\kotlin_code\hello.kt -include-runtime -d hello.jar    // 使用java执行hello.jar    java -jar D:\kotlin_code\hello.jar    // 使用java执行类名运行    java -cp D:\kotlin_code\hello.jar  HelloKt    // 使用kotlin执行，需要指明main类，执行类名    kotlin -cp D:\kotlin_code HelloKt    // 或者直接运行jar包    kotlin D:\kotlin_code\hello.jar</code></pre><h3 id="三、Kotlin-Android-实例"><a href="#三、Kotlin-Android-实例" class="headerlink" title="三、Kotlin Android 实例"></a>三、Kotlin Android 实例</h3><h4 id="1、Kotlin-Android-插件"><a href="#1、Kotlin-Android-插件" class="headerlink" title="1、Kotlin Android 插件"></a>1、Kotlin Android 插件</h4><h5 id="kotlin-android-extensions"><a href="#kotlin-android-extensions" class="headerlink" title="- kotlin.android.extensions"></a>- kotlin.android.extensions</h5><pre><code>apply plugin &quot;kotlin.android.extensions&quot;</code></pre><p>使用该插件可以在代码中省去 findViewById ，可直接使用对应 xml 布局文件中对应 View 的 id 属性定义的名称来进行相应的操作<br>如：</p><p>main_layout.xml</p><pre><code>&lt;TextViewandroid:layout_width=&quot;wrap_content&quot;android:layout_height=&quot;wrap_content&quot;android:id=&quot;@+id/tvName&quot;/&gt;</code></pre><p>MainActivity.kt</p><pre><code>tvName.text=&quot;Hello World&quot;</code></pre><h5 id="anko-库"><a href="#anko-库" class="headerlink" title="- anko 库"></a>- anko 库</h5><ul><li>添加 anko 库</li></ul><pre><code>compile &quot;org.jetbrains.anko:anko-sdk15:0.9.1&quot;</code></pre><ul><li>改变 View 的setOnClickListener</li></ul><pre><code>tvName.onClick{view -&gt;    (view!! as TextView).text=&quot;${System.currentTimeMilles()}&quot;}</code></pre><ul><li>改变 startActivity</li></ul><pre><code>val intent = Intent(this@MainAvtivity,Main2Activity::class.java)intent.putExtra(&quot;key&quot;,&quot;From MainActivity&quot;)this@MainAvtivity.startActivity(intent)</code></pre><p>更改后为</p><pre><code>startActivity&lt;Main2Activity&gt;(&quot;key&quot; to &quot;From MainActivity&quot;)</code></pre><ul><li>代码中定义View,可无需布局文件</li></ul><p>Main2Activity.kt</p><pre><code>override fun onCreate(savedInstanceState: Bundle?){    super.onCreate(savedInstanceState)    relativeLayout{        textView(intent.extras[&quot;key&quot;]?.toString()?: &quot;Hello&quot;){        }.lparams(matchParent,matchParent){            gravity = Gravity.CENTER        }    }.lparams(matchParent,matchParent){        gravity = Gravity.CENTER    }}</code></pre><h3 id="四、Kotlin-javascript-实例"><a href="#四、Kotlin-javascript-实例" class="headerlink" title="四、Kotlin javascript 实例"></a>四、Kotlin javascript 实例</h3><p>创建一个kotlin (javascript) 的项目</p><p>新建 Main.kt 文件</p><pre><code>fun main(args:Array&lt;String&gt;){    document.write(&quot;Hello World!&quot;)}</code></pre><p>build 该项目，会在out 下生成对应的js 文件<br>；页面引入对应的js文件，就可以在浏览器访问该页面了</p><p>index.html</p><pre><code>&lt;html&gt;    &lt;head&gt;        &lt;title&gt;Hello Kotlin javasicrpt&lt;/title&gt;    &lt;script src=&quot;${kotlin.js文件所在路径}/kotlin.js&quot;/&gt;    &lt;script src=&quot;${kotlin-javascript.js文件所在路径}/kotlin-javascript.js&quot;/&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="五、Kotlin-SpringBoot-实例"><a href="#五、Kotlin-SpringBoot-实例" class="headerlink" title="五、Kotlin SpringBoot 实例"></a>五、Kotlin SpringBoot 实例</h3><h4 id="1、配置插件"><a href="#1、配置插件" class="headerlink" title="1、配置插件"></a>1、配置插件</h4><pre><code>buildscript{    ext.springBootVersion = &quot;1.5.9.RELEASE&quot;    dependencies{        classpath &quot;org.jetbrains.kotlin:kotlin-noarg:@kotlin_version&quot;        classpath &quot;org.jetbrains.kotlin:kotlin-allopen:@kotlin_version&quot;        classpath &quot;org.springframework.boot:Spring-boot-gradle-plugin:@springBootVersion&quot;    }}apply plugin: &#39;kotlin-spring&#39;apply plugin: &#39;kotlin-jpa&#39;apply plugin: &#39;org.springframework.boot&#39;dependencies{    compile &quot;org.springframework.boot:spring-boot-starter-web&quot;    compile &quot;org.springframework.boot:spring-boot-starter-data-jpa&quot;    compile &quot;com.h2database:h2&quot;    compile &quot;com.fasterxml.jackson.module:jackson-module-kotlin:2.8.4&quot;}</code></pre><h3 id="五、Kotlin-Native-实例"><a href="#五、Kotlin-Native-实例" class="headerlink" title="五、Kotlin Native 实例"></a>五、Kotlin Native 实例</h3>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(六)Kotlin 与 Java 混合开发</title>
      <link href="/20181211/kotlin/liu-kotlin-yu-java-hun-he-kai-fa/"/>
      <url>/20181211/kotlin/liu-kotlin-yu-java-hun-he-kai-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本互操作"><a href="#一、基本互操作" class="headerlink" title="一、基本互操作"></a>一、基本互操作</h3><h4 id="1、属性读写"><a href="#1、属性读写" class="headerlink" title="1、属性读写"></a>1、属性读写</h4><ul><li>Kotlin 自动识别 Java Getter/Setter</li><li>Java 操作 Kotlin 属性通过 Getter/Setter</li></ul><h4 id="2、空安全类型"><a href="#2、空安全类型" class="headerlink" title="2、空安全类型"></a>2、空安全类型</h4><ul><li>Kotlin 空安全类型的原理</li><li>平台类型 Platform Type,自己明确传入的参数和返回值是否可能为空</li><li>可使用注解 @Nullable 和 @NotNull 来确保不能为空</li></ul><h4 id="3、几类函数的调用"><a href="#3、几类函数的调用" class="headerlink" title="3、几类函数的调用"></a>3、几类函数的调用</h4><ul><li>包级函数：静态方法</li><li>扩展方法：带Receiver 的静态方法</li><li>运算符重载：带 Receiver 的对应名称的静态方法</li></ul><h4 id="4、几个常用注解的使用"><a href="#4、几个常用注解的使用" class="headerlink" title="4、几个常用注解的使用"></a>4、几个常用注解的使用</h4><ul><li>@JvmField : 将属性编译为 Java 变量</li><li>@JvmStatic : 将对象的方法编译成 Java 静态方法</li><li>@JvmOverloads : 默认参数生成重载方法</li><li>@file:JvmName : 知道 Kotlin 文件编译后的类名，默认为 Kotlin 文件名+Kt</li></ul><h4 id="5、NoArg-与-AllOpen"><a href="#5、NoArg-与-AllOpen" class="headerlink" title="5、NoArg 与 AllOpen"></a>5、NoArg 与 AllOpen</h4><ul><li>NoArg 为被标注的类生成无参构造方法</li><li>NoArg 支持 Jpa 注解，如：@Entity</li><li>AllOpen 为被标注的类去掉 final ,允许被继承</li><li>AllOpen 支持 Spring 注解，如: @Component</li><li>支持自定义注解类型，如：@PoKo</li></ul><h4 id="6、泛型"><a href="#6、泛型" class="headerlink" title="6、泛型"></a>6、泛型</h4><ul><li>通配符 Kotlin 的 * 对象于 Java 的 ?</li><li>协变和逆变 out/in</li></ul><pre><code>ArrayList&lt;out String&gt;</code></pre><ul><li>没有 Raw 类型</li></ul><pre><code>Java 的List  -&gt;   Kotlin 的List&lt;*&gt;</code></pre><h3 id="二、SAM-转换"><a href="#二、SAM-转换" class="headerlink" title="二、SAM 转换"></a>二、SAM 转换</h3><ul><li>Single Abstract Method</li><li>SAM 转换的条件<br>   Java的接口，单一接口方法</li><li>注意转换后的实例变化</li></ul><h3 id="三、正则表达式"><a href="#三、正则表达式" class="headerlink" title="三、正则表达式"></a>三、正则表达式</h3><ul><li>用 Raw 字符串定义正则表达式</li><li>Java 的 Pattern 在 Kotlin 中同样适用</li><li>可通过Kotlin 的 Regex 自定义Kotlin 风格的正则表达式</li></ul><h3 id="四、集合框架"><a href="#四、集合框架" class="headerlink" title="四、集合框架"></a>四、集合框架</h3><ul><li>Kotlin 到 Java 的类型映射</li><li>不可变与可变集合接口，Kotlin 中所有的List,Map,Set 都是不可变的接口</li><li>部分接口优化，比如：list.removeAt(0);</li></ul><h3 id="五、IO-操作"><a href="#五、IO-操作" class="headerlink" title="五、IO 操作"></a>五、IO 操作</h3><ul><li>File、Stream、Reader、Writer的扩展方法</li><li>使用use 扩展自动关闭资源</li><li>小文件一次性读取 readLines()</li></ul><h3 id="六、装箱与拆箱"><a href="#六、装箱与拆箱" class="headerlink" title="六、装箱与拆箱"></a>六、装箱与拆箱</h3><ul><li>Java 的基本数据类型，都会映射到 Kotlin 中的基本类型</li><li>由于Kotlin 中不区分Java 中的装箱类型与拆箱类型，需要注意规避基本类型相关的问题</li></ul><h3 id="七、注解处理器"><a href="#七、注解处理器" class="headerlink" title="七、注解处理器"></a>七、注解处理器</h3><ul><li>apply plugin: “kotlin-kapt”</li><li>注意添加生成的代码路径到 SourceSets{}</li><li>注意 Intellij 暂时不支持注解处理器的编译</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(五)协程 Coroutine</title>
      <link href="/20181210/kotlin/wu-xie-cheng-coroutine/"/>
      <url>/20181210/kotlin/wu-xie-cheng-coroutine/</url>
      
        <content type="html"><![CDATA[<h3 id="一、协程的概念"><a href="#一、协程的概念" class="headerlink" title="一、协程的概念"></a>一、协程的概念</h3><ul><li>协作程序，解决异步问题</li><li>应用层完成调度</li><li>常见的支持协程的语言如： lua，C#</li></ul><h3 id="二、协程要解决什么问题"><a href="#二、协程要解决什么问题" class="headerlink" title="二、协程要解决什么问题"></a>二、协程要解决什么问题</h3><p>例如：</p><pre><code>现在要开始协程啦{    //现在在协程里面了    //花括号内的代码可以是一段运行在UI线程的代码    val view = ...  //初始化视图    val image =    //异步加载图片,运行在其他子线程，执行到这一步就挂起，等到子线程返回图片，继续执行，不会阻塞线程    view.setImage(image)}</code></pre><ul><li>异步代码想同步代码一样直观</li><li>简化异步代码异常处理</li><li>轻量级的并发方案</li></ul><h3 id="三、kotlin如何支持协程"><a href="#三、kotlin如何支持协程" class="headerlink" title="三、kotlin如何支持协程"></a>三、kotlin如何支持协程</h3><ul><li>编译器对 suspend 函数的编译支持</li><li>标准库的基本API支持</li><li>kotlinx.coroutine 应用级的支持</li></ul><h3 id="四、协程的基本API"><a href="#四、协程的基本API" class="headerlink" title="四、协程的基本API"></a>四、协程的基本API</h3><ul><li>createCoroutine：创建协程</li><li>startCoroutine：启动协程</li><li>suspendCoroutine：挂起协程</li><li>Continuation 接口：运行控制类，负责结果和异常的返回</li><li>CoroutineContext 接口：运行上下文，资源持有，运行调度</li><li>ContinuationInterceptor 接口：协程控制拦截器，可用来处理协程调度</li></ul><h3 id="五、协程的执行流程"><a href="#五、协程的执行流程" class="headerlink" title="五、协程的执行流程"></a>五、协程的执行流程</h3><ul><li>协程被编译成状态机</li><li>suspend 函数即状态转移<br><img src="/images/20181210/process.png" alt="执行流程图"></li></ul><h3 id="六、协程的运行结果"><a href="#六、协程的运行结果" class="headerlink" title="六、协程的运行结果"></a>六、协程的运行结果</h3><ul><li>正常的结果通过 resume 返回</li><li>异常通过 resumeWithException 抛出<br><img src="/images/20181210/result.png" alt="运行结果图"></li></ul><h3 id="七、kotlinx-coroutine-框架介绍"><a href="#七、kotlinx-coroutine-框架介绍" class="headerlink" title="七、kotlinx.coroutine 框架介绍"></a>七、kotlinx.coroutine 框架介绍</h3><ul><li>Kotlin 官方协程应用框架</li><li>提供大量对协程API的封装</li></ul><table><thead><tr><th>主要模块</th><th>说明</th></tr></thead><tbody><tr><td>kotlin-coroutines-core</td><td>核心库</td></tr><tr><td>kotlin-coroutines-jdk8</td><td>Java8 支持库</td></tr><tr><td>kotlin-coroutines-nio</td><td>异步IO库</td></tr><tr><td>kotlin-coroutines-reactive</td><td>Reactive Streams 支持</td></tr><tr><td>kotlin-coroutines-reactor</td><td>Reactor 支持</td></tr><tr><td>kotlin-coroutines-rx1</td><td>RxJava 1.x 支持</td></tr><tr><td>kotlin-coroutines-rx2</td><td>RxJava 2.x 支持</td></tr><tr><td>kotlin-coroutines-android</td><td>Android UI 支持</td></tr><tr><td>kotlin-coroutines-javafx</td><td>JavaFx UI 支持</td></tr><tr><td>kotlin-coroutines-swing</td><td>Swing UI 支持</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(四)Kotlin 领域特定语言 DSL</title>
      <link href="/20181209/kotlin/si-kotlin-ling-yu-te-ding-yu-yan-dsl/"/>
      <url>/20181209/kotlin/si-kotlin-ling-yu-te-ding-yu-yan-dsl/</url>
      
        <content type="html"><![CDATA[<h3 id="一、领域特定语言-DSL的概念"><a href="#一、领域特定语言-DSL的概念" class="headerlink" title="一、领域特定语言 DSL的概念"></a>一、领域特定语言 DSL的概念</h3><ul><li>只在特定领域使用的语言;例如：HTML、Gradle、SQL</li></ul><h3 id="二、领域特定语言-DSL的特点"><a href="#二、领域特定语言-DSL的特点" class="headerlink" title="二、领域特定语言 DSL的特点"></a>二、领域特定语言 DSL的特点</h3><ul><li>它也是计算机编程语言</li><li>具有语言表达能力</li><li>表达能力比较有限</li><li>关注某个特定领域</li></ul><h3 id="三、Html-DSL"><a href="#三、Html-DSL" class="headerlink" title="三、Html DSL"></a>三、Html DSL</h3><h3 id="四、Gradle-DSL"><a href="#四、Gradle-DSL" class="headerlink" title="四、Gradle DSL"></a>四、Gradle DSL</h3><h4 id="以下内容引用自-Kotlin-语言中文站"><a href="#以下内容引用自-Kotlin-语言中文站" class="headerlink" title="以下内容引用自 Kotlin 语言中文站"></a>以下内容引用自 <a href="http://www.kotlincn.net/docs/reference/using-gradle.html#使用-gradle" target="_blank" rel="noopener">Kotlin 语言中文站</a></h4><h4 id="使用-Gradle"><a href="#使用-Gradle" class="headerlink" title="使用 Gradle"></a>使用 Gradle<a href="#使用-gradle"></a></h4><p>为了用 Gradle 构建 Kotlin，你应该<a href="#插件和版本">设置好 <em>kotlin-gradle</em> 插件</a>，<a href="#针对-jvm">将其应用</a>到你的项目中，并且<a href="#配置依赖">添加 <em>kotlin-stdlib</em> 依赖</a>。这些操作也可以在 IntelliJ IDEA 中通过调用 Project action 中的 Tools | Kotlin | Configure Kotlin 自动执行。</p><h5 id="插件和版本"><a href="#插件和版本" class="headerlink" title="插件和版本"></a>插件和版本<a href="#插件和版本"></a></h5><p>使用 <code>kotlin-gradle-plugin</code> 编译 Kotlin 源代码和模块.</p><p>要使用的 Kotlin 版本通常定义为 <code>kotlin_version</code> 属性：</p><pre><code>buildscript {    ext.kotlin_version = &#39;1.3.11&#39;    repositories {        mavenCentral()    }    dependencies {        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;    }}</code></pre><p>当通过 <a href="https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block" target="_blank" rel="noopener">Gradle 插件 DSL</a> 与 <a href="https://github.com/gradle/kotlin-dsl" target="_blank" rel="noopener">Gradle Kotlin DSL</a> 使用 Kotlin Gradle 插件 1.1.1 及以上版本时，这不是必需的。</p><h5 id="针对-JVM"><a href="#针对-JVM" class="headerlink" title="针对 JVM"></a>针对 JVM<a href="#针对-jvm"></a></h5><p>针对 JVM，需要应用 Kotlin 插件：</p><pre><code>apply plugin: &quot;kotlin&quot;</code></pre><p>或者，从 Kotlin 1.1.1 起，可以使用 <a href="https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block" target="_blank" rel="noopener">Gradle 插件 DSL</a> 来应用该插件：</p><pre><code>plugins {    id &quot;org.jetbrains.kotlin.jvm&quot; version &quot;1.3.11&quot;}</code></pre><p>在这个块中的 <code>version</code> 必须是字面值，并且不能从其他构建脚本中应用。<br>对于 Gradle Kotlin DSL，请按以下方式应用插件：</p><pre><code>plugins {    kotlin(&quot;jvm&quot;) version &quot;1.3.11&quot;}</code></pre><p>Kotlin 源代码可以与同一个文件夹或不同文件夹中的 Java 源代码混用。默认约定是使用不同的文件夹：</p><pre><code>project    - src        - main (root)            - kotlin            - java</code></pre><p>如果不使用默认约定，那么应该更新相应的 <em>sourceSets</em> 属性：</p><pre><code>sourceSets {    main.kotlin.srcDirs += &#39;src/main/myKotlin&#39;    main.java.srcDirs += &#39;src/main/myJava&#39;}</code></pre><p>对于 Gradle Kotlin DSL，请改用 <code>java.sourceSets { …… }</code> 配置源集。</p><h5 id="针对-JavaScript"><a href="#针对-JavaScript" class="headerlink" title="针对 JavaScript"></a>针对 JavaScript<a href="#针对-javascript"></a></h5><p>当针对 JavaScript 时，须应用不同的插件：</p><pre><code>apply plugin: &quot;kotlin2js&quot;</code></pre><p>这个插件只适用于 Kotlin 文件，因此建议将 Kotlin 和 Java 文件分开（如果是同一项目包含 Java 文件的情况）。与针对 JVM 一样，如果不使用默认约定，我们需要使用 <em>sourceSets</em> 来指定源代码文件夹：</p><pre><code>sourceSets {    main.kotlin.srcDirs += &#39;src/main/myKotlin&#39;}</code></pre><p>除了输出的 JavaScript 文件，该插件默认会创建一个带二进制描述符的额外 JS 文件。 如果你是构建其他 Kotlin 模块可以依赖的可重用库，那么该文件是必需的，并且应该与转换结果一起分发。 其生成由 <code>kotlinOptions.metaInfo</code> 选项控制：</p><pre><code>compileKotlin2Js {    kotlinOptions.metaInfo = true}</code></pre><h5 id="针对-Android"><a href="#针对-Android" class="headerlink" title="针对 Android"></a>针对 Android<a href="#针对-android"></a></h5><p>Android 的 Gradle 模型与普通 Gradle 有点不同，所以如果我们要构建一个用 Kotlin 编写的 Android 项目，我们需要用 <em>kotlin-android</em> 插件取代 <em>kotlin</em> 插件：</p><pre><code>buildscript {    ext.kotlin_version = &#39;1.3.11&#39;    ……    dependencies {        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;    }}apply plugin: &#39;com.android.application&#39;apply plugin: &#39;kotlin-android&#39;</code></pre><p>不要忘记配置<a href="#配置依赖">标准库依赖关系</a>。</p><h6 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio<a href="#android-studio"></a></h6><p>如果使用 Android Studio，那么需要在 android 下添加以下内容：</p><pre><code>android {  ……  sourceSets {    main.java.srcDirs += &#39;src/main/kotlin&#39;  }}</code></pre><p>这让 Android Studio 知道该 kotlin 目录是源代码根目录，所以当项目模型加载到 IDE 中时，它会被正确识别。或者，你可以将 Kotlin 类放在 Java 源代码目录中，该目录通常位于 <code>src/main/java</code>。</p><h5 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖<a href="#配置依赖"></a></h5><p>除了上面显示的 <code>kotlin-gradle-plugin</code> 依赖之外，还需要添加 Kotlin 标准库的依赖：</p><pre><code>repositories {    mavenCentral()}dependencies {    compile &quot;org.jetbrains.kotlin:kotlin-stdlib&quot;}</code></pre><p>如果针对 JavaScript，请使用 <code>compile &quot;org.jetbrains.kotlin:kotlin-stdlib-js&quot;</code> 替代之。</p><p>如果是针对 JDK 7 或 JDK 8，那么可以使用扩展版本的 Kotlin 标准库，其中包含为新版 JDK 增加的额外的扩展函数。使用以下依赖之一来取代 <code>kotlin-stdlib</code> ：</p><pre><code>compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7&quot;compile &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;</code></pre><p>对于 Gradle Kotlin DSL，以下表示法的依赖关系与其等价：</p><pre><code>dependencies {    compile(kotlin(&quot;stdlib&quot;))    // 或者以下之一：    compile(kotlin(&quot;stdlib-jdk7&quot;))    compile(kotlin(&quot;stdlib-jdk8&quot;))}</code></pre><p>在 Kotlin 1.1.x 中，请使用 <code>kotlin-stdlib-jre7</code> 与 <code>kotlin-stdlib-jre8</code>。</p><p>如果你的项目中使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/index.html" target="_blank" rel="noopener">Kotlin 反射</a>或者测试设施，你也需要添加相应的依赖：</p><pre><code>compile &quot;org.jetbrains.kotlin:kotlin-reflect&quot;testCompile &quot;org.jetbrains.kotlin:kotlin-test&quot;testCompile &quot;org.jetbrains.kotlin:kotlin-test-junit&quot;</code></pre><p>或者，对于 Gradle Kotlin DSL：</p><pre><code>compile(kotlin(&quot;reflect&quot;))testCompile(kotlin(&quot;test&quot;))testCompile(kotlin(&quot;test-junit&quot;))</code></pre><p>从 Kotlin 1.1.2 起，使用 <code>org.jetbrains.kotlin</code> group 的依赖项默认使用从已应用的插件获得的版本来解析。你可以用完整的依赖关系符号 （如 <code>compile &quot;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version&quot;</code>，或者在 Gradle Kotlin DSL 中用 <code>kotlin(&quot;stdlib&quot;, kotlinVersion)</code>）手动提供其版本。</p><h5 id="注解处理"><a href="#注解处理" class="headerlink" title="注解处理"></a>注解处理<a href="#注解处理"></a></h5><p>请参见 <a href="kapt.html">Kotlin 注解处理工具</a>（<code>kapt</code>）的描述。</p><h5 id="增量编译"><a href="#增量编译" class="headerlink" title="增量编译"></a>增量编译<a href="#增量编译"></a></h5><p>Kotlin 支持 Gradle 中可选的增量编译。 增量编译跟踪构建之间源文件的改动，因此只有受这些改动影响的文件才会被编译。</p><p>从 Kotlin 1.1.1 起，默认启用增量编译。</p><p>有几种方法来覆盖默认设置：</p><ol><li><p>将 <code>kotlin.incremental=true</code> 或者 <code>kotlin.incremental=false</code> 行添加到一个 <code>gradle.properties</code> 或者一个 <code>local.properties</code> 文件中；</p></li><li><p>将 <code>-Pkotlin.incremental=true</code> 或 <code>-Pkotlin.incremental=false</code> 添加到 Gradle 命令行参数。请注意，这样用法中，该参数必须添加到后续每个子构建，并且任何具有禁用增量编译的构建将使增量缓存失效。</p></li></ol><p>请注意，第一次构建不会是增量的。</p><h5 id="Coroutines-support"><a href="#Coroutines-support" class="headerlink" title="Coroutines support"></a>Coroutines support<a href="#coroutines-support"></a></h5><p><a href="coroutines.html">Coroutines</a> support is an experimental feature in Kotlin 1.2, so the Kotlin compiler reports a warning when you use coroutines in your project. To turn off the warning, add the following block to your <code>build.gradle</code> file:</p><pre><code>kotlin {    experimental {        coroutines &#39;enable&#39;    }}</code></pre><p>Or, with Gradle Kotlin DSL:</p><pre><code>import org.jetbrains.kotlin.gradle.dsl.Coroutines// ...kotlin.experimental.coroutines = Coroutines.ENABLE</code></pre><h5 id="Module-names"><a href="#Module-names" class="headerlink" title="Module names"></a>Module names<a href="#module-names"></a></h5><p>The Kotlin modules that the build produces are named accordingly to the <code>archivesBaseName</code> property of the project. If a project has a broad name like <code>lib</code> or <code>jvm</code>, which is common for subprojects, the Kotlin output files related to the module (<code>*.kotlin_module</code>) might clash with those from third-party modules with the same name. This causes problems when a project is packaged into a single archive (e.g. APK).</p><p>To avoid this, consider setting a unique <code>archivesBaseName</code> manually:</p><pre><code>archivesBaseName = &#39;myExampleProject_lib&#39;</code></pre><p>With Gradle Kotlin DSL, it is:</p><pre><code>setProperty(&quot;archivesBaseName&quot;, &quot;myExampleProject_lib&quot;)</code></pre><h5 id="Gradle-构建缓存支持（自-1-2-20-起）"><a href="#Gradle-构建缓存支持（自-1-2-20-起）" class="headerlink" title="Gradle 构建缓存支持（自 1.2.20 起）"></a>Gradle 构建缓存支持（自 1.2.20 起）<a href="#gradle-构建缓存支持自-1220-起"></a></h5><p>Kotlin 插件支持 <a href="https://guides.gradle.org/using-build-cache/" target="_blank" rel="noopener">Gradle 构建缓存</a>（需要 Gradle 4.3 及以上版本；低版本则禁用缓存）。</p><p>由于注解处理器运行的任意代码可能不一定会将任务输入转换为输出、可能访问与修改 Gradle 未跟踪的文件等，因此默认不缓存 kapt 注解处理任务。要启用 kapt 缓存，请将以下列几行添加到构建脚本中：</p><pre><code>kapt {    useBuildCache = true}</code></pre><p>要禁用所有 Kotlin 任务的缓存，请将系统属性标志 <code>kotlin.caching.enabled</code> 设置为 <code>false</code>（运行构建带上参数 <code>-Dkotlin.caching.enabled=false</code>）。</p><h5 id="编译器选项"><a href="#编译器选项" class="headerlink" title="编译器选项"></a>编译器选项<a href="#编译器选项"></a></h5><p>要指定附加的编译选项，请使用 Kotlin 编译任务的 <code>kotlinOptions</code> 属性。</p><p>当针对 JVM 时，对于生产代码这些任务称为 <code>compileKotlin</code> 而对于测试代码称为 <code>compileTestKotlin</code>。对于自定义源文件集（source set）这些任务称呼取决于 <code>compile＜Name＞Kotlin</code> 模式。</p><p>Android 项目中的任务名称包含<a href="https://developer.android.com/studio/build/build-variants.html" target="_blank" rel="noopener">构建变体</a> 名称，并遵循 <code>compile&lt;BuildVariant&gt;Kotlin</code> 的模式，例如 <code>compileDebugKotlin</code>、 <code>compileReleaseUnitTestKotlin</code>。</p><p>当针对 JavaScript 时，这些任务分别称为 <code>compileKotlin2Js</code> 与 <code>compileTestKotlin2Js</code>，以及对于自定义源文件集称为 <code>compile＜Name＞Kotlin2Js</code>。</p><p>要配置单个任务，请使用其名称。示例：</p><pre><code>compileKotlin {    kotlinOptions.suppressWarnings = true}compileKotlin {    kotlinOptions {        suppressWarnings = true    }}</code></pre><p>对于 Gradle Kotlin DSL，首先从项目的 <code>tasks</code> 中获取任务：</p><pre><code>import org.jetbrains.kotlin.gradle.tasks.KotlinCompile// ……val compileKotlin: KotlinCompile by taskscompileKotlin.kotlinOptions.suppressWarnings = true</code></pre><p>相应地，为 JS 与 Common 目标使用类型 <code>Kotlin2JsCompile</code> 与 <code>KotlinCompileCommon</code>。</p><p>也可以在项目中配置所有 Kotlin 编译任务：</p><pre><code>tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile::class.java).all {    kotlinOptions { …… }}</code></pre><p>对于 Gradle 任务的完整选项列表如下：</p><h6 id="JVM、JS-与-JS-DCE-的公共属性"><a href="#JVM、JS-与-JS-DCE-的公共属性" class="headerlink" title="JVM、JS 与 JS DCE 的公共属性"></a>JVM、JS 与 JS DCE 的公共属性<a href="#jvmjs-与-js-dce-的公共属性"></a></h6><table><thead><tr><th>名称</th><th>描述</th><th>可能的值</th><th>默认值</th></tr></thead><tbody><tr><td><code>allWarningsAsErrors</code></td><td>任何警告都报告为错误</td><td></td><td>false</td></tr><tr><td><code>suppressWarnings</code></td><td>不生成警告</td><td></td><td>false</td></tr><tr><td><code>verbose</code></td><td>启用详细日志输出</td><td></td><td>false</td></tr><tr><td><code>freeCompilerArgs</code></td><td>附加编译器参数的列表</td><td></td><td>[]</td></tr></tbody></table><h6 id="JVM-与-JS-的公共属性"><a href="#JVM-与-JS-的公共属性" class="headerlink" title="JVM 与 JS 的公共属性"></a>JVM 与 JS 的公共属性<a href="#jvm-与-js-的公共属性"></a></h6><table><thead><tr><th>Name</th><th>Description</th><th>Possible values</th><th>Default value</th></tr></thead><tbody><tr><td><code>apiVersion</code></td><td>只允许使用来自捆绑库的指定版本中的声明</td><td>“1.0”、 “1.1”、 “1.2”、 “1.3”、 “1.4 (EXPERIMENTAL)”</td><td></td></tr><tr><td><code>languageVersion</code></td><td>提供与指定语言版本源代码兼容性</td><td>“1.0”、 “1.1”、 “1.2”、 “1.3”、 “1.4 (EXPERIMENTAL)”</td><td></td></tr></tbody></table><h6 id="JVM-特有的属性"><a href="#JVM-特有的属性" class="headerlink" title="JVM 特有的属性"></a>JVM 特有的属性<a href="#jvm-特有的属性"></a></h6><table><thead><tr><th>名称</th><th>描述</th><th>可能的值</th><th>默认值</th></tr></thead><tbody><tr><td><code>javaParameters</code></td><td>为方法参数生成 Java 1.8 反射的元数据</td><td></td><td>false</td></tr><tr><td><code>jdkHome</code></td><td>要包含到 classpath 中的 JDK 主目录路径，如果与默认 JAVA_HOME 不同的话</td><td></td><td></td></tr><tr><td><code>jvmTarget</code></td><td>生成的 JVM 字节码的目标版本（1.6 或 1.8），默认为 1.6</td><td>“1.6”、 “1.8”</td><td>“1.6”</td></tr><tr><td><code>noJdk</code></td><td>不要在 classpath 中包含 Java 运行时</td><td></td><td>false</td></tr><tr><td><code>noReflect</code></td><td>不要在 classpath 中包含 Kotlin 反射实现</td><td></td><td>true</td></tr><tr><td><code>noStdlib</code></td><td>不要在 classpath 中包含 Kotlin 运行时</td><td></td><td>true</td></tr></tbody></table><h6 id="JS-特有的属性"><a href="#JS-特有的属性" class="headerlink" title="JS 特有的属性"></a>JS 特有的属性<a href="#js-特有的属性"></a></h6><table><thead><tr><th>名称</th><th>描述</th><th>可能的值</th><th>默认值</th></tr></thead><tbody><tr><td><code>friendModulesDisabled</code></td><td>禁用内部声明导出</td><td></td><td>false</td></tr><tr><td><code>main</code></td><td>是否要调用 main 函数</td><td>“call”、 “noCall”</td><td>“call”</td></tr><tr><td><code>metaInfo</code></td><td>使用元数据生成 .meta.js 与 .kjsm 文件。用于创建库</td><td></td><td>true</td></tr><tr><td><code>moduleKind</code></td><td>编译器生成的模块类型</td><td>“plain”、 “amd”、 “commonjs”、 “umd”</td><td>“plain”</td></tr><tr><td><code>noStdlib</code></td><td>不使用捆绑的 Kotlin stdlib</td><td></td><td>true</td></tr><tr><td><code>outputFile</code></td><td>输出文件路径</td><td></td><td></td></tr><tr><td><code>sourceMap</code></td><td>生成源代码映射（source map）</td><td></td><td>false</td></tr><tr><td><code>sourceMapEmbedSources</code></td><td>将源代码嵌入到源代码映射中</td><td>“never”、 “always”、 “inlining”</td><td></td></tr><tr><td><code>sourceMapPrefix</code></td><td>源代码映射中路径的前缀</td><td></td><td></td></tr><tr><td><code>target</code></td><td>生成指定 ECMA 版本的 JS 文件</td><td>“v5”</td><td>“v5”</td></tr><tr><td><code>typedArrays</code></td><td>将原生数组转换为 JS 带类型数组</td><td></td><td>true</td></tr></tbody></table><h5 id="生成文档"><a href="#生成文档" class="headerlink" title="生成文档"></a>生成文档<a href="#生成文档"></a></h5><p>要生成 Kotlin 项目的文档，请使用 <a href="https://github.com/Kotlin/dokka" target="_blank" rel="noopener">Dokka</a>； 相关配置说明请参见 <a href="https://github.com/Kotlin/dokka/blob/master/README.md#using-the-maven-plugin" target="_blank" rel="noopener">Dokka README</a> 。Dokka 支持混合语言项目，并且可以生成多种格式的输出 ，包括标准 JavaDoc。</p><h5 id="OSGi"><a href="#OSGi" class="headerlink" title="OSGi"></a>OSGi<a href="#osgi"></a></h5><p>关于 OSGi 支持请参见 <a href="kotlin-osgi.html">Kotlin OSGi 页</a>。</p><h5 id="使用-Gradle-Kotlin-DSL"><a href="#使用-Gradle-Kotlin-DSL" class="headerlink" title="使用 Gradle Kotlin DSL"></a>使用 Gradle Kotlin DSL<a href="#使用-gradle-kotlin-dsl"></a></h5><p>使用 <a href="https://github.com/gradle/kotlin-dsl" target="_blank" rel="noopener">Gradle Kotlin DSL</a> 时，请使用 <code>plugins { …… }</code> 块应用 Kotlin 插件。如果使用 <code>apply { plugin(……) }</code> 来应用的话，可能会遇到未解析的到由 Gradle Kotlin DSL 所生成扩展的引用问题。为了解决这个问题，可以注释掉出错的用法，运行 Gradle 任务 <code>kotlinDslAccessorsSnapshot</code>，然后解除该用法注释并重新运行构建或者重新将项目导入到 IDE 中。</p>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(三)Kotlin 高阶函数</title>
      <link href="/20181208/kotlin/san-kotlin-gao-jie-han-shu/"/>
      <url>/20181208/kotlin/san-kotlin-gao-jie-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><ul><li>传入或者返回函数的函数</li><li>函数引用  ::println</li><li>带有 Receiver 的引用 pdfPrinter::println</li></ul><h3 id="二、常见高阶函数（forEach-map-flatMap）"><a href="#二、常见高阶函数（forEach-map-flatMap）" class="headerlink" title="二、常见高阶函数（forEach/map/flatMap）"></a>二、常见高阶函数（forEach/map/flatMap）</h3><ul><li>forEach : 迭代/遍历数组/list</li></ul><pre><code>//forEach函数使用的一般结构object.forEach{    //todo}例：val list = listOf(1,3,5,10,18,36,2,9)list.forEach(::println)</code></pre><ul><li>map : 接受一个lambda表达式，并且有返回值，形成一个新的list</li></ul><pre><code>//map函数使用的一般结构object.map{    //todo}例：val newList = list.map{    it * 2 + 3//相当于返回值}val newList2 = list.map(Int::toDouble)</code></pre><ul><li>flatMap : 集合数据进行合并成一个集合</li></ul><pre><code>//map函数使用的一般结构object.flatMap {    it    //todo}或object.flatMap {    it.map {        //todo    }}例：val list = listOf(    1..20,    2..15,    100..166) val flatList = list.flatMap{     it }     val flatList = list.flatMap{     it.map{         &quot;No.$it&quot;     } }</code></pre><ul><li>reduce : 使用reduce对集合进行计算操作</li></ul><pre><code>//reduce函数使用的一般结构object.reduce{acc,i -&gt;    //acc 为累计的结果    //acc todo}例：list.reduce{acc,i -&gt; acc + i}fun factorial(n: Int):Int{if(n==0) return 1return (1..n)reduce{acc,i -&gt; acc * i}}//对0-6的数分别求阶乘，并且打印出来(0..6).map(::factorial).forEach(::println)</code></pre><ul><li>fold : 使用fold对集合进行自定义计算</li></ul><pre><code>//fold函数使用的一般结构object.fold([初始值]){acc,i -&gt;    //todo}例：// 对0-6 的阶乘进行求和并加上初始值 5println((0..6).map(::factorial).fold(5){acc,i -&gt; acc + i})//字符串拼接println((0..6).map(::factorial).fold(StringBuilder()){acc,i -&gt; acc.append(i).append(&quot;,&quot;)})// 字符串连接println((0..6).joinToString(&quot;,&quot;))</code></pre><ul><li>foldRight : 与fold不同的是顺序相反</li></ul><pre><code>//foldRight函数使用的一般结构object.foldRight([初始值]){i,acc -&gt;    //todo}例：//字符串拼接println((0..6).map(::factorial).foldRight(StringBuilder()){i,acc -&gt; acc.append(i).append(&quot;,&quot;)})</code></pre><ul><li>filter : 传入Lambda 表达式为true是，保留该元素；使用filter对集合进行按条件过滤</li></ul><pre><code>//filter函数使用的一般结构object.filter{    //todo}例：//给一个长度为 n 的数组，每个元素都在 [1,n] 之间，要求找出 [1,n] 中没有在数组里出现的元素。fun findDisappearNumbers(nums: IntArray): List&lt;Int&gt; {    val ifAppear = BooleanArray(nums.size + 1)    nums.forEach { ifAppear[it] = true }    return ifAppear.mapIndexed {        index, boolean -&gt;        if (boolean || index == 0) -1 else index    }.filter { it != -1 }}</code></pre><ul><li>takeWhile : 循环遍历集合，直到第一个不满足条件的数据时，停止循环</li></ul><pre><code>//takeWhile函数使用的一般结构object.takeWhile{    //todo}</code></pre><ul><li>let : let扩展函数的实际上是一个作用域函数，当你需要去定义一个变量在一个特定的作用域范围内，let函数的是一个不错的选择；let函数另一个作用就是可以避免写一些判断null的操作。</li></ul><pre><code>//let函数使用的一般结构object.let{it.todo()//在函数体内使用it替代object对象去访问其公有的属性和方法...}//另一种用途 判断object为null的操作object?.let{//表示object不为null的条件下，才会去执行let函数体it.todo()}例：data class Person(val name: String,val age:Int){    fun work(){        println(&quot;$name is working!!!&quot;)    }}fun findPerson():Person?{    return null}fun main(args: Array&lt;String&gt;){    findPerson()?.let{person -&gt;        person.work()        println(person.age)    }}</code></pre><ul><li>apply : apply一般用于一个对象实例初始化的时候，需要对对象中的属性进行赋值;一般可用于多个扩展函数链式调用 ;数据model多层级包裹判空处理的问题</li></ul><pre><code>//apply函数使用的一般结构object.apply{//todo}//例：//1、data class Person(val name: String,val age:Int){    fun work(){        println(&quot;$name is working!!!&quot;)    }}fun findPerson():Person?{    return null}fun main(args: Array&lt;String&gt;){    findPerson()?.apply{        work()        println(age)    }}//2、mSectionMetaData?.apply{//mSectionMetaData不为空的时候操作mSectionMetaData}?.questionnaire?.apply{//questionnaire不为空的时候操作questionnaire}?.section?.apply{//section不为空的时候操作section}?.sectionArticle?.apply{//sectionArticle不为空的时候操作sectionArticle}</code></pre><ul><li>with : 适用于调用同一个类的多个方法时，可以省去类名重复，直接调用类的方法即可</li></ul><pre><code>//with函数使用的一般结构with(object){   //todo } 例： val br = Buffered</code></pre><ul><li>run ： run函数是let,with两个函数结合体，准确来说它弥补了let函数在函数体内必须使用it参数替代对象，在run函数中可以像with函数一样可以省略，直接访问实例的公有属性和方法，另一方面它弥补了with函数传入对象判空问题，在run函数中可以像let函数一样做判空处理</li></ul><pre><code>//run函数使用的一般结构object.run{//todo}</code></pre><ul><li>also : 适用于let函数的任何场景，also函数和let很像，只是唯一的不同点就是let函数最后的返回值是最后一行的返回值而also函数的返回值是返回当前的这个对象。一般可用于多个扩展函数链式调用</li></ul><pre><code>//also函数使用的一般结构object.also{//todo}</code></pre><ul><li>use : use函数作用于现实了Closeable接口的类，比如文件io操作</li></ul><pre><code>//use函数使用的一般结构object.use{    //todo}例：var l = BufferedReader(FileReader(&quot;123.txt&quot;)).use {    var line: String = &quot;&quot;    while (true){        line += it.readLine()?: break    }    line}println(l)</code></pre><h3 id="三、尾递归优化"><a href="#三、尾递归优化" class="headerlink" title="三、尾递归优化"></a>三、尾递归优化</h3><ul><li>递归的一种特殊形式</li><li>调用自身后无其他操作</li><li>tailrec 关键字提示编译器尾递归优化</li><li>尾递归与迭代的关系，尾递归一般情况下可以直接转换为迭代</li></ul><h3 id="四、闭包"><a href="#四、闭包" class="headerlink" title="四、闭包"></a>四、闭包</h3><ul><li>闭包就是函数的运行环境</li><li>持有函数运行状态</li><li>函数内部可以定义函数</li><li>函数内部也可以定义类</li></ul><h3 id="五、函数复合"><a href="#五、函数复合" class="headerlink" title="五、函数复合"></a>五、函数复合</h3><ul><li>函数复合就是f(g(x))的形式的函数</li></ul><h3 id="六、Currying-科理化"><a href="#六、Currying-科理化" class="headerlink" title="六、Currying (科理化)"></a>六、Currying (科理化)</h3><ul><li>就是多元函数变成一元函数调用链</li></ul><pre><code>fun log(tag:String,target:OutputStream,message:Any?){    target.write(&quot;[$tag]: $message\n&quot;.toByteArray())}fun curriedLog(tag:String):(target:OutputStream) -&gt; (message:Any?){    //todo}//fun log(tag:String)//    =fun (target:OutputStream)//    =(message:Any?)//    =target.write(&quot;[$tag]: $message\n&quot;.toByteArray())fun&lt;P1,P2,P3,R&gt; Function3&lt;P1,P2,P3,R&gt;.curried()    =fun(p1:P1)=fun(p2:P2)=fun(p3:P3)=this(p1,p2,p3)fun main(args: Array&lt;String&gt;){    log(&quot;Test&quot;,System.out,&quot;Hello World！&quot;)   // log(&quot;Test&quot;)(System.out)(&quot;Hello World Currying&quot;)    ::log.curried()(&quot;Test&quot;)(System.out)(&quot;Hello World Currying&quot;)}</code></pre><h3 id="七、偏函数"><a href="#七、偏函数" class="headerlink" title="七、偏函数"></a>七、偏函数</h3><ul><li>传入部分参数之后得到的新函数就是偏函数</li></ul><pre><code>fun log(tag:String,target:OutputStream,message:Any?){    target.write(&quot;[$tag]: $message\n&quot;.toByteArray())}fun&lt;P1,P2,P3,R&gt; Function3&lt;P1,P2,P3,R&gt;.curried()    =fun(p1:P1)=fun(p2:P2)=fun(p3:P3)=this(p1,p2,p3)fun main(args: Array&lt;String&gt;){    val consoleLog = (::log.cueried())(&quot;Test out&quot;)(System.out)    consoleLog(&quot;Hello 偏函数！&quot;)}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(二)Kotlin 面向对象</title>
      <link href="/20181207/kotlin/er-kotlin-mian-xiang-dui-xiang/"/>
      <url>/20181207/kotlin/er-kotlin-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="一、面向对象的概念"><a href="#一、面向对象的概念" class="headerlink" title="一、面向对象的概念"></a>一、面向对象的概念</h3><ul><li>本质上就是解决如何用程序描述世界的问题</li><li>讨论如何把实际存在的东西映射成程序的类和对象</li><li>一种程序设计的思路,思想,方法</li><li>程序设计层面的概念</li><li>设计模式：前人的程序设计经验</li></ul><h3 id="二、抽象类与接口"><a href="#二、抽象类与接口" class="headerlink" title="二、抽象类与接口"></a>二、抽象类与接口</h3><p>相当于半成品与协议</p><h4 id="1、接口"><a href="#1、接口" class="headerlink" title="1、接口"></a>1、接口</h4><ul><li>接口，直观理解就是一种约定</li></ul><pre><code>interface InputDevice{    fun input(event: Any)}</code></pre><ul><li>接口不能有状态</li><li>必须由类对其进行实现后使用</li></ul><h4 id="2、抽象类"><a href="#2、抽象类" class="headerlink" title="2、抽象类"></a>2、抽象类</h4><ul><li>实现了一部分协议的半成品</li><li>可以有状态，可以有方法实现</li><li>必须由子类继承后使用</li></ul><h4 id="3、抽象类和接口的共性"><a href="#3、抽象类和接口的共性" class="headerlink" title="3、抽象类和接口的共性"></a>3、抽象类和接口的共性</h4><ul><li>比较抽象，不能直接实例化</li><li>需要有子类（实现类）实现的方法</li><li>父类（接口）变量可以接受子类（实现类）的赋值</li></ul><h4 id="3、抽象类和接口的区别"><a href="#3、抽象类和接口的区别" class="headerlink" title="3、抽象类和接口的区别"></a>3、抽象类和接口的区别</h4><ul><li>抽象类有状态，接口没有状态</li><li>抽象类有方法实现，接口只能有无状态的默认实现</li><li>抽象类只能单继承，接口可以多实现</li><li>抽象类反应本质，接口体现能力</li></ul><h3 id="三、类的继承与接口的实现"><a href="#三、类的继承与接口的实现" class="headerlink" title="三、类的继承与接口的实现"></a>三、类的继承与接口的实现</h3><ul><li>父类需要 open 才可以被继承</li><li>父类方法、属性需要 open 才可以倍复写</li><li>接口、接口方法、抽象类默认为 open</li><li>复写父类（接口）成员需要 override 关键字</li><li>class D:A(),B,C</li><li>注意继承类时实际上调用了父类构造方法</li><li>类只能单继承，接口可以多实现</li></ul><h4 id="接口代理"><a href="#接口代理" class="headerlink" title="接口代理"></a>接口代理</h4><ul><li>class Manager(driver: Driver):Driver by driver</li><li>接口方法实现交给代理类实现</li></ul><h4 id="接口方法冲突"><a href="#接口方法冲突" class="headerlink" title="接口方法冲突"></a>接口方法冲突</h4><pre><code>- 接口方法可以有默认实现- 签名一致且返回值相同的冲突- 子类（实现类）必须复写冲突方法- super&lt;[父类（接口）名]&gt;.[方法名]([参数列表])</code></pre><h3 id="四、类及其成员的可见性"><a href="#四、类及其成员的可见性" class="headerlink" title="四、类及其成员的可见性"></a>四、类及其成员的可见性</h3><table><thead><tr><th>Kotlin</th><th>Java</th></tr></thead><tbody><tr><td>private</td><td>private</td></tr><tr><td>protected</td><td>protected</td></tr><tr><td>–</td><td>default(包内可见)</td></tr><tr><td>internal(模块内可见)</td><td>–</td></tr><tr><td>public</td><td>public</td></tr></tbody></table><h3 id="五、object"><a href="#五、object" class="headerlink" title="五、object"></a>五、object</h3><ul><li>只有一个实例的类（单例）</li><li>不能自定义构造方法</li><li>可以实现接口、继承父类</li><li>本质上就是单例模式最基本的实现</li></ul><h3 id="六、伴生对象与静态成员"><a href="#六、伴生对象与静态成员" class="headerlink" title="六、伴生对象与静态成员"></a>六、伴生对象与静态成员</h3><ul><li>每个类可以对应一个伴生对象</li><li>伴生对象的成员全局独一份</li><li>伴生对象的成员类似Java的静态成员</li><li>静态成员考虑用包级函数、变量代替</li><li>使用JvmField和JvmStatic，可以让伴生对象在Java中使用时看起来像静态成员和静态方法</li></ul><h3 id="七、方法重载-Overloads-和默认参数"><a href="#七、方法重载-Overloads-和默认参数" class="headerlink" title="七、方法重载(Overloads)和默认参数"></a>七、方法重载(Overloads)和默认参数</h3><h5 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h5><ul><li>写了一个方法和已经存在的方法重名，参数不相同</li><li>Jvm函数签名的概念：函数名、参数列表</li><li>跟返回值没有关系</li></ul><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><ul><li>为函数参数设定一个默认值</li><li>可以为任意位置的参数设置默认值</li><li>函数调用产生混淆时用具名参数</li></ul><h5 id="方法重载与默认参数"><a href="#方法重载与默认参数" class="headerlink" title="方法重载与默认参数"></a>方法重载与默认参数</h5><ul><li>方法重载与默认参数可以互相转换，在Java中调用有默认参数的方法时，该方法需要使用注解@JvmOverloads</li><li>避免定义关系不大的重载方法</li></ul><h3 id="八、扩展成员（二次加工）"><a href="#八、扩展成员（二次加工）" class="headerlink" title="八、扩展成员（二次加工）"></a>八、扩展成员（二次加工）</h3><ul><li><p>为现有类添加方法、属性</p></li><li><pre><code>fun X.y():Z{...}val X.m//注意扩展属性不能初始化，类似接口属性</code></pre></li><li><p>Java 调用扩展成员类似调用静态方法</p></li></ul><h3 id="九、属性代理"><a href="#九、属性代理" class="headerlink" title="九、属性代理"></a>九、属性代理</h3><ul><li><p>定义方法</p></li><li><pre><code>val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;</code></pre></li><li><p>代理者需要实现相应的setValue/getValue方法</p></li><li><p>by lazy 就是在第一次使用的时候才去实例化对象</p></li></ul><h3 id="十、数据类（data-class）"><a href="#十、数据类（data-class）" class="headerlink" title="十、数据类（data class）"></a>十、数据类（data class）</h3><ul><li>默认实现 copy()、toString()、equals()等方法</li><li>编译器默认生成component[1-N]方法，可以自己复写</li></ul><pre><code>data class China(val code:Int,name: String)val (a,b) = China(0,&quot;中国&quot;)pringln(&quot;$a -&gt; $b&quot;)</code></pre><ul><li>allOpen和noArg 插件解决data class 的类被解析成final类，并且无空构造方法的问题</li></ul><pre><code>//build.gradle 中的 dependencies 中添加dependencies{    classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;    classpath &quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;    classpath &quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;}//build.gradle 中 添加插件的应用apply plugin: &#39;kotlin-noarg&#39;apply plugin: &#39;kotlin-allopen&#39;// 插件的配置noArg{    annotation(&quot;注解类名&quot;)}allOpen{    annotation(&quot;注解类名&quot;)}</code></pre><ul><li>属性需要写到构造方法，初始化时需要传入参数</li></ul><h3 id="十一、内部类"><a href="#十一、内部类" class="headerlink" title="十一、内部类"></a>十一、内部类</h3><ul><li>定义在类内部的类</li><li>与类成员有相似的访问控制</li><li>默认是静态内部类，非静态用 inner 关键字</li><li>this@Outter 与 this@Inner</li></ul><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><ul><li>没有定义名字的类</li><li>类名编译时生成，类似Outter$1.class</li><li>可继承父类、实现多个接口，与Java 不一样</li></ul><h3 id="十二、枚举类"><a href="#十二、枚举类" class="headerlink" title="十二、枚举类"></a>十二、枚举类</h3><ul><li>实例可数的类，注意枚举也是类</li><li>可以修改构造方法，添加成员</li><li>可以提升代码的表现力，也有一定的性能开销</li></ul><h3 id="十二、密封类（sealed-class）"><a href="#十二、密封类（sealed-class）" class="headerlink" title="十二、密封类（sealed class）"></a>十二、密封类（sealed class）</h3><ul><li>子类可数的类  </li><li>&lt;V1.1,子类必须定义为密封类的内部类   </li><li>v1.1开始,子类只需要与密封类在同一个文件中</li><li>子类可以有多个构造参数</li><li>表示状态适合使用枚举，需要传输指令时适合使用密封类</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(一)Kotlin 基础语法</title>
      <link href="/20181206/kotlin/yi-kotlin-ji-chu-yu-fa/"/>
      <url>/20181206/kotlin/yi-kotlin-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="一、-Kotlin语法"><a href="#一、-Kotlin语法" class="headerlink" title="一、 Kotlin语法"></a>一、 Kotlin语法</h3><h4 id="1-变量与常量"><a href="#1-变量与常量" class="headerlink" title="1. 变量与常量"></a>1. 变量与常量</h4><pre><code> &lt;修饰符&gt; &lt;变量/常量名&gt;[:类型] = [值]</code></pre><p>在一般情况下:[类型]可省略，编译器进行类型推导</p><h5 id="常量："><a href="#常量：" class="headerlink" title="常量："></a>常量：</h5><pre><code>//val 修饰的为常量，不可再次赋值val FINAL_HELLO_WORLD :String = &quot;Hello World&quot;val USER_TYPE = &quot;Admin&quot;</code></pre><h5 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h5><pre><code>//var 修饰的为变量，值可变化var index:Int =1//index 自增index++var username=&quot;ZhangSan&quot;</code></pre><h5 id="字符串模板："><a href="#字符串模板：" class="headerlink" title="字符串模板："></a>字符串模板：</h5><p>在Kotlin中可使用字符串模板来实现字符串中输出变量/常量值</p><pre><code>var username=&quot;ZhangSan&quot;fun main(args:Array&lt;String&gt;){    username = args[0]    println(&quot;欢迎 ${username} 登录系统！&quot;)}</code></pre><h4 id="2-函数（得函数者得天下）"><a href="#2-函数（得函数者得天下）" class="headerlink" title="2. 函数（得函数者得天下）"></a>2. 函数（得函数者得天下）</h4><ul><li><p>[函数修饰符] <fun><em>[函数名称]</em>([参数列表])[:返回值类型]{[函数体]}</p></li><li><p>[函数修饰符] <fun><em>[函数名称]</em>([参数列表])=[表达式]</p></li><li><p>注：[]中的内容可省略，编译器可进行类型推导得出</p></li></ul><pre><code> // 根据时间字符串返回日期private fun getDate(dateStr:String): Date {    val sdf = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;)    return sdf.parse(dateStr)}// 传入两个整形数，计算他们的和并输出fun add(num1:Int,num2:Int){    println(&quot;$num1 + $num2 = ${num1+num2}&quot;)}// 传入姓名，输出 Hi [传入的姓名]fun sayHi(name:String)=println(&quot;Hi $name&quot;)</code></pre><ul><li>匿名函数</li></ul><p>匿名函数就是没有函数名称的函数，但是匿名函数必须赋值给一个变量/常量</p><pre><code>// 匿名函数val sayHi = fun(name:String)=println(&quot;Hi $name&quot;)</code></pre><h4 id="3-Lambda-表达式"><a href="#3-Lambda-表达式" class="headerlink" title="3. Lambda 表达式"></a>3. Lambda 表达式</h4><p>Lambda 表达式 就是匿名函数</p><ul><li>语法：{[参数列表] -&gt; [函数体，最后一行是返回值]}</li></ul><pre><code>例如：val sum = {a:Int,b:Int -&gt; a+b}</code></pre><ul><li>Lambda 表达式类型表示</li></ul><pre><code>// 无参，返回值为Unit() -&gt; Unit// 传入整型，返回一个整型(Int) -&gt; Int// 传入字符串、Lambda表达式，返回Boolean(String,(String) -&gt; String) -&gt; Boolean</code></pre><ul><li>Lambda 表达式的调用</li></ul><p>用()进行调用</p><p>等价于 invoke()</p><pre><code>val sum = {a:Int,b:Int -&gt; a+b}sum(2,3)sum.invoke(2,3)</code></pre><ul><li>Lambda 表达式的简化</li></ul><p>函数参数调用时最后一个Lambda可以移出去</p><p>函数参数只有一个Lambda，调用时小括号可以省略</p><p>Lambda只有一个参数可以默认为it</p><p>入参、返回值与形参一致的函数可以用函数的引用的方式作为实参传入</p><pre><code>val arr: Array&lt;String&gt; = arrayOf(&quot;1&quot;,&quot;s&quot;,&quot;sd&quot;,&quot;rer&quot;,&quot;54&quot;,&quot;65&quot;)// Lambda 表达式 ，传入it ,并且打印it// Lambda只有一个参数可以默认为itarr.forEach({it -&gt; println(it)})// 上面的Lambda 表达式简化后// Lambda只有一个参数可以默认为it// 函数参数调用时最后一个Lambda可以移出去arr.forEach(){println(it)}// 上面的Lambda 表达式简化后// Lambda只有一个参数可以默认为it// 函数参数只有一个Lambda，调用时小括号可以省略arr.forEach{println(it)}// 上面的Lambda 表达式简化后// Lambda只有一个参数可以默认为it// 入参、返回值与形参一致的函数可以用函数的引用的方式作为实参传入arr.forEach(::println)// 判断数组中值为rer 是跳出本次循环，继续下次循环，相当于continue arr.forEach ForEach@{     if(it == &quot;rer&quot;) return@ForEach     println(it) }// 判断数组中值为rer 是跳出循环，不再进行下面的循环，继续制作该循环后面的代码 run breaking@ {     arr.forEach {        if(it == &quot;rer&quot;) return@breaking        println(it)    }}</code></pre><h4 id="3-类成员"><a href="#3-类成员" class="headerlink" title="3. 类成员"></a>3. 类成员</h4><ul><li>属性：或者说成员变量，类范围内的变量</li><li>方法：或者说成员函数，类范围内的函数</li></ul><p>函数和方法的区别：</p><p>函数强调功能本身，不考虑从属</p><p>方法的称呼通常是从类的角度出发</p><p>只是叫法不同而已</p><ul><li>定义属性</li></ul><p>构造方法参数中val/var 修饰的都是属性</p><p>类内部也可以定义属性</p><pre><code>class Hello(val aFiled:Int,notAField:Int){    var anotherField:Float = 3f}</code></pre><ul><li>属性访问控制</li></ul><p>属性可以定义getter/setter</p><pre><code>val a: Int=0    get()=fieldvar b: Float = 0f    get(){        return field / 3;    }    set(value){field = value}</code></pre><ul><li>属性初始化</li></ul><p>属性的初始化尽量在构造方法中完成</p><p>无法在构造方法中初始化，尝试降级为局部变量</p><p>var 用 lateinit 延迟初始化，val 用 lazy 延迟初始化</p><p>可空类型谨慎用 null 直接初始化</p><h4 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4. 运算符( +-*/%^? )"></a>4. 运算符( +-*/%^? )</h4><p>官网定义</p><table><thead><tr><th>Expression</th><th>Translated to</th></tr></thead><tbody><tr><td>+a</td><td>a.unaryPlus()</td></tr><tr><td>-a</td><td>a.unaryMinus()</td></tr><tr><td>!a</td><td>a.not()</td></tr><tr><td>—</td><td>—</td></tr><tr><td>a++</td><td>a.inc() + see below</td></tr><tr><td>a–</td><td>a.dec() + see below</td></tr><tr><td>—</td><td>—</td></tr><tr><td>a+b</td><td>a.plus(b)</td></tr><tr><td>a-b</td><td>a.minus(b)</td></tr><tr><td>a*b</td><td>a.times(b)</td></tr><tr><td>a/b</td><td>a.div(b)</td></tr><tr><td>a%b</td><td>a.rem(b),a.mod(b)(deprecated)</td></tr><tr><td>a..b</td><td>a.rangeTo(b)</td></tr><tr><td>—</td><td>—</td></tr><tr><td>a in b</td><td>b.contains(a)</td></tr><tr><td>a !in b</td><td>!b.contains(a)</td></tr><tr><td>—</td><td>—</td></tr><tr><td>a[i]</td><td>a.get(i)</td></tr><tr><td>a[i,j]</td><td>a.get(i,j)</td></tr><tr><td>a[i_1,…,i_n]</td><td>a.get(i_1,…,i_n)</td></tr><tr><td>a[i] = b</td><td>a.set(i,b)</td></tr><tr><td>a[i,j] = b</td><td>a.set(i,,j,b)</td></tr><tr><td>a[i_1,…,i_n] =b</td><td>a.set(i_1,…,i_n,b)</td></tr><tr><td>—</td><td>—</td></tr><tr><td>a()</td><td>a.invoke()</td></tr><tr><td>a(i)</td><td>a.invoke(i)</td></tr><tr><td>a(i,j)</td><td>a.invoke(i,j)</td></tr><tr><td>—</td><td>—</td></tr><tr><td>a += b</td><td>a.plusAssign(b)</td></tr><tr><td>a -= b</td><td>a.minusAssign(b)</td></tr><tr><td>a *= b</td><td>a.timesAssign(b)</td></tr><tr><td>a /= b</td><td>a.divAssign(b)</td></tr><tr><td>a %= b</td><td>a.modAssign(b)</td></tr></tbody></table><ul><li>基本运算符</li></ul><p>任何类可以定义或者重载父类的基本运算符</p><p>通过运算符对应的具名函数来定义</p><p>对参数的个数做要求，对参数和返回值类型不做要求</p><p>不能像 Scala 一样定义人与运算符</p><pre><code>// 定义一个复数，实部与实部相加，虚部与虚部相加class Complex(var real: Double,var imaginary: Double){    operator fun plus(other: Complex):Complex{        return Complex(real+other.real,imaginary + other.imaginary)    }    override fun toString():String{        return &quot;$real + ${imaginary}i&quot;    }}fun main(args: Array&lt;String&gt;){    val c1 = Complex(3.0,4.0)//3.0+4.0i    val c2 = Cpmplex(2.0,7.5)//2.0+7.5i    println(c1 + c2)}</code></pre><ul><li>中缀表达式</li></ul><p>只有一个参数，且用infix 修饰的函数</p><pre><code>class Book {    infix fun on(place:String){...}}Book() on &quot;My Desk&quot;</code></pre><ul><li><p>分支表达式</p></li><li><p>if 表达式<br>if … else</p><pre><code>if(a == b) ... else if(a == c) ... else ...</code></pre><p>表达式与完备性</p></li></ul><pre><code>val x = if(b&lt;0) 0 else bval x = if(b&lt;0)0 //错误，赋值时，分支必须完备</code></pre><ul><li>when 表达式</li></ul><p>加强版的 switch ，支持任意类型</p><p>支持纯表达式条件分支（类似if）</p><p>表达式与完备性特性</p><ul><li>循环语句</li></ul><p>基本写法:<br>for(element in elements) …</p><p>给任意类实现 Iterator 方法</p><pre><code>val arr: Array&lt;String&gt; = arrayOf(&quot;1&quot;,&quot;s&quot;,&quot;sd&quot;,&quot;rer&quot;,&quot;54&quot;,&quot;65&quot;)for(a in arr){    println(a)}for((index,value) in arr.withIndex()){    println(&quot;$index -&gt; $value&quot;)}for(indexedValue in arr.withIndex()){    println(&quot;${indexedValue.index} -&gt; ${indexedValue.value}&quot;)}class MyIterator(val iterator: Iterator&lt;Int&gt;){    operator fun next():Int{        return iterator.next    }     operator fun hasNext():Boolean{        return iterator.hasNext()    }}cal MyIntList{    private val list = ArrayList&lt;Int&gt;()    fun add(int: Int){        list.add(int)    }    fun remove(int: Int){        list.remove(int)    }    operator fun iterator():MyIterator{        return MyIterator(list.iterator())    }}fun main(args: Array&lt;String&gt;){    val list = MyIntList()    list.add(1)    list.add(2)    list.add(3)    for(i in list){        println(i)    }}// whilevar x=5while(x&gt;0){    println(x)    x--}do{   println(x)    x--}while(x&gt;0)</code></pre><ul><li>跳出或跳过循环</li></ul><p>跳出，终止循环  break  </p><p>跳过当前循环  continue  </p><p>多层循环嵌套的终止结合标签使用</p><pre><code>Outter@for(...){    Inner@while(i&lt;0){        if(...) break@Outter    }}</code></pre><h4 id="5-异常捕获"><a href="#5-异常捕获" class="headerlink" title="5. 异常捕获"></a>5. 异常捕获</h4><p>使用 try{}catch(e: Exception){} 进行异常捕获</p><pre><code>try{      //程序正常执行}catch(e: Exception){    //程序出现异常，可根据异常类型捕获相应的异常}finally{    //无论执行成功还是出现异常都会执行}</code></pre><h4 id="6-具名参数"><a href="#6-具名参数" class="headerlink" title="6. 具名参数"></a>6. 具名参数</h4><p>给函数的实参附上形参</p><pre><code>fun sum(arg1:Int,arg2:Int) = arg1 + arg2sun(arg2=3,arg1=2)</code></pre><h4 id="7-变长参数"><a href="#7-变长参数" class="headerlink" title="7. 变长参数"></a>7. 变长参数</h4><p>使用 vararg 修饰</p><p>某个参数可以接受多个值</p><p>可以不为最后一个参数</p><p>如果传参是由歧义，需要使用具名参数</p><h4 id="8-Spread-Operator"><a href="#8-Spread-Operator" class="headerlink" title="8. Spread Operator"></a>8. Spread Operator</h4><p>使用 * 来展开</p><p>只支持展开Array</p><p>只用于变长列表的实参</p><pre><code>val arr=intArrayOf(1,2,3,4,5)fun printMethod(vararg arrs:Int){    arrs.forEach(::println)}printMethod(*arr)</code></pre><h4 id="9-默认参数"><a href="#9-默认参数" class="headerlink" title="9.默认参数"></a>9.默认参数</h4><p>为函数参数指定默认值</p><p>可以为任意位置的参数指定默认值</p><p>传参时，如果有歧义，需要使用具名参数</p><pre><code>val arr=intArrayOf(1,2,3,4,5)fun printMethod(name:String = &quot;admin&quot;,vararg arrs:Int){    arrs.forEach(::println)}printMethod(arrs=*arr)</code></pre><h4 id="10-导出可执行程序"><a href="#10-导出可执行程序" class="headerlink" title="10. 导出可执行程序"></a>10. 导出可执行程序</h4><ul><li>在build.gradle 中增加</li></ul><pre><code>apply plugin: &#39;application&#39;mainClassName = &quot;&quot;//程序入口类路径，Kotlin文件名后加 Kt</code></pre><ul><li>gradle 刷新/同步</li><li>gradle 中的distribution 中点击installDist得到可执行的文件</li><li>在项目目录下的build文件夹下的install文件夹下</li></ul><pre><code>//命令行输入：# cd build/install/[项目名称]# chmod 755 bin/[项目名称]# bin/[项目名称]</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（六）C++中的类型转换与STL标准模板库</title>
      <link href="/20181123/c-c/liu-c-zhong-de-lei-xing-zhuan-huan-io-liu-yu-stl-biao-zhun-mo-ban-ku/"/>
      <url>/20181123/c-c/liu-c-zhong-de-lei-xing-zhuan-huan-io-liu-yu-stl-biao-zhun-mo-ban-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="C-中的类型转换与STL标准模板库"><a href="#C-中的类型转换与STL标准模板库" class="headerlink" title="C++中的类型转换与STL标准模板库"></a>C++中的类型转换与STL标准模板库</h1><h2 id="一、C-类型转换"><a href="#一、C-类型转换" class="headerlink" title="一、C++类型转换"></a>一、C++类型转换</h2><p><strong>在C++中类型转换包含 static_cast、const_cast、dynamic_cast、reinterpret_cast 四种类型转换。使用原始类型转换，所有转换都是一种写法，可读性不高，有可能有潜在的风险</strong></p><h3 id="1、static-cast"><a href="#1、static-cast" class="headerlink" title="1、static_cast"></a>1、static_cast</h3><p><strong>该类型转换函数用于不同类型的属性之间的转换</strong></p><pre><code>#include &lt;iostream&gt;using namespace std;void* func(){    int i = 0;    return &amp;i;}void main(){    //自动类型转换    //int i = 0;    //double d = i;    //或    //double d = 9.5;    //int i = d;    // int i = 8;    // double d = 9.5;    // i = static_cast&lt;int&gt;(d);    // cout &lt;&lt; &quot;i = &quot; &lt;&lt; i &lt;&lt; endl;    int i = 9;    int *i_p = &amp;i;}</code></pre><p>void* 转 char*</p><pre><code>void* func(int type){    switch(type){        case 1:            int i = 11;            return &amp;i;        case 2:            int a = &#39;X&#39;;            return &amp;a;        default:            return NULL;    }}void main(){   //void* 转 char*   //char* c_p = (char*)func(2);   char* c_p = static_cast&lt;char*&gt;(func(2));   //C++   func   //C}</code></pre><h3 id="2、const-cast"><a href="#2、const-cast" class="headerlink" title="2、const_cast"></a>2、const_cast</h3><p><strong>该类型转换函数用于去常量，一般使用在常量属性转为非常量属性时使用</strong></p><pre><code>void func(char c[]){    //可以修改    c[0] = &#39;H&#39;;    c[1] = &#39;a&#39;;}void func2(const char c[]){    //c[0] = &#39;H&#39;; //不能修改    //c[1] = &#39;a&#39;;//不能修改    //通过指针间接赋值    //其他人并不知道，这次转型是为了去常量    //char* c_p = (char*)c;    //c_p[1] = &#39;a&#39;;    //cout &lt;&lt; c &lt;&lt; endl;    //C++ 去常量，可读性高    char* c_p = const_cast&lt;char*&gt;(c);    c_p[1] = &#39;y&#39;;    cout &lt;&lt; c &lt;&lt; endl;}void main(){    char c[] = &quot;hello&quot;;    func2(c);    getchar();}</code></pre><h3 id="3、dynamic-cast"><a href="#3、dynamic-cast" class="headerlink" title="3、dynamic_cast"></a>3、dynamic_cast</h3><p><strong>该类型转换用于父类对象转换为子类时使用，处理父类转为子类时的不确定性（类型不匹配时转型失败，返回NULL）</strong></p><pre><code>class Person{public:    virtual void print(){        cout &lt;&lt; &quot;人&quot; &lt;&lt;endl;    }    };class Man : public Person{public:    void print(){        cout &lt;&lt; &quot;男人&quot; &lt;&lt;endl;    }    void smoking(){        cout &lt;&lt; &quot;吸烟&quot; &lt;&lt;endl;    }};class Woman : public Person{public:    void print(){        cout &lt;&lt; &quot;女人&quot; &lt;&lt;endl;    }    void makeup(){        cout &lt;&lt; &quot;化妆&quot; &lt;&lt;endl;    }};void func(Person* obj){    obj-&gt;print();    //调用子类的特有函数，需要转为实际类型    //当传入Woman对象时，转型为Man，转型失败，但是编译器并为察觉    //Man* man = (Man*)obj;    //man-&gt;print();    //转型失败，返回NULL     //Man* man = dynamic_cast&lt;Man*&gt;(obj);    //man-&gt;print();    Man* man = dynamic_cast&lt;Man*&gt;(obj);    if(man!=NULL){        man-&gt;smoking();    }    Woman* woman = dynamic_cast&lt;Woman*&gt;(obj);    if(woman!=NULL){        woman-&gt;makeup();    }}void main(){    Woman w1;    //父类类型的指针指向子类对象    Person* p = &amp;w1;    func(p);    getchar();}</code></pre><h3 id="4、reinterpret-cast"><a href="#4、reinterpret-cast" class="headerlink" title="4、reinterpret_cast"></a>4、reinterpret_cast</h3><p><strong>该类型转换用于函数指针之间的转型，在使用函数指针转型时使用</strong></p><pre><code>void func1(){}char* func2(){    return &quot;abc&quot;;}typedef void(*f_p)();void main(){    f_p f_array[6];    f_array[0] = func1;    //C 方式    f_array[1] = (f_p)func2;    f_array[1] = reinterpret_cast&lt;f_p&gt;func2;    getchar();}</code></pre><h2 id="二、IO-流"><a href="#二、IO-流" class="headerlink" title="二、IO 流"></a>二、IO 流</h2><p><strong>在 C++ 中，通过<fstream> 头文件中的 ifstream 读取文件，ofstream 写入文件，完成 IO 流操作</strong></p><h3 id="1、文本文件操作"><a href="#1、文本文件操作" class="headerlink" title="1、文本文件操作"></a>1、文本文件操作</h3><p><strong>对于文本文件，可进行使用 ifstream 中的 get(ch) 读取一个字符；使用 fout &lt;&lt; 写入一个字符串</strong></p><pre><code>#include &lt;fstream&gt;void main(){    char fname[] = &quot;D://dest.text&quot;;    //输出流    ofstream fout(fname);    //创建失败    if(fout.bad()){        return -1;    }    fout &lt;&lt; &quot;Jack&quot; &lt;&lt; endl;    fout &lt;&lt; &quot;Rose&quot; &lt;&lt; endl;    fout.close();    //读取    ifstream fin(fname);    if(fin.bad()){        return -2;    }    char ch;    while(fin.get(ch)){        cout &lt;&lt; ch;    }    fin.close();}</code></pre><h3 id="2、二进制文件操作"><a href="#2、二进制文件操作" class="headerlink" title="2、二进制文件操作"></a>2、二进制文件操作</h3><p><strong>对于二进制文件，可进行使用 ifstream中的read(buff,1024) 读取二进制文件，通过 ofstream中的write(buff,1024) 写入到对应文件中</strong></p><pre><code>#include &lt;fstream&gt;void main(){    char src[] = &quot;D://xueshan.jpg&quot;;    char src_copy[] = &quot;D://xueshan_copy.jpg&quot;;     //读取    ifstream fin(src,ios::binary);    //输出流    ofstream fout(src_copy,,ios::binary);    //创建失败    if(fin.bad()||fout.bad()){        return -1;    }    while(!fin.eof()){        char buff[1024] = {0};        fin.read(buff,1024);        //写入        fout.write(buff, 1024);    }    //关闭    fin.close();    fout.close();}</code></pre><h3 id="3、对象持久化"><a href="#3、对象持久化" class="headerlink" title="3、对象持久化"></a>3、对象持久化</h3><pre><code>class Person{private:    char* name;    int age;public:    Person(){}    Person(char* name,int age){        this-&gt;name = name;        this-&gt;age = age;    }    char* getName(){        return this-&gt;name;    }    int getAge(){        return this-&gt;age;    }    void print(){        cout &lt;&lt; this-&gt;name &lt;&lt; &quot;,&quot; &lt;&lt; this-&gt;age &lt;&lt; endl;    }};void main(){    Person p1(const_cast&lt;char*&gt;(&quot;Jack&quot;),25);    Person p2(const_cast&lt;char*&gt;(&quot;Rose&quot;),22);    //输出流    ofstream fout(&quot;D://c_obj.data&quot;,ios::binary);    //指针能够读取到正确的数据，读取内存区的长度    fout.write((char*)(&amp;p1), sizeof(Person));    fout.write((char*)(&amp;p2), sizeof(Person));    fout.close();    //输入流    ifstream fin(&quot;D://c_obj.data&quot;,ios::binary);    Person tmp;    fin.read((char*)(&amp;tmp), sizeof(Person));    tmp.print();    fin.read((char*)(&amp;tmp), sizeof(Person));    tmp.print();}</code></pre><h2 id="三、STL-standard-template-library-标准模板库"><a href="#三、STL-standard-template-library-标准模板库" class="headerlink" title="三、STL(standard template library)标准模板库"></a>三、STL(standard template library)标准模板库</h2><p><strong>在 C++ 中包含很多标准模板库，可以让代码更加简洁</strong></p><h3 id="1、string-模板库"><a href="#1、string-模板库" class="headerlink" title="1、string 模板库"></a>1、string 模板库</h3><p><strong>使用 string 模板库，在边写代码时更改简洁易用，但是在JNI中 string 需要转为 char* ,，在转为jstring返回</strong></p><h4 id="1-1-string-初始化"><a href="#1-1-string-初始化" class="headerlink" title="1.1 string 初始化"></a>1.1 string 初始化</h4><pre><code>#include &lt;string&gt;void main(){    string s1 = &quot;Hello &quot;;    string s2(&quot; every day&quot;);    string s3 = s1 + s2;    cout &lt;&lt; s3 &lt;&lt; endl;    //string 转 c 字符串,在JNI中要转为C的str 然后再转为jstring返回    const char* c_str = s1.c_str();    cout &lt;&lt; c_str &lt;&lt; endl;}</code></pre><h4 id="1-2-string-遍历"><a href="#1-2-string-遍历" class="headerlink" title="1.2 string 遍历"></a>1.2 string 遍历</h4><pre><code>#include &lt;string&gt;//string遍历void main(){    string s1 = &quot;craig david&quot;;    //             ^    //1 数组方式    for (int i = 0; i &lt; s1.length(); i++)    {        cout &lt;&lt; s1[i] &lt;&lt; endl;    }    //2 迭代器指针    for (string::iterator it = s1.begin(); it != s1.end(); it++)    {        cout &lt;&lt; *it &lt;&lt; &quot; &quot;;    }    cout &lt;&lt; endl;    //3 at函数(charAt)    // 可能会抛出异常    try    {        for (int i = 0; i &lt; s1.length() + 3; i++)        {            cout &lt;&lt; s1.at(i) &lt;&lt; &quot; &quot;;        }    }    catch (...)    {        cout &lt;&lt; &quot;异常&quot; &lt;&lt; endl;    }    system(&quot;pause&quot;);}</code></pre><h4 id="1-3-string-字符串查找替换"><a href="#1-3-string-字符串查找替换" class="headerlink" title="1.3 string 字符串查找替换"></a>1.3 string 字符串查找替换</h4><pre><code>#include &lt;string&gt;#include &lt;iostream&gt;using namespace std;//字符串查找替换void main(){    string s1 = &quot;apple google apple iphone&quot;;    //从0开始查找&quot;google&quot;的位置    int idx = s1.find(&quot;google&quot;, 0);    cout &lt;&lt; idx &lt;&lt; endl;    //统计apple出现的次数    int idx_app = s1.find(&quot;apple&quot;,0);    //npos大于任何有效下标的值    int num = 0;    while (idx_app != string::npos)    {        num++;        cout &lt;&lt; &quot;找到的索引:&quot; &lt;&lt; idx_app &lt;&lt; endl;        idx_app+=5;        idx_app = s1.find(&quot;apple&quot;, idx_app);    }    cout &lt;&lt; num &lt;&lt; endl;    system(&quot;pause&quot;);}</code></pre><h4 id="1-4-string-删除（截取）和插入"><a href="#1-4-string-删除（截取）和插入" class="headerlink" title="1.4 string 删除（截取）和插入"></a>1.4 string 删除（截取）和插入</h4><pre><code>#include &lt;string&gt;#include &lt;iostream&gt;using namespace std;//删除（截取）和插入void main(){    string s1 = &quot;apple google apple iphone&quot;;    //删除a，找到a所在的指针    string::iterator it = find(s1.begin(),s1.end(),&#39;g&#39;);    //只能删除一个字符    s1.erase(it);    //开头末尾插入字符串    s1.insert(0, &quot;macos&quot;);    s1.insert(s1.length(), &quot; facebook&quot;);    cout &lt;&lt; s1 &lt;&lt; endl;    system(&quot;pause&quot;);}</code></pre><h4 id="1-5-string-大小写转换"><a href="#1-5-string-大小写转换" class="headerlink" title="1.5 string 大小写转换"></a>1.5 string 大小写转换</h4><pre><code>#include &lt;string&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt; //算法using namespace std;//java StringBuffer才可变//String 不可变//大小写转换void main(){    string s1 = &quot;JASON&quot;;    //原始字符串的起始地址，原始字符串的结束地址, 目标字符串的起始地址, 函数名称    transform(s1.begin(), s1.end()-1,s1.begin(), tolower);    cout &lt;&lt; s1 &lt;&lt; endl;    transform(s1.begin(), s1.end() - 1, s1.begin(), toupper);    cout &lt;&lt; s1 &lt;&lt; endl;    system(&quot;pause&quot;);}</code></pre><h3 id="2、容器-vector-模板库"><a href="#2、容器-vector-模板库" class="headerlink" title="2、容器 vector 模板库"></a>2、容器 vector 模板库</h3><p><strong>使用 vector 模板库，不需要使用动态内存分配，就可以使用动态数组</strong></p><h4 id="2-1-vector-初始化与遍历"><a href="#2-1-vector-初始化与遍历" class="headerlink" title="2.1 vector 初始化与遍历"></a>2.1 vector 初始化与遍历</h4><pre><code>#include &lt;vector&gt;void printVector(vector&lt;int&gt; &amp;v){    //通过数组的方式遍历    for (int i = 0; i &lt; v.size(); i++)    {        cout &lt;&lt; v[i] &lt;&lt; endl;    }}void main(){    //动态数组    vector&lt;int&gt; v;    v.push_back(12);    v.push_back(118);    v.push_back(1);    v.push_back(52);    v.push_back(20);    //遍历    for(int i = 0; i&lt;v.size(); i++){        cout &lt;&lt; v[i] &lt;&lt; endl;    }    //部分复制    vector&lt;int&gt; v3(v1.begin(),v1.begin()+2);     for(int i = 0; i&lt;v3.size(); i++){        cout &lt;&lt; v3[i] &lt;&lt; endl;    }}</code></pre><h4 id="2-2-vector-添加和删除"><a href="#2-2-vector-添加和删除" class="headerlink" title="2.2 vector 添加和删除"></a>2.2 vector 添加和删除</h4><pre><code>//添加 删除void main(){    //添加到结尾    vector&lt;int&gt; v1;    v1.push_back(20);    v1.push_back(40);    v1.push_back(15);    v1.push_back(7);    //访问头部    v1.front() = 11;    //访问尾部    v1.back() = 90;    //删除结尾的元素    //v1.pop_back();    while (v1.size() &gt; 0)    {        cout &lt;&lt; &quot;末尾的元素：&quot; &lt;&lt; v1.back() &lt;&lt; endl;        v1.pop_back();    }    printVector(v1);    system(&quot;pause&quot;);}</code></pre><h4 id="2-3-vector-数组方式"><a href="#2-3-vector-数组方式" class="headerlink" title="2.3 vector 数组方式"></a>2.3 vector 数组方式</h4><pre><code>//数组的方式void main(){    vector&lt;int&gt; v1;    v1.push_back(20);    v1.push_back(40);    v1.push_back(15);    v1.push_back(7);    v1[2] = v1[2] +10;    //容器等价于动态数组        vector&lt;int&gt; v2(10);    for (int i = 0; i &lt; v2.size(); i++)    {        v2[i] = i + 1;    }    printVector(v2);    system(&quot;pause&quot;);}</code></pre><h4 id="2-4-vector-迭代器遍历"><a href="#2-4-vector-迭代器遍历" class="headerlink" title="2.4 vector 迭代器遍历"></a>2.4 vector 迭代器遍历</h4><pre><code>//迭代器遍历//迭代器的种类（正向，反向迭代器）void main(){    vector&lt;int&gt; v1;    v1.push_back(20);    v1.push_back(40);    v1.push_back(15);    v1.push_back(7);    //正向    for (vector&lt;int&gt;::iterator it = v1.begin(); it &lt; v1.end(); it++)    {        cout &lt;&lt; *it &lt;&lt; endl;    }    cout &lt;&lt; &quot;-----------------&quot; &lt;&lt; endl;    //反向迭代    for (vector&lt;int&gt;::reverse_iterator it = v1.rbegin(); it &lt; v1.rend(); it++)    {        cout &lt;&lt; *it &lt;&lt; endl;    }    system(&quot;pause&quot;);}</code></pre><h4 id="2-5-vector-插入和删除"><a href="#2-5-vector-插入和删除" class="headerlink" title="2.5 vector 插入和删除"></a>2.5 vector 插入和删除</h4><pre><code>void main(){    vector&lt;int&gt; v1(10);    for (int i = 0; i &lt; v1.size(); i++)    {        v1[i] = i + 1;    }    //删除指定位置    vector&lt;int&gt;::iterator it = v1.begin();    it += 3;    v1.erase(it);    //distance(v1.begin(), it);    //删除区间    v1.erase(v1.begin(), v1.begin() + 3);    for (vector&lt;int&gt;::iterator it = v1.begin(); it &lt; v1.end(); it++)    {        if (*it == 5)        {                    printf(&quot;%x\n&quot;, it);            vector&lt;int&gt;::iterator tmp = v1.erase(it); //注意以后开发中编译器版本问题            printf(&quot;%x,%x\n&quot;,it,tmp);        }    }    //插入    v1.insert(v1.begin() + 2, 100);    v1.insert(v1.end() - 1, 200);    printVector(v1);    system(&quot;pause&quot;);}</code></pre><h3 id="3、队列-deque-模板库"><a href="#3、队列-deque-模板库" class="headerlink" title="3、队列 deque 模板库"></a>3、队列 deque 模板库</h3><h4 id="3-1-双向队列"><a href="#3-1-双向队列" class="headerlink" title="3.1 双向队列"></a>3.1 双向队列</h4><pre><code>//双向队列#include &lt;deque&gt;void printDeque(deque&lt;int&gt;&amp; q){    for (int i = 0; i &lt; q.size(); i++)    {        cout &lt;&lt; q[i] &lt;&lt; endl;    }}void main(){    deque&lt;int&gt; d1;    //添加到尾部    d1.push_back(2);    d1.push_back(10);    //添加到头部    d1.push_front(-90);    d1.push_front(-30);    //printDeque(d1);    //cout &lt;&lt; d1.front() &lt;&lt; endl;    //cout &lt;&lt; d1.back() &lt;&lt; endl;    //两个方向弹出    //d1.pop_back();    //d1.pop_front();    printDeque(d1);    //查找第一个-90元素索引位置，无需遍历    deque&lt;int&gt;::iterator it = find(d1.begin(), d1.end(), -90);    if (it != d1.end())    {        int idx = distance(d1.begin(), it);        cout &lt;&lt; &quot;索引位置为：&quot; &lt;&lt; idx &lt;&lt; endl;    }    system(&quot;pause&quot;);}</code></pre><h4 id="3-2-没有迭代器的队列"><a href="#3-2-没有迭代器的队列" class="headerlink" title="3.2 没有迭代器的队列"></a>3.2 没有迭代器的队列</h4><pre><code>#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;void main(){    queue&lt;int&gt; q;    q.push(78);    q.push(18);    q.push(20);    q.push(33);    //q.front();    //q.back();    while (!q.empty())    {        int tmp = q.front();        cout &lt;&lt; tmp &lt;&lt; endl;        q.pop();    }        system(&quot;pause&quot;);}</code></pre><h4 id="3-3-优先级队列"><a href="#3-3-优先级队列" class="headerlink" title="3.3 优先级队列"></a>3.3 优先级队列</h4><pre><code>#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;void main(){    //默认 最大值优先级    priority_queue&lt;int&gt; pq1;    pq1.push(12);    pq1.push(3);    pq1.push(40);    pq1.push(15);    while (!pq1.empty())    {        int tmp = pq1.top();        cout &lt;&lt; tmp &lt;&lt; endl;        pq1.pop();    }    cout &lt;&lt; &quot;----------&quot; &lt;&lt; endl;    //最小值优先级队列    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq2;    pq2.push(12);    pq2.push(3);    pq2.push(40);    pq2.push(15);    while (!pq2.empty())    {        int tmp = pq2.top();        cout &lt;&lt; tmp &lt;&lt; endl;        pq2.pop();    }    system(&quot;pause&quot;);}</code></pre><h3 id="4、stack-栈-模板"><a href="#4、stack-栈-模板" class="headerlink" title="4、stack 栈 模板"></a>4、stack 栈 模板</h3><h4 id="4-1-stack-栈的初始化"><a href="#4-1-stack-栈的初始化" class="headerlink" title="4.1 stack 栈的初始化"></a>4.1 stack 栈的初始化</h4><pre><code>#include &lt;iostream&gt;#include &lt;stack&gt;using namespace std;void main(){    stack&lt;int&gt; s;    for (int i = 0; i &lt; 10; i++)    {        s.push(i + 1);    }    while (!s.empty())    {        int tmp = s.top();        cout &lt;&lt; tmp &lt;&lt; endl;        s.pop();    }    system(&quot;pause&quot;);}</code></pre><h3 id="5、list-模板"><a href="#5、list-模板" class="headerlink" title="5、list 模板"></a>5、list 模板</h3><h4 id="5-1-list-初始化"><a href="#5-1-list-初始化" class="headerlink" title="5.1 list 初始化"></a>5.1 list 初始化</h4><pre><code>#include &lt;iostream&gt;#include &lt;list&gt;using namespace std;void printList(list&lt;int&gt;&amp; lst){    //迭代器    //没有重载“&lt;”运算符    for (list&lt;int&gt;::iterator it = lst.begin(); it != lst.end(); it++)    {        cout &lt;&lt; *it &lt;&lt; endl;    }}//基本操作/*void main(){    list&lt;int&gt; lst;    for (int i = 0; i &lt; 10; i++)    {        //尾部插入元素        lst.push_back(i);    }    //头部插入元素    lst.push_front(80);    lst.push_front(90);    list&lt;int&gt;::iterator it = lst.begin();    it++;    cout &lt;&lt; *it &lt;&lt; endl;    //it = it + 3; 注意：不支持随机访问            printList(lst);    system(&quot;pause&quot;);}</code></pre><h4 id="5-2-list-插入"><a href="#5-2-list-插入" class="headerlink" title="5.2 list 插入"></a>5.2 list 插入</h4><pre><code>#include &lt;iostream&gt;#include &lt;list&gt;using namespace std;void main(){    list&lt;int&gt; lst;    for (int i = 0; i &lt; 10; i++)    {        //尾部插入元素        lst.push_back(i);    }    list&lt;int&gt;::iterator it = lst.begin();    it++;    lst.insert(it, 100);    printList(lst);    system(&quot;pause&quot;);}</code></pre><h4 id="5-3-list-初始化"><a href="#5-3-list-初始化" class="headerlink" title="5.3 list 初始化"></a>5.3 list 初始化</h4><pre><code>#include &lt;iostream&gt;#include &lt;list&gt;using namespace std;void main(){    list&lt;int&gt; lst;    for (int i = 0; i &lt; 10; i++)    {        //尾部插入元素        lst.push_back(i);    }    list&lt;int&gt;::iterator it = lst.begin();    //删除    it++;    //删除第二个元素    //lst.erase(it);    //删除区间（已经被删除了元素不能再删除）    list&lt;int&gt;::iterator it_begin = lst.begin();    list&lt;int&gt;::iterator it_end = lst.begin();    it_end++;    it_end++;    it_end++;    lst.erase(it_begin, it_end);    //直接根据内容删除元素    lst.remove(5);    printList(lst);    system(&quot;pause&quot;);}</code></pre><h3 id="6、set-模板"><a href="#6、set-模板" class="headerlink" title="6、set 模板"></a>6、set 模板</h3><h4 id="6-1-set-初始化"><a href="#6-1-set-初始化" class="headerlink" title="6.1 set 初始化"></a>6.1 set 初始化</h4><pre><code>#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;//set 元素唯一 默认从小到大void printSet(set&lt;int&gt; &amp;s){    for (set&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++)    {        cout &lt;&lt; *it &lt;&lt; endl;    }}void main(){    set&lt;int&gt; s;    //添加元素    for (int i = 0; i &lt; 10; i++)    {        s.insert(i+1);    }    s.insert(20);    s.insert(15);    s.insert(15);    //删除    set&lt;int&gt;::iterator it = s.begin();    it++;    s.erase(it);        printSet(s);    system(&quot;pause&quot;);}</code></pre><h4 id="6-2-set-元素按照从大到小排列"><a href="#6-2-set-元素按照从大到小排列" class="headerlink" title="6.2 set 元素按照从大到小排列"></a>6.2 set 元素按照从大到小排列</h4><pre><code>#include &lt;iostream&gt;#include &lt;set&gt;#include &lt;functional&gt;using namespace std;void main(){    //同Java中：Map&lt;String,List&lt;String&gt;&gt;     set&lt;int,greater&lt;int&gt;&gt; s;    s.insert(10);    s.insert(5);    s.insert(20);    s.insert(99);    for (set&lt;int,greater&lt;int&gt;&gt;::iterator it = s.begin(); it != s.end(); it++)    {        cout &lt;&lt; *it &lt;&lt; endl;    }    system(&quot;pause&quot;);}</code></pre><h4 id="6-3-set-自定义排序规则"><a href="#6-3-set-自定义排序规则" class="headerlink" title="6.3 set 自定义排序规则"></a>6.3 set 自定义排序规则</h4><pre><code>#include &lt;iostream&gt;#include &lt;set&gt;#include &lt;functional&gt;using namespace std;//元素类型为Teacher对象，按照年龄排序class Teacher{public:    Teacher(char* name, int age)    {        this-&gt;name = name;        this-&gt;age = age;    }    void print()    {        cout &lt;&lt; name &lt;&lt; &quot;,&quot; &lt;&lt; age &lt;&lt; endl;    }public:    char* name;    int age;};//自定义排序规则//仿函数struct MyAgeSorter{    bool operator()(const Teacher &amp;left, const Teacher &amp;right)    {        return left.age &lt; right.age;    }};void main(){    set&lt;Teacher, MyAgeSorter&gt; s;    s.insert(Teacher(const_cast&lt;char*&gt;(&quot;jack&quot;),18));    s.insert(Teacher(const_cast&lt;char*&gt;(&quot;rose&quot;), 20));    s.insert(Teacher(const_cast&lt;char*&gt;(&quot;jason&quot;), 22));    s.insert(Teacher(const_cast&lt;char*&gt;(&quot;alan&quot;), 5));    //s.insert(Teacher(&quot;jimy&quot;, 5)); //不会插入    for (set&lt;Teacher&gt;::iterator it = s.begin(); it != s.end(); it++)    {        cout &lt;&lt; (*it).name &lt;&lt; &quot;,&quot; &lt;&lt; (*it).age &lt;&lt; endl;    }    system(&quot;pause&quot;);}</code></pre><h4 id="6-3-set-查找"><a href="#6-3-set-查找" class="headerlink" title="6.3 set 查找"></a>6.3 set 查找</h4><pre><code>#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;void main(){    set&lt;int&gt; s;    //添加元素    for (int i = 0; i &lt; 10; i++)    {        s.insert(i + 1);    }    //printSet(s);    //等于4的元素指针    set&lt;int&gt;::iterator s_4 = s.lower_bound(4);     //cout &lt;&lt; *s_4 &lt;&lt; endl;    //大于4的元素指针    set&lt;int&gt;::iterator s_5 = s.upper_bound(4);    //cout &lt;&lt; *s_5 &lt;&lt; endl;    //一次性获取等于4的元素指针，和大于4的元素指针\    //BasicNameValuePair    pair&lt;set&lt;int&gt;::iterator, set&lt;int&gt;::iterator&gt; p = s.equal_range(4);    cout &lt;&lt; *p.first &lt;&lt; endl;    cout &lt;&lt; *p.second &lt;&lt; endl;    system(&quot;pause&quot;);}</code></pre><h4 id="6-4-multiset-允许重复的元素"><a href="#6-4-multiset-允许重复的元素" class="headerlink" title="6.4 multiset 允许重复的元素"></a>6.4 multiset 允许重复的元素</h4><pre><code>#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;void main(){    multiset&lt;int&gt; s;    s.insert(2);    s.insert(8);    s.insert(2);    s.insert(8);    for (multiset&lt;int&gt;::iterator it = s.begin(); it != s.end(); it++)    {        cout &lt;&lt;  *it &lt;&lt; endl;    }    system(&quot;pause&quot;);}</code></pre><h3 id="7、map-模板"><a href="#7、map-模板" class="headerlink" title="7、map 模板"></a>7、map 模板</h3><h4 id="7-1-map-初始化"><a href="#7-1-map-初始化" class="headerlink" title="7.1 map 初始化"></a>7.1 map 初始化</h4><pre><code>#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;using namespace std;void main(){    //key -&gt; value    //1.    map&lt;int, string&gt; map1;    map1.insert(pair&lt;int, string&gt;(1, &quot;jack&quot;));    map1.insert(pair&lt;int, string&gt;(2, &quot;rose&quot;));    //2    map1.insert(make_pair(3, &quot;jason&quot;));    //3    map1.insert(map&lt;int, string&gt;::value_type(4, &quot;alan&quot;));    //4    map1[5] = &quot;jimmy&quot;; //map[&quot;NO1&quot;] = 90;    //前三种方式，如果key已经存在，重复添加会报错    //第四种方式，如果key已经存在，重复添加会覆盖    //遍历输出    for (map&lt;int, string&gt;::iterator it = map1.begin(); it != map1.end(); it++)    {        cout &lt;&lt; it-&gt;first &lt;&lt; &quot;,&quot; &lt;&lt; it-&gt;second &lt;&lt; endl;    }    system(&quot;pause&quot;);}</code></pre><h4 id="7-2-map-删除元素的方式"><a href="#7-2-map-删除元素的方式" class="headerlink" title="7.2 map 删除元素的方式"></a>7.2 map 删除元素的方式</h4><pre><code>#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;using namespace std;void printMap(map&lt;int, string&gt; &amp;map1){    for (map&lt;int, string&gt;::iterator it = map1.begin(); it != map1.end(); it++)    {        cout &lt;&lt; it-&gt;first &lt;&lt; &quot;,&quot; &lt;&lt; it-&gt;second &lt;&lt; endl;    }}void main(){    map&lt;int, string&gt; map1;    map1.insert(pair&lt;int, string&gt;(1, &quot;jack&quot;));    map1.insert(pair&lt;int, string&gt;(2, &quot;rose&quot;));    map1.insert(pair&lt;int, string&gt;(3, &quot;jason&quot;));        map&lt;int, string&gt;::iterator it = map1.begin();    it++;    map1.erase(it);    printMap(map1);    system(&quot;pause&quot;);}</code></pre><h4 id="7-3-map-添加元素的结果"><a href="#7-3-map-添加元素的结果" class="headerlink" title="7.3 map 添加元素的结果"></a>7.3 map 添加元素的结果</h4><pre><code>#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;using namespace std;void main(){    map&lt;int, string&gt; map1;    map1.insert(pair&lt;int, string&gt;(1, &quot;jack&quot;));    map1.insert(pair&lt;int, string&gt;(2, &quot;rose&quot;));    map1.insert(pair&lt;int, string&gt;(3, &quot;jason&quot;));    //获取添加的结果（first元素指针，second 是否成功）    pair&lt;map&lt;int, string&gt;::iterator, bool&gt; res = map1.insert(pair&lt;int, string&gt;(3, &quot;alan&quot;));    if (res.second)    {        cout &lt;&lt; &quot;添加成功&quot; &lt;&lt; endl;    }    else    {        cout &lt;&lt; &quot;添加失败&quot; &lt;&lt; endl;    }    printMap(map1);    system(&quot;pause&quot;);}</code></pre><h4 id="7-3-map-查找"><a href="#7-3-map-查找" class="headerlink" title="7.3 map 查找"></a>7.3 map 查找</h4><pre><code>#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;using namespace std;void main(){    map&lt;int, string&gt; map1;    map1.insert(pair&lt;int, string&gt;(1, &quot;jack&quot;));    map1.insert(pair&lt;int, string&gt;(2, &quot;rose&quot;));    map1.insert(pair&lt;int, string&gt;(3, &quot;jason&quot;));        printMap(map1);    cout &lt;&lt; &quot;---------&quot; &lt;&lt; endl;    //获取key等于大于5的元素的值    pair&lt;map&lt;int, string&gt;::iterator, map&lt;int, string&gt;::iterator&gt; p = map1.equal_range(2);    if (p.first != map1.end()){        //等于2的元素key value        cout &lt;&lt; p.first-&gt;first &lt;&lt; p.first-&gt;second &lt;&lt; endl;        //大于2的元素key value        cout &lt;&lt; p.second-&gt;first &lt;&lt; p.second-&gt;second &lt;&lt; endl;    }    system(&quot;pause&quot;);}</code></pre><h4 id="7-3-multimap"><a href="#7-3-multimap" class="headerlink" title="7.3 multimap"></a>7.3 multimap</h4><pre><code>#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;using namespace std;//一个key对应多个value//一个部门多个员工//multimapclass Employee{public:    Employee(char* name,int age)    {        this-&gt;name = name;        this-&gt;age = age;    }public:    char* name;    int age;};void main(){    multimap&lt;string, Employee&gt; map1;    //开发部    map1.insert(make_pair(&quot;开发&quot;, Employee(const_cast&lt;char*&gt;(&quot;搁浅&quot;), 20)));    map1.insert(make_pair(&quot;开发&quot;, Employee(const_cast&lt;char*&gt;(&quot;彪哥&quot;), 20)));    //财务    map1.insert(make_pair(&quot;财务&quot;, Employee(const_cast&lt;char*&gt;(&quot;小颖&quot;), 16)));    map1.insert(make_pair(&quot;财务&quot;, Employee(const_cast&lt;char*&gt;(&quot;rose&quot;), 20)));    //销售    map1.insert(make_pair(&quot;销售&quot;, Employee(const_cast&lt;char*&gt;(&quot;阿呆&quot;), 30)));    map1.insert(make_pair(&quot;销售&quot;, Employee(const_cast&lt;char*&gt;(&quot;呵呵&quot;), 30)));    //遍历输出    for (multimap&lt;string, Employee&gt;::iterator it = map1.begin(); it != map1.end(); it++)    {        cout &lt;&lt; it-&gt;first &lt;&lt; &quot;,&quot; &lt;&lt; it-&gt;second.name  &lt;&lt; &quot;,&quot; &lt;&lt; it-&gt;second.age &lt;&lt; endl;    }    cout &lt;&lt; &quot;----------------&quot; &lt;&lt; endl;    //只获取“财务”部的员工    //获取“财务部”员工的个数，key对应的value的个数    int num = map1.count(&quot;财务&quot;);    multimap&lt;string, Employee&gt;::iterator it = map1.find(&quot;财务&quot;);    int c = 0; //控制循环的次数    while (it != map1.end() &amp;&amp; c &lt; num)    {        cout &lt;&lt; it-&gt;first &lt;&lt; &quot;,&quot; &lt;&lt; it-&gt;second.name &lt;&lt; &quot;,&quot; &lt;&lt; it-&gt;second.age &lt;&lt; endl;        it++;        c++;    }    system(&quot;pause&quot;);}</code></pre><h3 id="8、深拷贝与浅拷贝"><a href="#8、深拷贝与浅拷贝" class="headerlink" title="8、深拷贝与浅拷贝"></a>8、深拷贝与浅拷贝</h3><pre><code>#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;#include &lt;vector&gt;using namespace std;class Employee{public:    //构造函数    Employee(char* name, int age)    {        this-&gt;name = new char[strlen(name) + 1];        strcpy(this-&gt;name, name);        this-&gt;age = age;    }    //析构函数    ~Employee()    {        if (this-&gt;name != NULL)        {            delete[] this-&gt;name;            this-&gt;name = NULL;            this-&gt;age = 0;        }    }    //拷贝构造函数    //Employee e =     Employee(const Employee &amp;obj)    {        this-&gt;name = new char[strlen(obj.name) + 1];        strcpy(this-&gt;name, obj.name);        this-&gt;age = obj.age;    }    //重载=    //e1 = e2;    Employee&amp; operator=(const Employee &amp;obj)    {        //释放旧的内存        if (this-&gt;name != NULL)        {            delete[] this-&gt;name;            this-&gt;name = NULL;            this-&gt;age = 0;        }        //重新分配        this-&gt;name = new char[strlen(obj.name) + 1];        strcpy(this-&gt;name, obj.name);        this-&gt;age = obj.age;        return *this;    }public:    char* name;    int age;};void func(){    vector&lt;Employee&gt; v1;    Employee e1(const_cast&lt;char*&gt;(&quot;jack&quot;), 20);    v1.push_back(e1);}void main(){    //vector&lt;Employee&gt; v1;    //Employee e1(&quot;jack&quot;,20);    //将e1拷贝到vector中    //v1.push_back(e1);    func();    system(&quot;pause&quot;);}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（五）C++中的异常处理与模板类</title>
      <link href="/20181103/c-c/wu-c-zhong-de-yi-chang-chu-li-yu-mo-ban-lei/"/>
      <url>/20181103/c-c/wu-c-zhong-de-yi-chang-chu-li-yu-mo-ban-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="C-中的异常处理与模板类"><a href="#C-中的异常处理与模板类" class="headerlink" title="C++中的异常处理与模板类"></a>C++中的异常处理与模板类</h1><h2 id="一、C-中的异常处理"><a href="#一、C-中的异常处理" class="headerlink" title="一、C++ 中的异常处理"></a>一、C++ 中的异常处理</h2><h3 id="1、异常处理"><a href="#1、异常处理" class="headerlink" title="1、异常处理"></a>1、异常处理</h3><p><strong>在C++ 中可以抛出任何类型的异常，根据抛出的异常数据类型，进入到相应的 catch块中 ，未知类型可用 … 代替</strong></p><pre><code>void main() {    try {        int a = 300;        if (a &gt; 200) {            throw - 1;        }    }    catch (int a) {        cout &lt;&lt; a &lt;&lt; endl;    }    try {        int b = 0;        if (b == 0) {            throw &quot;不能为0&quot;;        }    }    catch (const char* b) {        cout &lt;&lt; b &lt;&lt; endl;    }    try {        int c = -1;        if (c &lt; 0 ) {            throw 0.1;        }    }    catch (...) {        cout &lt;&lt; &quot;未知异常&quot; &lt;&lt; endl;    }    getchar();}</code></pre><h3 id="2、throw-抛出函数外"><a href="#2、throw-抛出函数外" class="headerlink" title="2、throw 抛出函数外"></a>2、throw 抛出函数外</h3><pre><code>float div2(float a, float b) {    if (b == 0) {        throw &quot;除数为零&quot;;    }    return a / b;}void main() {    try {        float c = div2(8, 0);    }    catch (const char* e) {        cout &lt;&lt; e &lt;&lt; endl;    }    getchar();}</code></pre><h3 id="3、抛出异常对象"><a href="#3、抛出异常对象" class="headerlink" title="3、抛出异常对象"></a>3、抛出异常对象</h3><p><strong>抛出异常对象可以使用异常对象来捕获异常或者使用异常对象的引用来捕获异常,采用引用方式不会产生副本（可实现拷贝构造函数来验证）；尽量不要抛出异常指针（new 动态内存），需要delete动态内存</strong></p><pre><code>//异常类class MyException {public:    MyException() {    }};float div2(float a, float b) {    if (b == 0) {        //抛出对象        throw MyException();        //抛出异常指针        throw new MyException;    }    return a / b;}void main() {    try {        float c = div2(8, 0);    }    //catch (MyException e) {//对象，被拷贝了对象，产生对象副本    //    cout &lt;&lt; &quot;MyException&quot; &lt;&lt; endl;    //}    catch (MyException &amp;e1) {//对象的引用，效率更高        cout &lt;&lt; &quot;MyException引用&quot; &lt;&lt; endl;    }    //catch (MyException* e2) {//异常指针，需要delete    //    cout &lt;&lt; &quot;MyException指针&quot; &lt;&lt; endl;    //    delete e2;    //}    getchar();}</code></pre><h3 id="4、声明抛出异常的类型"><a href="#4、声明抛出异常的类型" class="headerlink" title="4、声明抛出异常的类型"></a>4、声明抛出异常的类型</h3><p><strong>throw 加载函数名称上，表示声明函数会抛出的异常类型</strong></p><pre><code>float div2(float a, float b) throw(char*,int) {    if (b == 0) {        throw &quot;除数为零&quot;;    }    return a / b;}void main() {    try {        float c = div2(8, 0);    }    catch (const char* e) {        cout &lt;&lt; e &lt;&lt; endl;    }    getchar();}</code></pre><h3 id="5、标准异常-类似于Java-NullPointerException"><a href="#5、标准异常-类似于Java-NullPointerException" class="headerlink" title="5、标准异常(类似于Java NullPointerException)"></a>5、标准异常(类似于Java NullPointerException)</h3><p><strong>需要引入 <stdexcept></strong></p><pre><code>#define &lt;stdexcept&gt; class NullPointerException : public exception{public:    NullPointerException(char* msg) : exception(msg){    }};float div2(float a, float b) throw(char*,int) {    if(b == NULL){        throw NullPointerException(&quot;is NULL&quot;);    } else if (b &gt; 10000) {        throw out_of_range(&quot;超出范围&quot;);    }else if(b == 0){        throw invalid_argument(&quot;参数不合法&quot;);    }    return a / b;}void main() {    try {        float c = div2(8, 0);    }    catch (out_of_range e) {        cout &lt;&lt; e.what() &lt;&lt; endl;    }    catch (NullPointerException&amp; e1) {        cout &lt;&lt; e1.what() &lt;&lt; endl;    }    catch (...) {        cout &lt;&lt; &quot;未知异常&quot; &lt;&lt; endl;    }    getchar();}</code></pre><h2 id="二、模板类"><a href="#二、模板类" class="headerlink" title="二、模板类"></a>二、模板类</h2><p><strong>属性或者构造函数中存在泛型参数的类叫模板类</strong></p><h3 id="1、模板类示例"><a href="#1、模板类示例" class="headerlink" title="1、模板类示例"></a>1、模板类示例</h3><pre><code>template&lt;class T&gt;class A{public:    A(T a){        this-&gt;a = a;    }protected:    T a;};</code></pre><h3 id="2、普通类继承模板类"><a href="#2、普通类继承模板类" class="headerlink" title="2、普通类继承模板类"></a>2、普通类继承模板类</h3><pre><code>class B : public A&lt;int&gt;{public:    B(int a,int b) : A&lt;int&gt;(a){        this-&gt;b = b;    } private:    int b;}</code></pre><h3 id="3、模板类继承模板类"><a href="#3、模板类继承模板类" class="headerlink" title="3、模板类继承模板类"></a>3、模板类继承模板类</h3><pre><code>template&lt;class T&gt;class C : public A&lt;T&gt;{public:    C(T a,T c) : A&lt;T&gt;(a){        this-&gt;c = c;    } protected:    T c;}</code></pre><h3 id="4、模板类对象实例化"><a href="#4、模板类对象实例化" class="headerlink" title="4、模板类对象实例化"></a>4、模板类对象实例化</h3><pre><code>void main(){    //实例化模板类对象    A&lt;int&gt;(6);    getchar();}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（四）C++中的继承、多态和模板函数</title>
      <link href="/20181025/c-c/si-c-zhong-de-ji-cheng-duo-tai-he-mo-ban-han-shu/"/>
      <url>/20181025/c-c/si-c-zhong-de-ji-cheng-duo-tai-he-mo-ban-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="C-中的继承、多态和模板函数"><a href="#C-中的继承、多态和模板函数" class="headerlink" title="C++中的继承、多态和模板函数"></a>C++中的继承、多态和模板函数</h1><h2 id="一、继承"><a href="#一、继承" class="headerlink" title="一、继承"></a>一、继承</h2><h3 id="1、属性和方法的继承"><a href="#1、属性和方法的继承" class="headerlink" title="1、属性和方法的继承"></a>1、属性和方法的继承</h3><p><strong>继承可以更好的实现代码的重用性</strong></p><pre><code>#include &lt;stdlib.h&gt;#include &lt;iostream&gt;using namespace std;//开发者class Developer {protected:    char* language;    char* ide;    int age;public:    void say() {        cout &lt;&lt; &quot;我是开发者&quot; &lt;&lt; endl;    }};//Android开发者class AndroidDeveloper : public Developer {public:    AndroidDeveloper() {        this-&gt;language = (char*)&quot;Android+Kotlin&quot;;        this-&gt;ide = (char*)&quot;Android Stuio&quot;;    }    //开发Android Application    void createAndroidApp() {        cout &lt;&lt; &quot;我使用&quot; &lt;&lt; this-&gt;ide &lt;&lt; &quot;开发了一款Android应用,使用了&quot; &lt;&lt; this-&gt;language &lt;&lt; &quot;语言&quot; &lt;&lt; endl;    }private:    //Android 版本    char* androidVersion;};//所有开发者都有开发工作void work(Developer&amp; d) {    d.say();}void main() {    AndroidDeveloper androidDev;    androidDev.say();    androidDev.createAndroidApp();    //子类对象初始化父类类型的对象    Developer d1 = androidDev;    work(d1);    //父类类型的指针    Developer* d_p = &amp;androidDev;    d_p-&gt;say();    //父类类型的引用    Developer d2 = androidDev;    d2.say();    getchar();}</code></pre><h3 id="2、通过子类给父类构造方法传参"><a href="#2、通过子类给父类构造方法传参" class="headerlink" title="2、通过子类给父类构造方法传参"></a>2、通过子类给父类构造方法传参</h3><p><strong>父类的构造函数先调用；子类的析构函数先调用</strong></p><pre><code>//开发者class Developer {protected:    char* language;    char* ide;    int age;public:    Developer(char * language, char* ide, int age) {        this-&gt;language = language;        this-&gt;ide = ide;        this-&gt;age = age;        cout &lt;&lt; &quot;Developer 构造函数&quot; &lt;&lt; endl;    }    ~Developer() {        cout &lt;&lt; &quot;Developer 析构函数&quot; &lt;&lt; endl;    }    void say() {        cout &lt;&lt; &quot;我是开发者&quot; &lt;&lt; endl;    }};//Android开发者class AndroidDeveloper : public Developer {public:    AndroidDeveloper(char* language, char* ide, int age, char* androidVersion) : Developer(language, ide, age) {        this-&gt;language = language;        this-&gt;ide = ide;        this-&gt;age = age;        cout &lt;&lt; &quot;AndroidDeveloper 构造函数&quot; &lt;&lt; endl;    }    ~AndroidDeveloper(){        cout &lt;&lt; &quot;AndroidDeveloper 析构函数&quot; &lt;&lt; endl;    }    //开发Android Application    void createAndroidApp() {        cout &lt;&lt; &quot;我使用&quot; &lt;&lt; this-&gt;ide &lt;&lt; &quot;开发了一款Android应用,使用了&quot; &lt;&lt; this-&gt;language &lt;&lt; &quot;语言&quot; &lt;&lt; endl;    }private:    //Android 版本    char* androidVersion;};void work(Developer&amp; d) {    d.say();}//父类的构造函数先调用//子类的析构函数先调用void func() {    AndroidDeveloper androidDev((char*)&quot;Kotlin&quot;, (char*)&quot;Android Studio&quot;, 5, (char*)&quot;5.0.1&quot;);    androidDev.say();    androidDev.createAndroidApp();}void main() {    func();    getchar();}</code></pre><p>输出：</p><pre><code>Developer 构造函数AndroidDeveloper 构造函数我是开发者我使用Android Studio开发了一款Android应用,使用了Kotlin语言AndroidDeveloper 析构函数Developer 析构函数</code></pre><h3 id="3、继承中父类和子类的权限继承关系"><a href="#3、继承中父类和子类的权限继承关系" class="headerlink" title="3、继承中父类和子类的权限继承关系"></a>3、继承中父类和子类的权限继承关系</h3><table><thead><tr><th>基类中</th><th>继承方式</th><th>子类中</th></tr></thead><tbody><tr><td>public</td><td>＆ public继承</td><td>=&gt; public</td></tr><tr><td>public</td><td>＆ protected继承</td><td>=&gt; protected</td></tr><tr><td>public</td><td>＆ private继承</td><td>=&gt; private</td></tr><tr><td>protected</td><td>＆ public继承</td><td>=&gt; protected</td></tr><tr><td>protected</td><td>＆ protected继承</td><td>=&gt; protected</td></tr><tr><td>protected</td><td>＆ private继承</td><td>=&gt; private</td></tr><tr><td>private</td><td>＆ public继承</td><td>=&gt; 子类无权访问</td></tr><tr><td>private</td><td>＆ protected继承</td><td>=&gt; 子类无权访问</td></tr><tr><td>private</td><td>＆ private继承</td><td>=&gt; 子类无权访问</td></tr></tbody></table><h3 id="4、继承的二义性"><a href="#4、继承的二义性" class="headerlink" title="4、继承的二义性"></a>4、继承的二义性</h3><h4 id="4-1-继承的二义性定义"><a href="#4-1-继承的二义性定义" class="headerlink" title="4.1 继承的二义性定义"></a>4.1 继承的二义性定义</h4><p><strong>在某个类B同时继承另一个类A的两个或多个子类时(A1和A2)，通过类B访问类A的成员时，会出现成员不明确的情况，即继承的二义性</strong></p><pre><code>class A {public:    char* name;};class A1 : public A {};class A2 : public A {};class B : public A1, public A2 {};void main() {    B b;    //报错，提示B::name不明确    //b.name = (char*)&quot;Jack&quot;;    //指定父类显式调用    b.A1::name = (char*)&quot;Rose&quot;;    getchar();}</code></pre><h4 id="4-2-继承的二义性定义解决方案"><a href="#4-2-继承的二义性定义解决方案" class="headerlink" title="4.2 继承的二义性定义解决方案"></a>4.2 继承的二义性定义解决方案</h4><p><strong>再遇到继承的二义性时，可使用虚继承来解决继承的二义性问题</strong><br><strong>虚继承：不同路径继承来的同名成员只有一份拷贝</strong></p><pre><code>class A {public:    char* name;};class A1 : virtual public A {};class A2 : virtual public A {};class B : public A1, public A2 {};void main() {    B b;    //报错，提示B::name不明确    //b.name = (char*)&quot;Jack&quot;;    //指定父类显式调用    b.A1::name = (char*)&quot;Rose&quot;;    getchar();}</code></pre><h2 id="二、多态"><a href="#二、多态" class="headerlink" title="二、多态"></a>二、多态</h2><ul><li><strong>多态是为了提高程序的扩展性</strong></li><li><strong>动态多态：子类重写父类的函数，程序运行过程中，决定哪一个函数被调用</strong></li><li><strong>静态多态：就是函数重载</strong></li></ul><h3 id="1、虚函数"><a href="#1、虚函数" class="headerlink" title="1、虚函数"></a>1、虚函数</h3><p><strong>virtual 关键字修饰的函数叫虚函数，用来实现多态</strong></p><p>例如：</p><p>Plane.h</p><pre><code>#pragma onceclass Plane {public:    virtual void fly();    virtual void land();};</code></pre><p>Plane.cpp</p><pre><code>#include &quot;Plane.h&quot;#include &lt;stdlib.h&gt;#include &lt;iostream&gt;using namespace std;void Plane::fly() {    cout &lt;&lt; &quot;飞机起飞&quot; &lt;&lt; endl;}void Plane::land() {    cout &lt;&lt; &quot;飞机降落&quot; &lt;&lt; endl;}</code></pre><p>Helicopter.h</p><pre><code>#pragma once#include &quot;Plane.h&quot;class Helicopter : public Plane {public:    virtual void fly();    virtual void land();};</code></pre><p>Helicopter.cpp</p><pre><code>#include &quot;Helicopter.h&quot;#include &lt;stdlib.h&gt;#include &lt;iostream&gt;using namespace std;void Helicopter::fly() {    cout &lt;&lt; &quot;直升飞机在原地起飞&quot; &lt;&lt; endl;}void Helicopter::land() {    cout &lt;&lt; &quot;直升飞机降落在屋顶&quot; &lt;&lt; endl;}</code></pre><p>Test.cpp</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;iostream&gt;#include &quot;Plane.h&quot;#include &quot;Helicopter.h&quot;using namespace std;//业务函数void runPlane(Plane &amp;p) {    p.fly();    p.land();}void main() {    Plane p;    runPlane(p);    Helicopter h;    //在 Plane.h 和 Helicopter.h 中的函数上不使用 virtual 修饰时，打印“飞机起飞”和“飞机降落”    //使用 virtual 修饰时，打印“直升飞机在原地起飞”和“直升飞机降落在屋顶”，实现多态    runPlane(h);    getchar();}</code></pre><h3 id="2、发生动态多态的条件"><a href="#2、发生动态多态的条件" class="headerlink" title="2、发生动态多态的条件"></a>2、发生动态多态的条件</h3><ul><li>使用继承</li><li>父类的引用或指针指向子类的对象</li><li>函数的重写</li></ul><h3 id="3、纯虚函数（抽象类）"><a href="#3、纯虚函数（抽象类）" class="headerlink" title="3、纯虚函数（抽象类）"></a>3、纯虚函数（抽象类）</h3><ul><li><strong>当一个类具有一个纯虚函数时，这个类就是抽象类</strong></li><li><strong>抽象类不能被实例化</strong></li><li><strong>子类继承抽象类，必须要实现纯虚函数，如果没有重新，子类也是抽象类</strong></li></ul><pre><code>//形状class Shape {public:    virtual void sayArea() = 0;};//圆class Circle : public Shape {private:    int r;public:    Circle(int r) {        this-&gt;r = r;    }    void sayArea() {        cout &lt;&lt; &quot;圆的面积：&quot; &lt;&lt; 3.14 * r * r &lt;&lt; endl;    }};void main() {    Circle c(5);    c.sayArea();    getchar();}</code></pre><h3 id="4、接口"><a href="#4、接口" class="headerlink" title="4、接口"></a>4、接口</h3><p><strong>接口只是逻辑上的划分，语法上跟抽象类的写法没有区别</strong></p><pre><code>//可以看作一个接口class Drawable{    virtual void draw() = 0;}</code></pre><h3 id="5、抽象类的作用"><a href="#5、抽象类的作用" class="headerlink" title="5、抽象类的作用"></a>5、抽象类的作用</h3><p><strong>为了继承约束，子类必须按照约束实现</strong></p><pre><code>//可以看作一个接口class Drawable{    virtual void draw() = 0;}</code></pre><h2 id="二、模板函数（泛型）"><a href="#二、模板函数（泛型）" class="headerlink" title="二、模板函数（泛型）"></a>二、模板函数（泛型）</h2><p><strong>函数模板类似于泛型，用于在业务相同，参数类型不同时进行声明，在使用过程中，根据实际类型进行推导</strong></p><pre><code>template &lt;typename T,typename Z&gt;//交换两个变量的值void swap(T&amp; a, Z&amp; b){    T tmp = 0;    tmp = a;    a = b;    b = tmp;}void main(){    int a = 10;    int b = 25;    swap(a,b);    cout &lt;&lt; a &lt;&lt; &quot;,&quot; &lt;&lt; b &lt;&lt; endl;    char* x = (char*)&quot;abc&quot;;    char* y = (char*)&quot;def&quot;;    swap(x,y);    cout &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; endl;    getchar();}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（三）C++中的静态成员与this指针</title>
      <link href="/20181020/c-c/san-c-zhong-de-jing-tai-cheng-yuan-this-zhi-zhen-you-yuan-han-shu-yu-yun-suan-fu-chong-zai/"/>
      <url>/20181020/c-c/san-c-zhong-de-jing-tai-cheng-yuan-this-zhi-zhen-you-yuan-han-shu-yu-yun-suan-fu-chong-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="C-中的静态成员与this指针"><a href="#C-中的静态成员与this指针" class="headerlink" title="C++中的静态成员与this指针"></a>C++中的静态成员与this指针</h1><h2 id="一、静态成员"><a href="#一、静态成员" class="headerlink" title="一、静态成员"></a>一、静态成员</h2><h3 id="1、static-关键字"><a href="#1、static-关键字" class="headerlink" title="1、static 关键字"></a>1、static 关键字</h3><ul><li><strong>静态属性只能在全局范围内进行初始化赋值</strong></li><li><strong>静态方法可以直接通过类名进行访问，也可以通过对象名进行访问</strong></li></ul><pre><code>class Teacher {private:    char* name;public:    //计数器    static int total;public:    Teacher(char* name) {        this-&gt;name = name;        cout &lt;&lt; &quot;Teacher有参构造函数&quot; &lt;&lt; endl;    }    ~Teacher() {        cout &lt;&lt; &quot;Teacher析构函数&quot; &lt;&lt; endl;    }    void setName(char* name) {        this-&gt;name = name;    }    char* getName() {        return this-&gt;name;    }    //计数的静态函数    static void count(){        total++;        cout &lt;&lt; &quot;total:&quot; &lt;&lt; total &lt;&lt; endl;    }};//静态属性初始化赋值int Teacher::total = 10;void main() {    Teacher::total++;    cout &lt;&lt; Teacher::total &lt;&lt; endl;    //直接通过类名访问    Teacher::count();    cout &lt;&lt; Teacher::total &lt;&lt; endl;    //通过对象名访问    Teacher t1((char*)&quot;JACK&quot;);    t1.count();    cout &lt;&lt; Teacher::total &lt;&lt; endl;    getchar();}</code></pre><h2 id="二、类的大小"><a href="#二、类的大小" class="headerlink" title="二、类的大小"></a>二、类的大小</h2><p>C/C++ 内存分区：栈、堆、全局（静态、全局）、常量区（字符串）、程序代码区<br><strong>普通属性与结构体具有相同的内存布局</strong></p><pre><code>class A {public:    int i;    int j;    int k;};class B {public:    int i;    int j;    int k;    void myprint() {        cout &lt;&lt; &quot;打印&quot; &lt;&lt; endl;    }};void main() {    cout &lt;&lt; sizeof(A) &lt;&lt; endl;    cout &lt;&lt; sizeof(B) &lt;&lt; endl;    getchar();}</code></pre><h2 id="三、this-指针"><a href="#三、this-指针" class="headerlink" title="三、this 指针"></a>三、this 指针</h2><h3 id="1、this指针"><a href="#1、this指针" class="headerlink" title="1、this指针"></a>1、this指针</h3><p><strong>this 是当前对象的指针</strong><br><strong>因为函数是共享的，所有使用this指针用来标识当前对象</strong></p><pre><code>class Teacher {private:    char* name;    int age;public:    Teacher(char* name,int age) {        this-&gt;name = name;        this-&gt;age = age;        cout &lt;&lt; &quot;Teacher有参构造函数&quot; &lt;&lt; endl;    }    ~Teacher() {        cout &lt;&lt; &quot;Teacher析构函数&quot; &lt;&lt; endl;    }    void setName(char* name) {        this-&gt;name = name;    }    char* getName() {        return this-&gt;name;    }    void setAge(int age) {        this-&gt;age = age;    }    int getAge() {        return this-&gt;age;    }    void myprint() {        cout &lt;&lt; this-&gt;getName() &lt;&lt; &quot;,&quot; &lt;&lt; this-&gt;getAge() &lt;&lt; endl;    }};void main() {    Teacher t1((char*)&quot;Jack&quot;, 20);    Teacher t2((char*)&quot;Rose&quot;, 18);    t1.myprint();    t2.myprint();    getchar();}</code></pre><h3 id="2、常函数（const修饰函数）"><a href="#2、常函数（const修饰函数）" class="headerlink" title="2、常函数（const修饰函数）"></a>2、常函数（const修饰函数）</h3><p><strong>常函数，修饰的是this；既不能改变指针的值，也不能改变指针指向的内容</strong><br><strong>常量对象只能调用常量函数,不能调用非常量函数</strong><br><strong>常函数当前对象不能被修改，防止数据成员被非法访问</strong></p><pre><code>class Teacher {private:    char* name;    int age;public:    Teacher(char* name,int age) {        this-&gt;name = name;        this-&gt;age = age;        cout &lt;&lt; &quot;Teacher有参构造函数&quot; &lt;&lt; endl;    }    ~Teacher() {        cout &lt;&lt; &quot;Teacher析构函数&quot; &lt;&lt; endl;    }    void setName(char* name) {        this-&gt;name = name;    }    char* getName() {        return this-&gt;name;    }    void setAge(int age) {        this-&gt;age = age;    }    int getAge() {        return this-&gt;age;    }    void myprint() const {        printf(&quot;%#x\n&quot;,this);        //不能改变属性的值        //this-&gt;name = &quot;Jason&quot;;        //不能改变this指针的值        //this = (Teacher*)0x000090;        cout &lt;&lt; this-&gt;getName() &lt;&lt; &quot;,&quot; &lt;&lt; this-&gt;getAge() &lt;&lt; endl;    }};</code></pre><h2 id="四、友元函数与友元类"><a href="#四、友元函数与友元类" class="headerlink" title="四、友元函数与友元类"></a>四、友元函数与友元类</h2><h3 id="1、友元函数"><a href="#1、友元函数" class="headerlink" title="1、友元函数"></a>1、友元函数</h3><p><strong>在友元函数中可以访问私有的属性</strong></p><pre><code>class A {private:    int i;public:    A(int i) {        this-&gt;i = i;    }    void myprint() {        cout &lt;&lt; i &lt;&lt; endl;    }    //友元函数    friend void modify_i(A*p, int a);};//友元函数的实现,在友元函数中可以访问私有的属性void modify_i(A*p, int a) {    p-&gt;i = a;}void main() {    A* a = new A(10);    a-&gt;myprint();    modify_i(a, 20);    a-&gt;myprint();    getchar();}</code></pre><h3 id="2、友元类"><a href="#2、友元类" class="headerlink" title="2、友元类"></a>2、友元类</h3><p><strong>友元类可以访问引用友元类的类的任何成员</strong></p><pre><code>class A {    //友元类    friend class B;private:    int i;public:    A(int i) {        this-&gt;i = i;    }    void myprint() {        cout &lt;&lt; i &lt;&lt; endl;    }    //友元函数    friend void modify_i(A*p, int a);};//友元函数的实现,在友元函数中可以访问私有的属性void modify_i(A*p, int a) {    p-&gt;i = a;}class B {private:    A a;public:    B(int a_i):a(a_i) {        this-&gt;a = a;    }    //B这个友元类可以访问A类的任何成员    void accessAny() {        a.i = 30;    }    A getA() {        return a;    }};void main() {    B* b = new B(10);    A a = b-&gt;getA();    a.myprint();    b-&gt;accessAny();    a = b-&gt;getA();    a.myprint();    getchar();}</code></pre><h2 id="五、运算符重载"><a href="#五、运算符重载" class="headerlink" title="五、运算符重载"></a>五、运算符重载</h2><p><strong>运算符的重载，本质上还是函数的调用</strong></p><h3 id="1、单独进行运算符重载"><a href="#1、单独进行运算符重载" class="headerlink" title="1、单独进行运算符重载"></a>1、单独进行运算符重载</h3><pre><code>class Point {public:    int x;    int y;public:    Point(int x = 0,int y = 0) {        this-&gt;x = x;        this-&gt;y = y;    }    void myprint() {        cout &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; endl;    }};//重载+号Point operator+(Point &amp;p1, Point &amp;p2) {    Point tmp(p1.x + p2.x, p1.y + p2.y);    return tmp;}//重载-号Point operator-(Point &amp;p1, Point &amp;p2) {    Point tmp(p1.x - p2.x, p1.y - p2.y);    return tmp;}void main() {    Point p1(10,20);    Point p2(20,10);    Point p3 = p1 + p2;    p3.myprint();    getchar();}</code></pre><h3 id="2、类成员函数运算符重载"><a href="#2、类成员函数运算符重载" class="headerlink" title="2、类成员函数运算符重载"></a>2、类成员函数运算符重载</h3><pre><code>class Point {public:    int x;    int y;public:    Point(int x = 0, int y = 0) {        this-&gt;x = x;        this-&gt;y = y;    }    void myprint() {        cout &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; endl;    }    //成员函数运算符重载+号    Point operator+(Point &amp;p2) {        Point tmp(this-&gt;x + p2.x, this-&gt;y + p2.y);        return tmp;    }    //成员函数运算符重载-号    Point operator-(Point &amp;p2) {        Point tmp(this-&gt;x - p2.x, this-&gt;y - p2.y);        return tmp;    }};void main() {    Point p1(10, 20);    Point p2(20, 10);    //p1.operator+(p1);    Point p3 = p1 + p2;    p3.myprint();    getchar();}</code></pre><h3 id="3、友元函数运算符重载"><a href="#3、友元函数运算符重载" class="headerlink" title="3、友元函数运算符重载"></a>3、友元函数运算符重载</h3><p><strong>当属性私有时，通过友元函数完成运算符重载</strong></p><pre><code>class Point {    friend Point operator+(Point &amp;p1, Point &amp;p2);    friend Point operator-(Point &amp;p1, Point &amp;p2);private:    int x;    int y;public:    Point(int x = 0, int y = 0) {        this-&gt;x = x;        this-&gt;y = y;    }    void myprint() {        cout &lt;&lt; x &lt;&lt; &quot;,&quot; &lt;&lt; y &lt;&lt; endl;    }};//友元函数运算符重载+号Point operator+(Point &amp;p1, Point &amp;p2) {    Point tmp(p1.x + p2.x, p1.y + p2.y);    return tmp;}//友元函数运算符重载-号Point operator-(Point &amp;p1, Point &amp;p2) {    Point tmp(p1.x - p2.x, p1.y - p2.y);    return tmp;}void main() {    Point p1(10, 20);    Point p2(20, 10);    Point p3 = p1 + p2;    p3.myprint();    getchar();}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）C++中的类与构造函数</title>
      <link href="/20181015/c-c/er-c-zhong-de-lei-yu-gou-zao-han-shu/"/>
      <url>/20181015/c-c/er-c-zhong-de-lei-yu-gou-zao-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="C-中的类与构造函数"><a href="#C-中的类与构造函数" class="headerlink" title="C++中的类与构造函数"></a>C++中的类与构造函数</h1><h2 id="一、C-中类的常用写法"><a href="#一、C-中类的常用写法" class="headerlink" title="一、C++中类的常用写法"></a>一、C++中类的常用写法</h2><h3 id="1、在头文件中声明类的属性和方法"><a href="#1、在头文件中声明类的属性和方法" class="headerlink" title="1、在头文件中声明类的属性和方法"></a>1、在头文件中声明类的属性和方法</h3><p>如：MyTeacher.h</p><pre><code>//防止重复引入#pragma onceclass MyTeacher{private:    char* name;    int age;public:    void setName(char* name);    char* getName();    void setAge(int age);    int getAge();};</code></pre><h3 id="2、在源文件中（-cpp）实现对应的方法"><a href="#2、在源文件中（-cpp）实现对应的方法" class="headerlink" title="2、在源文件中（.cpp）实现对应的方法"></a>2、在源文件中（.cpp）实现对应的方法</h3><p>如：MyTeacher.cpp</p><pre><code>#define _CRT_SECURE_NO_WARNINGS#include &quot;MyTeacher.h&quot;#include &lt;iostream&gt;void MyTeacher::setName(const char* name) {    this-&gt;name = new char[100];    strcpy(this-&gt;name, name);}char* MyTeacher::getName() {    return this-&gt;name;}void MyTeacher::setAge(int age) {    this-&gt;age = age;}int MyTeacher::getAge() {    return this-&gt;age;}</code></pre><h3 id="3、在具体C-代码中使用"><a href="#3、在具体C-代码中使用" class="headerlink" title="3、在具体C++代码中使用"></a>3、在具体C++代码中使用</h3><p>如：test.cpp</p><pre><code>#include &quot;MyTeacher.h&quot;using namespace std;void main() {    MyTeacher t;    t.setName(&quot;Jack&quot;);    t.setAge(25);    cout &lt;&lt; t.getName() &lt;&lt; &quot;,&quot; &lt;&lt; t.getAge() &lt;&lt; endl;    getchar();}</code></pre><h2 id="二、C-中类的构造函数、析构函数、拷贝构造函数"><a href="#二、C-中类的构造函数、析构函数、拷贝构造函数" class="headerlink" title="二、C++中类的构造函数、析构函数、拷贝构造函数"></a>二、C++中类的构造函数、析构函数、拷贝构造函数</h2><h3 id="1、构造函数"><a href="#1、构造函数" class="headerlink" title="1、构造函数"></a>1、构造函数</h3><ul><li><strong>C++类默认有无参构造函数，重写无参构造函数会覆盖默认的无参构造函数</strong></li><li><strong>有参构造函数会覆盖默认无参构造函数</strong></li></ul><pre><code>class Teacher{private:    char* name;    int age;public:    //无参构造函数    Teacher(){        cout &lt;&lt; &quot;无参构造函数&quot; &lt;&lt; endl;    }    //有参构造函数    Teacher(char *name,int age){        this-&gt;name = name;        this-&gt;age = age;        cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;    }};void main(){    Teacher t1;    Teacher t2(&quot;Rose&quot;,23);    //有参构造函数另一个调用方式    Teacher t3 = Teacher(&quot;jack&quot;,21);    getchar();}</code></pre><h3 id="2、析构函数"><a href="#2、析构函数" class="headerlink" title="2、析构函数"></a>2、析构函数</h3><p> <strong>当对象要被系统释放时，析构函数会被调用，一般用作善后处理</strong></p><pre><code>class Teacher{private:    char* name;    int age;public:    //无参构造函数    Teacher(){        this-&gt;name = (char*)malloc(100);        strcpy(name,&quot;Hello,Jack Teacher&quot;);        this-&gt;age = 25;        cout &lt;&lt; &quot;无参构造函数&quot; &lt;&lt; endl;    }    //析构函数    ~Teacher(){        cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;        free(this-&gt;name);    }    //有参构造函数    Teacher(char *name,int age){        this-&gt;name = name;        this-&gt;age = age;        cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;    }};void func(){    Teacher t1;}void main(){    func();    getchar();}</code></pre><h3 id="3、拷贝构造函数"><a href="#3、拷贝构造函数" class="headerlink" title="3、拷贝构造函数"></a>3、拷贝构造函数</h3><h4 id="3-1-浅拷贝"><a href="#3-1-浅拷贝" class="headerlink" title="3.1 浅拷贝"></a>3.1 浅拷贝</h4><ul><li><strong>默认拷贝构造函数，就是值拷贝（浅拷贝）</strong></li><li><strong>浅拷贝拷贝的是指针的地址（同一块内存区域）</strong></li></ul><pre><code>using namespace std;class Teacher {private:    char* name;    int age;public:        //有参构造函数    Teacher(char *name, int age) {        this-&gt;name = name;        this-&gt;age = age;        cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;    }    //析构函数    ~Teacher() {        cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;        free(this-&gt;name);    }    //拷贝构造函数    Teacher(const Teacher &amp;obj) {        this-&gt;name = obj.name;        this-&gt;age = obj.age;        cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;    }    void myprint() {        cout &lt;&lt; name &lt;&lt; &quot;,&quot; &lt;&lt; age &lt;&lt; endl;    }};void main() {    Teacher t1((char*)&quot;rose&quot;, 30);    Teacher t2 = t1;    t2.myprint();    getchar();}</code></pre><p>输出</p><pre><code>有参构造函数拷贝构造函数rose,30</code></pre><ul><li><strong>浅拷贝有可能会出现第二次释放变量导致出现异常的情况</strong></li></ul><p>例如：出现异常的情况</p><pre><code>using namespace std;class Teacher {private:    char* name;    int age;public:        //有参构造函数    Teacher(char *name, int age) {        int len = strlen(obj.name);        this-&gt;name = (char*)malloc(len+1);        strcpy(this-&gt;name,name);        this-&gt;age = age;        cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;    }    //析构函数    ~Teacher() {        cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;        free(this-&gt;name);    }    void myprint() {        cout &lt;&lt; name &lt;&lt; &quot;,&quot; &lt;&lt; age &lt;&lt; endl;    }};void func(){    Teacher t1((char*)&quot;rose&quot;, 30);    Teacher t2 = t1;    t2.myprint();} void main() {    func();    getchar();}</code></pre><h4 id="3-2-深拷贝"><a href="#3-2-深拷贝" class="headerlink" title="3.2 深拷贝"></a>3.2 深拷贝</h4><p><strong>深拷贝拷贝的是指针指向的数据内容（两块内存区域）</strong></p><pre><code>using namespace std;class Teacher {private:    char* name;    int age;public:        //有参构造函数    Teacher(char *name, int age) {        int len = strlen(obj.name);        this-&gt;name = (char*)malloc(len+1);        strcpy(this-&gt;name,name);        this-&gt;age = age;        cout &lt;&lt; &quot;有参构造函数&quot; &lt;&lt; endl;    }    //析构函数    ~Teacher() {        cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;        free(this-&gt;name);    }    //拷贝构造函数(深拷贝)    Teacher(const Teacher &amp;obj) {        //复制name属性        int len = strlen(obj.name);        this-&gt;name = (char*)malloc(len+1);        strcpy(this-&gt;name,obj.name);        this-&gt;age = obj.age;        cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;    }    void myprint() {        cout &lt;&lt; name &lt;&lt; &quot;,&quot; &lt;&lt; age &lt;&lt; endl;    }};void func(){    Teacher t1((char*)&quot;rose&quot;, 30);    //声明时会被调用    Teacher t2 = t1;    //下面这种方式不会被调用    //Teacher t1;    //Teacher t2;    //t1 = t2;    t2.myprint();}void main() {    func();    getchar();}</code></pre><h4 id="3-3-拷贝构造函数被被调用的场景"><a href="#3-3-拷贝构造函数被被调用的场景" class="headerlink" title="3.3 拷贝构造函数被被调用的场景"></a>3.3 拷贝构造函数被被调用的场景</h4><ol><li>声明时赋值</li><li>作为参数传入，实参给形参赋值</li><li>作为函数返回值返回，给变量初始化赋值</li></ol><h3 id="4、构造函数属性初始化列表"><a href="#4、构造函数属性初始化列表" class="headerlink" title="4、构造函数属性初始化列表"></a>4、构造函数属性初始化列表</h3><p><strong>构造函数属性初始化列表的格式为:</strong>  </p><pre><code>[构造函数名称]([本类中属性列表],[第一个类对象的属性列表],[第二个类对象的属性列表]):[第一个类对象]([第一个类对象的属性列表]),[第二个类对象]([第二个类对象的属性列表]){}</code></pre><p>示例如下：</p><pre><code>class Teacher{private:    char* name;public:    Teacher(char* name){        this-&gt;name = name;        cout &lt;&lt; &quot;Teacher有参构造函数&quot; &lt;&lt; endl;    }    ~Teacher(){        cout &lt;&lt; &quot;Teacher析构函数&quot; &lt;&lt; endl;    }    char* getName(){        return this-&gt;name;    }};class Student{private:    int id;    Teacher t1;public:    Student(int id,char* t1_name) : t1(t1_name){        this-&gt;id = id;            cout &lt;&lt; &quot;Student有参构造函数&quot; &lt;&lt; endl;    }    ~Student(){        cout &lt;&lt; &quot;Student析构函数&quot; &lt;&lt; endl;    }    void myprint(){        cout &lt;&lt; this-&gt;id &lt;&lt; &quot;同学的老师是&quot; &lt;&lt; t1.getName() &lt;&lt; endl;    }};void func(){    Student t1(16,(char*)&quot;Jack&quot;);    t1.myprint();}void main(){    func();    getchar();}</code></pre><h2 id="三、C-中的new-和-delete的使用"><a href="#三、C-中的new-和-delete的使用" class="headerlink" title="三、C++中的new 和 delete的使用"></a>三、C++中的new 和 delete的使用</h2><p><strong>C++中通过new和delete来进行动态内存分配,new 和delete成对出现</strong><br><strong>C++中在使用new和delete会对应调用构造函数和析构参数，通过C中的malloc方式则不会调用构造函数和析构函数</strong></p><pre><code>class Teacher{private:    char* name;public:    Teacher(char* name){        this-&gt;name = name;        cout &lt;&lt; &quot;Teacher有参构造函数&quot; &lt;&lt; endl;    }    ~Teacher(){        cout &lt;&lt; &quot;Teacher析构函数&quot; &lt;&lt; endl;    }    void setName(char* name){        this-&gt;name = name;    }    char* getName(){        return this-&gt;name;    }};void func(){    //初始化，返回指针地址    Teacher *t1 = new Teacher((char*)&quot;Jack&quot;);    //使用    //释放    delete t1;    int *p2 = new int[10];    p2[0] = 11;    //释放数组    delete p2;}void main(){    func();    getchar();}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）C++命名空间及引用</title>
      <link href="/20180930/c-c/yi-c-ming-ming-kong-jian-ji-yin-yong/"/>
      <url>/20180930/c-c/yi-c-ming-ming-kong-jian-ji-yin-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="C-命名空间及引用"><a href="#C-命名空间及引用" class="headerlink" title="C++命名空间及引用"></a>C++命名空间及引用</h1><h2 id="一、C-与-C-的关系"><a href="#一、C-与-C-的关系" class="headerlink" title="一、C 与 C++ 的关系"></a>一、C 与 C++ 的关系</h2><ol><li>C++ 可以与 C 代码进行混编</li><li>C++ 是一个面向对象编程语言、C 语言是面向过程的编程语言</li><li>C++ 是对 C 的一个增强</li></ol><h2 id="二、C-命名空间"><a href="#二、C-命名空间" class="headerlink" title="二、C++ 命名空间"></a>二、C++ 命名空间</h2><ol><li>C++ 标准的命名空间为 std ，包含很多标准的定义</li><li>&lt;&lt; 为运算符重载</li><li>命名空间类似于Java中的包</li><li>命名空间可以先进行使用</li><li>:: 为访问修饰符</li></ol><p>示例：</p><pre><code>#include &lt;stdlib.h&gt;#include &lt;iostream&gt;//使用标准命名空间using namespace std;//自定义命名空间namespace NSP_A{    int a = 9;    struct Teacher{        char name[20];        int age;    };    struct Student{        char name[20];        int age;    };}void main(){    //std::cout &lt;&lt; &quot;this is c plus plus&quot; &lt;&lt; std::endl;    cout &lt;&lt; &quot;this is c plus plus&quot; &lt;&lt; endl;    cout &lt;&lt; &quot;访问自定义命名空间的属性a:&quot; &lt;&lt; NSP_A::a &lt;&lt; endl;    //使用命名空间中的结构体    using NSP_A::Student;    Student t;    t.age = 19;    cout &lt;&lt; &quot;学生的年龄为:&quot; &lt;&lt; t.age &lt;&lt; endl;    getchar();}</code></pre><h2 id="三、C-中的类"><a href="#三、C-中的类" class="headerlink" title="三、C++ 中的类"></a>三、C++ 中的类</h2><p><strong>C++ 中的类中的属性共享权限访问修饰符</strong></p><p><strong>类的 } 后有分号;</strong></p><pre><code>using namespace std;#define PI 3.14class MyCircle{//属性private:    double r;    double s;public:    double length;public:    void setR(double r){        this-&gt;r = r;    }    double getS(){        return PI * r * r;    }};void main(){    MyCircle c1;    c1.setR(4);    cout &lt;&lt; &quot;圆的面积：&quot; &lt;&lt; c1.getS() &lt;&lt; endl;    getchar();}</code></pre><p>输出：</p><pre><code>圆的面积：50.24</code></pre><h2 id="四、C-中的结构体"><a href="#四、C-中的结构体" class="headerlink" title="四、C++ 中的结构体"></a>四、C++ 中的结构体</h2><ul><li><p><strong>C++ 中的结构体中有权限访问修饰符</strong></p></li><li><p><strong>结构体在C++ 中使用时可以省略 struct</strong></p></li><li><p><strong>结构体不能被继承</strong></p></li></ul><pre><code>using namespace std;struct Teacher{//属性public:    char* name;    int age;public:    void say(){       cout &lt;&lt; &quot;My name is &quot; &lt;&lt; this-&gt;name &lt;&lt; &quot;, I am &quot; &lt;&lt; this-&gt;age &lt;&lt; &quot; years old.&quot; &lt;&lt; endl;    }};void main(){    Teacher t1;    strcpy(t1.name, &quot;Jack&quot;);    t1.age = 25;    t1.say();    getchar();}</code></pre><h2 id="五、C-中的数据类型"><a href="#五、C-中的数据类型" class="headerlink" title="五、C++ 中的数据类型"></a>五、C++ 中的数据类型</h2><ul><li><strong>C++中有 bool 类型 ，大小为1字节</strong></li><li><strong>C++中的三目运算可以成为左值，改变复合条件的属性的值</strong></li></ul><pre><code>using namespace std;void main(){    //bool isSingle = true;    bool isSingle = -1;    if(isSingle){        cout &lt;&lt; &quot;单身&quot; &lt;&lt; endl;    }else{        cout &lt;&lt; &quot;有对象&quot; &lt;&lt; endl;    }    int a = 10, b = 20;    int c = (a &gt; b) ? a : b;    cout &lt;&lt; &quot;最大的数为&quot; &lt;&lt; ((a &gt; b) ? a : b) &lt;&lt; endl;    //三目运算可以成为左值    (a &gt; b) ? a : b = 30;     cout &lt;&lt; &quot;b 的值为&quot; &lt;&lt; b &lt;&lt; endl;    getchar();}</code></pre><h2 id="六、C-中的引用"><a href="#六、C-中的引用" class="headerlink" title="六、C++ 中的引用"></a>六、C++ 中的引用</h2><h3 id="1、引用的定义"><a href="#1、引用的定义" class="headerlink" title="1、引用的定义"></a>1、引用的定义</h3><ul><li><strong>C++ 中的引用就是在声明的变量名称前加&amp;符号,是为变量取别名，作为函数参数传递，能保证参数传递过程中不产生副本</strong></li><li><strong>引用必须要有值，不能为NULL</strong></li><li><strong>引用可以直接操作变量，指针要通过取值(*p),间接操作变量，指针的可读性差</strong></li></ul><pre><code>using namespace std;void main(){    int a = 10;    //b就是a的内存空间的另一个别名    int &amp;b = a;    cout &lt;&lt; b &lt;&lt; endl;    getchar();}</code></pre><h3 id="2、C-中的引用的作用"><a href="#2、C-中的引用的作用" class="headerlink" title="2、C++ 中的引用的作用"></a>2、C++ 中的引用的作用</h3><ul><li><strong>在 C++ 代码中使用引用比使用指针写起来更加方便</strong></li></ul><pre><code>using namespace std;//通过指针进行值交换void swap_1(int *a, int *b){    int c = 0;    c = *a;    *a = *b;    *b = c;}//通过引用进行值交换void swap_2(int &amp;a, int &amp;b){    int c = 0;    c = a;    a = b;    b = c;}void main(){    int x = 30;    int y = 50;    swap_1(&amp;x, &amp;y);    cout &lt;&lt; &quot;指针交换：x的值为：&quot;&lt;&lt; x &lt;&lt; &quot;,y的值为&quot; &lt;&lt; y &lt;&lt; endl;    swap_2(x,y);    cout &lt;&lt; &quot;引用交换：x的值为：&quot;&lt;&lt; x &lt;&lt; &quot;,y的值为&quot; &lt;&lt; y &lt;&lt; endl;    getchar();}</code></pre><h3 id="3、C-中引用的主要功能"><a href="#3、C-中引用的主要功能" class="headerlink" title="3、C++中引用的主要功能"></a>3、C++中引用的主要功能</h3><ul><li><strong>在 C++ 中，引用的主要功能是作为函数的参数或返回值</strong></li></ul><pre><code>using namespace std;struct Teacher{   const char* name;    int age};void myprint(Teacher &amp;t){    cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; t.name &lt;&lt; &quot;,年龄：&quot; &lt;&lt; t.age &lt;&lt; endl;}void main(){    Teacher t;    t.name = &quot;jsaon&quot;;    t.age = 29;    myprint(t);    getchar();}</code></pre><ul><li><strong>在 C++ 中，对指针的引用可以代替二级指针</strong></li></ul><pre><code>using namespace std;struct Teacher{   const char* name;    int age};void getTeacher(Teacher **p){    Teacher *tmp = (Teacher*)malloc(sizeof(Teacher));    tmp-&gt;age = 20;    *p = tmp;}//指针的引用，代替二级指针void getTeacher(Teacher* &amp;p){    p = (Teacher*)malloc(sizeof(Teacher));    p-&gt;age = 20;}void main(){    Teacher *t = NULL;    getTeacher(&amp;t);    getchar();}</code></pre><h3 id="4、指针常量和常量指针"><a href="#4、指针常量和常量指针" class="headerlink" title="4、指针常量和常量指针"></a>4、指针常量和常量指针</h3><ul><li><strong>指针常量就是指针的常量，不改变地址的指针，但是可以修改它指向的内容</strong></li></ul><pre><code>void main(){    int a = 2, b = 3;    int *const p1 = &amp;a;    //p1 = &amp;b; //失败的，不能改变地址    *p1 = 4; //可以改变a的值    getchar();}</code></pre><ul><li><strong>常量指针就是指向常量的指针，不能修改内容，可以修改地址</strong></li></ul><pre><code>void main(){    int a = 2, b = 3;    const int *p2 = &amp;a;    p1 = &amp;b; //可以改变地址    //*p2 = 9; //不可以改变a的值    getchar();}</code></pre><h3 id="5、常引用"><a href="#5、常引用" class="headerlink" title="5、常引用"></a>5、常引用</h3><p><strong>常引用类似于Java中的final，值不可修改</strong></p><pre><code>void main(){    int a = 10,b = 9;    const int &amp;c = a;    //c = b; //不能再次赋值    const int &amp;d = 66;}</code></pre><h2 id="七、C-中的函数"><a href="#七、C-中的函数" class="headerlink" title="七、C++ 中的函数"></a>七、C++ 中的函数</h2><h3 id="1、函数参数的默认值"><a href="#1、函数参数的默认值" class="headerlink" title="1、函数参数的默认值"></a>1、函数参数的默认值</h3><ul><li><strong>在C++中，可以对函数的参数设置默认值</strong></li><li><strong>有默认值的参数必须在无默认值参数的最后</strong></li></ul><pre><code>using namespace std;int add(int x, int y = 13, int z = 20) {    return (x + y + z);}void main() {    int x = 17;    int sum = add(10);    cout &lt;&lt; &quot;x+y+z=&quot; &lt;&lt; sum &lt;&lt; endl;    getchar();}</code></pre><h3 id="2、函数的可变参数"><a href="#2、函数的可变参数" class="headerlink" title="2、函数的可变参数"></a>2、函数的可变参数</h3><ul><li><strong>在C++中，针对函数参数不确定的情况下，可使用可变参数</strong></li></ul><pre><code>#include &lt;stdarg.h&gt;using namespace std;void func(int i,...){    //可变参数指针    va_list args_p;    //开始读取可变参数，i是最后一个固定参数    va_start(args_p,i);    int a = va_arg(args_p,int);    int b = va_arg(args_p,int);    char c = va_arg(args_p,char);    cout &lt;&lt; a &lt;&lt; endl;    cout &lt;&lt; b &lt;&lt; endl;    cout &lt;&lt; c &lt;&lt; endl;    //结束    va_end(args_p);}void main() {    func(9,10,32,&#39;C&#39;);    getchar();}</code></pre><h3 id="3、函数的可变参数-循环读取"><a href="#3、函数的可变参数-循环读取" class="headerlink" title="3、函数的可变参数(循环读取)"></a>3、函数的可变参数(循环读取)</h3><ul><li><strong>在C++中，针对函数参数不确定的情况下，可使用可变参数</strong></li><li>**可变参数在循环遍历时，不能获取个数，只能通过约定来确定可变参数个数；如第一个值来表</li><li>示可变参数个数**</li></ul><pre><code>#include &lt;stdarg.h&gt;using namespace std;void func(int count, ...) {    //可变参数指针    va_list args_p;    //开始读取可变参数，i是最后一个固定参数    va_start(args_p, count);    char value;    int i = 0;    for (;i &lt; count; i++) {        value = va_arg(args_p, char);        cout &lt;&lt; value &lt;&lt; endl;    }    //结束    va_end(args_p);}void main() {    func(3, &#39;a&#39;, &#39;b&#39;, &#39;C&#39;);    getchar();}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI 引用、异常处理和缓存策略</title>
      <link href="/20180925/jni/san-jni-yin-yong-yi-chang-chu-li-he-huan-cun-ce-lue/"/>
      <url>/20180925/jni/san-jni-yin-yong-yi-chang-chu-li-he-huan-cun-ce-lue/</url>
      
        <content type="html"><![CDATA[<h1 id="JNI-引用、异常处理和缓存策略"><a href="#JNI-引用、异常处理和缓存策略" class="headerlink" title="JNI 引用、异常处理和缓存策略"></a>JNI 引用、异常处理和缓存策略</h1><h2 id="一、JNI-引用变量"><a href="#一、JNI-引用变量" class="headerlink" title="一、JNI 引用变量"></a>一、JNI 引用变量</h2><h3 id="1、引用类型"><a href="#1、引用类型" class="headerlink" title="1、引用类型"></a>1、引用类型</h3><p><strong>JNI 引用的类型分为局部引用和全局引用</strong></p><h3 id="2、引用的作用"><a href="#2、引用的作用" class="headerlink" title="2、引用的作用"></a>2、引用的作用</h3><p><strong>在JNI中告知虚拟机何时回收一个 JNI 变量</strong></p><h3 id="3、局部引用的使用"><a href="#3、局部引用的使用" class="headerlink" title="3、局部引用的使用"></a>3、局部引用的使用</h3><p><strong>通过DeleteLocalRef 手动释放</strong></p><ol><li>访问一个很大的java对象，使用完成之后，还要进行复杂的耗时操作</li><li>创建了大量的局部引用，占用了太多的内存，而且这些局部引用跟后面的操作没有关联性。</li></ol><p>例如：</p><ul><li>编写JNITest.java文件</li></ul><pre><code>public class JNITest {    public native void localRef();    public static void main(String[] args){        JNITest t = new JNITest();        t.localRef();    }    static {        System.loadLibrary(&quot;JNIProject&quot;);    }}</code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre><code>javap -s -p com.example.jni.JNITest</code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */#include &quot;jni.h&quot;/* Header for class com_example_jni_JNITest */#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; {#endif/* * Class:     com_example_jni_JNITest * Method:    localRef * Signature:  */JNIEXPORT void JNICALL Java_com_example_jni_JNITest_localRef(JNIEnv *, jobject);#ifdef __cplusplus}#endif#endif</code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre><code>#include &quot;com_example_jni_JNITest.h&quot;#include &lt;stdlib.h&gt;int compare(int *a,int *b){    return (*a) - (*b);}//模拟：循环创建数组 JNIEXPORT void JNICALL Java_com_example_jni_JNITest_localRef(JNIEnv *env, jobject jobj) {    int i = 0;    for(; i &lt; 5; i++){        //创建Date对象        jclass cls = (*env)-&gt;FindClass(env,&quot;java.util.Date&quot;);        jmethodID constructor_mid = (*env)-&gt;GetMethodID(env,cls,&quot;&lt;init&gt;&quot;,&quot;()V&quot;);        jobject obj = (*env)-&gt;NewObject(env,cls,constructor_mid);        //此处省略100行代码        //不再使用obj对象了        //通知垃圾回收器回收这些对象        (*env)-&gt;DeleteLocalRef(env,obj);        //此处省略100行代码    }}</code></pre><h3 id="4、全局引用的使用"><a href="#4、全局引用的使用" class="headerlink" title="4、全局引用的使用"></a>4、全局引用的使用</h3><p><strong>全局引用可以共享（跨多个方法，多个线程），手动控制内存使用（不再使用时通过 DeleteGlobalRef 手动释放）</strong></p><p>例如：</p><ul><li>编写JNITest.java文件</li></ul><pre><code>public class JNITest {    public native void createGlobalRef();     public native String getGlobalRef();     public native void deleteGlobalRef();    public static void main(String[] args){        JNITest t = new JNITest();        t.createGlobalRef();        t.getGlobalRef();        t.deleteGlobalRef();    }    static {        System.loadLibrary(&quot;JNIProject&quot;);    }}</code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre><code>javap -s -p com.example.jni.JNITest</code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */#include &quot;jni.h&quot;/* Header for class com_example_jni_JNITest */#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; {#endif/* * Class:     com_example_jni_JNITest * Method:    createGlobalRef * Signature:  */JNIEXPORT void JNICALL Java_com_example_jni_JNITest_createGlobalRef(JNIEnv *, jobject);/* * Class:     com_example_jni_JNITest * Method:    getGlobalRef * Signature:  */JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_getGlobalRef(JNIEnv *, jobject);/* * Class:     com_example_jni_JNITest * Method:    deleteGlobalRef * Signature:  */JNIEXPORT void JNICALL Java_com_example_jni_JNITest_deleteGlobalRef(JNIEnv *, jobject);#ifdef __cplusplus}#endif#endif</code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre><code>#include &quot;com_example_jni_JNITest.h&quot;#include &lt;stdlib.h&gt;//全局引用jstring global_str;JNIEXPORT void JNICALL Java_com_example_jni_JNITest_createGlobalRef(JNIEnv *env, jobject jobj) {    jstring obj = (*env)-&gt;NewStringUTF(env,&quot;JNI development is powerful!&quot;);    global_str = (*env)-&gt;NewGlobalRef(env,obj);}JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_getGlobalRef(JNIEnv *env, jobject jobj) {    return global_str;}JNIEXPORT void JNICALL Java_com_example_jni_JNITest_deleteGlobalRef(JNIEnv *env, jobject jobj) {    (*env)-&gt;DeleteGlobalRef(env,global_str);}</code></pre><h3 id="5、弱全局引用的使用"><a href="#5、弱全局引用的使用" class="headerlink" title="5、弱全局引用的使用"></a>5、弱全局引用的使用</h3><p><strong>弱全局引用可以节省内存，在内存不足时可以释放所引用的对象，可以引用一个不常用的对象，如果为NULL，再临时创建</strong></p><p>创建：NewWeakGlobalRef</p><p>销毁：DeleteGlobalWeakRef</p><h2 id="二、JNI-的异常处理"><a href="#二、JNI-的异常处理" class="headerlink" title="二、JNI 的异常处理"></a>二、JNI 的异常处理</h2><p><strong>JNI自己抛出的异常，在java层无法被捕获，只能在C层清空；用户通过ThrowNew抛出的异常，可以在Java层捕获</strong></p><ol><li>保证java代码可以继续运行</li><li>补救措施，保证 C 代码继续执行</li></ol><p>例如：</p><ul><li>编写JNITest.java文件</li></ul><pre><code>public class JNITest {    private String key=&quot;World!&quot;;    public native void exception();    public static void main(String[] args){        JNITest t = new JNITest();        t.exception();    }    static {        System.loadLibrary(&quot;JNIProject&quot;);    }}</code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre><code>javap -s -p com.example.jni.JNITest</code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */#include &quot;jni.h&quot;/* Header for class com_example_jni_JNITest */#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; {#endif/* * Class:     com_example_jni_JNITest * Method:    exception * Signature:  */JNIEXPORT void JNICALL Java_com_example_jni_JNITest_exception(JNIEnv *, jobject);#ifdef __cplusplus}#endif#endif</code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre><code>#include &quot;com_example_jni_JNITest.h&quot;#include &lt;stdlib.h&gt;JNIEXPORT void JNICALL Java_com_example_jni_JNITest_exception(JNIEnv *env, jobject jobj) {   jclass cls = (*env)-&gt;GetObjectClass(env,jobj);   jfieldID fid = (*env)-&gt;GetFieldID(env,cls,&quot;key2&quot;,&quot;Ljava/lang/String;&quot;);   //检测是否发生java异常   jthrowable exception = (*env)-&gt;ExceptionOccurred(env);   if(exception != NULL){       //让java代码可以继续运行       //清空异常信息       (*env)-&gt;ExceptionClear(env);       fid = (*env)-&gt;GetFieldID(env,cls,&quot;key&quot;,&quot;Ljava/lang/String;&quot;);   }   jstring jstr = (*env)-&gt;GetObjectField(env,jobj,fid);   char *str = (*env)-&gt;GetStringUTFChars(env,jstr,NULL);   //比对属性值是否合法，i 忽略大小写   if(_stricmp(str,&quot;Hello World!&quot;)!=0){       //人为抛出异常，交给Java层处理       jclass newExCls = (*env)-&gt;FindClass(env,&quot;java/lang/IllegalArgumentException&quot;);       (*env)-&gt;ThrowNew(env,newExCls,&quot;Key&#39;s value is invalid!&quot;);   }}</code></pre><h2 id="三、JNI-缓存策略"><a href="#三、JNI-缓存策略" class="headerlink" title="三、JNI 缓存策略"></a>三、JNI 缓存策略</h2><h3 id="1、局部的静态变量"><a href="#1、局部的静态变量" class="headerlink" title="1、局部的静态变量"></a>1、局部的静态变量</h3><p><strong>局部的静态变量，当程序运行结束之后，变量的值还会在内存中</strong></p><p>例如：</p><ul><li>编写JNITest.java文件</li></ul><pre><code>public class JNITest {    private String key=&quot;Hello World!&quot;;    public native String cached();    public static void main(String[] args){        JNITest t = new JNITest();        for (int 1 = 0; i&lt;100; i++){           System.out.pringln(&quot;第&quot;+(i+1)+&quot;次执行，结果为：&quot;+t.cached());         }    }    static {        System.loadLibrary(&quot;JNIProject&quot;);    }}</code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre><code>javap -s -p com.example.jni.JNITest</code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */#include &quot;jni.h&quot;/* Header for class com_example_jni_JNITest */#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; {#endif/* * Class:     com_example_jni_JNITest * Method:    cached * Signature:  */JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_cached(JNIEnv *, jobject);#ifdef __cplusplus}#endif#endif</code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre><code>#include &quot;com_example_jni_JNITest.h&quot;#include &lt;stdlib.h&gt;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_cached(JNIEnv *env, jobject jobj) {   jclass cls = (*env)-&gt;GetObjectClass(env,jobj);   static jfieldID key_id = NULL;   //获取jfieldID只获取一次   if(key_id == NULL){       key_id = (*env)-&gt;GetFieldID(env,cls,&quot;key&quot;,&quot;Ljava/lang/String;&quot;);       printf(&quot;------------GetFieldID--------\n&quot;)   }}</code></pre><h3 id="2、全局变量"><a href="#2、全局变量" class="headerlink" title="2、全局变量"></a>2、全局变量</h3><p><strong>全局变量在动态库加载完成之后，立刻缓存起来</strong></p><pre><code>//初始化全局变量jfieldID key_fid;jmethodID random_mid;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_initIds(JNIEnv *env, jclass jcls) {    key_fid = (*env)-&gt;GetFieldID(env,jcls,&quot;key&quot;,&quot;Ljava/lang/String;&quot;);    random_mid = (*env)-&gt;GetMethodID(env,jcls,&quot;getRandomInt&quot;,&quot;(I)I&quot;);}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> JNI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> JNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI 的数据类型</title>
      <link href="/20180920/jni/er-jni-de-shu-ju-lei-xing-yi-ji-c-fang-wen-java-shu-xing-he-fang-fa/"/>
      <url>/20180920/jni/er-jni-de-shu-ju-lei-xing-yi-ji-c-fang-wen-java-shu-xing-he-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="JNI-的数据类型"><a href="#JNI-的数据类型" class="headerlink" title="JNI 的数据类型"></a>JNI 的数据类型</h1><h2 id="一、JNI-数据类型"><a href="#一、JNI-数据类型" class="headerlink" title="一、JNI 数据类型"></a>一、JNI 数据类型</h2><p><strong>Java基本数据类型与JNI数据类型的映射关系</strong></p><table><thead><tr><th>Java数据类型</th><th>JNI数据类型</th><th>C/C++数据类型</th></tr></thead><tbody><tr><td>boolean</td><td>jboolean</td><td>unsigned char</td></tr><tr><td>byte</td><td>jbyte</td><td>signed char</td></tr><tr><td>char</td><td>jchar</td><td>unsigned short</td></tr><tr><td>short</td><td>jshort</td><td>short</td></tr><tr><td>int</td><td>jint</td><td>int</td></tr><tr><td>long</td><td>jlong</td><td>long long</td></tr><tr><td>float</td><td>jfloat</td><td>float</td></tr><tr><td>double</td><td>jdouble</td><td>double</td></tr><tr><td>void</td><td>void</td><td>void</td></tr></tbody></table><p><strong>Java引用数据类型与JNI数据类型的映射关系</strong></p><table><thead><tr><th>Java数据类型</th><th>JNI数据类型</th></tr></thead><tbody><tr><td>String</td><td>jstring</td></tr><tr><td>Object</td><td>jobject</td></tr><tr><td>基本数据类型数组如： byte[]</td><td>jbyteArray</td></tr><tr><td>对象数组如： Object[],String[]</td><td>jobjectArray</td></tr></tbody></table><h2 id="二、C通过JNI调用Java"><a href="#二、C通过JNI调用Java" class="headerlink" title="二、C通过JNI调用Java"></a>二、C通过JNI调用Java</h2><h3 id="1、访问Java属性"><a href="#1、访问Java属性" class="headerlink" title="1、访问Java属性"></a>1、访问Java属性</h3><p><strong>GET<Type>Field</strong></p><ul><li>编写JNITest.java文件</li></ul><pre><code>public class JNITest {    public String key = &quot;World!&quot;;    //访问属性，返回修改之后的属性内容    public native String accessField();    public static void main(String[] args){        JNITest t = new JNITest();        System.out.println(&quot;key修改前：&quot;+t.key);        t.accessField();        System.out.println(&quot;key修改后：&quot;+t.key);    }    static {        System.loadLibrary(&quot;JNIProject&quot;);    }}</code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法</li></ul><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */#include &quot;jni.h&quot;/* Header for class com_example_jni_JNITest */#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; {#endif/* * Class:     com_example_jni_JNITest * Method:    accessField * Signature: ()Ljava/lang/String; */JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_accessField(JNIEnv *, jobject);#ifdef __cplusplus}#endif#endif</code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre><code>#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_accessField(JNIEnv *jEnv, jobject jobj) {    //jobj是t对象，JniTest.class    jclass cls = (*jEnv)-&gt;GetObjectClass(jEnv, jobj);    //jfieldID    //属性名称，属性签名    jfieldID fid = (*jEnv)-&gt;GetFieldID(jEnv, cls, &quot;key&quot;, &quot;Ljava/lang/String;&quot;);    //World! &gt;&gt; Hello World!    //获取key属性的值    //Get&lt;Type&gt;Field    jstring jstr = (*jEnv)-&gt;GetObjectField(jEnv, jobj, fid);    printf(&quot;jstr:%#x\n&quot;, &amp;jstr);    //jstring -&gt; c字符串    //isCopy 是否复制（true代表复制，false不复制）    char *c_str = (*jEnv)-&gt;GetStringUTFChars(jEnv, jstr, NULL);    //拼接得到新的字符串    char text[20] = &quot;Hello &quot;;    strcat(text, c_str);    //c字符串 -&gt;jstring    jstring new_jstr = (*jEnv)-&gt;NewStringUTF(jEnv, text);    //修改key    //Set&lt;Type&gt;Field    (*jEnv)-&gt;SetObjectField(jEnv, jobj, fid, new_jstr);    printf(&quot;new_jstr:%#x\n&quot;, &amp;new_jstr);    return new_jstr;}</code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h3 id="2、访问Java静态属性"><a href="#2、访问Java静态属性" class="headerlink" title="2、访问Java静态属性"></a>2、访问Java静态属性</h3><p><strong>GET<Type>Field</strong></p><ul><li>编写JNITest.java文件</li></ul><pre><code>public class JNITest {    public static int count = 5;    //访问属性，返回修改之后的属性内容    public native int accessStaticField();    public static void main(String[] args){        JNITest t = new JNITest();        System.out.println(&quot;count 修改前：&quot;+t.count);        t.accessStaticField();        System.out.println(&quot;count 修改后：&quot;+t.count);    }    static {        System.loadLibrary(&quot;JNIProject&quot;);    }}</code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法</li></ul><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */#include &quot;jni.h&quot;/* Header for class com_example_jni_JNITest */#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; {#endif/* * Class:     com_example_jni_JNITest * Method:    accessField * Signature: ()Ljava/lang/String; */JNIEXPORT jint JNICALL Java_com_example_jni_JNITest_accessStaticField(JNIEnv *, jobject);#ifdef __cplusplus}#endif#endif</code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre><code>#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT jint JNICALL Java_com_example_jni_JNITest_accessStaticField(JNIEnv *jEnv, jobject jobj) {    //jobj是t对象，JniTest.class    jclass cls = (*jEnv)-&gt;GetObjectClass(jEnv, jobj);    //jfieldID    //属性名称，属性签名    jfieldID fid = (*jEnv)-&gt;GetStaticFieldID(jEnv, cls, &quot;count&quot;, &quot;I&quot;);    //获取 count 属性的值    //Get&lt;Type&gt;Field    jint count = (*jEnv)-&gt;GetStaticIntField(jEnv, jobj, fid);    printf(&quot;jstr:%#x\n&quot;, &amp;jstr);    count++;    (*jEnv)-&gt;SetStaticIntField(jEnv, jobj, fid,count);    return count;}</code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h3 id="3、访问java方法"><a href="#3、访问java方法" class="headerlink" title="3、访问java方法"></a>3、访问java方法</h3><p><strong>Call<Type>Method</strong></p><ul><li>编写JNITest.java文件</li></ul><pre><code>public class JNITest {    public native void accessMethod();    public static void main(String[] args){        JNITest t = new JNITest();        t.accessMethod();    }    //产生指定范围的随机数    public int genRandomInt(int max){        System.out.println(&quot;genRandomInt 执行了...&quot;);        return new Random().nextInt(max);     }    static {        System.loadLibrary(&quot;JNIProject&quot;);    }}</code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre><code>javap -s -p com.example.jni.JNITest</code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */#include &quot;jni.h&quot;/* Header for class com_example_jni_JNITest */#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; {#endif/* * Class:     com_example_jni_JNITest * Method:    accessMethod * Signature: (I)I; */JNIEXPORT void JNICALL Java_com_example_jni_JNITest_accessMethod(JNIEnv *, jobject);#ifdef __cplusplus}#endif#endif</code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre><code>#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT void JNICALL Java_com_example_jni_JNITest_accessMethod(JNIEnv *env, jobject jobj){    //jclass    jclass cls = (*env)-&gt;GetObjectClass(env, jobj);    //jmethodID    jmethodID mid = (*env)-&gt;GetMethodID(env, cls, &quot;genRandomInt&quot;, &quot;(I)I&quot;);    //调用    //Call&lt;Type&gt;Method    jint random = (*env)-&gt;CallIntMethod(env, jobj, mid, 200);    printf(&quot;random num:%ld&quot;,random);    //.....}</code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h3 id="4、访问静态方法"><a href="#4、访问静态方法" class="headerlink" title="4、访问静态方法"></a>4、访问静态方法</h3><p><strong>CallStatic<Type>Method</strong></p><ul><li>编写JNITest.java文件</li></ul><pre><code>public class JNITest {    public native void accessStaticMethod();    public static void main(String[] args){        JNITest t = new JNITest();        t.accessStaticMethod();    }    //产生UUID字符串    public static String getUUID(){        return UUID.randomUUID().toString();    }    static {        System.loadLibrary(&quot;JNIProject&quot;);    }}</code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre><code>javap -s -p com.example.jni.JNITest</code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */#include &quot;jni.h&quot;/* Header for class com_example_jni_JNITest */#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; {#endif/* * Class:     com_example_jni_JNITest * Method:    accessStaticMethod * Signature: ()Ljava/lang/String;; */JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_accessStaticMethod(JNIEnv *, jobject);#ifdef __cplusplus}#endif#endif</code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre><code>#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_accessStaticMethod(JNIEnv *env, jobject jobj){    //jclass    jclass cls = (*env)-&gt;GetObjectClass(env, jobj);    //jmethodID        jmethodID mid = (*env)-&gt;GetStaticMethodID(env, cls, &quot;getUUID&quot;, &quot;()Ljava/lang/String;&quot;);    //调用    //CallStatic&lt;Type&gt;Method    jstring uuid = (*env)-&gt;CallStaticObjectMethod(env, cls, mid);    //随机文件名称 uuid.txt    //jstring -&gt; char*    //isCopy ，代表java和c操作的是同一个字符串    char *uuid_str = (*env)-&gt;GetStringUTFChars(env, uuid, NULL);    //拼接    char filename[100];    sprintf(filename, &quot;D://%s.txt&quot;,uuid_str);    FILE *fp = fopen(filename,&quot;w&quot;);    fputs(&quot;How are you?&quot;, fp);    fclose(fp);}</code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h3 id="5、访问构造方法"><a href="#5、访问构造方法" class="headerlink" title="5、访问构造方法"></a>5、访问构造方法</h3><p><strong>通过FindClass找到对应的类</strong></p><ul><li>编写JNITest.java文件</li></ul><pre><code>public class JNITest {    //java.util.Date    public native Date accessConstructor();    public static void main(String[] args){        JNITest t = new JNITest();        t.accessConstructor();    }    static {        System.loadLibrary(&quot;JNIProject&quot;);    }}</code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre><code>javap -s -p com.example.jni.JNITest</code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */#include &quot;jni.h&quot;/* Header for class com_example_jni_JNITest */#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; {#endif/* * Class:     com_example_jni_JNITest * Method:    accessConstructor * Signature:  */JNIEXPORT jobject JNICALL Java_com_example_jni_JNITest_accessConstructor(JNIEnv *, jobject);#ifdef __cplusplus}#endif#endif</code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre><code>#include &quot;com_example_jni_JNITest.h&quot;//使用java.util.Date产生一个当前的时间戳JNIEXPORT jobject JNICALL Java_com_example_jni_JNITest_accessConstructor(JNIEnv *env, jobject jobj){    jclass cla = (*env)-&gt;FindClass(env,&quot;java/util/Date&quot;);    //jmethodID,构造方法的方法名称固定为&quot;&lt;init&gt;&quot;    jmethodID constructor_mid = (*env)-&gt;GetMethodID(env,cls,&quot;&lt;init&gt;&quot;,&quot;()V&quot;);    //实例化一个Date对象    jobject date_obj = (*env)-&gt;NewObject(env,cls,constructor_mid);    //调用getTime方法    jmehoodID mid = (*env)-&gt;GetMethodID(env,cls,&quot;getTime&quot;,&quot;()J&quot;);    //调用    jlong time =     (*env)-&gt;CallLongMethod(env,date_obj,mid);    //time 为long long类型    printf(&quot;time: %lld\n&quot;,time);    return date_obj;}</code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h3 id="6、访问父类的方法"><a href="#6、访问父类的方法" class="headerlink" title="6、访问父类的方法"></a>6、访问父类的方法</h3><hr><ul><li>编写父类文件</li></ul><pre><code>public class Human {    public void sayHi(){        System.out.println(&quot;Human say Hi...&quot;);    }}public class man extends Human{    @override    public void sayHi(){        System.out.println(&quot;Man say Hi,How are you?&quot;);    }}</code></pre><ul><li>编写JNITest.java文件</li></ul><pre><code>public class JNITest {    public Human human = new Man();    public native void accessNonvirtualMethod();    public static void main(String[] args){        JNITest t = new JNITest();        t.accessNonvirtualMethod();    }    static {        System.loadLibrary(&quot;JNIProject&quot;);    }}</code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre><code>javap -s -p com.example.jni.JNITest</code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */#include &quot;jni.h&quot;/* Header for class com_example_jni_JNITest */#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; {#endif/* * Class:     com_example_jni_JNITest * Method:    accessNonvirtualMethod * Signature:  */JNIEXPORT jobject JNICALL Java_com_example_jni_JNITest_accessNonvirtualMethod(JNIEnv *, jobject);#ifdef __cplusplus}#endif#endif</code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre><code>#include &quot;com_example_jni_JNITest.h&quot;//调用父类的方法 JNIEXPORT jobject JNICALL Java_com_example_jni_JNITest_accessNonvirtualMethod(JNIEnv *env, jobject jobj){    jclass cls = (*env)-&gt;GetObjectClass(env,jobj);    //获取Man属性    jfieldID fid =    (*env)-&gt;GetFieldID(env,cls,&quot;human&quot;,&quot;Lcom/example/jni/Human;&quot;);    jobject human_obj = (*env)-&gt;GetObjectField(env,jobj,fid);    //执行sayHi方法    //传父类的父类    jclass human_cls = (*env)-&gt;FindClass(env,&quot;com/example/jni/Human&quot;);    jmethodID  mid = (*env)-&gt;GetMethodID(env,human_cls,&quot;sayHi&quot;,&quot;()V&quot;);    //执行子类方法    (*env)-&gt;CallObjectMethod(env,human_obj,mid);    //执行父类方法    (*env)-&gt;CallNonvirtualObjectMethod(env,human_obj,human_cls,mid);}</code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h2 id="三、JNI字符串乱码问题"><a href="#三、JNI字符串乱码问题" class="headerlink" title="三、JNI字符串乱码问题"></a>三、JNI字符串乱码问题</h2><ul><li>编写JNITest.java文件</li></ul><pre><code>public class JNITest {    public native String chineseChars(String in);    public static void main(String[] args){        JNITest t = new JNITest();        String outStr = t.chineseChars(&quot;传入一串中文&quot;);        System.out.println(outStr);    }    static {        System.loadLibrary(&quot;JNIProject&quot;);    }}</code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre><code>javap -s -p com.example.jni.JNITest</code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */#include &quot;jni.h&quot;/* Header for class com_example_jni_JNITest */#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; {#endif/* * Class:     com_example_jni_JNITest * Method:    chineseChars * Signature:  */JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_chineseChars(JNIEnv *, jobject,jstring);#ifdef __cplusplus}#endif#endif</code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre><code>#include &quot;com_example_jni_JNITest.h&quot;//中文问题JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_chineseChars(JNIEnv *env, jobject jobj, jstring in) {    char *c_str = (*env)-&gt;GetStringUTFChars(env, in, NULL);    printf(&quot;%s\n&quot;, c_str);    char *c_str_out = &quot;传出一段文字&quot;;    //NewStringUTF 是utf-16编码    jstring j_str = (*env)-&gt;NewStringUTF(env, c_str_out);    //使用Java处理乱码问题    jclass jcls = (*env)-&gt;FindClass(env, &quot;java/lang/String&quot;);    //jmethodID    jmethodID c_mid = (*env)-&gt;GetMethodID(env, jcls, &quot;&lt;init&gt;&quot;, &quot;([BLjava/lang/String;)V&quot;);    //byte[]数组    //jbyteArray -&gt; char[]    jbyteArray bytes = (*env)-&gt;NewByteArray(env, strlen(c_str_out));    //byte数组赋值    (*env)-&gt;SetByteArrayRegion(env, bytes, 0, strlen(c_str_out), c_str_out);    //字符编码    jstring charsetName = (*env)-&gt;NewStringUTF(env, &quot;GB2312&quot;);    //调用构造函数，返回编码之后的字符串    return (*env)-&gt;NewObject(env, jcls, c_mid, bytes, charsetName);}</code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul><h2 id="四、JNI数组处理，传入一个数组，返回另一个数组"><a href="#四、JNI数组处理，传入一个数组，返回另一个数组" class="headerlink" title="四、JNI数组处理，传入一个数组，返回另一个数组"></a>四、JNI数组处理，传入一个数组，返回另一个数组</h2><ul><li>编写JNITest.java文件</li></ul><pre><code>public class JNITest {    public native int[] sortArray(int[] array);    public static void main(String[] args){        JNITest t = new JNITest();        int[] arr = new int[]{6,8,1,17,23,12,65,32};        int newArr = t.sortArray();        for (int i : arr) {            System.out.println(i);        }        System.out.println(&quot;返回的新数组为：&quot;);         for (int i : newArr) {            System.out.println(i);        }    }    static {        System.loadLibrary(&quot;JNIProject&quot;);    }}</code></pre><ul><li>在com_example_jni_JNITest.h文件声明对应的方法；签名可通过下面的命令获取</li></ul><pre><code>javap -s -p com.example.jni.JNITest</code></pre><p>产生的结果中有对应的属性和方法的签名</p><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */#include &quot;jni.h&quot;/* Header for class com_example_jni_JNITest */#ifndef _Included_com_example_jni_JNITest#define _Included_com_example_jni_JNITest#ifdef __cplusplusextern &quot;C&quot; {#endif/* * Class:     com_example_jni_JNITest * Method:    sortArray * Signature:  */JNIEXPORT jintArray JNICALL Java_com_example_jni_JNITest_sortArray(JNIEnv *, jobject,jintArray);#ifdef __cplusplus}#endif#endif</code></pre><ul><li>在JNITest.c文件实现com_example_jni_JNITest.h中声明的方法</li></ul><pre><code>#include &quot;com_example_jni_JNITest.h&quot;#include &lt;stdlib.h&gt;int compare(int *a,int *b){    return (*a) - (*b);}//数组处理JNIEXPORT jintArray JNICALL Java_com_example_jni_JNITest_sortArray(JNIEnv *env, jobject jobj, jintArray arr) {    //拿到 jintArray 的指针 -&gt; 得到 c int 数组    jint *elems = (*env)-&gt;GetIntArrayElements(env,arr,NULL);    //数组的长度    int len = (*env)-&gt;GetArrayLength(env,arr);    //排序    qsort(elems, len, sizeof(jint), compare);    //同步,第4个参数：    //JNI_OK(0)：Java数组进行更新，并且释放C/C++数组    //JNI_COMMIT(1):Java数组进行更新，不释放C/C++数组（函数执行完数组会释放）    //JNI_ABOUT：Java数组不进行更新，但释放C/C++数组    (*env)-&gt;ReleaseIntArrayElements(env, arr, elems,JNI_COMMIT);    //将原数组倒序生成一个新的数组    jintArray jint_new_arr = (*env)-&gt;NewIntArray(env,len);    jint *new_elems = (*env)-&gt;GetIntArrayElements(env,jint_new_arr,NULL);    int i = len-1;    for(; i &gt;= 0; i--){        int j = len-1-i;        new_elems[j] = elems[i];    }    //同步    (*env)-&gt;ReleaseIntArrayElements(env, jint_new_arr, new_elems, JNI_COMMIT);    return jint_new_arr;}</code></pre><ul><li>将c代码生成解决文件（动态库.dll）</li><li>将动态库文件拷贝到java项目根路径下</li><li>运行JNITest.java ，即可看到输出结果。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> JNI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> JNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNI 开发流程</title>
      <link href="/20180915/jni/yi-jni-kai-fa-liu-cheng/"/>
      <url>/20180915/jni/yi-jni-kai-fa-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="JNI-开发流程"><a href="#JNI-开发流程" class="headerlink" title="JNI 开发流程"></a>JNI 开发流程</h1><h2 id="一、C-语言执行的流程"><a href="#一、C-语言执行的流程" class="headerlink" title="一、C 语言执行的流程"></a>一、C 语言执行的流程</h2><ol><li>编辑：编写代码的过程。</li><li>预编译（预处理）：为编译做准备工作，完成代码文本的替换工作。</li><li>编译：形成目标代码(.obj)。</li><li>连接：将目标代码与C 函数库连接合并，形成最终的可执行文件。</li><li>执行：执行可执行文件。</li></ol><h2 id="二、头文件"><a href="#二、头文件" class="headerlink" title="二、头文件"></a>二、头文件</h2><h3 id="1、头文件的作用"><a href="#1、头文件的作用" class="headerlink" title="1、头文件的作用"></a>1、头文件的作用</h3><p><strong>头文件告诉编译器有这样一个函数，连接器负责找到这个函数的实现</strong></p><h3 id="2、自定义头文件"><a href="#2、自定义头文件" class="headerlink" title="2、自定义头文件"></a>2、自定义头文件</h3><p><strong>*注：开发工具为 Visual Studio 2017</strong></p><h4 id="1、创建-h-文件，对相应方法进行声明。"><a href="#1、创建-h-文件，对相应方法进行声明。" class="headerlink" title="1、创建 .h 文件，对相应方法进行声明。"></a>1、创建 .h 文件，对相应方法进行声明。</h4><p>例如：创建 math.h</p><pre><code>#ifndef _MATH_H  //如果没有定义 _MATH_H 标识#define _MATH_H  //定义 _MATH_H 标识int add(int, int, int);#endif</code></pre><p>或</p><pre><code>//该头文件只被包含一次，让编译器自己处理好循环包含问题#pragma once int add(int, int, int);</code></pre><h4 id="2、在-h-文件同级目录下创建对应的-c-文件，对-h-文件中声明的方法进行实现。"><a href="#2、在-h-文件同级目录下创建对应的-c-文件，对-h-文件中声明的方法进行实现。" class="headerlink" title="2、在 .h 文件同级目录下创建对应的 .c 文件，对 .h 文件中声明的方法进行实现。"></a>2、在 .h 文件同级目录下创建对应的 .c 文件，对 .h 文件中声明的方法进行实现。</h4><p>例如：创建 head.c </p><pre><code>#define _CRT_SECURE_NO_WARNINGS#include &quot;math.h&quot;#include &lt;stdio.h&gt;int add(int a, int b, int c){   int result = 0;   result = a + b + c;   return result;}</code></pre><h4 id="3、创建一个C文件，进行验证头文件是否编写成功。"><a href="#3、创建一个C文件，进行验证头文件是否编写成功。" class="headerlink" title="3、创建一个C文件，进行验证头文件是否编写成功。"></a>3、创建一个C文件，进行验证头文件是否编写成功。</h4><p>例如：创建 test.c</p><pre><code>#include&lt;stdio.h&gt;#include &quot;math.h&quot;void main(){    int a = 3, b = 4, c = 5, result = 0;    result = add(a, b, c);    printf(&quot;The result is %d!\n&quot;, result);    system(&quot;pause&quot;);}</code></pre><h2 id="三、define-指令"><a href="#三、define-指令" class="headerlink" title="三、define 指令"></a>三、define 指令</h2><h3 id="1、define-指令的作用"><a href="#1、define-指令的作用" class="headerlink" title="1、define 指令的作用"></a>1、define 指令的作用</h3><ol><li>define 指令用来定义标识；<br> 如：** #ifdef __cplusplus 标识支持C++语法；防止文件重复引入**</li><li>define 指令用来定义常数；如：<strong>#define MAX 100</strong></li><li>define 指令用来定义“宏函数”。<br>如：</li></ol><pre><code>void jni_read(){    printf(&quot;read\n&quot;);}void jni_write(){    printf(&quot;write\n&quot;);}/** * 宏函数 */#define jin(NAME) jni_##NAME();void main(){    jni(read);    jni(write);    getchar();}</code></pre><p>日志输出示例：</p><pre><code>/** *__VA_ARGS__    可变参数 */#define LOG(FOTMAT,...) printf(##FOTMAT,__VA_ARGS__);printf(&quot;\n&quot;);void main(){    LOG(&quot;%s: %d&quot;,&quot;size&quot;,99);    getchar();}</code></pre><h2 id="四、JNI-Java-Native-Interface"><a href="#四、JNI-Java-Native-Interface" class="headerlink" title="四、JNI (Java Native Interface)"></a>四、JNI (Java Native Interface)</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p>*<em>Java 调用C/C++或者C/C++调用 Java 的一套 API *</em></p><h3 id="2、Java调用C-C-项目开发步骤（Windows系统下）"><a href="#2、Java调用C-C-项目开发步骤（Windows系统下）" class="headerlink" title="2、Java调用C/C++项目开发步骤（Windows系统下）"></a>2、Java调用C/C++项目开发步骤（Windows系统下）</h3><ul><li><p>编写native方法</p><pre><code>package com.example.jni;public class JNITest {  public native static String getStringFromC();  public static void main(String[] args){  }}</code></pre></li><li><p>javah命令，生成.h文件</p><pre><code>javah com.example.jni.JNITest//生成 com_example_jni_JNITest.h 文件</code></pre></li><li><p>复制.h头文件到CPP工程中</p></li><li><p>复制jni.h和jni_md.h文件到CPP工程中</p></li><li><p>实现.h头文件中声明的函数；C函数名称：Java_完整类名_函数名</p></li></ul><pre><code>//JNITest.c#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_getStringFromC(JNIEnv *jEnv, jclass jcls) {    //简单实现，将C的字符传转成Java的字符串    return (*jEnv)-&gt;NewStringUTF(jEnv, &quot;C String&quot;);}</code></pre><ul><li>生成动态库.dll文件(Windows环境下默认dll，Linux环境下默认为so)</li><li>配置D:\dll 目录到环境变量，并将刚刚生成的 .dll 文件复制到D:\dll 目录下；或者复制到项目根目录下；</li><li>重启Eclipse，使用IDEA的需要在项目运行配置中的 VM options 中增加配置：<br>```<br>// VM options:</li><li>Djava.library.path=D:\dll<pre><code></code></pre></li></ul><h2 id="五、JNIEnv"><a href="#五、JNIEnv" class="headerlink" title="五、JNIEnv"></a>五、JNIEnv</h2><h3 id="1、JNIEnv-是什么"><a href="#1、JNIEnv-是什么" class="headerlink" title="1、JNIEnv 是什么"></a>1、JNIEnv 是什么</h3><ul><li><strong>在C语言中JNIEnv是一个结构体指针，代表Java运行环境，主要是调用Java中的代码，在上面JNITest.c中实现函数声明的时候，jEnv 是一个二级指针</strong></li></ul><pre><code>//JNITest.c#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_getStringFromC(JNIEnv *jEnv, jclass jcls) {    //简单实现，将C的字符传转成Java的字符串    return (*jEnv)-&gt;NewStringUTF(jEnv, &quot;C String&quot;);}</code></pre><ul><li><strong>在C++中JNIEnv是一个结构体的别名，代表Java运行环境，主要是调用Java中的代码，jEnv 是一个结构体的一级指针</strong></li></ul><pre><code>//JNITest.cpp#include &quot;com_example_jni_JNITest.h&quot;JNIEXPORT jstring JNICALL Java_com_example_jni_JNITest_getStringFromC(JNIEnv *jEnv, jclass jcls) {    //简单实现，将C的字符传转成Java的字符串    return jEnv-&gt;NewStringUTF(&quot;C String&quot;);}</code></pre><p>模拟C 的实现</p><pre><code>//JNIEnv 是结构体指针的别名typedef struct JNINativeInferface_* JNIEnv;//结构体struct JNINativeInferface_{    char* (*NewStringUTF)(JNIEnv*,char*);};//函数实现char* NewStringUTF(JNIEnv* env,char* str){    return str;}void main(){    //实例化结构体    struct JNINativeInferface_ struct_env;    struct_env.NewStringUTF = NewStringUTF;    //结构体指针    JNIEnv e = &amp;struct_env;    //结构体的二级指针    JNIEnv *env = &amp;e;    //通过二级指针调用函数    char* str = (*env)-&gt;NewStringUTF(env,&quot;Hello&quot;);    printf(&quot;str = %s\n&quot;,str);    getchar();}</code></pre><h3 id="2、JNIEnv-调用函数时C和C-的区别"><a href="#2、JNIEnv-调用函数时C和C-的区别" class="headerlink" title="2、JNIEnv 调用函数时C和C++的区别"></a>2、JNIEnv 调用函数时C和C++的区别</h3><ul><li>C 中需要传入 JNIEnv ，因为函数执行过程中需要 JNIEnv</li><li>C++ 中不需要传入 JNIEnv ，是因为C++中有 this，相当与JNIEnv</li><li>C++只是针对C的那一套进行分装，给一个变量赋值为指针，这个变量是二级指针</li></ul><h2 id="六、jclass"><a href="#六、jclass" class="headerlink" title="六、jclass"></a>六、jclass</h2><p>每个native函数（C中的函数），都至少有两个参数(JNIEnv* jclass或者jobject)。</p><ul><li>当native方法为静态方法时：jclass代表native 方法所属类的class对象（JNITest.class）；</li><li>当 native 方法为非静态方法时：jobject 代表 native 方法所属的对象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> JNI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> JNI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（五）C语言之联合体，枚举与IO</title>
      <link href="/20180910/c-c/wu-c-yu-yan-zhi-lian-he-ti-mei-ju-yu-io/"/>
      <url>/20180910/c-c/wu-c-yu-yan-zhi-lian-he-ti-mei-ju-yu-io/</url>
      
        <content type="html"><![CDATA[<h1 id="（五）C语言之联合体，枚举与IO"><a href="#（五）C语言之联合体，枚举与IO" class="headerlink" title="（五）C语言之联合体，枚举与IO"></a>（五）C语言之联合体，枚举与IO</h1><h2 id="一、联合体（共用体）"><a href="#一、联合体（共用体）" class="headerlink" title="一、联合体（共用体）"></a>一、联合体（共用体）</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p> <strong>不同类型的变量共同占用一段内存（相互覆盖），联合变量任何时刻只有一个成员存在，节省内存</strong></p><h3 id="2、大小"><a href="#2、大小" class="headerlink" title="2、大小"></a>2、大小</h3><p> <strong>联合体变量的大小=最大的成员所占的字节数</strong></p><pre><code> union MyValue{     int x;     int y;     double z; }; void main(){     union MyValue d1;     d1.x = 90;     d1.y = 100;     printf(&quot;%d,%d,%lf\n&quot;,d1.x,d1.y,d1.z);     d1.z = 25.8;     printf(&quot;%d,%d,%lf\n&quot;,d1.x,d1.y,d1.z);     getchar(); }</code></pre><p>输出结果为：</p><pre><code>100,100,-92559592117433135502616407313071917486139351398276445610442752.000000-858993459,-858993459,25.800000</code></pre><p>根据上面代码可得出结论：<strong>在联合体中，最后一次赋值有效</strong></p><h2 id="二、枚举"><a href="#二、枚举" class="headerlink" title="二、枚举"></a>二、枚举</h2><h3 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h3><p><strong>“枚举”就是把可能的值（固定的数据）一一的列举出来，变量的值只限于列举出来的值的范围</strong></p><p>例如：</p><pre><code>enum Day{    Monday,    Tuesday,    Wednesday,    Thursday,    Friday,    Saturday,    Sunday};void main(){    enum Day d = Wednesday;    printf(&quot;Today is %d,%#x\n&quot;,d,&amp;d);    getchar();}</code></pre><h2 id="三、IO操作"><a href="#三、IO操作" class="headerlink" title="三、IO操作"></a>三、IO操作</h2><h3 id="1、读取文本文件"><a href="#1、读取文本文件" class="headerlink" title="1、读取文本文件"></a>1、读取文本文件</h3><p><a href="http://www.cplusplus.com/reference/cstdio/fopen/" target="_blank" rel="noopener">参考文档</a></p><p>读取文件的方法为:</p><p><strong>FILE * fopen(char * path,char * model)</strong></p><pre><code>void main(){    char path[] = &quot;D:\\test.txt&quot;;    //打开     FILE *fp = fopen(path,&quot;r&quot;);    if(fp == NULL){        printf(&quot;文件打开失败...\n&quot;);        return;    }    //读取    char buff[50];//缓冲    while(fgets(buff,50,fp)){        printf(&quot;%s&quot;,buff);    }    //关闭    fclose(fp);    getchar();}</code></pre><h3 id="2、写入文本文件"><a href="#2、写入文本文件" class="headerlink" title="2、写入文本文件"></a>2、写入文本文件</h3><p><a href="http://www.cplusplus.com/reference/cstdio/fputs/" target="_blank" rel="noopener">参考文档</a></p><p>写入文件的方法为:</p><p><strong>fputs(char * text,FILE * _file)</strong></p><pre><code>void main(){    char path[] = &quot;D:\\test_new.txt&quot;;    //打开     FILE *fp = fopen(path,&quot;w&quot;);    if(fp == NULL){        printf(&quot;文件打开失败...\n&quot;);        return;    }    //写入    char *text = &quot;How are you?\nI am fine,Thank You!&quot;;    fputs(text,fp);    //关闭    fclose(fp);    getchar();}</code></pre><h3 id="3、操作二进制文件"><a href="#3、操作二进制文件" class="headerlink" title="3、操作二进制文件"></a>3、操作二进制文件</h3><ul><li><p>计算机的文件存储在物理上都是二进制；文本文件和二进制之分，其实是一个逻辑之分</p></li><li><p>C读写文本文件与二进制文件的差别仅仅体现在回车换行符</p></li><li><p>写文本时，每遇到一个’\n’,会将其转换成’\r\n’,(回车换行)</p></li><li><p>读文本时，每遇到一个’\r\n’,会将其转换成’\n’</p></li></ul><p><strong>size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );</strong><br><a href="http://www.cplusplus.com/reference/cstdio/fread/" target="_blank" rel="noopener">参考文档</a><br><strong>参数：</strong></p><ul><li>ptr :<br>指向大小至少为（size * count）个字节的内存块的指针，转换为void *。</li><li>size :<br>要读取的每个元素的大小（以字节为单位）。<br>size_t是无符号整数类型。</li><li>count :<br>元素数量，每个元素的大小为字节大小。<br>size_t是无符号整数类型。</li><li>stream:<br>指向指定输入流的FILE对象的指针。</li></ul><p><strong>size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );</strong><br><a href="http://www.cplusplus.com/reference/cstdio/fwrite/" target="_blank" rel="noopener">参考文档</a><br><strong>参数：</strong></p><ul><li><p>ptr :<br>指向大小至少为（size * count）个字节的内存块的指针，转换为void *。</p></li><li><p>size :<br>要读取的每个元素的大小（以字节为单位）。<br>size_t是无符号整数类型。</p></li><li><p>count :<br>元素数量，每个元素的大小为字节大小。<br>size_t是无符号整数类型。</p></li><li><p>stream:<br>指向指定输入流的FILE对象的指针。</p><pre><code>void main(){  char read_path[] = &quot;D:\\avatar.jpg&quot;;  char write_path[] = &quot;D:\\avatar_new.jpg&quot;;  //读的文件,b字符表示操作二进制文件（binary）  FILE *read_fp = fopen(read_path,&quot;rb&quot;);  //写的文件  FILE *write_fp = fopen(write_path,&quot;wb&quot;);;  //复制  int buff[50];//缓冲区域  int len = 0;//每次读到的内容的长度  while((len = fread(buff,sizeof(int),50,read_fp))!=0){      //将读取到的内容写入新文件      fwrite(buff,sizeof(int),50,write_fp);  }  //关闭  fclose(read_fp);   fclose(write_fp);  getchar();}</code></pre></li></ul><h3 id="4、获取文件的大小"><a href="#4、获取文件的大小" class="headerlink" title="4、获取文件的大小"></a>4、获取文件的大小</h3><p><strong>重新定位文件指针：</strong></p><p><strong>int fseek ( FILE * stream, long int offset, int origin );</strong></p><p>参数：</p><ul><li>stream：<br>指向标识流的FILE对象的指针。</li><li>offset：<br>二进制文件：从原点偏移的字节数。<br>文本文件：零或ftell返回的值</li><li>origin：<br>位置用作偏移的参考。 它由<cstdio>中定义的以下常量之一指定，专门用作此函数的参数：</li></ul><table><thead><tr><th>Constant</th><th>Reference position</th></tr></thead><tbody><tr><td>SEEK_SET</td><td>文件开头</td></tr><tr><td>SEEK_CUR</td><td>文件指针的当前位置</td></tr><tr><td>SEEK_END</td><td>文件结束</td></tr><tr><td>*允许库实现无意义地支持SEEK_END（因此，使用它的代码没有真正的标准可移植性）。</td><td></td></tr></tbody></table><p><strong>返回当前的文件指针，相对于文件开头的位移量：</strong></p><p><strong>long ftell ( FILE * stream);</strong></p><pre><code>void main(){    char read_path[] = &quot;D:\\avatar.jpg&quot;;    FILE *fp = fopen(read_path,&quot;r&quot;);    //重新定位文件指针    fseek(fp,0,SEEK_END);    //返回当前的文件指针，相对于文件开头的位移量    long filesize = ftell(fp);    printf(&quot;filesize = %d\n&quot;,filesize);    getchar();}</code></pre><h3 id="5、文本文件的加密解密"><a href="#5、文本文件的加密解密" class="headerlink" title="5、文本文件的加密解密"></a>5、文本文件的加密解密</h3><pre><code>//加密void crpypt(char normal_path[], char crypt_path[]) {    //打开文件    FILE *normal_fp = fopen(normal_path, &quot;r&quot;);    FILE *crypt_fp = fopen(crypt_path, &quot;w&quot;);    //一次读取一个字符    int ch;    while ((ch = fgetc(normal_fp)) != EOF) {//End of FILE        //加密        fputc(ch ^ 9, crypt_fp);    }    fclose(normal_fp);    fclose(crypt_fp);}//解密void decrpypt(char crypt_path[], char decrpypt_path[]) {    //打开文件    FILE *crypt_fp = fopen(crypt_path, &quot;r&quot;);    FILE *decrpypt_fp = fopen(decrpypt_path, &quot;w&quot;);    //一次读取一个字符    int ch;    while ((ch = fgetc(crypt_fp)) != EOF) {//End of FILE        //加密        fputc(ch ^ 9, decrpypt_fp);    }    fclose(crypt_fp);    fclose(decrpypt_fp);}void main() {    char normal_path[] = &quot;D:\\test.txt&quot;;    char crypt_path[] = &quot;D:\\test_crypt.txt&quot;;    char decrypt_path[] = &quot;D:\\test_decrypt.txt&quot;;    crpypt(normal_path, crypt_path);    decrpypt(crypt_path, decrypt_path);    getchar();}</code></pre><h3 id="6、二进制文件的加密解密"><a href="#6、二进制文件的加密解密" class="headerlink" title="6、二进制文件的加密解密"></a>6、二进制文件的加密解密</h3><p><strong>读取二进制文件中的数据时，一个一个字符读取</strong><br>密码：qazwsx</p><pre><code>//加密void crpypt(char normal_path[], char crypt_path[], char password[]) {    //打开文件    FILE *normal_fp = fopen(normal_path, &quot;rb&quot;);    FILE *crypt_fp = fopen(crypt_path, &quot;wb&quot;);    //一次读取一个字符    int ch;    int i = 0;    int pwd_len = strlen(password);    while ((ch = fgetc(normal_fp)) != EOF) {//End of FILE        //加密        fputc(ch ^ password[i % pwd_len], crypt_fp);        i++;    }    fclose(normal_fp);    fclose(crypt_fp);}//解密void decrpypt(char crypt_path[], char decrpypt_path[], char password[]) {    //打开文件    FILE *crypt_fp = fopen(crypt_path, &quot;rb&quot;);    FILE *decrpypt_fp = fopen(decrpypt_path, &quot;wb&quot;);    //一次读取一个字符    int ch;    int i = 0;    int pwd_len = strlen(password);    while ((ch = fgetc(crypt_fp)) != EOF) {//End of FILE        //加密        fputc(ch ^ password[i % pwd_len], decrpypt_fp);        i++;    }    fclose(crypt_fp);    fclose(decrpypt_fp);}void main() {    char password[] =&quot;qazwsx&quot;;    char normal_path[] = &quot;D:\\avatar.jpg&quot;;    char crypt_path[] = &quot;D:\\avatar_crypt.jpg&quot;;    char decrypt_path[] = &quot;D:\\avatar_decrypt.jpg&quot;;    crpypt(normal_path, crypt_path,password);    decrpypt(crypt_path, decrypt_path,password);    getchar();}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（四）C语言之结构体</title>
      <link href="/20180903/c-c/si-c-yu-yan-zhi-jie-gou-ti/"/>
      <url>/20180903/c-c/si-c-yu-yan-zhi-jie-gou-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="（四）C语言之结构体"><a href="#（四）C语言之结构体" class="headerlink" title="（四）C语言之结构体"></a>（四）C语言之结构体</h1><h2 id="一、什么是结构体"><a href="#一、什么是结构体" class="headerlink" title="一、什么是结构体"></a>一、什么是结构体</h2><p>结构体是一种构造数据类型，就是把不同的数据类型整合起来成为一个自定义的数据类型</p><h2 id="二、初始化结构体的变量"><a href="#二、初始化结构体的变量" class="headerlink" title="二、初始化结构体的变量"></a>二、初始化结构体的变量</h2><h3 id="1-第一种初始化方式"><a href="#1-第一种初始化方式" class="headerlink" title="1. 第一种初始化方式"></a>1. 第一种初始化方式</h3><p>struct [结构体类型] [结构体变量名] = {[结构体内参数实例化值]</p><h3 id="2-第二种初始化方式"><a href="#2-第二种初始化方式" class="headerlink" title="2. 第二种初始化方式"></a>2. 第二种初始化方式</h3><p>struct [结构体类型] [结构体变量名] ;</p><p>[结构体变量名].[结构体参数名] = [实例化值];</p><p>例如：</p><pre><code>struct Man{    char name[20];    int age;    char* mobile;};void main() {    struct Man m1 = { &quot;Jack&quot;,20 ,&quot;18800008888&quot;};    printf(&quot;%s,%d,%s\n&quot;, m1.name, m1.age,m1.mobile);    //或    struct Man m2 ;    //m2.name 数组类型不能直接复制    strcpy(m2.name, &quot;Rose&quot;);    m2.age = 23;    m2.mobile = &quot;16600001111&quot;;    printf(&quot;%s,%d,%s\n&quot;, m2.name, m2.age,m2.mobile);    getchar();}</code></pre><p>输出：</p><pre><code>Jack,20,18800008888Rose,23,16600001111</code></pre><h2 id="三、结构体的几种写法"><a href="#三、结构体的几种写法" class="headerlink" title="三、结构体的几种写法"></a>三、结构体的几种写法</h2><h3 id="1、第一种写法"><a href="#1、第一种写法" class="headerlink" title="1、第一种写法"></a>1、第一种写法</h3><p>例如：</p><pre><code>struct Man{    char name[20];    int age;};void main() {    struct Man m1 = { &quot;Jack&quot;,20};    printf(&quot;%s,%d\n&quot;, m1.name, m1.age);    getchar();}</code></pre><h3 id="2、第二种写法，可以在结构体类型的-后，定义结构体变量名，也可以对结构体变量名进行初始化。"><a href="#2、第二种写法，可以在结构体类型的-后，定义结构体变量名，也可以对结构体变量名进行初始化。" class="headerlink" title="2、第二种写法，可以在结构体类型的}后，定义结构体变量名，也可以对结构体变量名进行初始化。"></a>2、第二种写法，可以在结构体类型的}后，定义结构体变量名，也可以对结构体变量名进行初始化。</h3><p>例如：</p><pre><code>struct Man {    char* name;    int age;} Man,m2={&quot;jack&quot;,20};void main() {    Man.name = &quot;Tom&quot;;    Man.age = 19;    printf(&quot;%s,%d\n&quot;, Man.name,Man    .age);    getchar();}</code></pre><h3 id="3、第三种写法-匿名结构体-控制结构体变量的个数（限量版），相当于单例"><a href="#3、第三种写法-匿名结构体-控制结构体变量的个数（限量版），相当于单例" class="headerlink" title="3、第三种写法:匿名结构体,控制结构体变量的个数（限量版），相当于单例"></a>3、第三种写法:匿名结构体,控制结构体变量的个数（限量版），相当于单例</h3><p>例如：</p><pre><code>struct  {    char* name;    int age;} Woman;void main() {    Woman.name = &quot;Lili&quot;;    Woman.age = 19;    printf(&quot;%s,%d\n&quot;, Woman.name,Woman    .age);    getchar();}</code></pre><h2 id="四、结构体嵌套"><a href="#四、结构体嵌套" class="headerlink" title="四、结构体嵌套"></a>四、结构体嵌套</h2><p>结构体是可以进行嵌套使用的,可以分别定义使用，或者在一个结构体中定义另一个结构体</p><h3 id="1、分别定义结构体嵌套"><a href="#1、分别定义结构体嵌套" class="headerlink" title="1、分别定义结构体嵌套"></a>1、分别定义结构体嵌套</h3><p>例如：</p><pre><code>// 老师的结构体struct Teacher {    char name[20];};// 学生的结构体struct Student {    char name[20];    int age;    struct Teacher t;};void main() {    struct Student s1 = { &quot;jack&quot;,21,{&quot;Jason&quot;} };    struct Student s2;    strcpy(s2.name, &quot;Tom&quot;);    s2.age = 23;    strcpy(s2.t.name, &quot;Jason&quot;);    getchar();}</code></pre><h3 id="2、结构体内定义结构体嵌套"><a href="#2、结构体内定义结构体嵌套" class="headerlink" title="2、结构体内定义结构体嵌套"></a>2、结构体内定义结构体嵌套</h3><p>例如：</p><pre><code>// 学生的结构体struct Student {    char name[20];    int age;    // 老师的结构体    struct Teacher {        char name[20];    } t;};void main() {    struct Student s1 = { &quot;jack&quot;,21,{&quot;Jason&quot;} };    struct Student s2;    strcpy(s2.name, &quot;Tom&quot;);    s2.age = 23;    strcpy(s2.t.name, &quot;Jason&quot;);    getchar();}</code></pre><h2 id="五、结构体与指针"><a href="#五、结构体与指针" class="headerlink" title="五、结构体与指针"></a>五、结构体与指针</h2><p>结构体变量也可以使用指针进行操作，”p-&gt;”是”(*p).”的简写形式</p><p>例如：</p><pre><code>struct Man{    char name[20];    int age;};void main(){    struct Man m1 = {&quot;Jack&quot;,30};    //结构体指针    struct Man *p = &amp;m1;    printf(&quot;%s,%d\n&quot;,(*p).name,(*p).age);    //&quot;p-&gt;&quot;是&quot;(*p).&quot;的简写形式    printf(&quot;%s,%d\n&quot;,p-&gt;name,p-&gt;age);    getchar();}</code></pre><h2 id="六、结构体数组与指针"><a href="#六、结构体数组与指针" class="headerlink" title="六、结构体数组与指针"></a>六、结构体数组与指针</h2><p>结构体变量也可以使用指针进行操作，”p-&gt;”是”(*p).”的简写形式</p><p>例如：</p><pre><code>struct Man {    char name[20];    int age;};void main() {    struct Man mans[] = { {&quot;Jack&quot;,30},{&quot;Rose&quot;,19} };    //遍历数组    struct Man *p = mans;    for (; p &lt; mans + 2; p++) {        printf(&quot;%s,%d\n&quot;, p-&gt;name, p-&gt;age);    }    int i = 0;    for (; i &lt; sizeof(mans) / sizeof(struct Man); i++) {        printf(&quot;%s,%d\n&quot;, mans[i].name, mans[i].age);    }    getchar();}</code></pre><h2 id="七、结构体的大小（字节对齐）"><a href="#七、结构体的大小（字节对齐）" class="headerlink" title="七、结构体的大小（字节对齐）"></a>七、结构体的大小（字节对齐）</h2><p><strong>结构体的大小必须是结构体中最宽基本数据类型的整数倍</strong></p><p><strong>牺牲一定的存储空间（本需要12字节的空间，实际分配16字节，（最宽基本数据类型的整数倍）），提升读取的效率</strong></p><p>例如：</p><pre><code>struct Man {    int age;    double weight;};void main() {    struct Man m1 = { 20,80.9 };    printf(&quot;%#x,%d\n&quot;, &amp;m1,sizeof(m1));    getchar();}</code></pre><p>输出：</p><pre><code>0xcffcc4,16</code></pre><h2 id="八、结构体与动态内存分配"><a href="#八、结构体与动态内存分配" class="headerlink" title="八、结构体与动态内存分配"></a>八、结构体与动态内存分配</h2><pre><code>struct Man{    char *name;    int age;};void main(){    struct Man *man_p = (struct Man*)malloc(sizeof(struct Man)*10);    struct Man *p = man_p;    //赋值    p-&gt;name = &quot;Jack&quot;;    p-&gt;age = 20;    p++;    p-&gt;name = &quot;Rose&quot;;    p-&gt;age = 23;    struct Man *loop_p =man_p  ;    for(;loop_p &lt; man_p+2;loop_p++){        printf(&quot;%s,%d\n&quot;,loop_p-&gt;name,loop_p-&gt;age);    }    free(man_p);    getchar();}</code></pre><h2 id="九、typedef-类型取别名"><a href="#九、typedef-类型取别名" class="headerlink" title="九、typedef 类型取别名"></a>九、typedef 类型取别名</h2><p><strong>1、不同的名称代表在干不同的事情；typedef int jint;</strong></p><p><strong>2、不同的情况下，使用不同的别名</strong></p><pre><code>if(_cplusplus){    typedef _JNIEvn JNIEvn;    typedef _JavaVM JavaVM;}</code></pre><p><strong>3、书写简洁</strong></p><pre><code>struct Man{    char *name;    int age;};//Age  int 类型的别名typedef int Age;//Ap int 类型指针的别名typedef int* Ap;typedef struct Man JavaMan;typedef struct Man* JM;//简写typedef struct Woman{    char name[20];    int age;} W,*WP;// W 是Woman结构体的别名；WP 是Woman结构体指针的别名。void main(){    int i = 5;    Ap p = &amp;i;    //结构体变量    W w1 = {&quot;Rose&quot;,25};    //结构体指针    WP wp1 = &amp;w1;    printf(&quot;%s,%d\n&quot;,wp1-&gt;name,wp1-&gt;age);    getchar(); }</code></pre><h2 id="十、结构体函数指针成员"><a href="#十、结构体函数指针成员" class="headerlink" title="十、结构体函数指针成员"></a>十、结构体函数指针成员</h2><pre><code>#include &lt;Windows.h&gt;//Girl 结构体类似于Java中的类，name和age类似于属性，sayHi类似于方法struct Girl{    char *name;    int age;    //函数指针    void(*sayHi) (char*);};void sayHi(char* text){    MessageBoxA(0,text,&quot;title&quot;,0);}void main(){   struct Girl g1;   g1.name = &quot;Lucy&quot;;   g1.age = 18;   g1.sayHi = sayHi;   g1.sayHi(&quot;Hello!&quot;);   getchar(); }</code></pre><p><strong>取别名的写法</strong></p><pre><code>#include &lt;Windows.h&gt;//Girl 结构体类似于Java中的类，name和age类似于属性，sayHi类似于方法typedef struct Girl{    char *name;    int age;    //函数指针    void(*sayHi) (char*);}Girl;//Girl结构体指针取别名typedef Girl* GirlP;void sayHi(char* text){    MessageBoxA(0,text,&quot;title&quot;,0);}void main(){   struct Girl g1 = {&quot;Lucy&quot;,19,sayHi};   GirlP gp1 = &amp;g1;   gp1-&gt;sayHi(&quot;Hello&quot;);   getchar(); }</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（三）C语言之字符串与字符串函数</title>
      <link href="/20180901/c-c/san-c-yu-yan-zhi-zi-fu-chuan-yu-zi-fu-chuan-han-shu/"/>
      <url>/20180901/c-c/san-c-yu-yan-zhi-zi-fu-chuan-yu-zi-fu-chuan-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="（三）C语言之字符串与字符串函数"><a href="#（三）C语言之字符串与字符串函数" class="headerlink" title="（三）C语言之字符串与字符串函数"></a>（三）C语言之字符串与字符串函数</h1><h3 id="字符串与字符串函数"><a href="#字符串与字符串函数" class="headerlink" title="字符串与字符串函数"></a>字符串与字符串函数</h3><h4 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1. 字符串"></a>1. 字符串</h4><ul><li>使用字符数组存储字符串,\0 表示结束符，字符串可以被修改</li></ul><pre><code>void main(){    char str[] = {&#39;c&#39;,&#39;h&#39;,&#39;i&#39;,&#39;n&#39;,&#39;a&#39;,&#39;\0&#39;};    //char str[6] = {&#39;c&#39;,&#39;h&#39;,&#39;i&#39;,&#39;n&#39;,&#39;a&#39;};    //char str[10] = &quot;china&quot;;    printf(&quot;%s\n&quot;,str);    str[0] = &#39;s&#39;;    printf(&quot;%s\n&quot;,str);    printf(&quot;%#x\n&quot;,str);    getchar();}</code></pre><p>输出结果为：</p><pre><code>chinashina0xd9fd64</code></pre><ul><li>使用字符指针存储字符串，字符串不能被修改</li></ul><pre><code>void main(){    //内存连续排列    char *str = &quot;how are you?&quot;;    //字符串不能被修改    //str[0] = &quot;w&quot;;    //    // str += 1;    //*str = &#39;y&#39;;    printf(&quot;%s\n&quot;,str);    printf(&quot;%#x\n&quot;,str);    getchar();}</code></pre><p>输出结果为：</p><pre><code>how are you?0x967be4</code></pre><h4 id="2-字符串相关函数"><a href="#2-字符串相关函数" class="headerlink" title="2. 字符串相关函数"></a>2. 字符串相关函数</h4><p><a href="http://www.kuqin.com/clib/string/strcpy.html" target="_blank" rel="noopener">在线API文档</a></p><ul><li>strcat 字符串拼接函数</li><li>strcpy 字符串复制函数</li></ul><pre><code>void main(){    char dest[50];    char *a = &quot;china&quot;;    char *b = &quot; is powerful!&quot;    //将数组a复制到数组dest中    strcpy(dest,a);    //将数组b拼接到数组dest上    strcat(dest,b);    printf(&quot;%s\n&quot;,dest);    getchar();}</code></pre><p>输出结果为：</p><pre><code>china is powerful!</code></pre><ul><li>strchr 在一个字符串中查找给定字符的第1个匹配的之处</li></ul><pre><code> void main(void){    char *haystack = &quot;I want go to USA!&quot;;    char *needle = &quot;to&quot;;    //U元素的指针    char* p = strstr(haystack, needle);    if (p){        printf(&quot;索引位置：%d\n&quot;, p - haystack);    }    else{        printf(&quot;没有找到&quot;);    }    system(&quot;pause&quot;);}</code></pre><ul><li>strcmp 比较字符串  </li><li>strcmpi 比较字符串，忽略大小写</li></ul><pre><code>void main(void){    char *str1 = &quot;abc&quot;;    char *str2 = &quot;ABC&quot;;    //int r = strcmpi(str1, str2);    int r = _strcmpi(str1, str2);    printf(&quot;%d\n&quot;,r);    //str1 &gt; str2    if (r &gt; 0){        printf(&quot;str1 大于str2\n&quot;);    }    else if (r == 0){        printf(&quot;str1 等于str2\n&quot;);    }    //str1 &lt; str2    else if (r &lt; 0){        printf(&quot;str1 小于str2\n&quot;);    }    system(&quot;pause&quot;);}</code></pre><ul><li>strset 把字符串s中的所有字符都设置成字符c</li></ul><pre><code>void main(void){    char str[] = &quot;internet change the world!&quot;;    _strset(str,&#39;w&#39;);    printf(&quot;%s\n&quot;,str);    system(&quot;pause&quot;);}</code></pre><ul><li>strrev 把字符串s的所有字符的顺序颠倒过来</li></ul><pre><code>void main(void){    char str[] = &quot;internet change the world!&quot;;    _strrev(str);    printf(&quot;%s\n&quot;, str);    system(&quot;pause&quot;);}</code></pre><ul><li>atoi 字符串转为int类型</li><li>atol()：将字符串转换为长整型值</li></ul><pre><code>void main(void){    char* str = &quot;a78&quot;;    //int r = atoi(str);        printf(&quot;%d\n&quot;, r);    system(&quot;pause&quot;);}</code></pre><ul><li>strtod:字符串转为double类型</li></ul><pre><code>void main(void){    char* str = &quot;77b8b&quot;;    char** p = NULL;    //char* p = str + 2;    //参数说明：str为要转换的字符串，endstr 为第一个不能转换的字符的指针    double r = strtod(str,p);    printf(&quot;%lf\n&quot;, r);    printf(&quot;%#x\n&quot;, p);    system(&quot;pause&quot;);}</code></pre><ul><li>strupr转换为大写</li></ul><pre><code>void main(void){    char str[] = &quot;CHINA motherland!&quot;;    _strupr(str);    printf(&quot;%s\n&quot;,str);    system(&quot;pause&quot;);}</code></pre><ul><li>转换为小写</li></ul><pre><code>void mystrlwr(char str[],int len){    int i = 0;    for (; i &lt; len; i++){        //A-Z 字母 a-Z        if (str[i] &gt;= &#39;A&#39; &amp;&amp; str[i] &lt;= &#39;Z&#39;){            str[i] = str[i]-&#39;A&#39; + &#39;a&#39;;        }    }    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）C语言之动态内存分配</title>
      <link href="/20180828/c-c/er-c-yu-yan-zhi-dong-tai-nei-cun-fen-pei/"/>
      <url>/20180828/c-c/er-c-yu-yan-zhi-dong-tai-nei-cun-fen-pei/</url>
      
        <content type="html"><![CDATA[<h1 id="（二）C语言之动态内存分配"><a href="#（二）C语言之动态内存分配" class="headerlink" title="（二）C语言之动态内存分配"></a>（二）C语言之动态内存分配</h1><h3 id="一、静态内存分配"><a href="#一、静态内存分配" class="headerlink" title="一、静态内存分配"></a>一、静态内存分配</h3><h5 id="定义是指定分配的内存长度就是静态内存分配，是在栈内存中分配"><a href="#定义是指定分配的内存长度就是静态内存分配，是在栈内存中分配" class="headerlink" title="定义是指定分配的内存长度就是静态内存分配，是在栈内存中分配"></a>定义是指定分配的内存长度就是静态内存分配，是在栈内存中分配</h5><pre><code>int a[1024];</code></pre><h3 id="二、C语言内存分配"><a href="#二、C语言内存分配" class="headerlink" title="二、C语言内存分配"></a>二、C语言内存分配</h3><h4 id="1、栈区（stack）"><a href="#1、栈区（stack）" class="headerlink" title="1、栈区（stack）"></a>1、栈区（stack）</h4><ul><li>windows下，栈内存分配2M(确定的常数)，超出了限制，提示 stack overflow 错误；</li><li>栈区中内存自动分配，自动释放</li></ul><h4 id="2、堆区（heap）"><a href="#2、堆区（heap）" class="headerlink" title="2、堆区（heap）"></a>2、堆区（heap）</h4><ul><li>程序员手动分配内存，手动释放内存，占有操作系统80%的内存,通过malloc进行内存分配</li></ul><pre><code>//在堆内存分配40M内存//malloc参数是字节//malloc 返回值是 void * ,是任意类型的指针int* p = malloc(1024 * 1024 * 10 * sizeof(int));//释放分配的内存free(p);</code></pre><ul><li>calloc </li><li>realloc 重新分配内存</li><li>创建一个数组，动态指定数组的大小（在程序运行过程中，可以随意的开辟指定大小的内存，以供使用；相对于Java中的集合）</li></ul><pre><code>void main(){    //静态内存分配创建数组，数组的大小是固定的    //int a[10];    int len;    printf(&quot;输入数组的长度：&quot;);    scanf(&quot;%d&quot;,&amp;len);    //开辟内存    int* p = malloc(len * sizeof(int));    //p是数组的首地址    //给数组元素赋值（使用这一块刚刚开辟出来的内存区域）    int i = 0;    for(;i &lt; len; i++){        p[i] = rand() % 100;        printf(&quot;%d,%#x\n&quot;,p[i],&amp;p[i]);    }    //扩大刚刚分配的内存空间    printf(&quot;重新输入数组的长度：&quot;);    scanf(&quot;%d&quot;,&amp;len);    //参数说明    //1：原来的内存的指针    //2：内存扩大之后的总大小    int* p2 = realloc(p,sizeof(int) * len);    //重新赋值    i = 0;    for(;i &lt; len; i++){        p2[i] = rand() % 200;        printf(&quot;%d,%#x\n&quot;,p2[i],&amp;p2[i]);    }    //手动释放内存    if(p != NULL){        free(p);        p = NULL;    }     if(p2 != NULL){        free(p2);        p2 = NULL;    }    getchar();}</code></pre><p>输入结果为（参考）：</p><pre><code>输入数组的长度：641,0x20233067,0x20233434,0x2023380,0x20233c69,0x20234024,0x202344</code></pre><h4 id="3、全局区或静态区"><a href="#3、全局区或静态区" class="headerlink" title="3、全局区或静态区"></a>3、全局区或静态区</h4><h4 id="4、字符常量"><a href="#4、字符常量" class="headerlink" title="4、字符常量"></a>4、字符常量</h4><h4 id="5、程序代码区"><a href="#5、程序代码区" class="headerlink" title="5、程序代码区"></a>5、程序代码区</h4><h3 id="三、静态内存分配与动态内存分配的区别"><a href="#三、静态内存分配与动态内存分配的区别" class="headerlink" title="三、静态内存分配与动态内存分配的区别"></a>三、静态内存分配与动态内存分配的区别</h3><h5 id="静态内存分配，分配内存大小是固定的；容易出现以下问题："><a href="#静态内存分配，分配内存大小是固定的；容易出现以下问题：" class="headerlink" title="静态内存分配，分配内存大小是固定的；容易出现以下问题："></a>静态内存分配，分配内存大小是固定的；容易出现以下问题：</h5><ul><li>很容易超出栈内存的最大值</li><li>为了防止内存不够用会开辟更多的内存，容易浪费</li></ul><h5 id="动态内存分配，在程序运行过程中，动态指定需要使用的内存大小，手动释放，释放之后这些内存还可以被重新使用；容易出现以下问题："><a href="#动态内存分配，在程序运行过程中，动态指定需要使用的内存大小，手动释放，释放之后这些内存还可以被重新使用；容易出现以下问题：" class="headerlink" title="动态内存分配，在程序运行过程中，动态指定需要使用的内存大小，手动释放，释放之后这些内存还可以被重新使用；容易出现以下问题："></a>动态内存分配，在程序运行过程中，动态指定需要使用的内存大小，手动释放，释放之后这些内存还可以被重新使用；容易出现以下问题：</h5><ul><li>缩小，缩小的那部分数据会丢失</li><li>扩大（连续的），如果当前内存段后面有需要的内存空间，直接扩展这段内存空间，realloc返回原指针；如果当前内存段后面的空闲字节不够，那么久使用堆中的第一个能够满足这一要求的内存块，将目前的数据复制到新的位置，并将原来的数据释放，返回新的内存地址；如果申请失败，返回NULL,原来的指针任然有效。</li></ul><h3 id="四、内存分配的几个注意细节"><a href="#四、内存分配的几个注意细节" class="headerlink" title="四、内存分配的几个注意细节"></a>四、内存分配的几个注意细节</h3><ol><li>不能多次释放</li><li>释放完之后，给指针置为NULL</li><li>内存泄漏（p重载赋值之后，在free，并没有真正释放内存） </li></ol>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）C语言之基本数据类型、输入输出、指针</title>
      <link href="/20180825/c-c/yi-c-yu-yan-zhi-ji-ben-shu-ju-lei-xing-shu-ru-shu-chu-zhi-zhen/"/>
      <url>/20180825/c-c/yi-c-yu-yan-zhi-ji-ben-shu-ju-lei-xing-shu-ru-shu-chu-zhi-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="（一）C语言之基本数据类型、输入输出、指针"><a href="#（一）C语言之基本数据类型、输入输出、指针" class="headerlink" title="（一）C语言之基本数据类型、输入输出、指针"></a>（一）C语言之基本数据类型、输入输出、指针</h1><h3 id="一、基本数据类型"><a href="#一、基本数据类型" class="headerlink" title="一、基本数据类型"></a>一、基本数据类型</h3><h4 id="1、头文件"><a href="#1、头文件" class="headerlink" title="1、头文件"></a>1、头文件</h4><p>引入头文件,在头文件中只有函数的声明，在编译的时候会去找到函数的实现</p><pre><code>#include &lt;stdio.h&gt;</code></pre><h4 id="2、基本数据类型"><a href="#2、基本数据类型" class="headerlink" title="2、基本数据类型"></a>2、基本数据类型</h4><h5 id="1-、基本数据类型所使用的输出占位符"><a href="#1-、基本数据类型所使用的输出占位符" class="headerlink" title="(1)、基本数据类型所使用的输出占位符"></a>(1)、基本数据类型所使用的输出占位符</h5><table><thead><tr><th>数据类型</th><th>占位符</th></tr></thead><tbody><tr><td>short</td><td>%d</td></tr><tr><td>int</td><td>%d</td></tr><tr><td>long</td><td>%d</td></tr><tr><td>float</td><td>%f</td></tr><tr><td>double</td><td>%lf</td></tr><tr><td>char</td><td>%c</td></tr><tr><td>十六进制</td><td>%x</td></tr><tr><td>八进制</td><td>%o</td></tr><tr><td>字符串</td><td>%s</td></tr><tr><td>##### (2)、基本数据类型所占字节数</td><td></td></tr><tr><td>数据类型</td><td>字节数</td></tr><tr><td>—</td><td>—</td></tr><tr><td>short</td><td>2</td></tr><tr><td>int</td><td>4</td></tr><tr><td>long</td><td>8</td></tr><tr><td>float</td><td>4</td></tr><tr><td>double</td><td>8</td></tr><tr><td>char</td><td>1</td></tr></tbody></table><h3 id="二、输入输出函数"><a href="#二、输入输出函数" class="headerlink" title="二、输入输出函数"></a>二、输入输出函数</h3><h4 id="1、输入函数"><a href="#1、输入函数" class="headerlink" title="1、输入函数"></a>1、输入函数</h4><p>scanf(“%d”,&amp;i);<br>控制台输入，&amp; 为取地址符</p><h4 id="2、输出函数"><a href="#2、输出函数" class="headerlink" title="2、输出函数"></a>2、输出函数</h4><p>printf(“i的值为：%d\n”,i);<br>控制台输输出函数</p><pre><code>#include &lt;stdio.h&gt;void main(){    int i;    printf(&quot;请输入一个整数：&quot;);    //赋值    scanf(&quot;%d&quot;,&amp;i);    //打印    printf(&quot;i的值为：%d\n&quot;,i);    system(&quot;pause&quot;);}</code></pre><h3 id="三、指针"><a href="#三、指针" class="headerlink" title="三、指针"></a>三、指针</h3><h4 id="1、指针的定义"><a href="#1、指针的定义" class="headerlink" title="1、指针的定义"></a>1、指针的定义</h4><h5 id="指针存储的是变量的内存地址"><a href="#指针存储的是变量的内存地址" class="headerlink" title="指针存储的是变量的内存地址"></a>指针存储的是变量的内存地址</h5><h5 id="变量名就是对内存空间中一段数据的抽象"><a href="#变量名就是对内存空间中一段数据的抽象" class="headerlink" title="变量名就是对内存空间中一段数据的抽象"></a>变量名就是对内存空间中一段数据的抽象</h5><h5 id="内存地址就是系统给数据分配的编号"><a href="#内存地址就是系统给数据分配的编号" class="headerlink" title="内存地址就是系统给数据分配的编号"></a>内存地址就是系统给数据分配的编号</h5><pre><code>#include &lt;stdio.h&gt;void main(){    int i = 0;    //指针变量,p 的值就是 i 这个变量的内存地址    int* p = &amp;i;    printf(&quot;内存地址为：%#X\n&quot;,p);    system(&quot;pause&quot;);}</code></pre><p>控制台输出</p><pre><code>内存地址为：0X8FF764</code></pre><h5 id="指针类型的定义：在基本数据类型后加"><a href="#指针类型的定义：在基本数据类型后加" class="headerlink" title="指针类型的定义：在基本数据类型后加*"></a>指针类型的定义：在基本数据类型后加*</h5><p>如：</p><pre><code>    float f = 88.6;    //创建一个float类型的指针    float* fp = &amp;f;    </code></pre><p>或</p><pre><code>    float f = 88.6;    //创建一个float类型的指针    float *fp = &amp;f;    </code></pre><h5 id="通过指针修改变量的值"><a href="#通过指针修改变量的值" class="headerlink" title="通过指针修改变量的值"></a>通过指针修改变量的值</h5><pre><code>void main(){    int i = 90;    //创建一个int类型的指针变量    int *p = &amp;i;    printf(&quot;i的值为：%d\n&quot;,i);    // p 代表变量 i 的内存地址    // *p 代表 p 这个内存地址上的数据    *p = 210;    printf(&quot;i的值为：%d\n&quot;,i);    system(&quot;pause&quot;);}</code></pre><p>控制台输出：</p><pre><code>i的值为：90i的值为：210</code></pre><h5 id="指针变量的内存地址说明："><a href="#指针变量的内存地址说明：" class="headerlink" title="指针变量的内存地址说明："></a>指针变量的内存地址说明：</h5><p><img src="/images/20180825/tu-01.png" alt="指针变量的内存地址说明"></p><h4 id="2、指针的类型"><a href="#2、指针的类型" class="headerlink" title="2、指针的类型"></a>2、指针的类型</h4><h5 id="指针有类型，地址没有类型；"><a href="#指针有类型，地址没有类型；" class="headerlink" title="指针有类型，地址没有类型；"></a>指针有类型，地址没有类型；</h5><p>地址只是开始的位置，类型是指明读取到什么位置结束</p><h4 id="3、NULL空指针"><a href="#3、NULL空指针" class="headerlink" title="3、NULL空指针"></a>3、NULL空指针</h4><p>指针为NULL的指针，默认值为0,默认内存地址访问0x000000操作系统不允许</p><pre><code>void main(){    int i = 9;    int *p = NULL;    //空指针的默认值为0    printf(&quot;%#X\n&quot;,p);    //访问内存地址0x000000操作系统不允许    printf(&quot;%d\n&quot;,*p);    getchar();}</code></pre><h4 id="4、多级指针"><a href="#4、多级指针" class="headerlink" title="4、多级指针"></a>4、多级指针</h4><h5 id="指针保存的是变量的地址，保存的这个变量还可以是一个指针变量"><a href="#指针保存的是变量的地址，保存的这个变量还可以是一个指针变量" class="headerlink" title="指针保存的是变量的地址，保存的这个变量还可以是一个指针变量"></a>指针保存的是变量的地址，保存的这个变量还可以是一个指针变量</h5><pre><code>void main(){    int a = 50;    //p1上保存的是 a 的地址    int* p1 = &amp;a;    //p2上保存的是 p1 的地址    int** p2 = &amp;p1;    printf(&quot;p1d的值为：%#x,p2的值为：%#x\n&quot;,p1,p2);    //通过p2 改变a的值    **p2 = 90;    printf(&quot;a的值为：%d\n&quot;,a);    getchar();}</code></pre><p>输出结果为：</p><pre><code>p1d的值为：0xcffa9c,p2的值为：0xcffa90a的值为：90</code></pre><h4 id="5、指针运算"><a href="#5、指针运算" class="headerlink" title="5、指针运算"></a>5、指针运算</h4><h5 id="指针的运算，一般在数组遍历时才有意义，基于数据在内存中线性排列的方式"><a href="#指针的运算，一般在数组遍历时才有意义，基于数据在内存中线性排列的方式" class="headerlink" title="指针的运算，一般在数组遍历时才有意义，基于数据在内存中线性排列的方式"></a>指针的运算，一般在数组遍历时才有意义，基于数据在内存中线性排列的方式</h5><pre><code>void main(){    //数组在内存中连续存储    int ids[] = {78,90,23,65,19};    //数组的变量名：ids就是数组的首地址    printf(&quot;%#x\n&quot;,ids);    printf(&quot;%#x\n&quot;,&amp;ids);    printf(&quot;%#x\n&quot;,&amp;ids[0]);    //指针变量    int *p = ids;    printf(&quot;%d\n&quot;,*p);    //指针的加法    p++;//指针向前移动sizeof(数据类型)个字节    printf(&quot;%d\n&quot;,*p);    getchar();}</code></pre><p>输出结果为：</p><pre><code>0x7dfaa00x7dfaa00x7dfaa07890</code></pre><h5 id="通过指针给数组赋值"><a href="#通过指针给数组赋值" class="headerlink" title="通过指针给数组赋值"></a>通过指针给数组赋值</h5><pre><code>void main(){    int uids[5];    int* p = uids;    ////高级写法    //int i = 0;    //for (;i &lt; 5; i++){    //    uids[i] = i;    //}    //早些版本的写法    int i = 0;    for(; p &lt; uids + 5 ; p++){        *p = i;        i++;    }}</code></pre><h4 id="6、函数指针"><a href="#6、函数指针" class="headerlink" title="6、函数指针"></a>6、函数指针</h4><p>函数指针的定义：</p><pre><code>[函数返回值类型]([函数指针的名称])([函数的参数列表])</code></pre><pre><code>#include &lt;Windows.h&gt;void msg(char* title,char* content){    MessageBox(0,content,title,0);}void main(){    //msg();    //函数指针    void(*fun_p)(char* title,char* content) = msg;    fun_p(&quot;消息标题&quot;,&quot;消息内容&quot;);    getchar();}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo 来优化管理自己的博客</title>
      <link href="/20180620/h5/shi-yong-hexo-lai-you-hua-guan-li-zi-ji-de-bo-ke/"/>
      <url>/20180620/h5/shi-yong-hexo-lai-you-hua-guan-li-zi-ji-de-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上一篇博客<a href="/2017/10/20/github-yu-ming-da-jian-ge-ren-zhu-ye-ge-ren-bo-ke/">Github+域名搭建个人主页（个人博客）</a> 写了如何使用GitHub+域名搭建一个静态的个人主页，搭建好之后，就可以使用对应的域名来进行访问了，这篇博客主要是跟大家介绍使用Hexo对自己的个人博客进行优化，管理。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h5 id="Git客户端-：-下载安装，一路默认安装即可"><a href="#Git客户端-：-下载安装，一路默认安装即可" class="headerlink" title="Git客户端 ： 下载安装，一路默认安装即可"></a>Git客户端 ： <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">下载安装</a>，一路默认安装即可</h5><h5 id="NodeJs-下载安装-一路默认安装即可"><a href="#NodeJs-下载安装-一路默认安装即可" class="headerlink" title="NodeJs: 下载安装 ,一路默认安装即可"></a>NodeJs: <a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载安装</a> ,一路默认安装即可</h5><h5 id="验证NodeJs-是否安装成功"><a href="#验证NodeJs-是否安装成功" class="headerlink" title="验证NodeJs 是否安装成功"></a>验证NodeJs 是否安装成功</h5><pre><code>Microsoft Windows [版本 10.0.17134.472](c) 2018 Microsoft Corporation。保留所有权利。C:\Users\Administrator&gt;node -vv11.6.0C:\Users\Administrator&gt;npm -v6.5.0-next.0</code></pre><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>参考  <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a> </p><h5 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h5><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><pre><code>$ npm install -g hexo-cli</code></pre><h5 id="初始化-Hexo"><a href="#初始化-Hexo" class="headerlink" title="初始化 Hexo"></a>初始化 Hexo</h5><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre><code>$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install</code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre><code>.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置</a> 信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。<a href="http://embeddedjs.com/" target="_blank" rel="noopener">EJS</a>, <a href="http://learnboost.github.io/stylus/" target="_blank" rel="noopener">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a> renderer 已默认安装，您可以自由移除。</p><figcaption style="box-sizing: inherit; margin: -5px 0px 5px; font-size: 0.9em; color: rgb(153, 153, 153);">package.json</figcaption><pre><code>{ &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: { &quot;version&quot;: &quot;&quot; }, &quot;dependencies&quot;: { &quot;hexo&quot;: &quot;^3.0.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-index&quot;: &quot;^0.1.0&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.1.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.1.0&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.2.4&quot;, &quot;hexo-server&quot;: &quot;^0.1.2&quot; }}</code></pre><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p><a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>您可以在 _config.yml 中修改大部分的配置。</p><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h3 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址</td><td></td></tr><tr><td><code>root</code></td><td>网站根目录</td><td></td></tr><tr><td><code>permalink</code></td><td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 格式</td><td><code>:year/:month/:day/:title/</code></td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td><td></td></tr></tbody></table><blockquote><p><strong>网站存放在子目录</strong></p><p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>source_dir</code></td><td>资源文件夹，这个文件夹用来存放内容。</td><td><code>source</code></td></tr><tr><td><code>public_dir</code></td><td>公共文件夹，这个文件夹用于存放生成的站点文件。</td><td><code>public</code></td></tr><tr><td><code>tag_dir</code></td><td>标签文件夹</td><td><code>tags</code></td></tr><tr><td><code>archive_dir</code></td><td>归档文件夹</td><td><code>archives</code></td></tr><tr><td><code>category_dir</code></td><td>分类文件夹</td><td><code>categories</code></td></tr><tr><td><code>code_dir</code></td><td>Include code 文件夹</td><td><code>downloads/code</code></td></tr><tr><td><code>i18n_dir</code></td><td>国际化（i18n）文件夹</td><td><code>:lang</code></td></tr><tr><td><code>skip_render</code></td><td>跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">glob 表达式</a>来匹配路径。</td><td></td></tr></tbody></table><blockquote><p><strong>提示</strong></p><p>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p></blockquote><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>new_post_name</code></td><td>新文章的文件名称</td><td>:title.md</td></tr><tr><td><code>default_layout</code></td><td>预设布局</td><td>post</td></tr><tr><td><code>auto_spacing</code></td><td>在中文和英文之间加入空格</td><td>false</td></tr><tr><td><code>titlecase</code></td><td>把标题转换为 title case</td><td>false</td></tr><tr><td><code>external_link</code></td><td>在新标签中打开链接</td><td>true</td></tr><tr><td><code>filename_case</code></td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td>0</td></tr><tr><td><code>render_drafts</code></td><td>显示草稿</td><td>false</td></tr><tr><td><code>post_asset_folder</code></td><td>启动 <a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">Asset 文件夹</a></td><td>false</td></tr><tr><td><code>relative_link</code></td><td>把链接改为与根目录的相对位址</td><td>false</td></tr><tr><td><code>future</code></td><td>显示未来的文章</td><td>true</td></tr><tr><td><code>highlight</code></td><td>代码块的设置</td><td></td></tr></tbody></table><blockquote><p><strong>相对地址</strong></p><p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为<code>example.com</code>,您有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h3 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>default_category</code></td><td>默认分类</td><td><code>uncategorized</code></td></tr><tr><td><code>category_map</code></td><td>分类别名</td><td></td></tr><tr><td><code>tag_map</code></td><td>标签别名</td><td></td></tr></tbody></table><h3 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a>日期 / 时间格式</h3><p>Hexo 使用 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>date_format</code></td><td>日期格式</td><td><code>YYYY-MM-DD</code></td></tr><tr><td><code>time_format</code></td><td>时间格式</td><td><code>H:mm:ss</code></td></tr></tbody></table><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>per_page</code></td><td>每页显示的文章量 (0 = 关闭分页功能)</td><td><code>10</code></td></tr><tr><td><code>pagination_dir</code></td><td>分页目录</td><td><code>page</code></td></tr></tbody></table><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>theme</code></td><td>当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td><code>deploy</code></td><td>部署部分的设置</td></tr></tbody></table><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>在Hexo <a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>中选择自己喜欢的主题，下载下来，解压之后，将主题的文件夹复制到 hexo 文件夹中的 theme 文件夹下 ；然后再hexo 根目录下更改<code>_config.yml</code> 文件中的 <code>theme</code> 的值</p><p>例如：</p><pre><code>theme: hexo-theme-matery</code></pre><p>要修改主题中的样式，可根据主题的说明文档 在 主题文件夹中的 <code>_config.yml</code> 文件中修改 或者修改对应的样式文件</p><h2 id="Hexo-操作命令"><a href="#Hexo-操作命令" class="headerlink" title="Hexo 操作命令"></a>Hexo 操作命令</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><pre><code>$ hexo init [folder]</code></pre><h3 id="New"><a href="#New" class="headerlink" title="New"></a>New</h3><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><pre><code>$ hexo new [layout] &lt;title&gt;</code></pre><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p>生成静态文件。</p><pre><code>$ hexo generate</code></pre><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>,<code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>,<code>--watch</code></td><td>监视文件变动</td></tr></tbody></table><p>该命令可以简写为</p><pre><code>$ hexo g</code></pre><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p>发表草稿。</p><pre><code>$ hexo publish [layout] &lt;filename&gt;</code></pre><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。<br>| 选项 | 描述 |<br>| — | — |<br>| <code>-p</code>, <code>--port</code> | 重设端口 |<br>| <code>-s</code>, <code>--static</code> | 只使用静态文件 |<br>| <code>-l</code>, <code>--log</code> | 启动日记记录，使用覆盖记录格式 |</p><pre><code>$ hexo server</code></pre><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><p>部署网站。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table><pre><code>$ hexo deploy</code></pre><p>该命令可以简写为：</p><pre><code>$ hexo d</code></pre><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>渲染文件。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-o</code>, <code>--output</code></td><td>设置输出路径</td></tr></tbody></table><pre><code>$ hexo render &lt;file1&gt; [file2] ...</code></pre><h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">迁移内容</a>。</p><pre><code>$ hexo migrate &lt;type&gt;</code></pre><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><pre><code>$ hexo clean</code></pre><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>列出网站资料。</p><pre><code>$ hexo list &lt;type&gt;</code></pre><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p>显示 Hexo 版本。</p><pre><code>$ hexo version</code></pre><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><pre><code>$ hexo --safe</code></pre><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new" target="_blank" rel="noopener">提交调试信息到 GitHub</a>。</p><pre><code>$ hexo --debug</code></pre><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><p>隐藏终端信息。</p><pre><code>$ hexo --silent</code></pre><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p><pre><code>$ hexo --config custom.yml</code></pre><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><pre><code>$ hexo --draft</code></pre><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><p>自定义当前工作目录（Current working directory）的路径。</p><pre><code>$ hexo --cwd /path/to/cwd</code></pre><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 <a href="https://github.com/hexojs/hexo-server" target="_blank" rel="noopener">hexo-server</a> 才能使用。</p><pre><code>$ npm install hexo-server --save</code></pre><p>安装完成后，输入以下命令以启动服务器，您的网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><pre><code>$ hexo server</code></pre><p>如果您想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 <code>-p</code> 选项指定其他端口，如下：</p><pre><code>$ hexo server -p 5000</code></pre><h3 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h3><p>在静态模式下，服务器只处理 <code>public</code> 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 <code>hexo generate</code>，此模式通常用于生产环境（production mode）下。</p><pre><code>$ hexo server -s</code></pre><h3 id="自定义-IP"><a href="#自定义-IP" class="headerlink" title="自定义 IP"></a>自定义 IP</h3><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：</p><pre><code>$ hexo server -i 192.168.1.1</code></pre><p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p><h2 id="Pow"><a href="#Pow" class="headerlink" title="Pow"></a>Pow</h2><p><a href="http://pow.cx/" target="_blank" rel="noopener">Pow</a> 是一个 Mac 系统上的零配置 Rack 服务器，它也可以作为一个简单易用的静态文件服务器来使用。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><pre><code>$ curl get.pow.cx | sh</code></pre><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>在 <code>~/.pow</code> 文件夹建立链接（symlink）。</p><pre><code>$ cd ~/.pow$ ln -s /path/to/myapp</code></pre><p>您的网站将会在 <code>http://myapp.dev</code> 下运行，网址根据链接名称而定。</p><h2 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h2><p>使用 Hexo 生成静态文件快速而且简单。</p><pre><code>$ hexo generate</code></pre><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><pre><code>$ hexo generate --watch</code></pre><h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p><pre><code>$ hexo generate --deploy$ hexo deploy --generate</code></pre><p> <strong>简写</strong></p><p> 上面两个命令可以简写为</p><pre><code>$ hexo g -d$ hexo d -g</code></pre><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</p><pre><code>$ hexo deploy</code></pre><p>在开始之前，您必须先在 <code>_config.yml</code> 中修改参数，一个正确的部署配置中至少要有 <code>type</code> 参数，例如：</p><pre><code>deploy: type: git</code></pre><p>您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。</p><pre><code>deploy:- type: git repo:- type: heroku repo:</code></pre><blockquote><p><strong>缩进</strong></p><p>YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。</p></blockquote><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>。</p><pre><code>$ npm install hexo-deployer-git --save</code></pre><p>修改配置。</p><pre><code>deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message]</code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>repo</code></td><td>库（Repository）地址</td></tr><tr><td><code>branch</code></td><td>分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</td></tr><tr><td><code>message</code></td><td>自定义提交信息 (默认为 <code>Site updated: YYYY-MM-DD HH:mm:ss</code>)</td></tr></tbody></table><h3 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-heroku" target="_blank" rel="noopener">hexo-deployer-heroku</a>。</p><pre><code>$ npm install hexo-deployer-heroku --save</code></pre><p>修改配置。</p><pre><code>deploy: type: heroku repo: &lt;repository url&gt; message: [message]</code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>repo</code></td><td>Heroku 库（Repository）地址</td></tr><tr><td><code>message</code></td><td>自定提交信息 (默认为 <code>Site updated: YYYY-MM-DD HH:mm:ss</code>)</td></tr></tbody></table><h3 id="Rsync"><a href="#Rsync" class="headerlink" title="Rsync"></a>Rsync</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-rsync" target="_blank" rel="noopener">hexo-deployer-rsync</a>。</p><pre><code>$ npm install hexo-deployer-rsync --save</code></pre><p>修改配置。</p><pre><code>deploy: type: rsync host: &lt;host&gt; user: &lt;user&gt; root: &lt;root&gt; port: [port] delete: [true|false] verbose: [true|false] ignore_errors: [true|false]</code></pre><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>host</code></td><td>远程主机的地址</td><td></td></tr><tr><td><code>user</code></td><td>使用者名称</td><td></td></tr><tr><td><code>root</code></td><td>远程主机的根目录</td><td></td></tr><tr><td><code>port</code></td><td>端口</td><td>22</td></tr><tr><td><code>delete</code></td><td>删除远程主机上的旧文件</td><td>true</td></tr><tr><td><code>verbose</code></td><td>显示调试信息</td><td>true</td></tr><tr><td><code>ignore_errors</code></td><td>忽略错误</td><td>false</td></tr></tbody></table><blockquote><p><strong>rsync部署模块的工作方式</strong></p><p>需要注意的是，要求您提供的实际上是一个能通过SSH登陆远程主机的Linux用户。Hexo会自动处理关于rsync使用的一切操作。因此，您需要在远程主机上为您的Hexo站点建立一个用户，并允许其通过SSH登陆。不过，这里的<code>port</code>，的确是指rsync监听的端口，请确保防火墙打开了该端口。</p></blockquote><h3 id="OpenShift"><a href="#OpenShift" class="headerlink" title="OpenShift"></a>OpenShift</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-openshift" target="_blank" rel="noopener">hexo-deployer-openshift</a>。</p><pre><code>$ npm install hexo-deployer-openshift --save</code></pre><p>修改配置。</p><pre><code>deploy: type: openshift repo: &lt;repository url&gt; message: [message]</code></pre><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>repo</code></td><td>OpenShift 库（Repository）地址</td></tr><tr><td><code>message</code></td><td>自定提交信息 (默认为 <code>Site updated: YYYY-MM-DD HH:mm:ss</code>)</td></tr></tbody></table><h3 id="FTPSync"><a href="#FTPSync" class="headerlink" title="FTPSync"></a>FTPSync</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-ftpsync" target="_blank" rel="noopener">hexo-deployer-ftpsync</a>。</p><pre><code>$ npm install hexo-deployer-ftpsync --save</code></pre><p>修改配置。</p><pre><code>deploy: type: ftpsync host: &lt;host&gt; user: &lt;user&gt; pass: &lt;password&gt; remote: [remote] port: [port] ignore: [ignore] connections: [connections] verbose: [true|false]</code></pre><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>host</code></td><td>远程主机的地址</td><td></td></tr><tr><td><code>user</code></td><td>使用者名称</td><td></td></tr><tr><td><code>pass</code></td><td>密码</td><td></td></tr><tr><td><code>remote</code></td><td>远程主机的根目录</td><td><code>/</code></td></tr><tr><td><code>port</code></td><td>端口</td><td>21</td></tr><tr><td><code>ignore</code></td><td>忽略的文件或目录</td><td></td></tr><tr><td><code>connections</code></td><td>使用的连接数</td><td>1</td></tr><tr><td><code>verbose</code></td><td>显示调试信息</td><td>false</td></tr></tbody></table><blockquote><p><strong>FTP部署可能出现的问题</strong></p><p>您可能需要预先通过其他方式将所有文件上传到远程主机中。否则初次使用ftpsync插件就可能出现报错。另外，由于FTP协议的特征，它每传送一个文件就需要一次握手，相对速度较慢。</p></blockquote><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p>Hexo 生成的所有文件都放在 <code>public</code> 文件夹中，您可以将它们复制到您喜欢的地方。</p>]]></content>
      
      
      <categories>
          
          <category> 前端H5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 环境配置</title>
      <link href="/20180619/linux/centos-7-huan-jing-pei-zhi/"/>
      <url>/20180619/linux/centos-7-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-7-环境配置"><a href="#CentOS-7-环境配置" class="headerlink" title="CentOS 7 环境配置"></a>CentOS 7 环境配置</h1><h2 id="一、Centos7如何修改ssh默认端口22"><a href="#一、Centos7如何修改ssh默认端口22" class="headerlink" title="一、Centos7如何修改ssh默认端口22"></a>一、Centos7如何修改ssh默认端口22</h2><h3 id="1-修改-sshd-config-端口"><a href="#1-修改-sshd-config-端口" class="headerlink" title="1. 修改 sshd_config 端口"></a>1. 修改 sshd_config 端口</h3><ul><li><p>编辑sshd_config 配置文件</p><pre class=" language-shell"><code class="language-shell">$ vi /etc/ssh/sshd_config</code></pre></li><li><p>取消 #Port 22 的注释，在下一行添加你需要修改的新端口 Port<br> 10022。（这里不删除 22 端口是为了防止修改后新端口无法访问，造成无法用 ssh 连接服务器。）</p><pre class=" language-shell"><code class="language-shell">Port 22  Port 10022  </code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-8440b63d98fab2c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加新端口"></p></li><li><p>修改保存 sshd_config 文件<br>按下esc 退出编辑模式，输入 :wq，保存修改并退出</p></li><li><p>重启 sshd 服务</p><pre class=" language-shell"><code class="language-shell">$  systemctl restart sshd</code></pre><h3 id="2-配置防火墙-firewalld"><a href="#2-配置防火墙-firewalld" class="headerlink" title="2. 配置防火墙 firewalld"></a>2. 配置防火墙 firewalld</h3></li><li><p>启用防火墙：</p><pre class=" language-shell"><code class="language-shell">$ systemctl enable firewalld$ systemctl start firewalld</code></pre></li><li><p>查看防火墙状态</p></li></ul><pre class=" language-shell"><code class="language-shell">$ systemctl status firewalld● firewalld.service - firewalld - dynamic firewall daemon   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)   Active: active (running) since 二 2016-12-20 02:12:59 CST; 1 day 13h ago Main PID: 10379 (firewalld)   CGroup: /system.slice/firewalld.service           └─10379 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid$ firewall-cmd --staterunning  </code></pre><ul><li>查看防火墙当前「默认」和「激活」zone（区域）：</li></ul><pre class=" language-shell"><code class="language-shell">$ firewall-cmd --get-default-zonepublic  $ firewall-cmd --get-active-zonespublic    interfaces: eth0 eth1</code></pre><p>若没有激活区域的话，要执行下面的命令。</p><ul><li>激活 public 区域，增加网卡接口：</li></ul><pre class=" language-shell"><code class="language-shell">$ firewall-cmd --set-default-zone=public$ firewall-cmd --zone=public --add-interface=eth0success  $ firewall-cmd --zone=public --add-interface=eth1success  </code></pre><p> *新增防火墙规则，开放 10022/TCP 端口：</p><pre class=" language-shell"><code class="language-shell"># 以防新端口不生效，先把 22 端口暴露$ firewall-cmd --permanent --zone=public --add-port=22/tcp$ firewall-cmd --permanent --zone=public --add-port=10022/tcpsuccess  # 重载防火墙$ firewall-cmd --reload# 查看暴露端口规则$ firewall-cmd --permanent --list-port443/tcp 80/tcp 22/tcp 10022/tcp  $ firewall-cmd --zone=public --list-allpublic (default, active)    interfaces: eth0 eth1  sources:  services: dhcpv6-client ssh  ports: 443/tcp 80/tcp 22/tcp 10022/tcp  masquerade: no  forward-ports:  icmp-blocks:  rich rules:</code></pre><ul><li>退出 ssh 会话后，再用新的端口连接：</li></ul><pre class=" language-shell"><code class="language-shell">$ ssh -p 10022 root@example.cn</code></pre><h3 id="3-打开-SELinux-端口"><a href="#3-打开-SELinux-端口" class="headerlink" title="3.  打开 SELinux 端口"></a>3.  打开 SELinux 端口</h3><p> SELinux 全称 Security Enhanced Linux (安全强化 Linux)，是 MAC (Mandatory Access Control，强制访问控制系统)的一个实现，目的在于明确的指明某个进程可以访问哪些资源(文件、网络端口等)。</p><p>对于 ssh，SELinux 默认只允许 22 端口，我们可以用 SELinux 管理配置工具 semanage，来修改 ssh 可访问的端口。</p><p><strong>安装 semanage 工具</strong></p><pre class=" language-shell"><code class="language-shell">$ yum provides semanage$ yum -y install policycoreutils-python</code></pre><p>** 打开ssh 10022 端口**</p><pre class=" language-shell"><code class="language-shell"># 为 ssh 添加新的允许端口$ semanage port -a -t ssh_port_t -p tcp 10022# 查看当前 SELinux 允许的端口$ semanage port -l | grep sshssh_port_t                     tcp      10022, 22  </code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-4b2745ba22a5366d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>错误处理</strong></p><p>当 SELINUX 配置为禁用状态时，使用 semanage 会报错提示无法读取 policy 文件：</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-55f7160624f176a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="semanage 报错"></p><p>修改 /etc/selinux/config 配置，启用 SELinux：</p><pre class=" language-shell"><code class="language-shell">$ vi /etc/selinux/configSELINUX=permissive  # 重启服务器$ init 6# 重启后查看 SELinux 状态$ sestatus# if it shows disable, you can run$ load_policy -qi</code></pre><p><strong>检查SELINUX配置</strong></p><pre class=" language-shell"><code class="language-shell">$ semanage port -a -t ssh_port_t -p tcp 10022$ semanage port -l | grep sshssh_port_t                     tcp      10022, 22  # 重启 ssh 服务systemctl restart sshd </code></pre><p>######*注：semange 不能禁用 ssh 的 22 端口：</p><pre class=" language-shell"><code class="language-shell">$ semanage port -d -t ssh_port_t -p tcp 22ValueError: 在策略中定义了端口 tcp/22，无法删除。</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-e14990f00465816c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="semange 不能禁用 ssh 的 22 端口"></p><h2 id="二、新建组和用户"><a href="#二、新建组和用户" class="headerlink" title="二、新建组和用户"></a>二、新建组和用户</h2><h3 id="【组的操作】"><a href="#【组的操作】" class="headerlink" title="【组的操作】"></a>【组的操作】</h3><h4 id="1、新建组-example"><a href="#1、新建组-example" class="headerlink" title="1、新建组 example"></a>1、新建组 example</h4><ul><li>使用groupadd 命令添加组<br>用法：groupadd [选项] 组<pre class=" language-shell"><code class="language-shell">选项:-f, --force        如果组已经存在则成功退出          并且如果 GID 已经存在则取消 -g-g, --gid GID                 为新组使用 GID-h, --help                    显示此帮助信息并推出-K, --key KEY=VALUE           不使用 /etc/login.defs 中的默认值-o, --non-unique              允许创建有重复 GID 的组-p, --password PASSWORD       为新组使用此加密过的密码-r, --system                  创建一个系统账户-R, --root CHROOT_DIR         chroot 到的目录</code></pre></li></ul><p>example：</p><pre class=" language-shell"><code class="language-shell"># groupadd -g [组的ID] [组名]$ groupadd -g 10005 example</code></pre><h4 id="2、删除组-example"><a href="#2、删除组-example" class="headerlink" title="2、删除组 example"></a>2、删除组 example</h4><ul><li>使用 groupdel 命令删除组<br>用法：groupdel [选项] 组<pre class=" language-shell"><code class="language-shell">选项:-h, --help                    显示此帮助信息并推出-R, --root CHROOT_DIR         chroot 到的目录</code></pre></li></ul><p>example：</p><pre class=" language-shell"><code class="language-shell"># groupdel [组名]$ groupdel example</code></pre><ol start="2"><li>删除组 example</li></ol><ul><li>使用 groupdel 命令删除组<br>用法：groupdel [选项] 组<pre class=" language-shell"><code class="language-shell">选项:-h, --help                    显示此帮助信息并推出-R, --root CHROOT_DIR         chroot 到的目录</code></pre></li></ul><p>example：</p><pre class=" language-shell"><code class="language-shell"># groupdel [组名]$ groupdel example</code></pre><h4 id="3、修改组信息-example-，将组example-的id-更改为-10006-，名称更改为-exampleGroup"><a href="#3、修改组信息-example-，将组example-的id-更改为-10006-，名称更改为-exampleGroup" class="headerlink" title="3、修改组信息 example ，将组example 的id 更改为 10006 ，名称更改为 exampleGroup"></a>3、修改组信息 example ，将组example 的id 更改为 10006 ，名称更改为 exampleGroup</h4><ul><li>使用 groupmod 来修改组信息</li></ul><p>用法：groupmod [选项] 组</p><pre class=" language-shell"><code class="language-shell">选项:  -g, --gid GID                 将组 ID 改为 GID  -h, --help                    显示此帮助信息并推出  -n, --new-name NEW_GROUP      改名为 NEW_GROUP  -o, --non-unique              允许使用重复的 GID  -p, --password PASSWORD    将密码更改为(加密过的) PASSWORD  -R, --root CHROOT_DIR         chroot 到的目录</code></pre><p>example:</p><pre class=" language-shell"><code class="language-shell"># groupmod -g [组ID] [组名]$ groupmod -g 10006 example# groupmod -n [新组名] [组名]groupmod -n exampleGroup example</code></pre><h3 id="【用户的操作】"><a href="#【用户的操作】" class="headerlink" title="【用户的操作】"></a>【用户的操作】</h3><h4 id="1、新建用户-example"><a href="#1、新建用户-example" class="headerlink" title="1、新建用户 example"></a>1、新建用户 example</h4><ul><li>使用adduser 命令来新建用户<br>用法：adduser [选项] 登录<pre><code>adduser -Dadduser -D [选项]</code></pre><pre class=" language-shell"><code class="language-shell">选项：-b, --base-dir BASE_DIR    新账户的主目录的基目录-c, --comment COMMENT         新账户的 GECOS 字段-d, --home-dir HOME_DIR       新账户的主目录-D, --defaults        显示或更改默认的 useradd 配置-e, --expiredate EXPIRE_DATE  新账户的过期日期-f, --inactive INACTIVE       新账户的密码不活动期-g, --gid GROUP        新账户主组的名称或 ID-G, --groups GROUPS    新账户的附加组列表-h, --help                    显示此帮助信息并推出-k, --skel SKEL_DIR    使用此目录作为骨架目录-K, --key KEY=VALUE           不使用 /etc/login.defs 中的默认值-l, --no-log-init    不要将此用户添加到最近登录和登录失败数据库-m, --create-home    创建用户的主目录-M, --no-create-home        不创建用户的主目录-N, --no-user-group    不创建同名的组-o, --non-unique        允许使用重复的 UID 创建用户-p, --password PASSWORD        加密后的新账户密码-r, --system                  创建一个系统账户-R, --root CHROOT_DIR         chroot 到的目录-s, --shell SHELL        新账户的登录 shell-u, --uid UID            新账户的用户 ID-U, --user-group        创建与用户同名的组-Z, --selinux-user SEUSER        为 SELinux 用户映射使用指定 SEUSER</code></pre></li></ul><p>example: 新建用户 example  ,指定用户id 为10010</p><pre class=" language-shell"><code class="language-shell"># adduser -u [用户ID] [用户名]$ adduser -u 10010 example# 查看新创建的用户$ id exampleuid=10010(example) gid=10010(example) 组=10010(example)</code></pre><h4 id="2、为新建的用户设置密码-passwd-新建用户名"><a href="#2、为新建的用户设置密码-passwd-新建用户名" class="headerlink" title="2、为新建的用户设置密码 passwd [新建用户名]"></a>2、为新建的用户设置密码 passwd [新建用户名]</h4><ul><li>使用passwd [新建用户名] 命令来设置新用户密码</li></ul><p>直接输入passwd，回车，修改的是当前用户的密码</p><p>example:</p><pre class=" language-shell"><code class="language-shell">$ passwd example更改用户 example 的密码 。新的 密码：无效的密码： 密码包含用户名在某些地方重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。</code></pre><p>在设置密码的时候，会进行验证密码是否包含用户名，是否含有特殊字符，大小写字母和数字，会有相应的提示，但是继续输入，也是可以设置成功的。</p><h4 id="3、删除用户-example"><a href="#3、删除用户-example" class="headerlink" title="3、删除用户 example"></a>3、删除用户 example</h4><ul><li>使用 userdel 命令来删除用户<br>用法：userdel [选项] 登录</li></ul><pre class=" language-shell"><code class="language-shell">选项：  -f, --force                   force some actions that would fail otherwise                                e.g. removal of user still logged in                                or files, even if not owned by the user  -h, --help                    显示此帮助信息并推出  -r, --remove                  删除主目录和邮件池  -R, --root CHROOT_DIR         chroot 到的目录  -Z, --selinux-user            为用户删除所有的 SELinux 用户映射</code></pre><p>example: 删除用户 example  </p><pre class=" language-shell"><code class="language-shell"># userdel [用户名]$ userdel  example# 查看用户example$ id exampleid: example: no such user</code></pre><h4 id="4、修改用户-example-为-exampleUser"><a href="#4、修改用户-example-为-exampleUser" class="headerlink" title="4、修改用户 example 为 exampleUser"></a>4、修改用户 example 为 exampleUser</h4><ul><li>使用 usermod 命令来修改用户信息<br>用法：usermod [选项] 登录</li></ul><pre class=" language-shell"><code class="language-shell">选项：  -c, --comment 注释            GECOS 字段的新值  -d, --home HOME_DIR           用户的新主目录  -e, --expiredate EXPIRE_DATE  设定帐户过期的日期为 EXPIRE_DATE  -f, --inactive INACTIVE       过期 INACTIVE 天数后，设定密码为失效状态  -g, --gid GROUP               强制使用 GROUP 为新主组  -G, --groups GROUPS           新的附加组列表 GROUPS  -a, --append GROUP            将用户追加至上边 -G 中提到的附加组中，                                并不从其它组中删除此用户  -h, --help                    显示此帮助信息并推出  -l, --login LOGIN             新的登录名称  -L, --lock                    锁定用户帐号  -m, --move-home               将家目录内容移至新位置 (仅于 -d 一起使用)  -o, --non-unique              允许使用重复的(非唯一的) UID  -p, --password PASSWORD       将加密过的密码 (PASSWORD) 设为新密码  -R, --root CHROOT_DIR         chroot 到的目录  -s, --shell SHELL             该用户帐号的新登录 shell  -u, --uid UID                 用户帐号的新 UID  -U, --unlock                  解锁用户帐号  -Z, --selinux-user  SEUSER       用户账户的新 SELinux 用户映射</code></pre><p>example: 修改用户 example 为 exampleUser  ,更改组为 exampleGroup</p><pre class=" language-shell"><code class="language-shell"># usermod -u  [用户ID] [用户名]$ usermod -u 10006 example# 查看用户example$ id exampleuid=10006(example) gid=10010(example) 组=10010(example)# usermod -g  [组ID] [用户名]$ usermod -u 10006 example# 查看用户example$ id exampleuid=10006(example) gid=10006(exampleGroup) 组=10006(exampleGroup)# usermod -l  [新用户名] [用户名]$ usermod -l exampleUser example# 查看用户exampleUser$ id exampleUseruid=10006(exampleUser) gid=10006(exampleGroup) 组=10006(exampleGroup)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux上配置Jenkins自动化构建Android项目的环境 ---- Jenkins自动化部署学习笔记（五）</title>
      <link href="/20180615/jenkins/zai-linux-shang-pei-zhi-android-zi-dong-hua-gou-jian-huan-jing/"/>
      <url>/20180615/jenkins/zai-linux-shang-pei-zhi-android-zi-dong-hua-gou-jian-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="在Linux上配置Jenkins自动化构建Android项目的环境"><a href="#在Linux上配置Jenkins自动化构建Android项目的环境" class="headerlink" title="在Linux上配置Jenkins自动化构建Android项目的环境"></a>在Linux上配置Jenkins自动化构建Android项目的环境</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;之前写了一些在 Windows 系统上安装配置 Jenkins 环境，创建自动化构建项目的一些博客，今天来跟大家介绍一下在 Linux 系统下配置Jenkins自动化构建Android项目的环境，下面就来具体操作一下吧：</p><h2 id="一-、sdk安装"><a href="#一-、sdk安装" class="headerlink" title="一 、sdk安装"></a>一 、sdk安装</h2><h3 id="1-下载sdk-for-linux"><a href="#1-下载sdk-for-linux" class="headerlink" title="1. 下载sdk for linux"></a>1. 下载sdk for linux</h3><pre><code>$ wget https://dl.google.com/android/android-sdk_r24.4.1-linux.tgz</code></pre><h3 id="2-解压Android-SDK"><a href="#2-解压Android-SDK" class="headerlink" title="2. 解压Android SDK"></a>2. 解压Android SDK</h3><pre><code>$ tar -zvxf android-sdk_r24.4.1-linux.tgz</code></pre><h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h3><p>在文件/etc/profile末端添加如下两行：</p><pre><code>export ANDROID_HOME=/usr/local/android-sdk-linuxexport PATH=$ANDROID_HOME/tools:$PATH</code></pre><p>android-sdk-linux是你解压后的文件名，tools一定要这样写，是里面文件夹的名称</p><p>执行命令文件立马生效</p><pre><code>$ source /etc/profile</code></pre><h3 id="4-安装所有包"><a href="#4-安装所有包" class="headerlink" title="4.安装所有包"></a>4.安装所有包</h3><pre><code>$ android update sdk --no-ui</code></pre><p>或者查看序列号</p><pre><code>$ android list sdk --all</code></pre><p>结果:</p><pre><code>   1- Android SDK Tools, revision 24.1.2   2- Android SDK Platform-tools, revision 22   3- Android SDK Build-tools, revision 22.0.1   4- Android SDK Build-tools, revision 22 (Obsolete)   5- Android SDK Build-tools, revision 21.1.2   6- Android SDK Build-tools, revision 21.1.1 (Obsolete)   7- Android SDK Build-tools, revision 21.1 (Obsolete)   8- Android SDK Build-tools, revision 21.0.2 (Obsolete)   9- Android SDK Build-tools, revision 21.0.1 (Obsolete)  10- Android SDK Build-tools, revision 21 (Obsolete)  11- Android SDK Build-tools, revision 20  12- Android SDK Build-tools, revision 19.1  13- Android SDK Build-tools, revision 19.0.3 (Obsolete)  14- Android SDK Build-tools, revision 19.0.2 (Obsolete)  15- Android SDK Build-tools, revision 19.0.1 (Obsolete)  16- Android SDK Build-tools, revision 19 (Obsolete)  17- Android SDK Build-tools, revision 18.1.1 (Obsolete)  18- Android SDK Build-tools, revision 18.1 (Obsolete)  19- Android SDK Build-tools, revision 18.0.1 (Obsolete)  20- Android SDK Build-tools, revision 17 (Obsolete)  21- Documentation for Android SDK, API 22, revision 1  22- SDK Platform Android 5.1.1, API 22, revision 2  23- SDK Platform Android 5.0.1, API 21, revision 2  24- SDK Platform Android 4.4W.2, API 20, revision 2  25- SDK Platform Android 4.4.2, API 19, revision 4  26- SDK Platform Android 4.3.1, API 18, revision 3  27- SDK Platform Android 4.2.2, API 17, revision 3</code></pre><p>按序列号安装</p><pre><code>$ android update sdk -u --all --filter 1,2,3,5,11,12,22,23,24,25,26,27,28,29,88,89</code></pre><h2 id="二-、gradle安装"><a href="#二-、gradle安装" class="headerlink" title="二 、gradle安装"></a>二 、gradle安装</h2><h3 id="1-下载gradle"><a href="#1-下载gradle" class="headerlink" title="1. 下载gradle"></a>1. 下载gradle</h3><pre><code>$ wget https://downloads.gradle.org/distributions/gradle-4.4.1-all.zip</code></pre><h3 id="2-解压gradle"><a href="#2-解压gradle" class="headerlink" title="2. 解压gradle"></a>2. 解压gradle</h3><pre><code>$ unzp gradle-4.4.1-all.zip</code></pre><h3 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3. 设置环境变量"></a>3. 设置环境变量</h3><h4 id="3-1-简要配置"><a href="#3-1-简要配置" class="headerlink" title="3.1.简要配置"></a>3.1.简要配置</h4><pre><code>export GRADLE_HOME=/usr/gradle/gradle-4.4.1export PATH=$PATH:$GRADLE_HOME</code></pre><pre><code>$ echo $GRADLE_HOME</code></pre><p>输出：</p><pre><code>/usr/gradle/gradle-4.4.1</code></pre><pre><code>$ echo $PATH</code></pre><p>输出：</p><pre><code>/usr/lib64/qt-3.3/bin:/usr/java/jdk1.8.0_151/bin:/usr/gradle/gradle-4.4.1/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</code></pre><p>这种设置环境变量虽方便，但安装路径会在机器重启以后会消失。需进行以下步骤设置：</p><h4 id="3-2-持久配置"><a href="#3-2-持久配置" class="headerlink" title="3.2.持久配置"></a>3.2.持久配置</h4><h5 id="3-2-1-添加执行配置文件"><a href="#3-2-1-添加执行配置文件" class="headerlink" title="3.2.1.添加执行配置文件"></a>3.2.1.添加执行配置文件</h5><pre><code>$ vi /etc/profile.d/gradle.sh</code></pre><p>添加以下内容：</p><pre><code>GRADLE_HOME=/usr/gradle/gradle-4.4.1PATH=$GRADLE_HOME/bin:$PATHexport PATH GRADLE_HOME</code></pre><h5 id="3-2-2-添加权限"><a href="#3-2-2-添加权限" class="headerlink" title="3.2.2.添加权限"></a>3.2.2.添加权限</h5><pre><code>$ chmod +x /etc/profile.d/gradle.sh</code></pre><h5 id="3-2-3-设置环境变量永久有效"><a href="#3-2-3-设置环境变量永久有效" class="headerlink" title="3.2.3.设置环境变量永久有效"></a>3.2.3.设置环境变量永久有效</h5><pre><code>$ source /etc/profile.d/gradle.sh</code></pre><p>检测版本：</p><pre><code>$ gradle -v</code></pre><p>输出：</p><pre><code>------------------------------------------------------------Gradle 4.4.1------------------------------------------------------------Build time:   2017-12-20 15:45:23 UTCRevision:     10ed9dc355dc39f6307cc98fbd8cea314bdd381cGroovy:       2.4.12Ant:          Apache Ant(TM) version 1.9.9 compiled on February 2 2017JVM:          1.8.0_151 (Oracle Corporation 25.151-b12)OS:           Linux 2.6.32-573.el6.x86_64 amd64</code></pre><h2 id="三-、新建项目"><a href="#三-、新建项目" class="headerlink" title="三 、新建项目"></a>三 、新建项目</h2><p> 在Linux上新建项目与在windows系统上搭建的Jenkins 创建项目的方法是一样的，只需要将对应的 windows 系统路径更改为 Linux 系统路径即可。</p><h3 id="附：Linux-系统下移动文件命令"><a href="#附：Linux-系统下移动文件命令" class="headerlink" title="附：Linux 系统下移动文件命令"></a>附：Linux 系统下移动文件命令</h3><pre><code> # 定义当前时间# today=`date &quot;+%Y%m%d%H%M%S&quot;` today=`date +&quot;%Y%m%d&quot;`# 工作空间目录space=/opt/datas/android/newEcoClinic# apk文件目录apkDir=$space/app/build/outputs/apk# 共享文件夹挂载的文件目录shareDir=./windows# apk要放置的目标文件夹targetDir=AndroidApk/jenkinsBuildApks/newEcoClinic# 定义开发apk文件路径devPath=$shareDir/$targetDir/dev/$today# 定义测试apk文件路径testPath=$shareDir/$targetDir/test/$today# 定义正式apk文件路径releasePath=$shareDir/$targetDir/release/$today# 创建文件夹mkdir -p $shareDir# 将共享文件夹挂载到创建好的文件夹上sudo mount -t cifs -o username=&#39;tech&#39;,password=&#39;!qaz2wsx3edc&#39; //192.168.22.156/tech $shareDir# 创建开发APK文件夹mkdir -p  $devPath# 创建测试APK文件夹mkdir -p  $testPath# 创建正式APK文件夹mkdir -p  $releasePath# 复制开发apk到开发APK文件夹cp $apkDir/*dev*.apk $devPath# 复制测试apk到测试APK文件夹cp $apkDir/*test*.apk $testPath# 复制正式apk到正式APK文件夹cp $apkDir/*release*.apk $releasePath# 取消挂载sudo umount $shareDir# 删除源目录的jar文件# find $space/app/build/outputs/apk/* -name &#39;*.jar&#39;|xargs rm -rf# 删除无用的文件rm -rf  $space/app/build</code></pre><h2 id="四-、邮件通知"><a href="#四-、邮件通知" class="headerlink" title="四 、邮件通知"></a>四 、邮件通知</h2><p><strong>邮件通知配置与Windows 环境下的Jenkins系统配置方法一样。</strong></p><p><strong>请参考 :  配置项目构建完成后邮件通知—- Jenkins自动化部署学习笔记（四）</strong></p>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> 自动化部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA创建类注释模板和方法注释模板</title>
      <link href="/20180615/developtools/idea-chuang-jian-lei-zhu-shi-mo-ban-he-fang-fa-zhu-shi-mo-ban/"/>
      <url>/20180615/developtools/idea-chuang-jian-lei-zhu-shi-mo-ban-he-fang-fa-zhu-shi-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA-创建类注释模板和方法注释模板"><a href="#IDEA-创建类注释模板和方法注释模板" class="headerlink" title="IDEA 创建类注释模板和方法注释模板"></a>IDEA 创建类注释模板和方法注释模板</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;在使用Idea的时候，它的注释模板很简单，不够详细；所有大多数开发者都想设置一个比较详细的注释模板，我现在把我了解的创建类注释模板和方法注释模板的操作记录下来，分享给大家<br>我们需要定义的注释模板如下：<br>类注释模板：</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-1a315507b56b08ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="类注释模板"></p><p>方法注释模板：</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-8d4ab11bd45f5566.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="方法注释模板"></p><h1 id="一、设置IDEA-中的类注释模板"><a href="#一、设置IDEA-中的类注释模板" class="headerlink" title="一、设置IDEA 中的类注释模板"></a>一、设置IDEA 中的类注释模板</h1><h2 id="1、找到File-Header-java文件"><a href="#1、找到File-Header-java文件" class="headerlink" title="1、找到File Header.java文件"></a>1、找到File Header.java文件</h2><p>File -&gt; Settings -&gt; Editor -&gt; File and Code Templates -&gt; Files<br>选择Class , Interface ，Enum 等等，我们都可以看到，在右侧区域中，在public class 上面，都有一行 #parse(“File Header.java”) ，<br><img src="https://upload-images.jianshu.io/upload_images/3236417-3da571f314086061.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="类注释模板"></p><p>这句代码是引入了File Header.java文件，作为我们创建的Class Interface ,Enum 等文件的注释，那么这个类在哪呢，我们可以看到，在 Files 右侧，有一个 Includes 选项，在这里，我们可以定义各种的模板，在需要的地方去引入这个模板，这里已经在类文件中引入了File Header.java 模板，那我们就更改这个模板成为我们想设置成的样子</p><h2 id="2、定义类文件注释模板"><a href="#2、定义类文件注释模板" class="headerlink" title="2、定义类文件注释模板"></a>2、定义类文件注释模板</h2><p><img src="https://upload-images.jianshu.io/upload_images/3236417-a1f6f52b4c48e29f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置类注释模板"></p><pre><code>/** * @ClassName ${NAME}.java * @author admin * @version 1.0.0 * @Description TODO * @createTime ${YEAR}年${MONTH}月${DAY}日 ${HOUR}:${MINUTE}:00 */</code></pre><h2 id="3、类文件变量说明"><a href="#3、类文件变量说明" class="headerlink" title="3、类文件变量说明"></a>3、类文件变量说明</h2><p>*注：<br> ${PACKAGE_NAME} :  包路径<br> ${NAME} :  文件名<br>${USER} ： 主机用户名<br>${DATE} ： 系统当前日期，格式为：yyyy/mm/dd<br>${TIME} ： 系统当前时间 格式为：HH:mm<br>${YEAR}：当前年<br>${MONTH}：当前月<br>${MONTH_NAME_SHORT} ： 月份名称简写；如：Jan, Feb, etc.<br>${MONTH_NAME_FULL} ： 月份名称全拼；如：January, February.<br>${DAY} ：当前天<br>${DAY_NAME_SHORT} ：星期简写；如：Mon, Tue, etc.<br>${DAY_NAME_FULL}：星期全写；如：Mon, Tue, etc.<br>${HOUR} ： 当前小时<br>${MINUTE} ：当前分钟<br>${PROJECT_NAME} ： 项目名称</p><h1 id="二、定义方法注释模板"><a href="#二、定义方法注释模板" class="headerlink" title="二、定义方法注释模板"></a>二、定义方法注释模板</h1><h2 id="1、创建自定义方法模板组"><a href="#1、创建自定义方法模板组" class="headerlink" title="1、创建自定义方法模板组"></a>1、创建自定义方法模板组</h2><p>File -&gt; Settings -&gt; Editor -&gt; Live Templates</p><p>在Live Templates 右侧点击+号，添加一个Templates Group，命名为 methodTemplates<br><img src="https://upload-images.jianshu.io/upload_images/3236417-5dfc04cb236a6cef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加一个Templates Group"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-405fbd745d525698.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="methodTemplates"></p><h1 id="2、在刚刚创建的-methodTemplates-下创建一个-Live-Templates-，如下"><a href="#2、在刚刚创建的-methodTemplates-下创建一个-Live-Templates-，如下" class="headerlink" title="2、在刚刚创建的 methodTemplates 下创建一个 Live Templates ，如下"></a>2、在刚刚创建的 methodTemplates 下创建一个 Live Templates ，如下</h1><p><img src="https://upload-images.jianshu.io/upload_images/3236417-cc1c1469d64456f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><p>1）、在位置1处： 输入模板的简写码</p><pre><code> 在位置2处：输入模板的描述 在位置3处： 输入方法注释模板样式，可变变量要用 **$变量名$** 来表示，如：$param$；</code></pre><p>   若不设置成如此的变量名，位置4不可点击，模板如下：</p><pre><code>/*** @title $title$* @description $description$* @author admin $param$* @updateTime $date$ $TIME$ $return$* @throws $throws$*/</code></pre><pre><code>    点击位置4处：可编辑定义的变量的值，如下：</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-2537a95833ec23ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编辑定义的变量值"></p></li></ul><p>变量param 为方法的参数变量，需要根据方法的参数多少进行变化；变量 return 为返回值类型，也要根据方法的返回值进行变化，所一要自行设置该方法，设置的代码如下，复制粘贴即可：</p><p><strong>param  :</strong></p><pre><code>groovyScript(&quot;def result=&#39;&#39;; def stop=false; def params=\&quot;${_1}\&quot;.replaceAll(&#39;[\\\\[|\\\\]|\\\\s]&#39;, &#39;&#39;).split(&#39;,&#39;).toList(); if (params.size()==1 &amp;&amp; (params[0]==null || params[0]==&#39;null&#39; || params[0]==&#39;&#39;)) { stop=true; }; if(!stop) { for(i=0; i &lt; params.size(); i++) {result +=((i==0) ? &#39;\\r\\n&#39; : &#39;&#39;) + ((i &lt; params.size() - 1) ? &#39; * @param: &#39; + params[i] + &#39;\\r\\n&#39; : &#39; * @param: &#39; + params[i] + &#39;&#39;)}; }; return result;&quot;, methodParameters())</code></pre><p><strong>return  :</strong></p><pre><code>groovyScript(&quot;def result=&#39;&#39;; def data=\&quot;${_1}\&quot;; def stop=false; if(data==null || data==&#39;null&#39; || data==&#39;&#39; || data==&#39;void&#39; ) { stop=true; }; if(!stop) { result += &#39;\\r\\n&#39; + &#39; * @return: &#39; + data; }; return result;&quot;, methodReturnType())</code></pre><ul><li>2）、在位置3下方，点击选择该模板应用的范围，可选Everywhere 表示任何位置都可添加该注释<br><img src="https://upload-images.jianshu.io/upload_images/3236417-4ea0a8d155fd339c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><p>改位置首次为 define<br><img src="https://upload-images.jianshu.io/upload_images/3236417-782a5a153a41e457.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>修改时为change<br><img src="https://upload-images.jianshu.io/upload_images/3236417-d5ca37754ced7ff7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>3）、点击options 中的 Expand with 可选择该模板配合使用的快捷键，如 Tab键，Space 空格键 ， Enter 回车键 等等；<br><img src="https://upload-images.jianshu.io/upload_images/3236417-1c3ebd262a086049.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><p>如在这里设置的模板关键词为 *  ，配合使用快捷键为Tab键</p><h2 id="3、方法模板使用说明"><a href="#3、方法模板使用说明" class="headerlink" title="3、方法模板使用说明"></a>3、方法模板使用说明</h2><p>则在方法中输入 * ，在按下Tab 键，即可按照模板生成注释。<br><img src="https://upload-images.jianshu.io/upload_images/3236417-165f571c5e6512ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成注释"></p><hr><p>大功告成，仅供参考！</p>]]></content>
      
      
      <categories>
          
          <category> Developer Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Developer Tools </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Android studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置项目构建完成后邮件通知---- Jenkins自动化部署学习笔记（四）</title>
      <link href="/20180612/jenkins/pei-zhi-xiang-mu-gou-jian-wan-cheng-hou-you-jian-tong-zhi-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-si/"/>
      <url>/20180612/jenkins/pei-zhi-xiang-mu-gou-jian-wan-cheng-hou-you-jian-tong-zhi-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-si/</url>
      
        <content type="html"><![CDATA[<h1 id="配置项目构建完成后邮件通知—-Jenkins自动化部署学习笔记（四）"><a href="#配置项目构建完成后邮件通知—-Jenkins自动化部署学习笔记（四）" class="headerlink" title="配置项目构建完成后邮件通知—- Jenkins自动化部署学习笔记（四）"></a>配置项目构建完成后邮件通知—- Jenkins自动化部署学习笔记（四）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;在之前的文章中，跟大家介绍了配置Jenkins程序， 使用Jenkins 进行自动化构建，构建成功后的文件移动，这篇文章，我们来说说构建任务失败怎么邮件通知相关人员。</p><h2 id="一、全局邮件配置"><a href="#一、全局邮件配置" class="headerlink" title="一、全局邮件配置"></a>一、全局邮件配置</h2><ol><li>在Jenkins 的主视图下点击系统管理 -&gt; 系统设置 ，在系统设置中找到 Jenkins Location 区块，这这一区块中，有两个需要配置的</li></ol><ul><li>A：Jenkins URL   值为自己Jenkins所在主机IP或者有效域名+Jenkins端口号</li><li>B：系统管理员邮件地址 值为Jenkins系统的邮件地址，用于发送邮件，进行通知，必须填写，否则无法发送邮件<br><img src="https://upload-images.jianshu.io/upload_images/3236417-8e5595f138fb4ce0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" Jenkins Location "></li></ul><ol start="2"><li>在系统设置下方找到邮件通知区块，填写邮件配置信息<br> <img src="https://upload-images.jianshu.io/upload_images/3236417-3cdae6f96f6ba118.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ol><p>SMPT 服务器：你的邮箱服务器的SMTP服务地址<br>如：阿里云企业邮箱，为：smtp@[你的域名]<br>        腾讯企业邮箱为：smtp.exmail.qq.com<br>默认邮件后缀，写自己企业邮箱的后缀，qq邮箱写@qq.com，163邮箱写@163.com<br>勾选使用SMTP验证：<br>用户名：输入Jenkins系统邮件地址，如service@***.com<br>密码：输入 Jenkins系统邮件用户对应的密码</p><p>然后我们可以勾选  “通过发送测试邮件测试配置”来验证邮件配置是否正确<br>输入测试需要接受通知邮件的地址，点击右下侧的 Test configuration，<br>若邮件地址下方出现 Email was successfuly sent 表示邮件配置成功。<br><img src="https://upload-images.jianshu.io/upload_images/3236417-78be86bafc5a5246.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>点击保存，我们去进行项目配置</p><h2 id="二-、-在任务列表中，点击需要配置的构建任务，进入构建任务中，点击左侧的配置，进行邮件的配置"><a href="#二-、-在任务列表中，点击需要配置的构建任务，进入构建任务中，点击左侧的配置，进行邮件的配置" class="headerlink" title="二 、 在任务列表中，点击需要配置的构建任务，进入构建任务中，点击左侧的配置，进行邮件的配置"></a>二 、 在任务列表中，点击需要配置的构建任务，进入构建任务中，点击左侧的配置，进行邮件的配置</h2><p>在页面最底处，我们看到有一个区块，叫构建后操作，点击 添加构建后操作步骤 ，选择Email-Notifiction,<br>在Recipients 中输入收件人地址<br><img src="https://upload-images.jianshu.io/upload_images/3236417-2824f3ad02c3ef8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>Jenkins会在发生某个重要事件时向指定的收件人发送电子邮件。</p><ul><li>每一次失败的构建触发一个新的电子邮件。</li><li>失败（或不稳定）构建后的成功构建会触发新电子邮件，表明危机已经结束。</li><li>成功构建后的不稳定构建会触发新电子邮件，表明存在回归。</li><li>除非进行配置，否则每个不稳定的构建都会触发新的电子邮件，表明回归仍然存在。</li></ul><p><strong>对于那些不稳定构建是常态的懒惰项目，请取消选中“每次不稳定构建都发送电子邮件”。</strong><br>至此，构建失败发送邮件通知配置完成。可自行验证</p>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> 自动化部署 </tag>
            
            <tag> 邮件通知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置项目构建完成后文件移动---- Jenkins自动化部署学习笔记（三）</title>
      <link href="/20180530/jenkins/pei-zhi-xiang-mu-gou-jian-wan-cheng-hou-wen-jian-yi-dong-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-san/"/>
      <url>/20180530/jenkins/pei-zhi-xiang-mu-gou-jian-wan-cheng-hou-wen-jian-yi-dong-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-san/</url>
      
        <content type="html"><![CDATA[<h1 id="配置项目构建完成后文件移动—-Jenkins自动化部署学习笔记（三）"><a href="#配置项目构建完成后文件移动—-Jenkins自动化部署学习笔记（三）" class="headerlink" title="配置项目构建完成后文件移动—- Jenkins自动化部署学习笔记（三）"></a>配置项目构建完成后文件移动—- Jenkins自动化部署学习笔记（三）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;在前两篇文章中，跟大家分享了在 Windows 系统上安装 Jenkins 和使用 Jenkins 进行 Android 项目的编译打包；相信可能会有人疑问，打包完成之后，我需要将 apk 文件放入指定位置怎么办。</p><p>&emsp;&emsp;其实，Jenkins 功能很强大，它可以配置在打包完成之后将你所需的文件拷贝至目标路径，亦可配置在打包完成后（成功/失败），邮件通知相关人员。下面详细介绍：</p><h2 id="一、将打好的包移动至指定目录"><a href="#一、将打好的包移动至指定目录" class="headerlink" title="一、将打好的包移动至指定目录"></a>一、将打好的包移动至指定目录</h2><ol><li>我在自己的电脑上安装 Jenkins ，进行项目构建，并且想要将每次构建的包存入到E盘的AndroidApk目录下：<br> 在上篇文章中，我们说到了，在配置构建任务时，有一个构建的选项，我们可以增加相应的操作来实现；<ul><li>（1）、在构建选项区域下方，点击 <strong>增加构建步骤</strong> ，选择<strong>Execete Windows batch commond</strong><br>添加一个构建任务（务必在<strong>Invoke Gradle script</strong> 任务下方）<br><img src="https://upload-images.jianshu.io/upload_images/3236417-82616e807b302e26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul></li></ol><ul><li>（2）、在增加的 Windows 命令框中，需要配置相应的操作命令来实现移动的功能</li></ul><p>其实移动的功能，我们可以看作是将源文件复制到目标目录，然后将源文件删除。<br>在打包时我们可以根据不同的环境配置不同的包，比如<em>debug</em>.apk ，<em>release</em>.apk；<br>我们也可以使用命令，将不同环境的包，移动至不同的目录下：</p><p>复制文件，我们需要源文件目录和目标文件目录：<br>此项目中：<br>源文件目录：D:\jenkinsSpace\example\app\build\outputs\apk\<br>目标文件目录：E:\AndroidApk<br>在AndroidApk下，我们再创建不同的文件夹，如：devApk 和 releaseApk<br>故，命令如下：  </p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-37c45381987196df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="移动文件命令"></p><pre><code>copy D:\jenkinsSpace\example\app\build\outputs\apk\*debug*.apk E:\AndroidApk\devApkcopy D:\jenkinsSpace\example\app\build\outputs\apk\*release*.apk E:\AndroidApk\releaseApkrmdir /s /q D:\jenkinsSpace\example\</code></pre><p>可以看到，这个总共有三条命令</p><p>第一条命令：是将源文件目录下的名称包含 debug ，后缀名为  .apk  的文件复制到 E:\AndroidApk\devApk  目录下</p><p>第二条命令：是将源文件目录下的名称包含 release ，后缀名为  .apk  的文件复制到 E:\AndroidApk\releaseApk  目录下</p><p>第三条命令：是将 Jenkins 构建该项目的工作空间进行清空（删除工作空间目录及子文件）</p><ul><li>（3）、配置好之后，我们点击保存， 进行立即构建，构建结果如下：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3236417-0716cd05044fa6e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建结果"></p><p>我们可以看到，在位置 1 处：项目构建成功，耗时 1分56秒</p><p>位置 2 处 ：执行了复制名称包含 debug ，后缀名为 .apk 的文件的命令，成功</p><p>位置 3 处 ：执行了复制名称包含 release ，后缀名为 .apk 的文件的命令，失败</p><p>位置 4 处：执行了删除工作空间的命令，成功</p><p>位置 5 处：退出执行命令，exit</p><p>位置 3 出执行失败的原因是，我们再配置项目构建任务的时候，只是写了 clean assembleDebug 这两个命令，进行项目clean 和debug构建，我们将这个命令更改为clean build，就会构建所有配置的渠道包。</p><ol start="2"><li>我们有时候需要将打好的apk 移动至共享文件夹，方便大家使用获取安装，这时候，我们只需要在执行复制命令前增加一行命令，将共享文件夹目录映射到本地盘符：</li></ol><p>命令如下：<br>net use [盘符] \[ip][共享文件夹] “[password]” /user:”[userName]”</p><pre><code>% 将共享文件夹映射为盘符 Y:%net use Y: \\192.168.22.156\tech  &quot;!qaz2wsx3edc&quot; /user:&quot;tech&quot;</code></pre><p>在此命令下，我们更改上面的命令中的盘符为共享文件夹盘符，就可将apk移动至共享文件夹了</p><pre><code>copy D:\jenkinsSpace\example\app\build\outputs\apk\*debug*.apk Y:\AndroidApk\devApkcopy D:\jenkinsSpace\example\app\build\outputs\apk\*release*.apk Y:\AndroidApk\releaseApkrmdir /s /q D:\jenkinsSpace\example\</code></pre><ol start="3"><li>我们也可以定义一个bat文件，放在主机上，让Jenkins任务去调用执行这个bat文件，来复制/移动文件<br> bat文件内容如下：<pre><code>% 将共享文件夹映射为盘符 Y:%net use Y: \\192.168.22.156\tech  &quot;!qaz2wsx3edc&quot; /user:&quot;tech&quot;</code></pre></li></ol><p>% 配置工作空间目录变量%<br>set “spaceDir=D:\jenkinsSpace\example”</p><p>% 配置目标文件夹目录变量%<br>set “targetDir=Y:\AndroidApk\jekinsBuildApks”</p><p>% 定义当前日期字符串的变量如 20180505%<br>set “dateStr=%date:<del>0,4%%date:</del>5,2%%date:~8,2%”</p><p>% 定义Apk源文件目录%<br>set “resourceDir=%spaceDir%\app\build\outputs\apk”</p><p>% 根据日期分别定义在dev,test , release 下需要创建的文件夹目录%<br>set “devPath=%targetDir%\dev%dateStr%”<br>set “testPath=%targetDir%\test%dateStr%”<br>set “releasePath=%targetDir%\release%dateStr%”</p><p>% 创建文件夹%<br>md %devPath%<br>md %testPath%<br>md %releasePath%</p><p>% 复制apk到目标文件夹%<br>copy %resourceDir%*dev<em>.apk %devPath%<br>copy %resourceDir%*test</em>.apk %testPath%<br>copy %resourceDir%*release*.apk %releasePath%</p><p>% 强制删除工作空间目录%<br>rd/s/q %spaceDir%\</p><pre><code>该文件中 **%%** 之间的内容为**注释内容**然后我们将该bat文件命名为copyApp.bat ,放置在D:\bat\目录下，我们再Jenkins 任务中做如下配置</code></pre><p>call D:\bat\copyApp.bat<br>exit 0<br>```<br><img src="https://upload-images.jianshu.io/upload_images/3236417-84cee5e0e631f58e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="执行bat文件"></p><p>call D:\bat\copyApp.bat 是调用执行bat文件，<br>exit 0 是用来处理上面出现的因windows 命令执行错误导致Build FAILURE，<br>Jenkins 任务根据cmd命令行返回是否为0来判断是否Build 成功，故只要exit 0,每次返回0，无论windows 命令执行成功与否，只要项目Build 成功了，整个任务就是成功的。<br>至此项目移动至其他目录完成！</p><p>上一篇：<a href="https://www.jianshu.com/p/f3cf39738788" target="_blank" rel="noopener">自动化构建Android项目 —- Jenkins自动化部署学习笔记（二）</a></p>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> 自动化部署 </tag>
            
            <tag> 文件移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化构建Android项目 ---- Jenkins自动化部署学习笔记（二）</title>
      <link href="/20180522/jenkins/zi-dong-hua-gou-jian-android-xiang-mu-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-er/"/>
      <url>/20180522/jenkins/zi-dong-hua-gou-jian-android-xiang-mu-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<h1 id="自动化构建Android项目-—-Jenkins自动化部署学习笔记（二）"><a href="#自动化构建Android项目-—-Jenkins自动化部署学习笔记（二）" class="headerlink" title="自动化构建Android项目 —- Jenkins自动化部署学习笔记（二）"></a>自动化构建Android项目 —- Jenkins自动化部署学习笔记（二）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;上篇文章跟大家分享了在Windows上安装Jenkins的方法，这篇文章来跟大家分享一下利用Jenkins自动化构建Android项目：</p><h2 id="一、所需准备："><a href="#一、所需准备：" class="headerlink" title="一、所需准备："></a>一、所需准备：</h2><ol><li>Android项目上传至版本管理平台，这里我准备了Github上的Android项目<a href="https://github.com/onestravel/WebView404Example.git" target="_blank" rel="noopener">https://github.com/onestravel/WebView404Example.git</a></li><li>配置Android SDK环境变量<br> 参考上篇文章，我们进入   系统管理 -&gt; 系统设置  ，选择环境变量，进行增加<br> 输入 键：ANDROID_HOME<br> 输入 值：D:\android\sdk<br> <img src="https://upload-images.jianshu.io/upload_images/3236417-cc4874a8851f29f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置Android SDK环境变量"><br> SDK环境变量配置完成，点击保存。</li></ol><h2 id="二、自动化构建配置"><a href="#二、自动化构建配置" class="headerlink" title="二、自动化构建配置"></a>二、自动化构建配置</h2><p>1.我们再Jenkins网站，新建一个任务<br><img src="https://upload-images.jianshu.io/upload_images/3236417-63920a9fd6df1393.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建任务"></p><p>2.我们在新建任务界面，输入任务名称，选择任务类型，我们来选择构建一个自由风格的软件项目</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-00829bb1801c9a96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="任务创建"></p><p>3.点击确定，进入任务配置界面，进行自动化构建的一些配置，包括任务设置，源码管理，构建触发器，构建环境，构建和构建后操作。</p><ul><li><p>(1)、配置自定义工作空间<br>Jenkins构建默认使用的是Jenkins安装目录下的workspace，我们也可以更改为自定义的workspace，如下，在 General  板块右下方，点击高级 ，勾选<strong>使用自定义的工作空间</strong>，设置工作空间目录和显示名称。<br><img src="https://upload-images.jianshu.io/upload_images/3236417-30053e0a62f18bfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置自定义工作空间"></p></li><li><p>(2)、配置源码管理，这里我们选择Git，在Repository URL    输入框中输入Android项目存放的Git路径，Credentials，需要配置Git仓库访问的用户名和密码或者SSH验证，点击Add进行添加用户验证口令</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3236417-5397376b0f9e017f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="源码管理"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-67fa5a9859b8fe67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加用户验证口令-用户名密码模式"><br>添加完用户验证口令后，我们在Credentials中选择这个验证口令，在Branches to build中更改需要自动打包的分支，这里采用默认分支master<br><img src="https://upload-images.jianshu.io/upload_images/3236417-6ef1d5f9fa14ec80.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择验证口令，选择build分支"></p><ul><li>(3)、构建触发器，这里我们一般选择 Poll SCM 可以自定义构建触发，如：每日定时触发构建，提<br>交时触发构建，这里采用每两分钟检查构建</li></ul><table><thead><tr><th>构建时间</th><th>命令</th></tr></thead><tbody><tr><td>每 15分钟构建一次</td><td>H/15 * * * *   或*/5 * * * *</td></tr><tr><td>每天8点构建一次</td><td>0 8 * * *</td></tr><tr><td>每天8点~17点，两小时构建一次</td><td>0 8-17/2 * * *</td></tr><tr><td>周一到周五，8点~17点，两小时构建一次</td><td>0 8-17/2 * * 1-5</td></tr><tr><td>每月1号、15号各构建一次，除12月</td><td>H H 1,15 1-11 *</td></tr><tr><td><img src="https://upload-images.jianshu.io/upload_images/3236417-2c56b434364b6919.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建触发器"></td><td></td></tr></tbody></table><ul><li><p>(4)、构建环境我们这里不用设置</p></li><li><p>(5)、构建设置，点击增加构建步骤，选择Invoke Gradle Script，我们采用Gradle进行编译，选择完成之后，在增加的内容中，点击高级，展开构建配置界面<br><img src="https://upload-images.jianshu.io/upload_images/3236417-25e6b0a7b8369b54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="增加构建步骤"></p></li></ul><p>在Invoke Gradle 的Gradle Version中选择我们上篇文章配置好的本地Gradle环境，采用本地环境进行编译<br>在Task中，我们输入编译的命令，多命令用空格隔开，如果有配置渠道，我们可以设置打对应的渠道包，如：clean assembleDebug，或者 clean build<br>Root build script 中输入我们的工作空间路径<br>Build File 写项目的build.gradle文件名<br><img src="https://upload-images.jianshu.io/upload_images/3236417-2f219073bd942cb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建配置"></p><p>至此，我们自动化构建配置完成，点击保存按钮，保存配置。<br>我们来点击立即构建，即可查看项目正在构建，点击Build History 中本次构建的时间上的小箭头（鼠标移上就会出现），点击控制台输出，即可实时查看编译日志<br><img src="https://upload-images.jianshu.io/upload_images/3236417-c8a5f9a5eb51edfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="立即构建"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-fcca34e42fed0d63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台输出"></p><h2 id="三、项目构建中遇到的一些问题"><a href="#三、项目构建中遇到的一些问题" class="headerlink" title="三、项目构建中遇到的一些问题"></a>三、项目构建中遇到的一些问题</h2><ol><li>Error: Some file crunching failed, see logs for details<br> :app:mergeCeshiDebugResources** FAILED</li></ol><pre><code>* What went wrong:Execution failed for task &#39;:app:mergeCeshiDebugResources&#39;.&gt; Error: Some file crunching failed, see logs for details* Try:Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-7c8dbaae0a42bde7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误信息 一"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-c8a9e391d23beda8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误信息 一"></p><p>出现该问题主要是gradle 编译时的 build-cache 目录路径太长，导致 jenkins 无法识别该路径，才会出现此错误。</p><p>如图所示，现在build-cache 目录是在 C:\Windows\System32\config\systemprofile.android\build-cache 下，目录太长（深），导致运行时找不到文件</p><pre><code>C:\Windows\System32\config\systemprofile\.android\build-cache\63e2e64e89749266e10d6160c2536dd981719789\output\res\drawable-xhdpi-v4\abc_ab_share_pack_mtrl_alpha.9.png</code></pre><p>解决此错误的方法，是在项目的gradle.properties 文件中增加 build-cache 目录，设置一个较短的目录</p><pre><code>android.buildCacheDir=D:/android-studio/build-cache</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/3236417-fc303f1010ebf64d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="2"><li>如果我们的项目中有使用 google 服务，如：下图一</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3236417-4efd06ea88e1fb09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图一"></p><p>这时候使用jenkins 自动化构建时，有可能会编译出错，找不到google()的服务，这是因为我们的gradle版本太低的缘故，在本文中，我们的gradle 版本使用的是3.3 的，页使用的google的服务，在编译时，出现了错误，错误信息如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-b876552e488cac90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误信息"></p><p>我们在Jenkins 中的  系统管理 -&gt; 全局系统设置中，重新添加高版本的Gradle 这里使用的是4.1 版本（本地）；</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-cc2079e209a9a04e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Gradle 4.1"><br>配置完成之后，我们再本次构建任务中选用Gradle4.1进行编译该项目，则会编译通过。</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-69a31e0b785bc5b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建任务中选用Gradle4.1"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-11e5508da83d551c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Gradle编译成功"></p><p>上一篇：<a href="https://www.jianshu.com/p/de9c4f5ae7fa" target="_blank" rel="noopener">在Windows系统上安装Jenkins —- Jenkins自动化部署学习笔记（一）</a></p><p>下一篇：<a href="https://www.jianshu.com/p/ca07a19d036a" target="_blank" rel="noopener">配置项目构建完成后文件移动—- Jenkins自动化部署学习笔记（三）</a></p>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> 自动化部署 </tag>
            
            <tag> 构建Android项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始-使用IntelliJ IDEA创建SpringBoot项目</title>
      <link href="/20180509/java/cong-ling-kai-shi-shi-yong-intellij-idea-chuang-jian-springboot-xiang-mu/"/>
      <url>/20180509/java/cong-ling-kai-shi-shi-yong-intellij-idea-chuang-jian-springboot-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="从零开始-使用IntelliJ-IDEA创建SpringBoot项目"><a href="#从零开始-使用IntelliJ-IDEA创建SpringBoot项目" class="headerlink" title="从零开始-使用IntelliJ IDEA创建SpringBoot项目"></a>从零开始-使用IntelliJ IDEA创建SpringBoot项目</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>*注：此文章谨以记录学习过程，分享学习心得！</strong></p><p>刚刚开始了解SpringBoot框架，觉得很好用，觉得很有必要深入学习一下该框架，现在就来创建一个SpringBoot项目：</p><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><h3 id="1、在IDEA上新建一个Project"><a href="#1、在IDEA上新建一个Project" class="headerlink" title="1、在IDEA上新建一个Project"></a>1、在IDEA上新建一个Project</h3><p>​    在IDEA上新建一个Project，选择Spring Initializr,<br>​      Project SDK 选择安装的JDK；<br>​      Choose Initializr Service URL  选择默认（Default：<a href="https://start.spring.io）" target="_blank" rel="noopener">https://start.spring.io）</a></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-3dd7f5da4930f511.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择项目模板"></p><p>点击Next</p><h3 id="2、进行项目配置"><a href="#2、进行项目配置" class="headerlink" title="2、进行项目配置"></a>2、进行项目配置</h3><p>设置项目数组（group），项目标识（Artifact），Type选择一个Maven Project 表示是一个maven项目<br>Version：项目版本号<br>Name：项目名称<br>Description：项目描述<br>Package：项目包名</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-ca5e4ffea9f0a2a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目配置"></p><p>点击Next 下一步</p><h3 id="3、选择项目模板"><a href="#3、选择项目模板" class="headerlink" title="3、选择项目模板"></a>3、选择项目模板</h3><p>我们来选择创建一个Web项目<br>选择Spring Boot版本</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-e84e96fd9ff5e6e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择项目模板"></p><h3 id="4、设置项目名称和项目路径"><a href="#4、设置项目名称和项目路径" class="headerlink" title="4、设置项目名称和项目路径"></a>4、设置项目名称和项目路径</h3><p><img src="https://upload-images.jianshu.io/upload_images/3236417-e76ff34a55cf62aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置项目名称和项目路径"><br>设置完项目路径，和项目名称后，点击FInish，创建项目完成，需要进行项目构建，等一小会即可完成。</p><h3 id="5、创建完成，我们删除-mvn文件夹，mvnw文件和-mvnw-cmd文件"><a href="#5、创建完成，我们删除-mvn文件夹，mvnw文件和-mvnw-cmd文件" class="headerlink" title="5、创建完成，我们删除.mvn文件夹，mvnw文件和 mvnw.cmd文件"></a>5、创建完成，我们删除.mvn文件夹，mvnw文件和 mvnw.cmd文件</h3><p><img src="https://upload-images.jianshu.io/upload_images/3236417-13751e9373b17cf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="删除文件"></p><h3 id="6、maven配置的pom-xml文件"><a href="#6、maven配置的pom-xml文件" class="headerlink" title="6、maven配置的pom.xml文件"></a>6、maven配置的pom.xml文件</h3><p>我们来看一下maven配置的pom.xml文件，里面包含了SpringBoot项目运行所需的版本库</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-e29067d2f0672163.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pom.xml"></p><p>SpringBoot运行所需库为：</p><pre><code>&lt;!-- SpringBoot项目的基础库文件--&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;    &lt;/parent&gt;</code></pre><pre><code>&lt;!-- SpringBoot项目的基础库文件--&gt;    &lt;dependencies&gt;&lt;!-- web项目库--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;&lt;!-- 测试所需库--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre><h3 id="7、创建一个HelloService"><a href="#7、创建一个HelloService" class="headerlink" title="7、创建一个HelloService"></a>7、创建一个HelloService</h3><pre><code>package com.example.springbootdemo.service;import org.springframework.stereotype.Service;@Servicepublic interface HelloService {    String sayHello();}</code></pre><h3 id="8、创建HelloService的实现类HelloServiceImpl，实现sayHello-方法，返回”Hello-World-”"><a href="#8、创建HelloService的实现类HelloServiceImpl，实现sayHello-方法，返回”Hello-World-”" class="headerlink" title="8、创建HelloService的实现类HelloServiceImpl，实现sayHello()方法，返回”Hello World!”"></a>8、创建HelloService的实现类HelloServiceImpl，实现sayHello()方法，返回”Hello World!”</h3><pre><code>package com.example.springbootdemo.service.impl;import com.example.springbootdemo.service.HelloService;import org.springframework.stereotype.Component;@Componentpublic class HelloServiceImpl implements HelloService {    @Override    public String sayHello() {        return &quot;Hello World!&quot;;    }}</code></pre><h3 id="9、创建HelloController，调用HelloService实现类，打印”Hello-World-”到浏览器"><a href="#9、创建HelloController，调用HelloService实现类，打印”Hello-World-”到浏览器" class="headerlink" title="9、创建HelloController，调用HelloService实现类，打印”Hello World!”到浏览器"></a>9、创建HelloController，调用HelloService实现类，打印”Hello World!”到浏览器</h3><pre><code>package com.example.springbootdemo.controller;import com.example.springbootdemo.service.HelloService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping(&quot;/&quot;)public class HelloController {    @Autowired    private HelloService helloService;    @RequestMapping(&quot;/hello&quot;)    @ResponseBody    public String helloWorld(){        return helloService.sayHello();    }}</code></pre><h3 id="10、见证奇迹的时刻，我们来运行一下所建项目，看能不能跟我们预期一样，在浏览器输入访问地址http-localhost-8080-hello"><a href="#10、见证奇迹的时刻，我们来运行一下所建项目，看能不能跟我们预期一样，在浏览器输入访问地址http-localhost-8080-hello" class="headerlink" title="10、见证奇迹的时刻，我们来运行一下所建项目，看能不能跟我们预期一样，在浏览器输入访问地址http://localhost:8080/hello"></a>10、见证奇迹的时刻，我们来运行一下所建项目，看能不能跟我们预期一样，在浏览器输入访问地址<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a></h3><p>就可以看到Hello World!<br>至此，学习创建一个SpringBoot项目就完成了。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/onestravel/SpringBootDemo" target="_blank" rel="noopener">查看源码</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Windows系统上安装Jenkins ---- Jenkins自动化部署学习笔记（一）</title>
      <link href="/20180509/jenkins/zai-windows-xi-tong-shang-an-zhuang-jenkins-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-yi/"/>
      <url>/20180509/jenkins/zai-windows-xi-tong-shang-an-zhuang-jenkins-jenkins-zi-dong-hua-bu-shu-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="在Windows系统上安装Jenkins-—-Jenkins自动化部署学习笔记（一）"><a href="#在Windows系统上安装Jenkins-—-Jenkins自动化部署学习笔记（一）" class="headerlink" title="在Windows系统上安装Jenkins —- Jenkins自动化部署学习笔记（一）"></a>在Windows系统上安装Jenkins —- Jenkins自动化部署学习笔记（一）</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;之前一直想着学习一下Jenkins自动化部署，最近刚好有点时间，就利用这点时间来学习一下Jenkins自动化部署，做个笔记，既可以巩固自己的学习，也可以帮助更多的人了解Jenkins自动化部署。</p><p> &emsp;&emsp;先从简单的开始，我们先用Windows系统来安装Jenkins，当然以后肯定会在Ubuntu上进行Jenkins安装配置的。</p><h1 id="一、安装前准备："><a href="#一、安装前准备：" class="headerlink" title="一、安装前准备："></a>一、安装前准备：</h1><h3 id="1、JDK1-7，或者JDK1-8："><a href="#1、JDK1-7，或者JDK1-8：" class="headerlink" title="1、JDK1.7，或者JDK1.8："></a>1、JDK1.7，或者JDK1.8：</h3><p>​    Jdk下载地址如下：<br>​        Windows  X86:  <a href="http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-windows-i586.exe" target="_blank" rel="noopener">jdk-8u171-windows-i586.exe</a><br>​        Windows  X64:  <a href="http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-windows-x64.exe" target="_blank" rel="noopener">jdk-8u171-windows-x64.exe</a><br>​        Linux X64：<a href="http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz" target="_blank" rel="noopener">jdk-8u171-linux-x64.tar.gz</a></p><h3 id="2、Jenkins安装包："><a href="#2、Jenkins安装包：" class="headerlink" title="2、Jenkins安装包："></a>2、Jenkins安装包：</h3><p>​        Jenkins for windows ：<a href="https://jenkins.io/download/thank-you-downloading-windows-installer-stable/" target="_blank" rel="noopener">Jenkins-for-windows-installer</a></p><h2 id="二、安装Jdk，配置环境变量"><a href="#二、安装Jdk，配置环境变量" class="headerlink" title="二、安装Jdk，配置环境变量"></a>二、安装Jdk，配置环境变量</h2><h3 id="1、安装jdk"><a href="#1、安装jdk" class="headerlink" title="1、安装jdk"></a>1、安装jdk</h3><p>&emsp;&emsp;上面准备好的Jdk安装包，选择自己电脑系统适合的进行下载，一直默认安装就可以，也可以更改安装路径，最好jdk和jre路径一起改。</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-db7f6970fb9acef0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更改jdk安装路径"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-1984703cb48a757d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更改jre安装路径"></p><h3 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h3><p>&emsp;&emsp;安装好jdk之后，我们进行环境变量的配置：</p><ul><li><p>在「计算机」右键，选择「属性」，在弹出页面，选择「高级系统设置」，「环境变量」</p><p> <img src="https://upload-images.jianshu.io/upload_images/3236417-6cfccfab63a4a90d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="环境变量"></p></li></ul><ul><li><p>在环境变量弹出窗中点击「系统变量」下方的新建按钮，新建JAVA_HOME变量，值为刚安装的JDK路径，如我的JDK路径为：D:\Program Files\Java\jdk1.8.0_162</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-5437a7a3f31db6c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建JAVA_HOME变量"></p></li><li><p>找到 Path 变量，没有的话就新建一个，不过一般都会有的 ，点击编辑，在path变量的最前面添加Jdk的路径为“ %JAVA_HOME%\bin; ”</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3236417-6ddc36e5eb577b3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="在Path变量中添加jdk路径"></p><ul><li>找到classpath变量，没有的话，新建，增加classpath变量：%JAVA_HOME%\lib;</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3236417-61a46da5f0f875be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="增加classpath变量"></p><ul><li>环境变量这就配置完成了，我们打开命令窗口，输入命令来验证是否配置合适：<br>命令为：<br>  java -version  //查看java版本号<br>或<br>  javac   </li></ul><p><img src="https://upload-images.jianshu.io/upload_images/3236417-2c3136f894087003.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="java -version命令"></p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-a2fdb8a4daa46a4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="javac命令"></p><h2 id="三、安装Jenkins"><a href="#三、安装Jenkins" class="headerlink" title="三、安装Jenkins"></a>三、安装Jenkins</h2><ol><li><p>windows双击下载的Jenkins安装包 Jenkins.msi ，进入安装模式，选择默认配置，安装完成之后，就会默认打开浏览器 <a href="http://localhost:8080,显示">http://localhost:8080,显示</a>   Jenkins正在启动，请稍后…<br> 这个过程需要一段时间，耐心等待启动完成<br> <img src="https://upload-images.jianshu.io/upload_images/3236417-5fe56e9319f817d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Jenkins正在启动，请稍后..."></p></li><li><p>在安装过程中对自动生成密码，存储在Jenkins安装位置下的一个文件里，启动完成之后会到登录界面<br> <img src="https://upload-images.jianshu.io/upload_images/3236417-9a297bb432fedacc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="登录界面"></p></li><li><p>在界面所示路径下，打开文件，复制密码，在管理员密码框输入密码，点击继续，等待系统初始化，出现自定义Jenkins界面，可以选择安装推荐的插件，括者选择需要的插件来安装，也可以不选择安装，直接点击右上角的X号关闭界面，以后可以通过插件管理器安装插件<br> <img src="https://upload-images.jianshu.io/upload_images/3236417-e755cf9025abd857.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自定义Jenkins"></p></li></ol><p>4.这里选择插件来安装，选择之后点击下一步，进入如下安装界面，等待安装完成<br><img src="https://upload-images.jianshu.io/upload_images/3236417-1399f05cba30a59a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插件安装"></p><ol start="5"><li><p>插件安装完成之后，进入创建第一个管理员用户界面，输入信息，点击保存并完成，添加第一个管理员<br> <img src="https://upload-images.jianshu.io/upload_images/3236417-4a30cc9995b264d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建第一个管理员用户"></p></li><li><p>安装完成 ，点击开始使用Jenkins<br> <img src="https://upload-images.jianshu.io/upload_images/3236417-1ab7417f03dcf1da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>在Jenkins主界面点击系统管理，进入系统设置页面，选择全局工具配置<br> <img src="https://upload-images.jianshu.io/upload_images/3236417-240bbecf4396d1d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="系统设置页面"></p></li><li><p>配置本地JDK全局环境，若有Git，Gradle，Ant ，Maven环境都可以在此配置，目前只配置JDK环境和Git环境如下：<br> <img src="https://upload-images.jianshu.io/upload_images/3236417-dfbdc3fb144d4f88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置JDK环境和Git环境"></p></li><li><p>我们可以看到，目前Jenkins的访问路径还是<a href="http://localhost:8080/，如果想要更改Jenkins访问端口号，在Jenkins安装目录下打开jenkins.xml文件，更改端口号，然后再电脑的服务中找到Jenkins服务，进行重启，然后就可以使用新的端口访问Jenkins了" target="_blank" rel="noopener">http://localhost:8080/，如果想要更改Jenkins访问端口号，在Jenkins安装目录下打开jenkins.xml文件，更改端口号，然后再电脑的服务中找到Jenkins服务，进行重启，然后就可以使用新的端口访问Jenkins了</a><br> <img src="https://upload-images.jianshu.io/upload_images/3236417-57d18681d7919394.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更改Jenkins访问端口"></p></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/3236417-89f460d6ff7e33ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重启Jenkins服务"></p><p>至此，Jenkins安装完成，若要使用Jenkins进行项目构建，请参考下面文章</p><p>下一篇：<a href="https://www.jianshu.com/p/f3cf39738788" target="_blank" rel="noopener">自动化构建Android项目 —- Jenkins自动化部署学习笔记（二）</a></p>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> 自动化部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最全IDEA快捷键总结，大幅度提高工作效率</title>
      <link href="/20180506/developtools/zui-quan-idea-kuai-jie-jian-zong-jie-da-fu-du-ti-gao-gong-zuo-xiao-lu/"/>
      <url>/20180506/developtools/zui-quan-idea-kuai-jie-jian-zong-jie-da-fu-du-ti-gao-gong-zuo-xiao-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="最全IDEA快捷键总结，大幅度提高工作效率"><a href="#最全IDEA快捷键总结，大幅度提高工作效率" class="headerlink" title="最全IDEA快捷键总结，大幅度提高工作效率"></a>最全IDEA快捷键总结，大幅度提高工作效率</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h5 id="刚开始使用-IDEA-的同学可能不熟悉-IDEA-的快捷键方式觉得没有eclipse的好用但是不建议把-IDEA-的keymap改成eclipse因为-IDEA-的快捷键设计有它独到的一面刚开始使用不习惯但是用多了就会觉得这些快捷键非常好用大幅度提高工作效率听说大神们合理使用IDEA快捷键可以实现全键盘操作呢-so不要固步自封尝试新事物吧你会发现一片新的天空海阔天空-刚开始使用-IDEA-的同学可能不熟悉idea的快捷键方式，觉得没有eclipse的好用，但是不建议把-IDEA-的keymap改成eclipse，因为-IDEA-的快捷键设计有它独到的一面，刚开始使用不习惯，但是用多了就会觉得这些快捷键非常好用，大幅度提高工作效率，听说大神们合理使用IDEA快捷键可以实现全键盘操作呢。so，不要固步自封，尝试新事物吧，你会发现一片新的天空（海阔天空）"><a href="#刚开始使用-IDEA-的同学可能不熟悉-IDEA-的快捷键方式觉得没有eclipse的好用但是不建议把-IDEA-的keymap改成eclipse因为-IDEA-的快捷键设计有它独到的一面刚开始使用不习惯但是用多了就会觉得这些快捷键非常好用大幅度提高工作效率听说大神们合理使用IDEA快捷键可以实现全键盘操作呢-so不要固步自封尝试新事物吧你会发现一片新的天空海阔天空-刚开始使用-IDEA-的同学可能不熟悉idea的快捷键方式，觉得没有eclipse的好用，但是不建议把-IDEA-的keymap改成eclipse，因为-IDEA-的快捷键设计有它独到的一面，刚开始使用不习惯，但是用多了就会觉得这些快捷键非常好用，大幅度提高工作效率，听说大神们合理使用IDEA快捷键可以实现全键盘操作呢。so，不要固步自封，尝试新事物吧，你会发现一片新的天空（海阔天空）" class="headerlink" title="[](#刚开始使用 IDEA 的同学可能不熟悉 IDEA 的快捷键方式觉得没有eclipse的好用但是不建议把 IDEA 的keymap改成eclipse因为 IDEA 的快捷键设计有它独到的一面刚开始使用不习惯但是用多了就会觉得这些快捷键非常好用大幅度提高工作效率听说大神们合理使用IDEA快捷键可以实现全键盘操作呢-so不要固步自封尝试新事物吧你会发现一片新的天空海阔天空)刚开始使用 IDEA 的同学可能不熟悉idea的快捷键方式，觉得没有eclipse的好用，但是不建议把 IDEA 的keymap改成eclipse，因为 IDEA 的快捷键设计有它独到的一面，刚开始使用不习惯，但是用多了就会觉得这些快捷键非常好用，大幅度提高工作效率，听说大神们合理使用IDEA快捷键可以实现全键盘操作呢。so，不要固步自封，尝试新事物吧，你会发现一片新的天空（海阔天空）"></a>[](#刚开始使用 IDEA 的同学可能不熟悉 IDEA 的快捷键方式觉得没有eclipse的好用但是不建议把 IDEA 的keymap改成eclipse因为 IDEA 的快捷键设计有它独到的一面刚开始使用不习惯但是用多了就会觉得这些快捷键非常好用大幅度提高工作效率听说大神们合理使用IDEA快捷键可以实现全键盘操作呢-so不要固步自封尝试新事物吧你会发现一片新的天空海阔天空<del>)刚开始使用 IDEA 的同学可能不熟悉idea的快捷键方式，觉得没有eclipse的好用，但是不建议把 IDEA 的keymap改成eclipse，因为 IDEA 的快捷键设计有它独到的一面，刚开始使用不习惯，但是用多了就会觉得这些快捷键非常好用，大幅度提高工作效率，听说大神们合理使用IDEA快捷键可以实现全键盘操作呢。so，不要固步自封，尝试新事物吧，你会发现一片新的天空（海阔天空）</del></h5><h3 id="系统默认的快捷键"><a href="#系统默认的快捷键" class="headerlink" title="系统默认的快捷键"></a><a href="#系统默认的快捷键"></a>系统默认的快捷键</h3><h4 id="1-代码操作相关的快捷键"><a href="#1-代码操作相关的快捷键" class="headerlink" title="1. 代码操作相关的快捷键"></a><a href="#1-代码操作相关的快捷键"></a>1. 代码操作相关的快捷键</h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+Y</td><td>删除一行</td></tr><tr><td>Ctrl+W</td><td>选择光标所在行或者代码片（光标在大括号上），连续按会有其他效果</td></tr><tr><td>Ctrl+Z</td><td>撤销操作</td></tr><tr><td>Ctrl+Shift+Z</td><td>恢复Ctrl+Z撤销的操作</td></tr><tr><td>Alt+Enter</td><td>引入类或提供给你选择的处理方法</td></tr><tr><td>Alt+Shift+上下</td><td>代码向上/下移动一行</td></tr><tr><td>Alt+/</td><td>复制上一个单词</td></tr><tr><td>Ctrl+Shift+Enter</td><td>自动补全分号</td></tr><tr><td>Ctrl+Shift+V</td><td>粘贴板历史</td></tr><tr><td>Ctrl+Alt+M</td><td>将代码片段提取成为一个方法</td></tr><tr><td>Ctrl+G</td><td>按行号和列号来查找</td></tr><tr><td>Ctrl+Alt+L</td><td>格式化代码(和QQ快捷键冲突)</td></tr><tr><td>Ctrl+Shift+Space</td><td>自动补全代码</td></tr><tr><td>Ctrl+空格</td><td>代码提示</td></tr><tr><td>Ctrl+Alt+Space</td><td>类名或接口名提示</td></tr></tbody></table><h4 id="2-查找相关的快捷键"><a href="#2-查找相关的快捷键" class="headerlink" title="2. 查找相关的快捷键"></a><a href="#2-查找相关的快捷键"></a>2. 查找相关的快捷键</h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+F</td><td>在本文件查找，可通过方向键移动选择，按Esc消失</td></tr><tr><td>Ctrl+R</td><td>在本文件内查找/替换 ，可选择 replace 和 replaceAll，按Esc消失</td></tr><tr><td>Ctrl+Shift+F</td><td>在制定路径/模块/工程内查找(全局查找)</td></tr><tr><td>Ctrl+N</td><td>在本工程类查询某个类</td></tr><tr><td>Ctrl+Shift+N</td><td>查询某个类(不限本工程)看源码很实用，比如我想看看jdk里面TreeMap这个类的代码，就可以用这个功能</td></tr></tbody></table><h4 id="3-查看代码相关的快捷键"><a href="#3-查看代码相关的快捷键" class="headerlink" title="3.查看代码相关的快捷键"></a><a href="#3查看代码相关的快捷键"></a>3.查看代码相关的快捷键</h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+H</td><td>查看一个类的继承关系</td></tr><tr><td>Ctrl+B</td><td>查看一个类或者变量的申明</td></tr><tr><td>Alt+F7</td><td>查找一个属性或方法被谁调用</td></tr><tr><td>Alt+上下</td><td>跳到上/下一个方法(或属性)</td></tr><tr><td>Ctrl+上下</td><td>上下滑屏但是不移动光标</td></tr><tr><td>Alt+左右</td><td>同时打开多个文件时切换代码视图，切换到另一个文件视图</td></tr><tr><td>Ctrl+Alt+ 左右</td><td>返回至上次浏览的位置 非常实用，在多个文件代码中遨游的时候能够快速回到想去的位置</td></tr><tr><td>Ctrl+HOME/END</td><td>光标跳转到第一行或最后一行</td></tr><tr><td>ALT+SHIFT+C</td><td>最近修改的代码</td></tr></tbody></table><h4 id="4-提示类的快捷键"><a href="#4-提示类的快捷键" class="headerlink" title="4.提示类的快捷键"></a><a href="#4提示类的快捷键"></a>4.提示类的快捷键</h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl+Q</td><td>显示注释文档</td></tr><tr><td>Ctrl+P</td><td>查看函数参数（光标在方法参数的括号内）</td></tr><tr><td>Ctrl+J</td><td>代码模板</td></tr></tbody></table><h4 id="5-重构类快捷键"><a href="#5-重构类快捷键" class="headerlink" title="5.重构类快捷键"></a><a href="#5重构类快捷键"></a>5.重构类快捷键</h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Alt+Delete</td><td>安全删除字段或方法</td></tr><tr><td>Ctrl+Alt+N</td><td>去除一些多余的赋值过程或者函数 下面会单独演示</td></tr><tr><td>Shift+F6</td><td>重命名类或者变量</td></tr></tbody></table><h4 id="6-编译器相关快捷键"><a href="#6-编译器相关快捷键" class="headerlink" title="6.编译器相关快捷键"></a><a href="#6编译器相关快捷键"></a>6.编译器相关快捷键</h4><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Alt+F12</td><td>打开命令行终端</td></tr><tr><td>Alt+1</td><td>打开工程结构</td></tr><tr><td>Alt+7</td><td>打开类结构</td></tr><tr><td>Alt+9</td><td>打开change</td></tr></tbody></table><h4 id="7-debug快捷键"><a href="#7-debug快捷键" class="headerlink" title="7.debug快捷键"></a><a href="#7debug快捷键"></a>7.debug快捷键</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>F7</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td>F8</td><td>在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td>F9</td><td>在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td></tr><tr><td>Alt + F8</td><td>在 Debug的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td></tr><tr><td>Ctrl + F8</td><td>在 Debug模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td></tr><tr><td>Shift + F7</td><td>在 Debug模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td></tr><tr><td>Shift + F8</td><td>在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</td></tr><tr><td>Ctrl + Shift + F8</td><td>在 Debug 模式下，指定断点进入条件</td></tr><tr><td>Alt + Shift + F7</td><td>在Debug模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td></tr></tbody></table><h4 id="8-启动相关"><a href="#8-启动相关" class="headerlink" title="8.启动相关"></a><a href="#8启动相关"></a>8.启动相关</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + F9</td><td>Build Project build整个项目</td></tr><tr><td>Shift + F9</td><td>项目以Debug模式进行启动当前项目</td></tr><tr><td>Shift + F10</td><td>项目以Run模式进行启动当前项目</td></tr><tr><td>Alt + Shift + F10</td><td>以Run模式进行启动某个项目 ，项目可选</td></tr><tr><td>Alt + Shift + F10</td><td>以Run模式进行启动某个项目 ，项目可选</td></tr><tr><td>Ctrl + F2</td><td>停止当前运行的项目</td></tr><tr><td>Ctrl + Shift + F2</td><td>停止后台进程</td></tr></tbody></table><h4 id="9-版本控制操作相关"><a href="#9-版本控制操作相关" class="headerlink" title="9.版本控制操作相关"></a><a href="#9版本控制操作相关"></a>9.版本控制操作相关</h4><table><thead><tr><th>快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + ALT + A</td><td>添加文件到版本控制</td></tr><tr><td>Ctrl + T</td><td>update当前项目</td></tr><tr><td>Ctrl + K</td><td>提交当前项目的文件改动</td></tr><tr><td>Ctrl + Shift + K</td><td>将已经提交的版本push到远程服务器</td></tr><tr><td>Ctrl + ALT + Z</td><td>撤销本地更改</td></tr><tr><td>Ctrl + ALT + Shift + D</td><td>查看本地文件更改内容</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Developer Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Developer Tools </tag>
            
            <tag> Intellij IDEA </tag>
            
            <tag> Android studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+域名搭建个人主页（个人博客）</title>
      <link href="/20171020/h5/github-yu-ming-da-jian-ge-ren-zhu-ye-ge-ren-bo-ke/"/>
      <url>/20171020/h5/github-yu-ming-da-jian-ge-ren-zhu-ye-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h3 id="一、工作准备"><a href="#一、工作准备" class="headerlink" title="一、工作准备"></a>一、工作准备</h3><p>搭建个人主页需要做的准备工作有两个：</p><h5 id="1）、注册Github账号，注册Github账号是免费的，"><a href="#1）、注册Github账号，注册Github账号是免费的，" class="headerlink" title="1）、注册Github账号，注册Github账号是免费的，"></a>1）、注册Github账号，注册Github账号是免费的，</h5><p>Github网站地址：<a href="https://github.com/github" target="_blank" rel="noopener">https://github.com/github</a><br><br><br>点击Sign up进入注册页面，总共有三步，按照步骤填入相应的信息即可。<br><br>第一步：<br><img src="http://upload-images.jianshu.io/upload_images/3236417-0efc8ff977c96d71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注册"><br><br>第二步：<br><img src="http://upload-images.jianshu.io/upload_images/3236417-6f1d826de301fdcb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注册"><br><br>第三步：<br><img src="http://upload-images.jianshu.io/upload_images/3236417-cc70c3ce9933a435.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" 注册"><br><br>注册步骤完成之后点击邮箱验证后，就注册成功了。</p><h5 id="2）、注册（购买）域名"><a href="#2）、注册（购买）域名" class="headerlink" title="2）、注册（购买）域名"></a>2）、注册（购买）域名</h5><h3 id="二、创建个人主页的项目"><a href="#二、创建个人主页的项目" class="headerlink" title="二、创建个人主页的项目"></a>二、创建个人主页的项目</h3><p>登录 GitHub 之后，在页面右上角点击 + 加号按钮，点击 New repository。<br><br><br>由于是个人网站的项目，那么项目名就要按照规定来写<br><br><br>规则是：</p><p>*<em>YOUR-GITHUB-USERNAME.github.io *</em></p><p>比如我的Github用户名为onestravel1，那么项目名则应该是：onestravel1.github.io<br><img src="http://upload-images.jianshu.io/upload_images/3236417-11a0c5cd18e1c871.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建个人主页项目"><br><br>点击create Repository 就可以成功创建个人主页项目了。<br><br><br>(<a href="http://upload-images.jianshu.io/upload_images/3236417-7249a4d0fabda949.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" target="_blank" rel="noopener">http://upload-images.jianshu.io/upload_images/3236417-7249a4d0fabda949.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240</a>)<br><br><br>点击Settings进入项目设置界面<br><br><br><img src="http://upload-images.jianshu.io/upload_images/3236417-07eb28c43cdbab6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建个人主页项目"><br><br><br>然后再 GitHub Pages 选项中点击 choose a theme 按钮，选择一个初始的个人主页样式<br><br><br><img src="http://upload-images.jianshu.io/upload_images/3236417-35278ad15f24efaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" 创建个人主页项目"><br><br><br>选择一个样式的主页模板<br><br><br><img src="http://upload-images.jianshu.io/upload_images/3236417-bf64cc91bafb2517.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建个人主页项目"><br><br><br>点击 select theme 按钮之后，就会自动生成初始化的页面主题，进入代码提交界面，填入提交日志，点击commit changes 提交代码。<br><br>提交完成之后，就可以通过刚才创建时的项目名称进行访问了</p><p><strong>例如：<a href="https://onestravel1.github.io" target="_blank" rel="noopener">https://onestravel1.github.io</a></strong></p><p>到此，利用Github创建个人主页的第一步就完成了。后面可以通过git工具把该项目clone到本地，然后进行页面的更改和优化后，提交到该仓库中。则编写的代码会立即生效。</p><h3 id="三、将域名映射到个人主页项目"><a href="#三、将域名映射到个人主页项目" class="headerlink" title="三、将域名映射到个人主页项目"></a>三、将域名映射到个人主页项目</h3><p>先在阿里云上进行域名的申请，域名申请过程就不在这里详述了。比如，我申请的域名为:onestravel.win，打开阿里云官网，找到控制台-&gt;域名管理<br><br><br><img src="http://upload-images.jianshu.io/upload_images/3236417-1842db787f82bb4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射"></p><p>在域名管理页面，可以看到域名列表，刚申请的域名，要记得进行实名认证，因为我申请的是.win的域名，这两天不能进行实名认证，所以显示未实名认证。在右侧可以看到 【续费|解析|管理】 的按钮，点击 解析 按钮，看到下面的界面<br><br><br><img src="http://upload-images.jianshu.io/upload_images/3236417-a4b29367ff0a0853.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射"><br>点击添加解析<br><br><br><img src="http://upload-images.jianshu.io/upload_images/3236417-d80c28665be262ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射"></p><p>可以看到，这里添加解析需要填写的信息，</p><h6 id="记录类型：默认选择-A"><a href="#记录类型：默认选择-A" class="headerlink" title="记录类型：默认选择 A"></a>记录类型：默认选择 A</h6><h6 id="主机记录：主机记录需要添加两个，分两次添加解析，分别为-www-和-，不分先后，这次填-www"><a href="#主机记录：主机记录需要添加两个，分两次添加解析，分别为-www-和-，不分先后，这次填-www" class="headerlink" title="主机记录：主机记录需要添加两个，分两次添加解析，分别为 www 和 @ ，不分先后，这次填 www"></a>主机记录：主机记录需要添加两个，分两次添加解析，分别为 www 和 @ ，不分先后，这次填 www</h6><h6 id="解析线路：选择-默认"><a href="#解析线路：选择-默认" class="headerlink" title="解析线路：选择 默认"></a>解析线路：选择 默认</h6><h6 id="TTL值：默认-10分钟，不需要改动"><a href="#TTL值：默认-10分钟，不需要改动" class="headerlink" title="TTL值：默认 10分钟，不需要改动"></a>TTL值：默认 10分钟，不需要改动</h6><h6 id="记录值：这里需要个人主页项目的IP，那么问题来了，怎么拿到个人主页项目的IP呢，其实很简单，打开电脑终端（Mac）或者命令行（Windows），在命令行中输入命令-ping-个人主页项目原域名-，比如："><a href="#记录值：这里需要个人主页项目的IP，那么问题来了，怎么拿到个人主页项目的IP呢，其实很简单，打开电脑终端（Mac）或者命令行（Windows），在命令行中输入命令-ping-个人主页项目原域名-，比如：" class="headerlink" title="记录值：这里需要个人主页项目的IP，那么问题来了，怎么拿到个人主页项目的IP呢，其实很简单，打开电脑终端（Mac）或者命令行（Windows），在命令行中输入命令 ping [个人主页项目原域名]，比如："></a>记录值：这里需要个人主页项目的IP，那么问题来了，怎么拿到个人主页项目的IP呢，其实很简单，打开电脑终端（Mac）或者命令行（Windows），在命令行中输入命令 ping [个人主页项目原域名]，比如：</h6><p>ping onestravel1.github.io<br><br>即可得到该项目对应的IP地址<br><br><br><img src="http://upload-images.jianshu.io/upload_images/3236417-69f4e960c72236e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射"></p><p>将得到的IP地址填入到记录值中<br><br><br><img src="http://upload-images.jianshu.io/upload_images/3236417-a4460d4e6adf6f93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射"></p><p>然后点击确定，再添加一个解析，主机记录值填写 @ ，其他值都和上面一样，点击添加，即可得到两条解析记录如下：<br><br><br><img src="http://upload-images.jianshu.io/upload_images/3236417-2141fe6c863f7790.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射"><br>然后再个人主页项目中创建名为CNAME的文件，在文件中写入你申请的域名，点击保存到你的github的个人主页项目中，就可以通过域名来访问你的个人主页了！<br><img src="http://upload-images.jianshu.io/upload_images/3236417-04dd08057a056e1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="域名映射"></p><h6 id="注：域名映射需要一定的时间，请等待10分钟左右的时间后，在访问你的个人主页！"><a href="#注：域名映射需要一定的时间，请等待10分钟左右的时间后，在访问你的个人主页！" class="headerlink" title="注：域名映射需要一定的时间，请等待10分钟左右的时间后，在访问你的个人主页！"></a>注：域名映射需要一定的时间，请等待10分钟左右的时间后，在访问你的个人主页！</h6>]]></content>
      
      
      <categories>
          
          <category> 前端H5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（源码）解决Android的WebView加载失败（404，500），显示的自定义视图</title>
      <link href="/20170328/android-ndk/yuan-ma-jie-jue-android-de-webview-jia-zai-shi-bai-404-500-xian-shi-de-zi-ding-yi-shi-tu/"/>
      <url>/20170328/android-ndk/yuan-ma-jie-jue-android-de-webview-jia-zai-shi-bai-404-500-xian-shi-de-zi-ding-yi-shi-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="（源码）解决Android的WebView加载失败（404，500），显示的自定义视图"><a href="#（源码）解决Android的WebView加载失败（404，500），显示的自定义视图" class="headerlink" title="（源码）解决Android的WebView加载失败（404，500），显示的自定义视图"></a>（源码）解决Android的WebView加载失败（404，500），显示的自定义视图</h1><p>好多朋友会在Android开发过程中遇到使用WebView加载html页面出现404,500等错误页面，也有好多人想自定义这个错误页面，但是在6.0之前，大家觉得自定义错误页面就不好处理了；<br>之前一直使用在WebView加载时，根据onReceivedError() 判断网页是否加载成功，然后做相应的操作，但是最后发现，在一些情况下，html页面加载失败了，onReceivedError()方法却并没有执行。<br>最后进过努力，想出了一个比较笨，但是我又觉得比较有效的方法。下面来给大家简单说一说：<br>不知道大家发现没有，在所有的加载错误的html页面中，html的标题title可能都会包含错误信息，比如说“error”，这样的话我们就可以在这个html的标题title上做文章了。 </p><p>#1.先给大家说说怎么获取这个html的标题title </p><p>###(1).Android应用开发的时候使用WebView这个组件的过程中可能会接触到WebViewClient与WebChromeClient，那么这两个类到底有什么不同呢<br>WebViewClient主要帮助WebView处理各种通知、请求事件的，比如：</p><pre><code>    onLoadResource    onPageStart    onPageFinish    onReceiveError    onReceivedHttpAuthRequestWebChromeClient主要辅助WebView处理Javascript的对话框、网站图标、网站title、加载进度等比如    onCloseWindow(关闭WebView)    onCreateWindow()    onJsAlert (WebView上alert无效，需要定制WebChromeClient处理弹出)    onJsPrompt    onJsConfirm    onProgressChanged    onReceivedIcon    onReceivedTitle</code></pre><p>看上去他们有很多不同，实际使用的话，如果你的WebView只是用来处理一些html的页面内容，只用WebViewClient就行了，如果需要更丰富的处理效果，<br>比如JS、进度条等，就要用到WebChromeClient。</p><p>###(2).我们可以看到在 WebChromeClient 中有一个方法 onReceivedTitle() ，这个方法就是用来获取html页面的标题title的回调。</p><p>#2.我们在 WebChromeClient 中的 onReceivedTitle() 方法里判断html页面的标题中是否含有 “error” ，如果有，则证明html加载失败，设置加载失败的标记，让在 WebViewClient 的完成是回<br>调的 onPageFinish() 方法里显示自定义的加载失败的页面**</p><p>代码如下：</p><pre><code>WebSettings webSettings = webView.getSettings();    //设置WebView属性，能够执行Javascript脚本    webSettings.setJavaScriptEnabled(true);    //设置可以访问文件    webSettings.setAllowFileAccess(true);    webSettings.setCacheMode(WebSettings.LOAD_NO_CACHE);    webView.setWebViewClient(new WebViewClient() {        @Override        public boolean shouldOverrideUrlLoading(WebView view, String url) {            view.loadUrl(url);            return true;        }        /**         * 网页页面开始加载的时候，执行的回调方法         * @param view         * @param url         * @param favicon         */        @Override        public void onPageStarted(WebView view, String url, Bitmap favicon) {//网页页面开始加载的时候            emptyView.setEmptyView(EmptyView.EMPTY_LOADING);//初始化一个显示正在加载的视图            rl_detail.setVisibility(View.VISIBLE);            rl_detail.removeAllViews();            rl_detail.addView(emptyView);//在加载页面开始的时候显示一个正在加载的视图，            webView.setEnabled(false);// 当加载网页的时候将网页进行隐藏            ll_container_btn.setVisibility(View.GONE);            btn_collect.setVisibility(View.GONE);            super.onPageStarted(view, url, favicon);        }        /**         * 网页加载结束的时候执行的回调方法         * @param view         * @param url         */        @Override        public void onPageFinished(WebView view, String url) {//网页加载结束的时候            if (!loadError) {//当网页加载成功的时候判断是否加载成功                rl_detail.setVisibility(View.GONE);//加载成功的话，则隐藏掉显示正在加载的视图，显示加载了网页内容的WebView                webView.setEnabled(true);                ll_container_btn.setVisibility(View.VISIBLE);                btn_collect.setVisibility(View.VISIBLE);            } else { //加载失败的话，初始化页面加载失败的图，然后替换正在加载的视图页面                rl_detail.removeAllViews();                emptyView.setEmptyView(EmptyView.EMPTY_EMPTY, &quot;您找的页面暂时走丢了...&quot;);                rl_detail.addView(emptyView);            }        }        /**         * 页面加载错误时执行的方法，但是在6.0以下，有时候会不执行这个方法         * @param view         * @param errorCode         * @param description         * @param failingUrl         */        @Override        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {            super.onReceivedError(view, errorCode, description, failingUrl);            loadError = true;        }    });    webView.setWebChromeClient(new WebChromeClient(){        /**         * 当WebView加载之后，返回 HTML 页面的标题 Title         * @param view         * @param title         */        @Override        public void onReceivedTitle(WebView view, String title) {            //判断标题 title 中是否包含有“error”字段，如果包含“error”字段，则设置加载失败，显示加载失败的视图          if(!TextUtils.isEmpty(title)&amp;&amp;title.toLowerCase().contains(&quot;error&quot;)){              loadError = true;          }        }    });    webView.loadUrl(url);</code></pre><p>源码下载  <a href="https://github.com/onestravel/WebView404Example" target="_blank" rel="noopener">源码下载</a></p>]]></content>
      
      
      <categories>
          
          <category> Android/NDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android/NDK </tag>
            
            <tag> WebView </tag>
            
            <tag> 404 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的简单使用方法</title>
      <link href="/20170328/developtools/git-de-jian-dan-shi-yong-fang-fa/"/>
      <url>/20170328/developtools/git-de-jian-dan-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Git的简单使用方法"><a href="#Git的简单使用方法" class="headerlink" title="Git的简单使用方法"></a>Git的简单使用方法</h1><h3 id="一、Git的下载和安装"><a href="#一、Git的下载和安装" class="headerlink" title="一、Git的下载和安装"></a>一、Git的下载和安装</h3><p>Git下载地址：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></p><p>选择自己合适的版本进行下载</p><p>下载之后选择路径，默认安装就好。</p><h3 id="二、Git的使用"><a href="#二、Git的使用" class="headerlink" title="二、Git的使用"></a>二、Git的使用</h3><h4 id="1、git的初始化"><a href="#1、git的初始化" class="headerlink" title="1、git的初始化"></a>1、git的初始化</h4><p>$ git init</p><p>$ git config –global user.name “[Your Name]”</p><p>$ git config –global user.email “[<a href="mailto:youremail@example.com">youremail@example.com</a>]”</p><p>$ ssh-keygen -t rsa -C “[<a href="mailto:youremail@example.com">youremail@example.com</a>]”</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-26af046431cca847.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Git初始化"></p><h4 id="2、连接到远程服务器"><a href="#2、连接到远程服务器" class="headerlink" title="2、连接到远程服务器"></a>2、连接到远程服务器</h4><p>$ git remote add origin [项目git地址]</p><h4 id="3、检出项目分支到本地"><a href="#3、检出项目分支到本地" class="headerlink" title="3、检出项目分支到本地"></a>3、检出项目分支到本地</h4><p>该操作会在本地创建一个分支</p><p>$ git checkout -b [分支名]</p><h4 id="4、拉取代码到本地"><a href="#4、拉取代码到本地" class="headerlink" title="4、拉取代码到本地"></a>4、拉取代码到本地</h4><p>$ git pull origin [分支名]</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-f5183f1afffc855a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拉取代码到本地"></p><h4 id="5、查看本地文件状态"><a href="#5、查看本地文件状态" class="headerlink" title="5、查看本地文件状态"></a>5、查看本地文件状态</h4><p><img src="https://upload-images.jianshu.io/upload_images/3236417-e8dd5af8c66b0623.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看文件状态"></p><h4 id="6、提交代码到本地仓库"><a href="#6、提交代码到本地仓库" class="headerlink" title="6、提交代码到本地仓库"></a>6、提交代码到本地仓库</h4><p>$ git add [需要添加的文件名]</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-6096f7e1dc02653a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加指定文件"></p><p>若需要添加所有的文件，则为</p><p>$ git add .</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-5f7f48b5dbf3defb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加所有文件"></p><p>添加完成，查看本地文件状态</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-58a9449be6c6e40b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加完成，查看本地文件状态"></p><p>添加完成之后，进行提交到本地仓库</p><p>$ git commit-m”[提交日志]”</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-c3d216d9e2882ce2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提交日志"></p><h4 id="7、将本地代码推送到远程服务器"><a href="#7、将本地代码推送到远程服务器" class="headerlink" title="7、将本地代码推送到远程服务器"></a>7、将本地代码推送到远程服务器</h4><p>$ git push origin [分支名] //推送到某个分支</p><p>$ git pull –all //推送到所有分支</p><p><img src="https://upload-images.jianshu.io/upload_images/3236417-12cf5db3f25f68b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="推送到远程服务器"></p>]]></content>
      
      
      <categories>
          
          <category> Developer Tools </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Developer Tools </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5利用AppCache和LocalStorage实现缓存h5页面数据</title>
      <link href="/20161009/h5/html5-li-yong-appcache-he-localstorage-shi-xian-huan-cun-h5-ye-mian-shu-ju/"/>
      <url>/20161009/h5/html5-li-yong-appcache-he-localstorage-shi-xian-huan-cun-h5-ye-mian-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="Html5利用AppCache和LocalStorage实现缓存h5页面数据"><a href="#Html5利用AppCache和LocalStorage实现缓存h5页面数据" class="headerlink" title="Html5利用AppCache和LocalStorage实现缓存h5页面数据"></a>Html5利用AppCache和LocalStorage实现缓存h5页面数据</h1><hr><p>最近在开发的过程中遇到了一个问题，就是在Android上通过WebView加载Html5页面时发现页面加载速度慢，再加上网络速度慢，每次请求需要5s左右的时间，严重影响用户体验，所以查询资料，最终找到一个可以解决加载缓慢的方法，现在介绍给大家：1、使用AppCache机制实现缓存html，css，js文件和一些本地图片，这种缓存方法使用manifest文件进行缓存数据，一般manifest文件默认后缀名为 .appcache，在设置缓存以后，第一次加载页面时会根据manifest文件中列出的缓存文件路径，将文件进行缓存到浏览器，在再次打开的时候，不会再次从服务器请求，而是加载缓存数据。但是如果manifest文件没有发生改变，那么服务器上的相关页面发生改动，加载时也是只会加载缓存的数据，不会进行更新；如果需要更新，必须改动manifest文件，哪怕只是一个空格或者换行。开启缓存机制需要两步:</p><p>(1). 需要在服务器端做AppCache缓存处理：在每个需要缓存的html页面增加manifest属性，设置AppCache文件，进行缓存。</p><p>创建manifest文件**manifest文件（manifest.appcache）</p><blockquote><p>CACHE MANIFEST#VERSION 2016-09-28 14:44</p><p># 直接缓存的文件</p><p>CACHE:<br>../index.html</p><p>../css/index.css</p><p>../js/jquery-2.2.4.min.js<br>../js/index.js</p><p>../images/loading.gif<br>../images/index_one.jpg<br>../images/index_one_icon.png<br>../images/index_two.jpg<br>../images/index_two_icon.png<br>../images/index_three.jpg<br>../images/index_three_icon.png<br>../images/index_four.jpg<br>../images/index_four_icon.png</p><p>#需要在线请求的文件路径，*代表除CACHE以外的文件都进行在线请求<br>NETWORK:<br>*</p><p># 替代方案 ，当请求失败时需要跳转的页面<br>FALLBACK:<br>../error.html</p></blockquote><p><strong>manifest文件分为三个部分：CACHE，NETWORK 和 FALLBACK；</strong></p><p><strong>CACHE</strong>：是所需要缓存文件的路径可以是绝对路径或者相对路径，一般相对路径比较好。<strong>NETWORK</strong> ：是需要即时从服务器请求的文件，一般默认<em>号，表示除CACHE所列所见以外的文件都是需要即时请求更新的。<br>*</em>FALLBACK**：这个页面时当缓存请求失败时所需展示的页面，一般默认一个错误页面。</p><p><strong>VERSION</strong>：版本号，这是一个附加属性，可有可无，加这个是为了在页面改动时，可以进行改动此版本号，使得manifest文件发生改动，从而浏览器再次请求html页面时，发现页面manifest文件进行改动，浏览器会从服务器重新拉取更新的内容。</p><p>manifest文件有了，现在所需做的就是把manifest文件和Html文件进行关联，这个非常简单：在Html标签中标签有一个属性manifest，就是用来关联manifest文件的，所以只需要在缓存的html文件中的html标签上声明manifest属性，就可以进行AppCache缓存。</p><blockquote><html manifest="manifest/manifest.appcache"></html></blockquote><p>（2）这样服务器端的缓存就处理好了，可以在浏览器上进行测试，是完全可以缓存的，但是用在Android上使用WebView加载H5页面时，则需要在Android端进行设置：</p><blockquote><p>WebSettings webseting = webview.getSettings();</p><p>webseting.setDomStorageEnabled(true);<br>webseting.setAppCacheMaxSize(1024<em>1024</em>8);//设置缓冲大小，我设的是8M<br>String appCacheDir = this.getApplicationContext().getDir(“cache”, Context.MODE_PRIVATE).getPath();<br>webseting.setAppCachePath(appCacheDir);<br>webseting.setAllowFileAccess(true);<br>webseting.setAppCacheEnabled(true);<br>webseting.setCacheMode(WebSettings.LOAD_DEFAULT);//可以在加载前对网络进行判断，如果有网络，则设置缓存模式为  WebSettings.LOAD_DEFAULT，从服务器请求数据， 如果没有网络测设置缓存模式为WebSettings.LOAD_CACHE_ELSE_NETWORK</p></blockquote><p><strong>缓存模式(5种)</strong></p><p><strong>LOAD_CACHE_ONLY:</strong>  不使用网络，只读取本地缓存数据<br><strong>LOAD_DEFAULT:</strong>  根据cache-control决定是否从网络上取数据。<br><strong>LOAD_CACHE_NORMAL:</strong>API level 17中已经废弃, 从API level 11开始作用同LOAD_DEFAULT模式<br><strong>LOAD_NO_CACHE:</strong>不使用缓存，只从网络获取数据.<br><strong>LOAD_CACHE_ELSE_NETWORK:</strong> 只要本地有，无论是否过期，或者no-cache，都使用缓存中的数据。</p><p>如：<a href="http://www.taobao.com的cache-control为no-cache，在模式LOAD_DEFAULT下，无论如何都会从网络上取数据，如果没有网络，就会出现错误页面；在LOAD_CACHE_ELSE_NETWORK模式下，无论是否有网络，只要本地有缓存，都使用缓存。本地没有缓存时才从网络上获取。www.360.com.cn的cache-control为max-age=60，在两种模式下都使用本地缓存数据。" target="_blank" rel="noopener">www.taobao.com的cache-control为no-cache，在模式LOAD_DEFAULT下，无论如何都会从网络上取数据，如果没有网络，就会出现错误页面；在LOAD_CACHE_ELSE_NETWORK模式下，无论是否有网络，只要本地有缓存，都使用缓存。本地没有缓存时才从网络上获取。www.360.com.cn的cache-control为max-age=60，在两种模式下都使用本地缓存数据。</a></p><p>a、缓存构成根据setAppCachePath(String appCachePath)提供的路径，在H5使用缓存过程中生成的缓存文件。</p><p>b、缓存模式无模式选择，通过setAppCacheEnabled(boolean flag)设置是否打开。默认关闭，即，H5的缓存无法使用。</p><p>c、清除缓存找到调用setAppCachePath(String appCachePath)设置缓存的路径，把它下面的文件全部删除就OK了。clearCache(boolean)CacheManager.clear高版本中需要调用隐藏API。</p><p>d、控制大小通过setAppCacheMaxSize(long appCacheMaxSize)设置缓存最大容量，默认为Max Integer。同时，可能通过覆盖WebChromeClient.onReachedMaxAppCacheSize(long requiredStorage, long quota, WebStorage.QuotaUpdater quotaUpdater)来设置缓存超过先前设置的最大容量时的策略。</p><p>这样一来，通过设置服务器端的缓存，与Android前端的缓存，就可以有效解决Html5的加载缓慢问题，该方法虽然解决了缓存问题，但是会发现只是在第二次打开是速度会明显提升，但是在首次进行加载时，页面加载还是非常缓慢的，目前还没想到方案进行解决，后面如果找到方法，则会继续更新！-</p><hr><p>发表博客是为了做个笔记，并且和各位读者进行交流，互相学习，如果哪位读者有更好地解决方案，请麻烦留言告知，万分谢谢！</p>]]></content>
      
      
      <categories>
          
          <category> 前端H5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> AppCache </tag>
            
            <tag> LocalStorage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 用户、用户组添加修改删除(ubuntu、centos)</title>
      <link href="/20161009/linux/linux-yong-hu-yong-hu-zu-tian-jia-xiu-gai-shan-chu-ubuntu-centos/"/>
      <url>/20161009/linux/linux-yong-hu-yong-hu-zu-tian-jia-xiu-gai-shan-chu-ubuntu-centos/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-用户、用户组添加修改删除-ubuntu、centos"><a href="#Linux-用户、用户组添加修改删除-ubuntu、centos" class="headerlink" title="Linux 用户、用户组添加修改删除(ubuntu、centos)"></a>Linux 用户、用户组添加修改删除(ubuntu、centos)</h1><h4 id="一、LINUX-UBUNTU-CENTOS-用户添加删除修改"><a href="#一、LINUX-UBUNTU-CENTOS-用户添加删除修改" class="headerlink" title="一、LINUX(UBUNTU/CENTOS)用户添加删除修改"></a>一、LINUX(UBUNTU/CENTOS)用户添加删除修改</h4><h5 id="1、建用户："><a href="#1、建用户：" class="headerlink" title="1、建用户："></a><a href="#1-建用户"></a>1、建用户：</h5><pre><code>adduser web                             #新建web用户useradd web                                #添加web 用户passwd web                               #给web用户设置密码</code></pre><pre><code>useradd web -g admin -n -m  #新建web用户并指定用户组为 admin用户组,并自动建立登录目录passwd web                  #给web 用户设置密码useradd(选项)(参数)                #创建admin用户，并指定属组为admin 用户id为10000useradd -r -m -s  /bin/bash -g admin -u 10000 admin </code></pre><pre><code>-c&lt;备注&gt;：加上备注文字。备注文字会保存在passwd的备注栏位中； -d&lt;登入目录&gt;：指定用户登入时的启始目录； -D：变更预设值； -e&lt;有效期限&gt;：指定帐号的有效期限； -f&lt;缓冲天数&gt;：指定在密码过期后多少天即关闭该帐号； -g&lt;群组&gt;：指定用户所属的群组； -G&lt;群组&gt;：指定用户所属的附加群组； -m：自动建立用户的登入目录； -M：不要自动建立用户的登入目录； -n：取消建立以用户名称为名的群组； -r：建立系统帐号； -s：指定用户登入后所使用的shell； -u：指定用户id。</code></pre><h5 id="2、给已有的用户增加工作组"><a href="#2、给已有的用户增加工作组" class="headerlink" title="2、给已有的用户增加工作组"></a><a href="#2-给已有的用户增加工作组"></a>2、给已有的用户增加工作组</h5><pre><code>usermod -G admin web                    #给web用户设置admin附属用户组#给用户设置添加多个用户组usermod -g web -G admin,www web #给web用户设置主用户组web组，admin,www附属用户组gpasswd -a web admin                #给web用户设置admin用户组</code></pre><h5 id="3、新建用户同时增加工作组"><a href="#3、新建用户同时增加工作组" class="headerlink" title="3、新建用户同时增加工作组"></a><a href="#3-新建用户同时增加工作组"></a>3、新建用户同时增加工作组</h5><pre><code>useradd -g admin web                      #新建web用户并增加到admin工作组</code></pre><p>注：<br>-g 所属组<br>-d 家目录<br>-s 所用的SHELL</p><h5 id="4、临时关闭"><a href="#4、临时关闭" class="headerlink" title="4、临时关闭"></a><a href="#4-临时关闭"></a>4、临时关闭</h5><p>方法一 /etc/shadow文件中属于该用户的行的第二个字段（密码）前面加上 <em>就可以了。想恢复该用户，去掉</em>即可。 方法二 使用命令关闭用户账号：</p><pre><code>passwd web –l</code></pre><p>重新释放：</p><pre><code>passwd web –u</code></pre><h5 id="5、永久性删除用户账号"><a href="#5、永久性删除用户账号" class="headerlink" title="5、永久性删除用户账号"></a><a href="#5-永久性删除用户账号"></a>5、永久性删除用户账号</h5><pre><code>userdel webgroupdel webusermod –G web web   #（强制删除该用户的主目录和主目录下的所有文件和子目录）</code></pre><h5 id="6、从组中删除用户"><a href="#6、从组中删除用户" class="headerlink" title="6、从组中删除用户"></a><a href="#6-从组中删除用户"></a>6、从组中删除用户</h5><p>编辑/etc/group 找到用户组admin那一行，删除用户名web 或者用命令</p><pre><code>gpasswd -d A web</code></pre><h5 id="7、显示用户信息"><a href="#7、显示用户信息" class="headerlink" title="7、显示用户信息"></a><a href="#7-显示用户信息"></a>7、显示用户信息</h5><pre><code>id usercat /etc/passwd</code></pre><h3 id="二、用户组-LINUX-UBUNTU-CENTOS-添加删除修改"><a href="#二、用户组-LINUX-UBUNTU-CENTOS-添加删除修改" class="headerlink" title="二、用户组 LINUX(UBUNTU/CENTOS) 添加删除修改"></a><a href="#二-用户组-linuxubuntucentos-添加删除修改"></a>二、用户组 LINUX(UBUNTU/CENTOS) 添加删除修改</h3><h5 id="1、建工作组"><a href="#1、建工作组" class="headerlink" title="1、建工作组"></a><a href="#1-建工作组"></a>1、建工作组</h5><pre><code>groupadd admin                          #新建admin工作组</code></pre><h5 id="2、修改用户组"><a href="#2、修改用户组" class="headerlink" title="2、修改用户组"></a><a href="#2-修改用户组"></a>2、修改用户组</h5><pre><code>groupmod -n newadmin admin                #修改admin用户组名称改为newadmin</code></pre><h5 id="3、删除用户组"><a href="#3、删除用户组" class="headerlink" title="3、删除用户组"></a><a href="#3-删除用户组"></a>3、删除用户组</h5><pre><code>groupdel admin                            #删除admin用户组</code></pre><h5 id="4-查看用户的用户组信息"><a href="#4-查看用户的用户组信息" class="headerlink" title="4.查看用户的用户组信息"></a><a href="#4查看用户的用户组信息"></a>4.查看用户的用户组信息</h5><pre><code>groups web                                #==查看web所有用户组==</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> centos </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
